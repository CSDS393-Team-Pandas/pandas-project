import { Base, Browser, ChildProperty, Collection, Complex, Component, Event as Event$1, EventHandler, Internationalization, IntlBase, L10n, NotifyPropertyChanges, Property, addClass, attributes, cldrData, closest, compile, detach, enableRipple, extend, formatUnit, getComponent, getNumberDependable, getNumericObject, getUniqueID, getValue, isNullOrUndefined, isUndefined, merge, remove, removeClass, rippleEffect, select, selectAll, setStyleAttribute } from '@syncfusion/ej2-base';
import { DataManager, DataUtil, Deferred, Predicate, Query } from '@syncfusion/ej2-data';
import { DropDownButton, SplitButton } from '@syncfusion/ej2-splitbuttons';
import { Dialog, Tooltip, calculatePosition, createSpinner, hideSpinner, isCollide, showSpinner } from '@syncfusion/ej2-popups';
import { ContextMenu, Item, Menu, MenuItem, Tab, Toolbar, TreeView } from '@syncfusion/ej2-navigations';
import { ColorPicker, FormValidator, NumericTextBox, TextBox } from '@syncfusion/ej2-inputs';
import { Button, CheckBox, RadioButton } from '@syncfusion/ej2-buttons';
import { AutoComplete, ComboBox, DropDownList } from '@syncfusion/ej2-dropdowns';
import { ListView } from '@syncfusion/ej2-lists';
import { CheckBoxFilterBase, ExcelFilterBase, beforeFltrcMenuOpen, filterCboxValue, filterCmenuSelect, filterDialogClose, filterDialogCreated, parentsUntil } from '@syncfusion/ej2-grids';
import { AccumulationChart, AccumulationDataLabel, AccumulationLegend, AccumulationTooltip, AreaSeries, BarSeries, Category, Chart, ColumnSeries, DataLabel, Legend, LineSeries, PieSeries, ScatterSeries, StackingAreaSeries, StackingBarSeries, StackingColumnSeries, StackingLineSeries } from '@syncfusion/ej2-charts';

/**
 * To get range indexes.
 *
 * @param {string} range - Specifies the range.
 * @returns {number[]} - To get range indexes.
 */
function getRangeIndexes(range) {
    var cellindexes;
    var indexes = [];
    range = range.indexOf('!') > -1 ? range.split('!')[1] : range;
    range = range.indexOf(':') === -1 ? range + ':' + range : range;
    range.split(':').forEach(function (address) {
        cellindexes = getCellIndexes(address);
        indexes.push(cellindexes[0]);
        indexes.push(cellindexes[1]);
    });
    return indexes;
}
/**
 * To get single cell indexes
 *
 * @param {string} address - Specifies the address.
 * @returns {number[]} - To get single cell indexes
 */
function getCellIndexes(address) {
    return [parseInt(address.match(/\d+/)[0], 10) - 1, getColIndex(address.match(/[A-Z]+/i)[0].toUpperCase())];
}
/**
 * To get column index from text.
 *
 * @hidden
 * @param {string} text - Specifies the text.
 * @returns {number} - To get column index from text.
 */
function getColIndex(text) {
    var colIdx = 0;
    text = text.split('').reverse().join('');
    for (var i = text.length - 1; i >= 0; i--) {
        colIdx += (text[i].charCodeAt(0) - 64) * (Math.pow(26, i));
    }
    return colIdx - 1;
}
/**
 * To get cell address from given row and column index.
 *
 * @param {number} sRow - Specifies the row.
 * @param {number} sCol - Specifies the col.
 * @returns {string} - To get cell address from given row and column index.
 */
function getCellAddress(sRow, sCol) {
    return getColumnHeaderText(sCol + 1) + (sRow + 1);
}
/**
 * To get range address from given range indexes.
 *
 * @param {number[]} range - Specifies the range.
 * @returns {string} - To get range address from given range indexes.
 */
function getRangeAddress(range) {
    return getCellAddress(range[0], range[1]) + ':' + (!isNullOrUndefined(range[2]) ?
        getCellAddress(range[2], range[3]) : getCellAddress(range[0], range[1]));
}
/**
 * To get column header cell text
 *
 * @param {number} colIndex - Specifies the colIndex.
 * @returns {string} - Get Column Header Text
 */
function getColumnHeaderText(colIndex) {
    var alphabet = 'Z';
    if (colIndex / 26 > 1) {
        return getColumnHeaderText((colIndex % 26 === 0) ? (colIndex / 26 - 1) : Math.floor(colIndex / 26))
            + String.fromCharCode((colIndex % 26) === 0 ? alphabet.charCodeAt(0) : 64 + (colIndex % 26));
    }
    else {
        return String.fromCharCode(64 + (colIndex));
    }
}
/**
 * @hidden
 * @param {SheetModel} address - Specifies the address.
 * @returns {number[]} - Get Indexes From Address
 */
function getIndexesFromAddress(address) {
    return getRangeIndexes(getRangeFromAddress(address));
}
/**
 * @hidden
 * @param {SheetModel} address - Specifies the address.
 * @returns {string} - Get Range From Address.
 */
function getRangeFromAddress(address) {
    return address.split('!')[1] || address;
}
/**
 * Get complete address for selected range
 *
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @returns {string} - Get complete address for selected range
 */
function getAddressFromSelectedRange(sheet) {
    return sheet.name + '!' + sheet.selectedRange;
}
/**
 * @param {Workbook} context - Specifies the context.
 * @param {string} address - Specifies the address.
 * @returns {Object} - To get Address Info
 * @hidden
 */
function getAddressInfo(context, address) {
    var sIdx;
    if (address.indexOf('!') > -1) {
        sIdx = getSheetIndex(context, getSheetNameFromAddress(address));
    }
    else {
        sIdx = context.activeSheetIndex;
    }
    return { sheetIndex: sIdx, indices: getIndexesFromAddress(address) };
}
/**
 * Given range will be swapped/arranged in increasing order.
 *
 * @hidden
 * @param {number[]} range - Specifies the range.
 * @returns {number[]} - Returns the bool value.
 */
function getSwapRange(range) {
    var clonedRange = range.slice();
    if (range[0] > range[2]) {
        swap(clonedRange, 0, 2);
    }
    if (range[1] > range[3]) {
        swap(clonedRange, 1, 3);
    }
    return clonedRange;
}
/**
 * Interchange values in an array
 *
 * @param {number[]} range - Specifies the range.
 * @param {number} x - Specifies the x.
 * @param {number} y - Specifies the y.
 * @returns {void} - Interchange values in an array.
 */
function swap(range, x, y) {
    var tmp = range[x];
    range[x] = range[y];
    range[y] = tmp;
}
/**
 * @hidden
 * @param {number[]} range - Specifies the range.
 * @returns {boolean} - Returns the bool value.
 */
function isSingleCell(range) {
    return range[0] === range[2] && range[1] === range[3];
}

/**
 * Worker task.
 *
 * @param {Object} context - Specify the context.
 * @param {Function | Object} taskFn - Specify the task.
 * @param {Function} callbackFn - Specify the callbackFn.
 * @param {Object[]} data - Specify the data.
 * @param {boolean} preventCallback - Specify the preventCallback.
 * @returns {WorkerHelper} - Worker task.
 */
function executeTaskAsync(context, taskFn, callbackFn, data, preventCallback) {
    return new WorkerHelper(context, taskFn, callbackFn, data, preventCallback);
}
/**
 * @hidden
 *
 * The `WorkerHelper` module is used to perform multiple actions using Web Worker asynchronously.
 */
var WorkerHelper = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for WorkerHelper module in Workbook library.
     *
     * @private
     * @param {Object} context - Specify the context.
     * @param {Function | Object} task - Specify the task.
     * @param {Function} defaultListener - Specify the defaultListener.
     * @param {Object[]} taskData - Specify the taskData.
     * @param {boolean} preventCallback - Specify the preventCallback.
     */
    function WorkerHelper(context, task, defaultListener, taskData, preventCallback) {
        this.preventCallback = false;
        this.context = context;
        this.workerTask = task;
        this.defaultListener = defaultListener;
        this.workerData = taskData;
        if (preventCallback) {
            this.preventCallback = true;
        }
        this.initWorker();
    }
    /**
     * To terminate the worker task.
     *
     * @private
     * @returns {void} - To terminate the worker task.
     */
    WorkerHelper.prototype.terminate = function () {
        this.worker.terminate();
        URL.revokeObjectURL(this.workerUrl);
    };
    /**
     * To initiate the worker.
     *
     * @private
     * @returns {void} - To initiate the worker.
     */
    WorkerHelper.prototype.initWorker = function () {
        var taskBlob = new Blob([this.getFnCode()], { type: 'text/javascript' });
        this.workerUrl = URL.createObjectURL(taskBlob);
        this.worker = new Worker(this.workerUrl);
        this.worker.onmessage = this.messageFromWorker.bind(this);
        this.worker.onerror = this.onError.bind(this);
        this.worker.postMessage(this.workerData);
    };
    /**
     * Method for getting response from worker.
     *
     * @param {MessageEvent} args - Specify the args.
     * @returns {void} - Method for getting response from worker.
     * @private
     */
    WorkerHelper.prototype.messageFromWorker = function (args) {
        this.terminate();
        this.defaultListener.apply(this.context, [args.data]);
    };
    /**
     * Method for getting error message from worker if failed.
     *
     * @param {ErrorEvent} args - Specify the args.
     * @returns {void} - Method for getting error message from worker if failed.
     * @private
     */
    WorkerHelper.prototype.onError = function (args) {
        this.terminate();
        throw args.message || args;
    };
    /**
     * Construct function code for worker.
     *
     * @private
     * @returns {string} -  Construct function code for worker.
     */
    WorkerHelper.prototype.getFnCode = function () {
        var workerCode = '';
        var i;
        var keys;
        var workerFunction = '';
        var isHaveFunction = false;
        if (typeof this.workerTask === 'function') {
            if (this.workerTask.toString().indexOf('function') < 0) {
                workerFunction = 'function ' + this.workerTask.toString();
            }
            else {
                workerFunction = this.workerTask.toString();
                isHaveFunction = true;
            }
            workerCode += ('self.workerTask = ' + workerFunction + '; \n');
        }
        else {
            if (typeof this.workerTask === 'object') {
                keys = Object.keys(this.workerTask);
                for (i = 0; i < keys.length; i++) {
                    if (this.workerTask[keys[i]].toString().indexOf('function') < 0) {
                        workerFunction = 'function ' + this.workerTask[keys[i]].toString();
                    }
                    else {
                        workerFunction = this.workerTask[keys[i]].toString();
                        isHaveFunction = true;
                    }
                    workerCode += ((i === 0 ? 'self.workerTask' : keys[i]) + '= ' + workerFunction + '; \n');
                }
            }
        }
        workerCode += 'self.onmessage = ' + (isHaveFunction ? '' : ' function ') +
            (this.preventCallback ? this.getMessageFn.toString() : this.getCallbackMessageFn.toString()) + '; \n';
        return workerCode;
    };
    /**
     * Get default worker task with callback.
     *
     * @private
     * @param {MessageEvent} args - Specify the args.
     * @returns {void} - Get default worker task without callback.
     */
    WorkerHelper.prototype.getCallbackMessageFn = function (args) {
        postMessage(this.workerTask.apply(this, args.data));
    };
    /**
     * Get default worker task without callback.
     *
     * @private
     * @param {MessageEvent} args - Specify the args.
     * @returns {void} - Get default worker task without callback.
     */
    WorkerHelper.prototype.getMessageFn = function (args) {
        this.workerTask.apply(this, args.data);
    };
    return WorkerHelper;
}());

/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
/**
 * @hidden
 * @param {number} val - Specifies the val.
 * @returns {string} - To get Fraction.
 */
function toFraction(val) {
    var strVal = val.toString();
    if (val === parseInt(strVal, 10)) {
        return parseInt(strVal, 10) + '  ';
    }
    else {
        var top_1 = strVal.indexOf('.') > -1 ? strVal.split('.')[1] : 0;
        var bottom = Math.pow(10, top_1.toString().replace('-', '').length);
        var abs = Math.abs(getGcd(top_1, bottom));
        return (top_1 / abs) + '/' + (bottom / abs);
    }
}
/**
 * @hidden
 * @param {string | number} a - Specifies the a.
 * @param {string | number} b - Specifies the b.
 * @returns {number} - To get Gcd.
 */
function getGcd(a, b) {
    a = Number(a);
    b = Number(b);
    return (b) ? getGcd(b, a % b) : a;
}
/**
 * @hidden
 * @param {number} val - Specifies the value.
 * @returns {Date} - Returns Date.
 */
function intToDate(val) {
    val = Number(val);
    val = (val > 0 && val < 1) ? (1 + val) : (val === 0) ? 1 : val;
    if (val > 60) {
        val -= 1; // Due to leap year issue of 1900 in MSExcel.
    }
    var startDate = new Date('01/01/1900');
    var startDateUTC = Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), startDate.getHours(), startDate.getMinutes(), startDate.getSeconds(), startDate.getMilliseconds());
    return new Date(new Date(((val - 1) * (1000 * 3600 * 24)) + startDateUTC).toUTCString().replace(' GMT', ''));
}
/* eslint-disable  @typescript-eslint/no-explicit-any */
/**
 * @hidden
 * @param {number} val - Specifies the value.
 * @param {boolean} isTime - Specifies the boolean value.
 * @param {boolean} isTimeOnly - Specifies the value is only a time without date.
 * @returns {number} - Returns number.
 */
function dateToInt(val, isTime, isTimeOnly) {
    var startDate = new Date('01/01/1900');
    var date = isDateTime(val) ? val : new Date(val);
    var startDateUTC = Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), startDate.getHours(), startDate.getMinutes(), startDate.getSeconds(), startDate.getMilliseconds());
    var dateUTC = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
    var diffDays = ((dateUTC - startDateUTC) / (1000 * 3600 * 24));
    return (isTime ? diffDays : parseInt(diffDays.toString(), 10)) + (isTimeOnly ? 0 : (diffDays > 60 ? 2 : 1));
}
/**
 * @hidden
 * @param {any} date - Specifies the date.
 * @returns {boolean} - Returns boolean value.
 */
function isDateTime(date) {
    return Object.prototype.toString.call(date) === '[object Date]' && !isNaN(date.valueOf());
}
/**
 * @hidden
 * @param {string} val - Specifies the value.
 * @returns {boolean} - Returns boolean value.
 */
function isNumber(val) {
    return val - parseFloat(val) >= 0;
}
/**
 * @hidden
 * @param {Date | string | number} text - Specifies the text.
 * @param {Internationalization} intl - Specifies the Internationalization.
 * @param {string} locale - Specifies the locale.
 * @param {string} format - Specifies the string.
 * @param {CellModel} cell - Specify the cell.
 * @returns {ToDateArgs} - Returns Date format.
 */
function toDate(text, intl, locale, format, cell) {
    var defaultDateFormats = IntlBase.getDependables(cldrData, locale, null).dateObject;
    var availabelDateTimeFormat = defaultDateFormats.dateTimeFormats.availableFormats;
    var dObj = { dateObj: null, isCustom: false, type: '' };
    if (typeof text === 'string') {
        text = text.toUpperCase();
    }
    if (format) {
        dObj.dateObj = intl.parseDate(text, { format: format });
        if (dObj.dateObj) {
            dObj.type = text.toString().indexOf(':') > -1 ? 'time' : 'datetime';
            dObj.isCustom = true;
        }
    }
    if (isNullOrUndefined(dObj.dateObj)) {
        text = text.toString();
        if (text && text.indexOf('/') > -1 || text.indexOf('-') > 0) {
            var cFormat = cell ? cell.format : format;
            if (((cFormat === 'dd-MM-yyyy' || cFormat === 'dd/MM/yyyy'))) {
                cFormat = cFormat === 'dd-MM-yyyy' ? 'd-M-y' : 'd/M/y';
                dObj.dateObj = intl.parseDate(text, { format: cFormat });
                if (dObj.dateObj) {
                    dObj.type = 'date';
                    return dObj;
                }
            }
        }
        if (text.indexOf(':') < 0) {
            for (var _i = 0, _a = Object.keys(defaultDateFormats.dateFormats); _i < _a.length; _i++) {
                var key = _a[_i];
                dObj.dateObj = intl.parseDate(text, { format: defaultDateFormats.dateFormats[key], skeleton: key });
                if (dObj.dateObj) {
                    dObj.type = 'date';
                    dObj.isCustom = false;
                    break;
                }
            }
        }
        if (isNullOrUndefined(dObj.dateObj)) {
            for (var _b = 0, _c = Object.keys(availabelDateTimeFormat); _b < _c.length; _b++) {
                var key = _c[_b];
                dObj.dateObj = intl.parseDate(text, { format: availabelDateTimeFormat[key], skeleton: key });
                if (!dObj.dateObj && text.indexOf(':') > -1 && availabelDateTimeFormat[key].indexOf(':') > -1) { // parsing time format without am or pm
                    dObj.dateObj = intl.parseDate(text, { format: availabelDateTimeFormat[key].split(' ')[0] });
                }
                if (dObj.dateObj) {
                    dObj.type = text.toString().indexOf(':') > -1 ? 'time' : 'datetime';
                    if (dObj.type === 'time') {
                        var time = dObj.dateObj.toLocaleTimeString();
                        dObj.dateObj = new Date('01/01/1900 ' + time);
                    }
                    dObj.isCustom = true;
                    break;
                }
            }
        }
        if (isNullOrUndefined(dObj.dateObj)) {
            for (var _d = 0, _e = Object.keys(defaultDateFormats.timeFormats); _d < _e.length; _d++) {
                var key = _e[_d];
                dObj.dateObj = intl.parseDate(text, { format: defaultDateFormats.timeFormats[key], skeleton: key });
                if (dObj.dateObj) {
                    var time = dObj.dateObj.toLocaleTimeString();
                    dObj.dateObj = new Date('01/01/1900 ' + time);
                    dObj.type = 'time';
                    dObj.isCustom = false;
                    break;
                }
            }
        }
    }
    if (text !== '#DIV/0!' && !dObj.dateObj && new Date(text).toString() !== 'Invalid Date') {
        dObj.dateObj = new Date(text);
    }
    return dObj;
}
/**
 * @hidden
 * @param {string} value - Specifies the value.
 * @returns { string | number} - ReturnsparseIntValue.
 */
function parseIntValue(value) {
    return (value && /^\d*\.?\d*$/.test(value)) ? parseFloat(value) : value;
}

/**
 * Specifies Workbook internal events.
 */
/** @hidden */
var workbookDestroyed = 'workbookDestroyed';
/** @hidden */
var updateSheetFromDataSource = 'updateSheetFromDataSource';
/** @hidden */
var dataSourceChanged = 'dataSourceChanged';
/** @hidden */
var dataChanged = 'dataChanged';
/** @hidden */
var triggerDataChange = 'triggerDataChange';
/** @hidden */
var workbookOpen = 'workbookOpen';
/** @hidden */
var beginSave = 'beginSave';
/** @hidden */
var sortImport = 'sortImport';
/** @hidden */
var ribbonFind = 'ribbonFind';
/** @hidden */
var exportDialog = 'exportDialog';
/** @hidden */
var getFilteredCollection = 'getFilteredCollection';
/** @hidden */
var saveCompleted = 'saveCompleted';
/** @hidden */
var applyNumberFormatting = 'applyNumber';
/** @hidden */
var getFormattedCellObject = 'getFormattedCell';
/** @hidden */
var refreshCellElement = 'refreshCellElem';
/** @hidden */
var setCellFormat = 'setCellFormat';
/** @hidden */
var findAllValues = 'findAllValues';
/** @hidden */
var textDecorationUpdate = 'textDecorationUpdate';
/** @hidden */
var applyCellFormat = 'applyCellFormat';
/** @hidden */
var updateUsedRange = 'updateUsedRange';
/** @hidden */
var updateRowColCount = 'updateRowColCount';
/** @hidden */
var workbookFormulaOperation = 'workbookFormulaOperation';
/** @hidden */
var workbookEditOperation = 'workbookEditOperation';
/** @hidden */
var checkDateFormat = 'checkDateFormat';
/** @hidden */
var getFormattedBarText = 'getFormattedBarText';
/** @hidden */
var activeCellChanged = 'activeCellChanged';
/** @hidden */
var openSuccess = 'openSuccess';
/** @hidden */
var openFailure = 'openFailure';
/** @hidden */
var sheetCreated = 'sheetCreated';
/** @hidden */
var sheetsDestroyed = 'sheetsDestroyed';
/** @hidden */
var aggregateComputation = 'aggregateComputation';
/** @hidden */
var getUniqueRange = 'getUniqueRange';
/** @hidden */
var removeUniquecol = 'removeUniquecol';
/** @hidden */
var checkUniqueRange = 'checkUniqueRange';
/** @hidden */
var reApplyFormula = 'reApplyFormula';
/** @hidden */
var clearFormulaDependentCells = 'clearFormulaDependentCells';
/** @hidden */
var getFormulaInfoTable = 'getFormulaInfoTable';
/** @hidden */
var formulaInValidation = 'formulaInValidation';
/** @hidden */
var beforeSort = 'beforeSort';
/** @hidden */
var initiateSort = 'initiateSort';
/** @hidden */
var sortComplete = 'sortComplete';
/** @hidden */
var sortRangeAlert = 'sortRangeAlert';
/** @hidden */
var initiatelink = 'initiatelink';
/** @hidden */
var beforeHyperlinkCreate = 'beforeHyperlinkCreate';
/** @hidden */
var afterHyperlinkCreate = 'afterHyperlinkCreate';
/** @hidden */
var beforeHyperlinkClick = 'beforeHyperlinkClick';
/** @hidden */
var afterHyperlinkClick = 'afterHyperlinkClick';
/** @hidden */
var addHyperlink = 'addHyperlink';
/** @hidden */
var setLinkModel = 'setLinkModel';
/** @hidden */
var beforeFilter = 'beforeFilter';
/** @hidden */
var initiateFilter = 'initiateFilter';
/** @hidden */
var filterComplete = 'filterComplete';
/** @hidden */
var filterRangeAlert = 'filterRangeAlert';
/** @hidden */
var clearAllFilter = 'clearAllFilter';
/** @hidden */
var wrapEvent = 'wrapText';
/** @hidden */
var onSave = 'onSave';
/** @hidden */
var insert = 'insert';
/** @hidden */
var deleteAction = 'delete';
/** @hidden */
var insertModel = 'insertModel';
/** @hidden */
var deleteModel = 'deleteModel';
/** @hidden */
var isValidation = 'isValidation';
/** @hidden */
var cellValidation = 'cellValidation';
/** @hidden */
var addHighlight = 'addHighlight';
/** @hidden */
var dataValidate = 'dataValidate';
/** @hidden */
var findNext = 'findNext';
/** @hidden */
var findPrevious = 'findPrevious';
/** @hidden */
var goto = 'gotoHandler';
/** @hidden */
var findWorkbookHandler = 'findHandler';
/** @hidden */
var replaceHandler = 'replace';
/** @hidden */
var replaceAllHandler = 'replaceAll';
/** @hidden */
var showDialog = 'ShowDialog';
/** @hidden */
var findKeyUp = 'findKeyUp';
/** @hidden */
var removeHighlight = 'removeHighlight';
/** @hidden */
var queryCellInfo = 'queryCellInfo';
/** @hidden */
var count = 'count';
/** @hidden */
var findCount = 'findCount';
/** @hidden */
var protectSheetWorkBook = 'protectSheet';
/** @hidden */
var updateToggle = 'updateToggleItem';
/** @hidden */
var protectsheetHandler = 'protectsheetHandler';
/** @hidden */
var replaceAllDialog = 'replaceAllDialog';
/** @hidden */
var unprotectsheetHandler = 'unprotectsheetHandler';
/** @hidden */
var workBookeditAlert = 'editAlert';
/** @hidden */
var setLockCells = 'setLockCells';
/** @hidden */
var applyLockCells = 'applyLockCells';
/** @hidden */
var setMerge = 'setMerge';
/** @hidden */
var applyMerge = 'applyMerge';
/** @hidden */
var mergedRange = 'mergedRange';
/** @hidden */
var activeCellMergedRange = 'activeCellMergedRange';
/** @hidden */
var insertMerge = 'insertMerge';
/** @hidden */
var pasteMerge = 'pasteMerge';
/** @hidden */
var hideShow = 'hideShow';
/** @hidden */
var setCFRule = 'setCFRule';
/** @hidden */
var cFInitialCheck = 'cFInitialCheck';
/** @hidden */
var clearCFRule = 'clearCFRule';
/** @hidden */
var initiateClearCFRule = 'initiateClearCFRule';
/** @hidden */
var cFRender = 'cFRender';
/** @hidden */
var clear = 'clear';
/** @hidden */
var clearCF = 'clearCF';
/** @hidden */
var clearCells = 'clearCells';
/** @hidden */
var setImage = 'setImage';
/** @hidden */
var setChart = 'setChart';
/** @hidden */
var initiateChart = 'initiateChart';
/** @hidden */
var refreshRibbonIcons = 'refreshRibbonIcons';
/** @hidden */
var refreshChart = 'refreshChart';
/** @hidden */
var refreshChartSize = 'refreshChartSize';
/** @hidden */
var updateChart = 'updateChart';
/** @hidden */
var deleteChartColl = 'deleteChartColl';
/** @hidden */
var initiateChartModel = 'initiateChartModel';
/** @hidden */
var focusChartBorder = 'focusChartBorder';
/** @hidden */
var saveError = 'saveError';
/** @hidden */
var validationHighlight = 'validationHighlight';
/** @hidden */
var dataRefresh = 'dataRefresh';
/** @hidden */
var updateFilter = 'updateFilter';
/** @hidden */
var beforeInsert = 'beforeInsert';
/** @hidden */
var beforeDelete = 'beforeDelete';
/** @hidden */
var deleteHyperlink = 'deleteHyperlink';
/** @hidden */
var moveOrDuplicateSheet = 'moveOrDuplicateSheet';
/** @hidden */
var setAutoFill = 'setAutoFill';
/** @hidden */
var refreshCell = 'refreshCell';
/** @hidden */
var getFillInfo = 'getFillInfo';
/** @hidden */
var getautofillDDB = 'getautofillDDB';
/** @hidden */
var rowFillHandler = 'rowFillHandler';
/** @hidden */
var getTextSpace = 'getTextSpace';
/** @hidden */
var updateCustomFormatsFromImport = 'updateCustomFormatsFromImport';
/** @hidden */
var cFUndo = 'cFUndo';
/** @hidden */
var refreshClipboard = 'refreshClipboard';
/** @hidden */
var updateView = 'updateView';
/** @hidden */
var selectionComplete = 'selectionComplete';
/** @hidden */
var refreshInsertDelete = 'refreshInsertDelete';
/** @hidden */
var checkConditionalFormat = 'checkConditionalFormat';
/** @hidden */
var beforeCellUpdate = 'beforeCellUpdate';

/**
 * Specifies number format.
 */
var WorkbookNumberFormat = /** @__PURE__ @class */ (function () {
    function WorkbookNumberFormat(parent) {
        this.parent = parent;
        this.localeObj = getNumericObject(this.parent.locale);
        /* eslint-disable @typescript-eslint/no-explicit-any */
        this.decimalSep = this.localeObj.decimal;
        this.groupSep = this.localeObj.group;
        this.addEventListener();
    }
    WorkbookNumberFormat.prototype.numberFormatting = function (args) {
        var activeSheetIndex = this.parent.activeSheetIndex;
        if (args.range && args.range.indexOf('!') > -1) {
            activeSheetIndex = getSheetIndex(this.parent, args.range.split('!')[0]);
        }
        var sheet = this.parent.sheets[activeSheetIndex];
        var formatRange = args.range ? ((args.range.indexOf('!') > -1) ?
            args.range.split('!')[1] : args.range) : sheet.selectedRange;
        var selectedRange = getRangeIndexes(formatRange);
        var cell;
        for (var i = selectedRange[0]; i <= selectedRange[2]; i++) {
            for (var j = selectedRange[1]; j <= selectedRange[3]; j++) {
                if (!updateCell(this.parent, sheet, { cell: { format: args.format }, rowIdx: i, colIdx: j })) {
                    cell = getCell(i, j, sheet);
                    this.getFormattedCell({
                        type: getTypeFromFormat(cell.format), value: cell.value,
                        format: cell.format, rowIndex: i, colIndex: j,
                        sheetIndex: activeSheetIndex, cell: cell
                    });
                }
            }
        }
    };
    /**
     * @hidden
     *
     * @param {Object} args - Specifies the args.
     * @returns {string} - to get formatted cell.
     */
    WorkbookNumberFormat.prototype.getFormattedCell = function (args) {
        var fResult = args.value === undefined || args.value === null ? '' : args.value;
        var sheetIdx = args.sheetIndex === undefined ? this.parent.activeSheetIndex : args.sheetIndex;
        var sheet = this.parent.sheets[sheetIdx];
        var range;
        if (args.rowIndex === undefined) {
            range = getRangeIndexes(sheet.activeCell);
        }
        else {
            range = [args.rowIndex, args.colIndex];
        }
        var cell = args.cell ? args.cell : getCell(range[0], range[1], sheet);
        var rightAlign = false;
        var option = {};
        var intl = new Internationalization();
        intl.getNumberFormat(option);
        var currencySymbol = getNumberDependable(this.parent.locale, option.currency);
        if (args.format === '' || args.format === 'General') {
            cell = cell ? cell : {};
            var dateEventArgs = {
                value: args.value, rowIndex: range[0], colIndex: range[1], sheetIndex: this.parent.activeSheetIndex,
                updatedVal: args.value, isDate: false, isTime: false
            };
            this.checkDateFormat(dateEventArgs);
            if (dateEventArgs.isDate) {
                rightAlign = true;
                cell.value = args.value = dateEventArgs.updatedVal;
                cell.format = args.format = getFormatFromType('ShortDate');
            }
            else if (dateEventArgs.isTime) {
                rightAlign = true;
                cell.value = args.value = dateEventArgs.updatedVal;
                cell.format = args.format = getFormatFromType('Time');
            }
        }
        args.type = args.format ? getTypeFromFormat(args.format) : 'General';
        var result;
        var isCustomText;
        if (cell && !isNullOrUndefined(cell.format) && this.isCustomType(cell)) {
            var orgFormat = cell.format;
            cell.format = cell.format.split('\\').join('');
            this.parent.notify(updateCustomFormatsFromImport, { format: cell.format });
            args.type = 'Custom';
            this.currentRange = getCellAddress(range[0], range[1]);
            if (cell.format.indexOf(';') > -1) {
                if (cell.format.indexOf('<') > -1 || cell.format.indexOf('>') > -1) {
                    args.value = args.result = this.processCustomConditions(cell);
                }
                else {
                    args.value = args.result = this.processCustomAccounting(cell, range[0], range[1], args.td);
                    isCustomText = (!isNumber(cell.value) || cell.format && cell.format.indexOf('@') > -1) ? true : false;
                }
                cell.format = orgFormat;
            }
            else if (this.isCustomDateTime(cell)) {
                args.value = args.result = this.processCustomDate(cell);
            }
            else if (cell.format.indexOf('/') > -1) {
                args.value = args.result = this.processCustomFraction(cell);
            }
            else if (cell.format.indexOf('@') > -1) {
                isCustomText = true;
                args.value = args.result = this.processCustomText(cell);
            }
            else if (isNumber(cell.value)) {
                args.value = args.result = this.processCustomNumberFormat(cell, range[0], range[1], args.td);
            }
            if (isCustomText) {
                args.isRightAlign = false;
            }
            else {
                args.isRightAlign = isNullOrUndefined(cell.value) ? false : true;
            }
        }
        else {
            result = this.processFormats(args, fResult, rightAlign, cell, intl, currencySymbol, option.currency);
        }
        args.isRowFill = this.isRowFill;
        if ((this.parent.getActiveSheet().id - 1 === sheetIdx) && !args.onLoad) {
            this.parent.notify(refreshCellElement, {
                isRightAlign: args.type === 'Custom' ? args.isRightAlign : result.rightAlign, result: args.type === 'Custom' ? args.value : result.fResult || args.value,
                rowIndex: args.rowIndex, colIndex: args.colIndex, sheetIndex: args.sheetIndex,
                type: args.type, curSymbol: currencySymbol, value: args.type === 'Custom' ? args.value : args.value || '', isRowFill: this.isRowFill
            });
            this.isRowFill = false;
        }
        if (!args.onLoad && (args.rowIndex > sheet.usedRange.rowIndex || args.colIndex > sheet.usedRange.colIndex)) {
            this.parent.setUsedRange(args.rowIndex, args.colIndex);
        }
        if (args.type === 'Custom') {
            args.formattedText = args.value;
            args.curSymbol = currencySymbol;
        }
        else {
            args.formattedText = result.fResult || args.value;
            args.isRightAlign = result.rightAlign;
            args.curSymbol = currencySymbol;
        }
        return args.formattedText;
    };
    WorkbookNumberFormat.prototype.isCustomType = function (cell) {
        var format = getTypeFromFormat(cell.format);
        var l10n = this.parent.serviceLocator.getService('spreadsheetLocale');
        if ((format === l10n.getConstant('General') && cell.format !== l10n.getConstant('General')) ||
            (format === l10n.getConstant('Time') && this.parent.isEdit)) {
            return true;
        }
        else {
            return false;
        }
    };
    WorkbookNumberFormat.prototype.processCustomFill = function (format, cell, rowIdx, colIdx, tdElem) {
        var idx = cell.format.indexOf('*');
        var repeatChar = format[idx + 1];
        var codes = format.split(format[idx] + repeatChar);
        var formatText;
        var secText;
        if (codes[1] === '') {
            format = format.split(format[idx] + repeatChar).join('');
            var sampCell = { format: format, value: cell.value };
            formatText = this.processCustomNumberFormat(sampCell);
        }
        else {
            formatText = format.split(format[idx] + repeatChar)[0];
            format = codes[1];
            var sampCell = { format: format, value: cell.value };
            secText = this.processCustomNumberFormat(sampCell);
            if (parseFloat(cell.value) === 0) {
                secText = secText.split('0').join('');
            }
        }
        this.isRowFill = true;
        this.parent.notify(rowFillHandler, { cell: cell,
            rowIdx: rowIdx,
            colIdx: colIdx,
            value: repeatChar,
            formatText: formatText,
            secText: secText,
            td: tdElem
        });
        return formatText;
    };
    WorkbookNumberFormat.prototype.isCustomDateTime = function (cell) {
        var result = false;
        var codes = ['m', 'd', 'y', 'h', 's'];
        codes.forEach(function (e) {
            if (cell.format.indexOf(e) > -1 && !getColorCode(cell.format) && !(cell.format.indexOf('#') > -1)) {
                result = true;
            }
        });
        return result;
    };
    WorkbookNumberFormat.prototype.processCustomDate = function (cell) {
        var dateValue = intToDate(parseFloat(cell.value));
        if (isNaN(Number(dateValue))) {
            return cell.value;
        }
        else {
            var custFormat = cell.format;
            var type = void 0;
            var intl = new Internationalization();
            if (cell.format.indexOf('h') > -1) {
                custFormat = custFormat.split('h').join('H');
                type = 'time';
            }
            if (cell.format.indexOf('s') > -1) {
                type = 'time';
            }
            if (cell.format.indexOf('AM/PM') > -1 || cell.format.indexOf('A/P') > -1) {
                custFormat = custFormat.split('H').join('h');
                custFormat = custFormat.split('A/P').join('AM/PM').split('AM/PM').join('a');
                type = 'time';
            }
            if (cell.format.indexOf('d') > -1) {
                type = 'date';
                var charLength = cell.format.match(/d/g).length;
                if (charLength > 2) {
                    custFormat = cell.format.split('d').join('E');
                }
            }
            if (cell.format.indexOf('m') > -1) {
                if (cell.format.indexOf('s') > -1 || cell.format.indexOf('h') > -1) {
                    type = 'time';
                }
                else {
                    type = 'date';
                    custFormat = custFormat.split('m').join('M');
                    if (cell.format.indexOf('mmmmm') > -1) {
                        var monthName = this.formatDateTime(cell.value, 'MMMM', 'date', intl)[0];
                        custFormat = cell.format.split('mmmmm').join('p');
                        return this.formatDateTime(cell.value, custFormat, 'date', intl).split('p').join(monthName);
                    }
                }
            }
            return this.formatDateTime(cell.value, custFormat, type, intl);
        }
    };
    WorkbookNumberFormat.prototype.formatDateTime = function (value, format, type, intl) {
        return intl.formatDate(intToDate(parseFloat(value)), { type: type, format: format });
    };
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    WorkbookNumberFormat.prototype.processCustomFraction = function (cell) {
        // const fracLength: number = cell.format.split('/')[1].length;
        // const fracValue: string = Number(cell.value).toFixed(fracLength);
        var suffix = '';
        // let fractionResult: string;
        // if (cell.value.toString().indexOf(this.decimalSep) > -1 && isNumber(cell.value as string)) {
        //     suffix = cell.value.toString().split(this.decimalSep)[0];
        //     fractionResult = toFraction(Number(fracValue));
        //     return (Number(suffix) === 0) ? ' ' + fractionResult : suffix + ' ' + fractionResult;
        // }
        return suffix;
    };
    WorkbookNumberFormat.prototype.processCustomConditions = function (cell) {
        var result = cell.value;
        if (isNumber(cell.value)) {
            var conditions = cell.format.split(';');
            var code = void 0;
            for (var i = 0; i < conditions.length; i++) {
                code = conditions[i];
                if (getColorCode(code)) {
                    code = code.split('[' + getColorCode(code) + ']').join('');
                }
                var cond = code.split('[')[1].split(']')[0];
                // eslint-disable-next-line no-eval
                if (eval(cell.value + cond)) {
                    cell.format = conditions[i].split('[' + cond + ']')[0] + conditions[i].split('[' + cond + ']')[1];
                    break;
                }
            }
            result = this.processCustomNumberFormat(cell);
            return result;
        }
        else {
            return result;
        }
    };
    WorkbookNumberFormat.prototype.processCustomAccounting = function (cell, rowIdx, colIdx, td) {
        var custFormat = cell.format.split(';');
        var cellStringValue = isNullOrUndefined(cell.value) ? cell.value : cell.value.toString().replace(/,/g, '');
        var cellValue = isNumber(cellStringValue) ? parseFloat(cellStringValue) : NaN;
        var orgValue = cell.value;
        if (cellValue > 0) {
            cell.format = custFormat[0];
        }
        else if (cellValue === 0) {
            if (isNullOrUndefined(custFormat[2])) {
                cell.format = custFormat[0];
            }
            else {
                cell.format = custFormat[2] + '0';
                return this.processCustomNumberFormat(cell, rowIdx, colIdx, td).split('0').join('');
            }
        }
        else if (isNumber(cellValue)) {
            cell.format = custFormat[1];
        }
        else {
            cell.format = custFormat[3];
            return isNullOrUndefined(custFormat[3]) ? cell.value ? cell.value.toString() : '' : this.processCustomText(cell);
        }
        if (cellValue < 0) {
            cell.value = Math.abs(cellValue).toString();
            var formattedNumber = this.processCustomNumberFormat(cell, rowIdx, colIdx, td);
            cell.value = orgValue;
            return formattedNumber;
        }
        return this.processCustomNumberFormat(cell, rowIdx, colIdx, td);
    };
    WorkbookNumberFormat.prototype.processCustomText = function (cell) {
        var result = this.processCustomNumberFormat({ format: cell.format.split('@').join('0'), value: cell.value ? cell.value.split(cell.value).join('0') : '' });
        return result && result.split('0').join(cell.value);
    };
    WorkbookNumberFormat.prototype.thousandSeparator = function (count$$1, value) {
        while (count$$1) {
            value = value / 1000;
            count$$1--;
        }
        return value;
    };
    WorkbookNumberFormat.prototype.getSeparatorCount = function (cell) {
        var count$$1 = 0;
        var codes = ['#', '0'];
        for (var i = 0; i < cell.format.length; i++) {
            if (cell.format[i] === ',' && !(codes.indexOf(cell.format[i + 1]) > -1)) {
                count$$1++;
            }
        }
        return count$$1;
    };
    WorkbookNumberFormat.prototype.processSeparator = function (cell) {
        var count$$1 = this.getSeparatorCount(cell);
        var result = this.thousandSeparator(count$$1, parseInt(cell.value, 10));
        if (!(cell.format.indexOf('.') > -1)) {
            result = Math.round(result);
        }
        cell.value = this.getFormattedNumber(cell.format.split(',').join(''), result);
        cell.value = cell.value.replace(',', '');
        if (result === 0) {
            cell.value = cell.value.replace('0', '');
        }
        return cell.value;
    };
    WorkbookNumberFormat.prototype.processDigits = function (cell) {
        var custFormat = cell.format.split('?').join('0');
        cell.value = this.getFormattedNumber(custFormat, parseFloat(cell.value));
        if (!isNullOrUndefined(cell.value)) {
            cell.value = cell.value.split('.')[0] + '.' + cell.value.split('.')[1].split('0').join('  ');
        }
        return cell.value;
    };
    WorkbookNumberFormat.prototype.processSpace = function (format, cell) {
        var space = ' ';
        var args = { cell: cell, char: space, width: 0 };
        this.parent.notify(getTextSpace, args);
        var spaceWidth = args.width;
        var count$$1;
        for (var i = 0; i < format.length; i++) {
            if (format[i] === '_') {
                args.char = format[i + 1];
                this.parent.notify(getTextSpace, args);
                var textWidth = args.width;
                count$$1 = Math.round(textWidth / spaceWidth);
                format = format.replace(format[i] + format[i + 1], space.repeat(count$$1));
            }
        }
        return format;
    };
    WorkbookNumberFormat.prototype.processCustomNumberFormat = function (cell, rowIdx, colIdx, td) {
        if (cell.format === '') {
            return '';
        }
        var cellValue = 0;
        var formattedText;
        var isFormatted = false;
        if (!isNullOrUndefined(cell.value) && !isNumber(cell.value)) {
            cellValue = cell.value.replace(/,/g, '');
        }
        else {
            cellValue = cell.value;
        }
        if (cell && isNumber(cell.value)) {
            cellValue = parseFloat(cellValue.toString());
            var customFormat = this.processCustomColor(cell);
            // if (customFormat === cell.format && cell.style) {
            //     delete cell.style;
            // }
            if (this.getSeparatorCount(cell)) {
                isFormatted = true;
                formattedText = this.processSeparator(cell);
            }
            if (customFormat.indexOf('?') > -1) {
                isFormatted = true;
                formattedText = this.processDigits(cell);
            }
            if (customFormat.indexOf('_') > -1) {
                isFormatted = true;
                customFormat = cell.format = this.processSpace(customFormat, cell);
                formattedText = this.getFormattedNumber(customFormat, cellValue);
            }
            if (cell.format.indexOf('"') > -1 || cell.format.indexOf('\\') > -1) {
                customFormat = this.processText(customFormat);
            }
            if (customFormat && formattedText && customFormat.indexOf('?') > -1) {
                formattedText = formattedText.replace('?', ' ');
            }
            if (customFormat.indexOf('*') > -1) {
                isFormatted = true;
                formattedText = this.processCustomFill(customFormat, cell, rowIdx, colIdx, td);
            }
            if (customFormat === 'General') {
                isFormatted = true;
                formattedText = cellValue.toString();
            }
            if (!isFormatted) {
                formattedText = this.getFormattedNumber(customFormat, cellValue);
            }
            if (customFormat != null && customFormat.split('.')[0].indexOf('#') > -1 && cellValue < 1) {
                formattedText = formattedText.toString().replace(/^0+/, '');
            }
        }
        return formattedText;
    };
    WorkbookNumberFormat.prototype.processText = function (format) {
        var custFormat = format;
        if (custFormat.indexOf('"') > -1) {
            custFormat = custFormat.split('"').join('');
        }
        else if (custFormat.indexOf('\\') > -1) {
            custFormat = custFormat.split('\\').join('');
        }
        return custFormat;
    };
    WorkbookNumberFormat.prototype.processCustomColor = function (cell) {
        var custFormat = cell.format;
        var colorCode = getColorCode(custFormat);
        if (colorCode) {
            custFormat = cell.format.split('[' + colorCode + ']')[0] + cell.format.split('[' + colorCode + ']')[1];
            if (this.currentRange.indexOf('NaN') > -1) {
                this.currentRange = undefined;
            }
            this.parent.notify(setCellFormat, { style: { 'color': colorCode }, range: this.currentRange });
        }
        else if (cell.style && getCustomColors().indexOf(cell.style.color) > -1) {
            this.parent.notify(setCellFormat, { style: { 'color': 'black' } });
        }
        return custFormat;
    };
    WorkbookNumberFormat.prototype.processFormats = function (args, fResult, isRightAlign, cell, intl, currencySymbol, currencyCode) {
        var result;
        args.format = args.format ? args.format : 'General';
        if (fResult !== '') {
            switch (args.type) {
                case 'General':
                    result = this.autoDetectGeneralFormat({
                        args: args, currencySymbol: currencySymbol, fResult: fResult, intl: intl,
                        isRightAlign: isRightAlign, curCode: currencyCode, cell: cell, rowIdx: Number(args.rowIdx),
                        colIdx: Number(args.colIdx)
                    });
                    fResult = result.fResult;
                    isRightAlign = result.isRightAlign;
                    break;
                case 'Number':
                    if (isNumber(fResult)) {
                        fResult = this.applyNumberFormat(args, intl);
                        isRightAlign = true;
                    }
                    break;
                case 'Currency':
                    if (isNumber(fResult)) {
                        fResult = this.currencyFormat(args, intl, currencyCode);
                        isRightAlign = true;
                    }
                    break;
                case 'Percentage':
                    if (isNumber(fResult)) {
                        fResult = this.percentageFormat(args, intl);
                        isRightAlign = true;
                    }
                    break;
                case 'Accounting':
                    if (isNumber(fResult)) {
                        fResult = this.accountingFormat(args, intl, currencySymbol, currencyCode);
                        isRightAlign = true;
                    }
                    break;
                case 'ShortDate':
                    fResult = this.shortDateFormat(args, intl);
                    isRightAlign = fResult ? true : false;
                    break;
                case 'LongDate':
                    fResult = this.longDateFormat(args, intl);
                    isRightAlign = fResult ? true : false;
                    break;
                case 'Time':
                    fResult = this.timeFormat(args, intl);
                    isRightAlign = fResult ? true : false;
                    break;
                case 'Fraction':
                    if (isNumber(fResult)) {
                        fResult = this.fractionFormat(args);
                        isRightAlign = true;
                    }
                    break;
                case 'Scientific':
                    if (isNumber(fResult)) {
                        fResult = this.scientificFormat(args);
                        isRightAlign = true;
                    }
                    break;
                case 'Text':
                    isRightAlign = false;
                    break;
            }
        }
        return { fResult: fResult, rightAlign: isRightAlign };
    };
    WorkbookNumberFormat.prototype.autoDetectGeneralFormat = function (options) {
        var addressFormula = false;
        var val = options.fResult;
        if (options.args.cell && options.args.cell.formula
            && options.args.cell.formula.indexOf('ADDRESS(') > 0) {
            addressFormula = true;
        }
        if (isNumber(options.fResult)) {
            if (options.args.format && options.args.format !== '') {
                if (options.args.format.toString().indexOf('%') > -1) {
                    options.fResult = this.percentageFormat(options.args, options.intl);
                }
                else if (options.args.format.toString().indexOf(options.currencySymbol) > -1) {
                    options.fResult = this.currencyFormat(options.args, options.intl, options.curCode);
                }
                else {
                    options.fResult = this.applyNumberFormat(options.args, options.intl);
                }
            }
            if (options.args.format === 'General' && options.fResult && options.fResult.toString().split(this.decimalSep)[0].length > 11) {
                options.fResult = this.scientificFormat(options.args);
            }
            options.isRightAlign = true;
        }
        if (!isNullOrUndefined(options.fResult)) {
            var res = options.fResult.toString();
            if (res.indexOf('%') > -1 && res.split('%')[0] !== '' && res.split('%')[1].trim() === '' &&
                Number(res.split('%')[0].split(this.groupSep).join('')).toString() !== 'NaN') {
                options.args.value = Number(res.split('%')[0].split(this.groupSep).join('')) / 100;
                options.cell.format = options.args.format = this.getPercentageFormat(res);
                options.fResult = this.percentageFormat(options.args, options.intl);
                options.cell.value = options.args.value.toString();
                options.isRightAlign = true;
            }
            else if (res.indexOf(options.currencySymbol) > -1 && res.split(options.currencySymbol)[1] !== '' &&
                Number(res.split(options.currencySymbol)[1].split(this.groupSep).join('')).toString() !== 'NaN') {
                options.args.value = Number(res.split(options.currencySymbol)[1].split(this.groupSep).join(''));
                options.cell.format = options.args.format = getFormatFromType('Currency');
                options.fResult = this.currencyFormat(options.args, options.intl, options.curCode);
                options.cell.value = options.args.value.toString();
                setCell(options.rowIdx, options.colIdx, this.parent.getActiveSheet(), options.cell, true);
                options.isRightAlign = true;
            }
        }
        if (addressFormula) {
            options.isRightAlign = false;
            options.fResult = val;
        }
        return { isRightAlign: options.isRightAlign, fResult: options.fResult };
    };
    WorkbookNumberFormat.prototype.getPercentageFormat = function (value) {
        return value.indexOf(this.decimalSep) > -1 ? getFormatFromType('Percentage') : '0%';
    };
    WorkbookNumberFormat.prototype.findSuffix = function (zeros, resultSuffix) {
        var len = zeros.length;
        var suffixLen = len - resultSuffix.length;
        return zeros.substr(0, suffixLen < 0 ? 0 : suffixLen) + resultSuffix;
    };
    WorkbookNumberFormat.prototype.applyNumberFormat = function (args, intl) {
        args.format = this.isCustomFormat(args.format.toString());
        var formatArr = args.format.toString().split(';');
        if (Number(args.value) > 0) {
            args.format = formatArr[0];
        }
        else if (Number(args.value) === 0) {
            args.format = formatArr[2] ? formatArr[2] : formatArr[0];
            if (args.format.indexOf('"') > -1 && args.format.indexOf('#') === -1) {
                args.format = args.format.split('_').join(' ').split('*').join(' ').split('?').join(' ').split('"').join('');
                return args.format;
            }
        }
        else if (Number(args.value) < 0) {
            args.format = !isNullOrUndefined(formatArr[1]) ? formatArr[1].split('*').join(' ') : formatArr[0];
            if (args.format.indexOf('-') > -1) {
                args.value = args.value.toString().split('-').join('');
            }
        }
        else {
            args.format = formatArr[3] ? formatArr[3] : formatArr[0];
            args.format = args.format.split('_').join(' ').split('*').join(' ').split('?').join(' ');
            if (args.format.indexOf('@') > -1) {
                return args.format.split('@').join(args.value.toString());
            }
        }
        args.format = args.format.split('_').join(' ').split('*').join(' ').split('"').join('');
        if (args.format.indexOf('?') > -1 && args.format.indexOf(this.decimalSep) > -1) {
            var formatDecimalLen = args.format.split(this.decimalSep)[1].length;
            var replaceString = '';
            if (Number(args.value) % 1) {
                var valueDecimalLen = args.value.toString().split('.')[1].length;
                if (formatDecimalLen > valueDecimalLen) {
                    replaceString = ' ';
                }
                else {
                    replaceString = '0';
                }
            }
            args.format = args.format.split('?').join(replaceString);
        }
        else {
            args.format = args.format.split('?').join(' ');
        }
        if (Number(args.value) < 0 && args.cell) {
            args.format = args.cell.format;
        }
        return intl.formatNumber(Number(args.value), {
            format: args.format
        });
    };
    WorkbookNumberFormat.prototype.isCustomFormat = function (format) {
        if (format === '_-* #,##0.00_-;-* #,##0.00_-;_-* "-"_-;_-@_-' || format === '_-* #,##0_-;-* #,##0_-;_-* "-"_-;_-@_-') {
            format = '';
        }
        format = format === '' ? getFormatFromType('Number') : format;
        format = format.toString().split('_)').join(' ').split('_(').join(' ').split('[Red]').join('');
        return format;
    };
    WorkbookNumberFormat.prototype.currencyFormat = function (args, intl, currencyCode) {
        args.format = args.format === '' ? getFormatFromType('Currency') : args.format;
        args.format = args.format.toString().split('_(').join(' ').split('_)').join(' ').split('[Red]').join('');
        var formatArr = args.format.toString().split(';');
        if (Number(args.value) >= 0) {
            args.format = formatArr[0];
        }
        else {
            args.format = isNullOrUndefined(formatArr[1]) ? formatArr[0] : formatArr[1].split('*').join(' ');
        }
        args.format = this.getFormatForOtherCurrency(args.format);
        return intl.formatNumber(Number(args.value), { format: args.format, currency: currencyCode });
    };
    WorkbookNumberFormat.prototype.percentageFormat = function (args, intl) {
        args.format = args.format === '' ? getFormatFromType('Percentage') : args.format;
        return intl.formatNumber(Number(args.value), {
            format: args.format
        });
    };
    WorkbookNumberFormat.prototype.accountingFormat = function (args, intl, currencySymbol, currencyCode) {
        args.format = args.format === '' ? getFormatFromType('Accounting') : args.format;
        args.format = args.format.split('_(').join(' ').split('_)').join(' ').split('[Red]').join('').split('_').join('');
        var formatArr = args.format.split(';');
        if (Number(args.value) >= 0) {
            args.format = formatArr[0];
        }
        else {
            args.format = formatArr[1].split('*').join(' ');
        }
        args.format = this.getFormatForOtherCurrency(args.format);
        if (Number(args.value) === 0) {
            return currencySymbol + '- ';
        }
        else {
            return intl.formatNumber(Number(args.value), { format: args.format, currency: currencyCode }).split('-').join('');
        }
    };
    WorkbookNumberFormat.prototype.getFormatForOtherCurrency = function (format) {
        if (format.indexOf('[$') > -1) {
            var symbol = format.split(']')[0].split('[$')[1].split('-')[0];
            if (format.indexOf('0') > format.indexOf('[$')) {
                format = symbol + format.slice(format.indexOf(']') + 1, format.length);
            }
            else {
                format = format.slice(0, format.indexOf('[$')) + symbol;
            }
        }
        return format;
    };
    WorkbookNumberFormat.prototype.shortDateFormat = function (args, intl) {
        if ((args.format === 'dd/MM/yyyy' || args.format === 'dd-MM-yyyy') && args.value && (args.value.toString().indexOf('/') > -1 || args.value.toString().indexOf('-') > -1)) {
            var intl_1 = new Internationalization();
            var dateObj_1 = toDate(args.value.toString(), intl_1, this.parent.locale, args.format.toString()).dateObj;
            if (!isNullOrUndefined(dateObj_1) && dateObj_1.toString() !== 'Invalid Date') {
                args.value = dateToInt(dateObj_1);
                if (args.cell) {
                    args.cell.value = args.value.toString();
                }
            }
        }
        var shortDate = intToDate(args.value);
        var code = (args.format === '' || args.format === 'General') ? getFormatFromType('ShortDate')
            : args.format.toString();
        var dateObj;
        if (code === getFormatFromType('ShortDate')) {
            code = 'M/d/yy';
            dateObj = {
                type: 'date',
                skeleton: 'yMd'
            };
        }
        else {
            dateObj = {
                type: 'date',
                format: code
            };
        }
        return intl.formatDate(shortDate, dateObj);
    };
    WorkbookNumberFormat.prototype.longDateFormat = function (args, intl) {
        var longDate = intToDate(args.value);
        var code = (args.format === '' || args.format === 'General') ? getFormatFromType('LongDate')
            : args.format.toString();
        if (code === getFormatFromType('LongDate')) {
            code = 'EEEE, MMMM d, y';
        }
        return intl.formatDate(longDate, {
            type: 'date',
            format: code
        });
    };
    WorkbookNumberFormat.prototype.timeFormat = function (args, intl) {
        if (isNullOrUndefined(args.value)) {
            return '';
        }
        var value = args.value.toString().split(this.decimalSep);
        if (!isNullOrUndefined(value[1])) {
            args.value = parseFloat(value[0] + 1 + this.decimalSep + value[1]) || args.value;
        }
        var time = intToDate(args.value);
        var code = (args.format === '' || args.format === 'General') ? getFormatFromType('Time')
            : args.format.toString();
        if (code === getFormatFromType('Time')) {
            code = 'h:mm:ss a';
        }
        return intl.formatDate(time, {
            type: 'time',
            skeleton: 'medium',
            format: code
        });
    };
    WorkbookNumberFormat.prototype.scientificFormat = function (args) {
        args.format = args.format === '' ? getFormatFromType('Scientific') : args.format;
        var zeros = args.format.split('+')[1];
        var prefix = this.findDecimalPlaces(args.format, 'Scientific');
        var fResult = Number(args.value).toExponential(prefix);
        if (fResult.indexOf('e+') > -1) {
            fResult = fResult.split('e+')[0] + 'E+' + this.findSuffix(zeros, fResult.split('e+')[1]);
        }
        else if (fResult.indexOf('e-') > -1) {
            fResult = fResult.split('e-')[0] + 'E-' + +this.findSuffix(zeros, fResult.split('e-')[1]);
        }
        return fResult;
    };
    WorkbookNumberFormat.prototype.fractionFormat = function (args) {
        args.format = args.format === '' ? getFormatFromType('Fraction') : args.format;
        var suffix = '';
        var fractionResult;
        if (args.value.toString().indexOf(this.decimalSep) > -1 && isNumber(args.value)) {
            suffix = args.value.toString().split(this.decimalSep)[0];
            fractionResult = toFraction(Number(args.value));
            return (Number(suffix) === 0) ? ' ' + fractionResult : suffix + ' ' + fractionResult;
        }
        return suffix;
    };
    WorkbookNumberFormat.prototype.findDecimalPlaces = function (code, type) {
        var eIndex;
        var decIndex;
        switch (type) {
            case 'Scientific':
                eIndex = code.toUpperCase().indexOf('E');
                decIndex = code.indexOf(this.decimalSep);
                if (eIndex > -1) {
                    return code.substring(decIndex + 1, eIndex).length;
                }
        }
        return 2;
    };
    WorkbookNumberFormat.prototype.checkDateFormat = function (args) {
        var dateObj;
        var intl = new Internationalization();
        var value = !isNullOrUndefined(args.value) ? args.value.toString() : '';
        var cell = getCell(args.rowIndex, args.colIndex, getSheet(this.parent, isNullOrUndefined(args.sheetIndex) ? this.parent.activeSheetIndex : args.sheetIndex));
        var checkedDate = this.checkCustomDateFormat(value);
        if (value && (value.indexOf('/') > -1 || value.indexOf('-') > 0 || value.indexOf(':') > -1) && checkedDate !== 'Invalid') {
            value = checkedDate;
            if (value && value.indexOf('/') > -1 || value.indexOf('-') > 0 || value.indexOf(':') > -1) {
                dateObj = toDate(value, intl, this.parent.locale, '', cell);
                if (!isNullOrUndefined(dateObj.dateObj) && dateObj.dateObj.toString() !== 'Invalid Date') {
                    cell = cell ? cell : {};
                    value = dateToInt(dateObj.dateObj, value.indexOf(':') > -1, dateObj.type && dateObj.type === 'time').toString();
                    if (!cell.format || cell.format === '') {
                        if (dateObj.type === 'time') {
                            cell.format = getFormatFromType('Time');
                        }
                        else {
                            cell.format = getFormatFromType('ShortDate');
                        }
                    }
                    args.isDate = dateObj.type === 'date' || dateObj.type === 'datetime';
                    args.isTime = dateObj.type === 'time';
                    args.dateObj = dateObj.dateObj;
                }
            }
            args.updatedVal = value;
        }
    };
    WorkbookNumberFormat.prototype.checkCustomDateFormat = function (val) {
        var dateArr = val.indexOf('/') > -1 ? val.split('/') : val.indexOf('-') > 0 ? val.split('-') : [''];
        var months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'sept', 'oct', 'nov', 'dec'];
        if (dateArr.length === 2) {
            if (months.indexOf(dateArr[0].toLowerCase()) > -1 && Number(dateArr[1]) <= 31) {
                return '01-' + dateArr[0] + '-' + dateArr[1];
            }
            else if (months.indexOf(dateArr[1].toLowerCase()) > -1 && Number(dateArr[0]) <= 31) {
                return dateArr[0] + '-' + dateArr[1] + '-' + new Date().getFullYear();
            }
            else if (Number(dateArr[0]) <= 31 && Number(dateArr[1]) <= 12) {
                return dateArr[0] + '-' + dateArr[1] + '-' + new Date().getFullYear();
            }
            if (Number(dateArr[1]) <= 31 && Number(dateArr[0]) <= 12) {
                return dateArr[0] + '-' + dateArr[1] + '-' + new Date().getFullYear();
            }
            if (Number(dateArr[0]) <= 12 && Number(dateArr[1]) <= 9999 && Number(dateArr[1]) >= 1900) {
                return '01-' + dateArr[0] + '-' + dateArr[1];
            }
            else {
                return 'Invalid';
            }
        }
        else if (dateArr.length > 2) {
            var _loop_1 = function (i) {
                if (!(Number(dateArr[i]) > -1)) {
                    if (!months.filter(function (month) { return dateArr[i].toLowerCase().includes(month); }).length) {
                        return { value: 'Invalid' };
                    }
                }
            };
            for (var i = 0; i < dateArr.length; i++) {
                var state_1 = _loop_1(i);
                if (typeof state_1 === "object")
                    return state_1.value;
            }
        }
        return val;
    };
    WorkbookNumberFormat.prototype.formattedBarText = function (args) {
        if (args.value === '') {
            return;
        }
        var type = getTypeFromFormat(args.cell ? args.cell.format : '');
        var intl = new Internationalization();
        var beforeText = args.value;
        var date = (type === 'ShortDate' && args.cell && args.cell.format) ?
            args.cell.format : getFormatFromType('ShortDate');
        var time = getFormatFromType('Time');
        switch (type) {
            case 'ShortDate':
            case 'LongDate':
                args.value = this.shortDateFormat({ type: type, value: args.value, format: date }, intl);
                break;
            case 'Time':
                if (beforeText && Number(beforeText) >= 1) {
                    args.value = this.shortDateFormat({ type: type, value: args.value, format: date }, intl) + ' ' +
                        this.timeFormat({ type: type, value: args.value, format: time }, intl);
                }
                else {
                    args.value = this.timeFormat({ type: type, value: args.value, format: time }, intl);
                }
                break;
        }
        if (!args.value || (args.value && args.value.toString().indexOf('null') > -1)) {
            args.value = beforeText;
        }
    };
    WorkbookNumberFormat.prototype.getFormattedNumber = function (format, value) {
        var intl = new Internationalization();
        return intl.formatNumber(Number(value), {
            format: format
        });
    };
    /**
     * Adding event listener for number format.
     *
     * @returns {void} - Adding event listener for number format.
     */
    WorkbookNumberFormat.prototype.addEventListener = function () {
        this.parent.on(applyNumberFormatting, this.numberFormatting, this);
        this.parent.on(getFormattedCellObject, this.getFormattedCell, this);
        this.parent.on(checkDateFormat, this.checkDateFormat, this);
        this.parent.on(getFormattedBarText, this.formattedBarText, this);
    };
    /**
     * Removing event listener for number format.
     *
     * @returns {void} -  Removing event listener for number format.
     */
    WorkbookNumberFormat.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(applyNumberFormatting, this.numberFormatting);
            this.parent.off(getFormattedCellObject, this.getFormattedCell);
            this.parent.off(checkDateFormat, this.checkDateFormat);
            this.parent.off(getFormattedBarText, this.formattedBarText);
        }
    };
    /**
     * To Remove the event listeners.
     *
     * @returns {void} - To Remove the event listeners.
     */
    WorkbookNumberFormat.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * Get the workbook number format module name.
     *
     * @returns {string} - Get the module name.
     */
    WorkbookNumberFormat.prototype.getModuleName = function () {
        return 'workbookNumberFormat';
    };
    return WorkbookNumberFormat;
}());
/**
 * To Get the number built-in format code from the number format type.
 *
 * @param {string} type - Specifies the type of the number formatting.
 * @returns {string} - To Get the number built-in format code from the number format type.
 */
function getFormatFromType(type) {
    var code = 'General';
    switch (type.split(' ').join('')) {
        case 'Number':
            code = '0.00';
            break;
        case 'Currency':
            code = '$#,##0.00';
            break;
        case 'Accounting':
            code = '_($* #,##0.00_);_($* (#,##0.00);_($* "-"??_);_(@_)';
            break;
        case 'ShortDate':
            code = 'mm-dd-yyyy';
            break;
        case 'LongDate':
            code = 'dddd, mmmm dd, yyyy';
            break;
        case 'Time':
            code = 'h:mm:ss AM/PM';
            break;
        case 'Percentage':
            code = '0.00%';
            break;
        case 'Fraction':
            code = '# ?/?';
            break;
        case 'Scientific':
            code = '0.00E+00';
            break;
        case 'Text':
            code = '@';
            break;
    }
    return code;
}
/**
 * @hidden
 * @param {string} format -  Specidfies the format.
 * @returns {string} - To get type from format.
 */
function getTypeFromFormat(format) {
    var code = 'General';
    switch (format) {
        // case '0.00':
        case '_-* #,##0.00_-;-* #,##0.00_-;_-* "-"_-;_-@_-':
        case '_-* #,##0_-;-* #,##0_-;_-* "-"_-;_-@_-':
            code = 'Number';
            break;
        case '$#,##0.00':
        case '$#,##0_);[Red]($#,##0)':
        case '$#,##0.00_);($#,##0.00)':
        case '$#,##0_);($#,##0)':
            // case '$#,##0.00_);[Red]($#,##0.00)':
            code = 'Currency';
            break;
        case '_($*#,##0.00_);_($*(#,##0.00);_($*"-"??_);_(@_)':
        case '_($*#,##0.00_);_($* (#,##0.00);_($*"-"??_);_(@_)':
        case '_($* #,##0.00_);_($* (#,##0.00);_($* "-"??_);_(@_)':
        case '_ $ * #,##0.00_ ;_ $ * -#,##0.00_ ;_ $ * "-"??_ ;_ @_ ':
            code = 'Accounting';
            break;
        case 'mm-dd-yyyy':
        case 'dd/MM/yyyy':
            // case 'yyyy-MM-dd':
            // case 'dd-mm-yyyy':
            // case 'dd-mm-yy':
            // case 'mm-dd-yy':
            code = 'ShortDate';
            break;
        case 'dddd, mmmm dd, yyyy':
            code = 'LongDate';
            break;
        case 'h:mm:ss AM/PM':
            code = 'Time';
            break;
        case '0.00%':
        case '0%':
            code = 'Percentage';
            break;
        case '# ?/?':
        case '# ??/??':
        case '# ???/???':
            code = 'Fraction';
            break;
        case '0.00E+00':
            code = 'Scientific';
            break;
        case '@':
            code = 'Text';
            break;
        default:
            if (format) {
                if (format.indexOf('[$') > -1) {
                    if (format.indexOf('* ') > -1) {
                        code = 'Accounting';
                    }
                    else {
                        code = 'Currency';
                    }
                }
            }
            break;
    }
    return code;
}

/**
 * Data binding module
 */
var DataBind = /** @__PURE__ @class */ (function () {
    function DataBind(parent) {
        this.parent = parent;
        this.requestedInfo = [];
        this.addEventListener();
    }
    DataBind.prototype.addEventListener = function () {
        this.parent.on(updateSheetFromDataSource, this.updateSheetFromDataSourceHandler, this);
        this.parent.on(dataSourceChanged, this.dataSourceChangedHandler, this);
        this.parent.on(dataChanged, this.dataChangedHandler, this);
        this.parent.on(triggerDataChange, this.triggerDataChangeHandler, this);
    };
    DataBind.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(updateSheetFromDataSource, this.updateSheetFromDataSourceHandler);
            this.parent.off(dataSourceChanged, this.dataSourceChangedHandler);
            this.parent.off(dataChanged, this.dataChangedHandler);
            this.parent.off(triggerDataChange, this.triggerDataChangeHandler);
        }
    };
    /**
     * Update given data source to sheet.
     *
     * @param {Object} args - Specify the args.
     * @param {ExtendedSheet} args.sheet - Specify the sheet.
     * @param {number[]} args.indexes - Specify the indexes.
     * @param {Promise<CellModel>} args.promise - Specify the promise.
     * @param {number} args.rangeSettingCount - Specify the rangeSettingCount.
     * @param {string} args.formulaCellRef - Specify the formulaCellRef.
     * @param {number} args.sheetIndex - Specify the sheetIndex.
     * @param {boolean} args.dataSourceChange - Specify the dataSourceChange.
     * @param {boolean} args.isFinite - Specify the isFinite.
     * @returns {void} - Update given data source to sheet.
     */
    DataBind.prototype.updateSheetFromDataSourceHandler = function (args) {
        var _this = this;
        var cell;
        var flds;
        var sCellIdx;
        var result;
        var remoteUrl;
        var isLocal;
        var dataManager;
        var requestedRange = [];
        var sRanges = [];
        var rowIdx;
        var deferred = new Deferred();
        var sRowIdx;
        var sColIdx;
        var loadedInfo;
        args.promise = deferred.promise;
        if (args.sheet && args.sheet.ranges.length) {
            var _loop_1 = function (k) {
                var sRange = args.indexes[0];
                var eRange = args.indexes[2];
                var range = args.sheet.ranges[k];
                sRowIdx = getRangeIndexes(range.startCell)[0];
                dataManager = range.dataSource instanceof DataManager ? range.dataSource
                    : range.dataSource ? new DataManager(range.dataSource) : new DataManager();
                remoteUrl = remoteUrl || dataManager.dataSource.url;
                args.sheet.isLocalData = isLocal || !dataManager.dataSource.url;
                if (sRowIdx <= sRange) {
                    sRange = sRange - sRowIdx;
                }
                else {
                    if (sRowIdx <= eRange) {
                        eRange = eRange - sRowIdx;
                        sRange = 0;
                    }
                    else {
                        sRange = -1;
                    }
                }
                if (range.showFieldAsHeader && sRange !== 0) {
                    sRange -= 1;
                }
                var isEndReached = false;
                var insertRowCount = 0;
                this_1.initRangeInfo(range);
                var count = this_1.getMaxCount(range);
                loadedInfo = this_1.getLoadedInfo(sRange, eRange, range);
                sRange = loadedInfo.unloadedRange[0];
                eRange = loadedInfo.unloadedRange[1];
                if (range.info.insertRowRange) {
                    range.info.insertRowRange.forEach(function (range) {
                        insertRowCount += ((range[1] - range[0]) + 1);
                    });
                    sRange -= insertRowCount;
                    eRange -= insertRowCount;
                }
                if (sRange >= count) {
                    isEndReached = true;
                }
                else if (eRange > count) {
                    eRange = count;
                }
                this_1.requestedInfo.push({ deferred: deferred, indexes: args.indexes, isNotLoaded: loadedInfo.isNotLoaded });
                if (sRange >= 0 && loadedInfo.isNotLoaded && !isEndReached) {
                    sRanges[k] = sRange;
                    requestedRange[k] = false;
                    var query = (range.query ? range.query : new Query()).clone();
                    dataManager.executeQuery(query.range(sRange, eRange >= count ? eRange : eRange + 1)
                        .requiresCount()).then(function (e) {
                        if (!_this.parent || _this.parent.isDestroyed) {
                            return;
                        }
                        result = (e.result && e.result.result ? e.result.result : e.result);
                        sCellIdx = getRangeIndexes(range.startCell);
                        sRowIdx = sCellIdx[0];
                        sColIdx = sCellIdx[1];
                        if (result && result.length) {
                            if (!range.info.count) {
                                count = e.count;
                                range.info.count = e.count;
                            }
                            flds = Object.keys(result[0]);
                            if (!range.info.fldLen) {
                                range.info.fldLen = flds.length;
                                range.info.flds = flds;
                            }
                            if (range.info.insertColumnRange) {
                                var insertCount_1 = 0;
                                range.info.insertColumnRange.forEach(function (insertRange) {
                                    for (var i = insertRange[0]; i <= insertRange[1]; i++) {
                                        if (i <= sColIdx) {
                                            flds.splice(0, 0, "emptyCell" + insertCount_1);
                                        }
                                        else {
                                            flds.splice(i - sColIdx, 0, "emptyCell" + insertCount_1);
                                        }
                                        insertCount_1++;
                                    }
                                });
                            }
                            if (sRanges[k] === 0 && range.showFieldAsHeader) {
                                rowIdx = sRowIdx + sRanges[k] + insertRowCount;
                                flds.forEach(function (field, i) {
                                    cell = getCell(rowIdx, sColIdx + i, args.sheet, true);
                                    if (!cell) {
                                        args.sheet.rows[sRowIdx + sRanges[k]].cells[sColIdx + i] = field.includes('emptyCell') ? {}
                                            : { value: field };
                                    }
                                    else if (!field.includes('emptyCell')) {
                                        cell.value = field;
                                    }
                                });
                            }
                            var curSheetIdx = args.formulaCellRef ? getSheetIndexFromId(_this.parent, args.sheet.id) : undefined;
                            result.forEach(function (item, i) {
                                rowIdx = sRowIdx + sRanges[k] + i + (range.showFieldAsHeader ? 1 : 0) + insertRowCount;
                                for (var j = 0; j < flds.length; j++) {
                                    cell = getCell(rowIdx, sColIdx + j, args.sheet, true);
                                    if (cell) {
                                        if (!flds[j].includes('emptyCell')) {
                                            setCell(rowIdx, sColIdx + j, args.sheet, _this.getCellDataFromProp(item[flds[j]]), true);
                                        }
                                    }
                                    else {
                                        args.sheet.rows[rowIdx].cells[sColIdx + j] =
                                            flds[j].includes('emptyCell') ? {} : _this.getCellDataFromProp(item[flds[j]]);
                                    }
                                    // this.checkDataForFormat({
                                    //     args: args, cell: cell, colIndex: sColIdx + j, rowIndex: rowIdx, i: i, j: j, k: k, range: range,
                                    //     sRanges: sRanges, value: item[flds[j]], sheetIndex: curSheetIdx
                                    // });
                                }
                            });
                        }
                        else {
                            flds = [];
                        }
                        var totalRows;
                        if ((sRowIdx + (count || e.count)) > 0) {
                            totalRows = (sRowIdx + (count || e.count) + (range.showFieldAsHeader ? 1 : 0) + insertRowCount) - 1;
                        }
                        else {
                            totalRows = args.sheet.usedRange.rowIndex;
                        }
                        var totalCols = sColIdx + flds.length - 1 < 0 ? args.sheet.usedRange.colIndex : sColIdx + flds.length - 1;
                        if (args.isFinite) {
                            args.sheet.usedRange.rowIndex = totalRows < args.sheet.rowCount ? totalRows : args.sheet.rowCount - 1;
                            args.sheet.usedRange.colIndex = totalCols < args.sheet.colCount ? totalCols : args.sheet.colCount - 1;
                        }
                        else {
                            args.sheet.usedRange.rowIndex = totalRows;
                            args.sheet.usedRange.colIndex = totalCols;
                        }
                        if (insertRowCount) {
                            loadedInfo = _this.getLoadedInfo(sRange, eRange, range);
                            sRange = loadedInfo.unloadedRange[0];
                            eRange = loadedInfo.unloadedRange[1];
                            if (sRange > count) {
                                loadedInfo.isNotLoaded = false;
                            }
                            if (loadedInfo.isNotLoaded) {
                                if (eRange > count) {
                                    eRange = count;
                                }
                                range.info.loadedRange.push([sRange, eRange]);
                            }
                        }
                        else {
                            range.info.loadedRange.push([sRange, eRange]);
                        }
                        requestedRange[k] = true;
                        if (requestedRange.indexOf(false) === -1) {
                            if (eRange + sRowIdx < sRowIdx + range.info.count) {
                                if (!args.rangeSettingCount) {
                                    args.rangeSettingCount = [];
                                }
                                args.rangeSettingCount.push(k);
                                //if (remoteUrl) {
                                var unloadedArgs = {
                                    sheet: args.sheet, indexes: [0, 0, totalRows, totalCols],
                                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                                    promise: new Promise(function (resolve, reject) { resolve((function () { })()); }),
                                    rangeSettingCount: args.rangeSettingCount, isFinite: args.isFinite
                                };
                                _this.updateSheetFromDataSourceHandler(unloadedArgs);
                                unloadedArgs.promise.then(function () {
                                    if (_this.parent.getModuleName() === 'workbook') {
                                        return;
                                    }
                                    args.rangeSettingCount.pop();
                                    if (!args.rangeSettingCount.length) {
                                        _this.parent.notify('created', null);
                                    }
                                    if (args.formulaCellRef) {
                                        _this.notfyFormulaCellRefresh(args.formulaCellRef, args.sheetIndex);
                                    }
                                });
                                //}
                            }
                            else if (args.formulaCellRef) {
                                _this.notfyFormulaCellRefresh(args.formulaCellRef, args.sheetIndex);
                            }
                            _this.checkResolve(args.indexes);
                        }
                    });
                }
                else if (k === 0 && requestedRange.indexOf(false) === -1) {
                    this_1.checkResolve(args.indexes);
                }
            };
            var this_1 = this;
            for (var k = args.sheet.ranges.length - 1; k >= 0; k--) {
                _loop_1(k);
            }
        }
        else {
            deferred.resolve();
        }
    };
    DataBind.prototype.notfyFormulaCellRefresh = function (formulaCellRef, sheetIndex) {
        this.parent.formulaRefCell = null;
        this.parent.notify('updateView', { indexes: getRangeIndexes(formulaCellRef), sheetIndex: sheetIndex, refreshing: true });
    };
    DataBind.prototype.checkResolve = function (indexes) {
        var resolved;
        var isSameRng;
        var cnt = 0;
        this.requestedInfo.forEach(function (info, idx) {
            isSameRng = JSON.stringify(info.indexes) === JSON.stringify(indexes);
            if (isSameRng || resolved) {
                if (idx === 0) {
                    info.deferred.resolve();
                    cnt++;
                    resolved = true;
                }
                else {
                    if (resolved && (info.isLoaded || !info.isNotLoaded)) {
                        info.deferred.resolve();
                        cnt++;
                    }
                    else if (isSameRng && resolved) {
                        info.deferred.resolve();
                        cnt++;
                    }
                    else if (isSameRng) {
                        info.isLoaded = true;
                    }
                    else {
                        resolved = false;
                    }
                }
            }
        });
        this.requestedInfo.splice(0, cnt);
    };
    DataBind.prototype.getCellDataFromProp = function (prop) {
        var data = {};
        if (Object.prototype.toString.call(prop) === '[object Object]') {
            if (prop.formula) {
                data.formula = prop.formula;
            }
            else if (prop.value) {
                if (typeof (prop.value) === 'string') {
                    if (prop.value.indexOf('http://') === 0 || prop.value.indexOf('https://') === 0 ||
                        prop.value.indexOf('ftp://') === 0 || prop.value.indexOf('www.') === 0) {
                        data.hyperlink = prop.value;
                    }
                    else {
                        data.value = prop.value;
                    }
                }
                else {
                    data.value = prop.value;
                }
            }
        }
        else {
            if (checkIsFormula(prop)) {
                data.formula = prop;
            }
            else {
                if (typeof (prop) === 'string') {
                    if (prop.indexOf('http://') === 0 || prop.indexOf('https://') === 0 ||
                        prop.indexOf('ftp://') === 0 || prop.indexOf('www.') === 0) {
                        data.hyperlink = prop;
                    }
                    else {
                        data.value = prop;
                    }
                }
                else {
                    data.value = prop;
                }
            }
        }
        return data;
    };
    DataBind.prototype.checkDataForFormat = function (args) {
        if (args.value !== '') {
            var dateEventArgs = {
                value: args.value,
                rowIndex: args.rowIndex,
                colIndex: args.colIndex,
                isDate: false,
                updatedVal: args.value,
                isTime: false,
                sheetIndex: args.sheetIndex
            };
            this.parent.notify(checkDateFormat, dateEventArgs);
            if (dateEventArgs.isDate) {
                if (args.cell) {
                    if (!args.cell.format) {
                        args.cell.format = getFormatFromType('ShortDate');
                    }
                    args.cell.value = dateEventArgs.updatedVal;
                }
                else {
                    args.args.sheet.rows[args.rowIndex]
                        .cells[args.colIndex].format = getFormatFromType('ShortDate');
                    args.args.sheet.rows[args.rowIndex]
                        .cells[args.colIndex].value = dateEventArgs.updatedVal;
                }
            }
            else if (dateEventArgs.isTime) {
                if (args.cell) {
                    if (!args.cell.format) {
                        args.cell.format = getFormatFromType('Time');
                    }
                    args.cell.value = dateEventArgs.updatedVal;
                }
                else {
                    args.args.sheet.rows[args.rowIndex]
                        .cells[args.colIndex].format = getFormatFromType('Time');
                    args.args.sheet.rows[args.rowIndex]
                        .cells[args.colIndex].value = dateEventArgs.updatedVal;
                }
            }
        }
    };
    DataBind.prototype.getLoadedInfo = function (sRange, eRange, range) {
        var isNotLoaded = true;
        range.info.loadedRange.forEach(function (range) {
            if (range[0] <= sRange && sRange <= range[1]) {
                if (range[0] <= eRange && eRange <= range[1]) {
                    isNotLoaded = false;
                }
                else {
                    sRange = range[1] + 1;
                }
            }
            else if (range[0] <= eRange && eRange <= range[1]) {
                eRange = range[0] - 1;
            }
        });
        return { isNotLoaded: isNotLoaded, unloadedRange: [sRange, eRange] };
    };
    DataBind.prototype.getMaxCount = function (range) {
        if (range.query) {
            var query = range.query.queries;
            for (var i = 0; i < query.length; i++) {
                if (query[i].fn === 'onTake') {
                    return Math.min(query[i].e.nos, range.info.count || query[i].e.nos);
                }
            }
        }
        return range.info.count;
    };
    DataBind.prototype.initRangeInfo = function (range) {
        if (!range.info) {
            range.info = { loadedRange: [] };
        }
    };
    /**
     * Remove old data from sheet.
     *
     * @param {Object} args - Specify the args.
     * @param {Workbook} args.oldProp - Specify the oldProp.
     * @param {string} args.sheetIdx - Specify the sheetIdx.
     * @param {string} args.rangeIdx - Specify the rangeIdx.
     * @param {boolean} args.isLastRange - Specify the isLastRange.
     * @param {Object[]} args.changedData - Specify the changedData.
     * @returns {void} - Remove old data from sheet.
     */
    DataBind.prototype.dataSourceChangedHandler = function (args) {
        var _this = this;
        var row;
        var sheet = this.parent.sheets[args.sheetIdx];
        var range = sheet.ranges[args.rangeIdx];
        if (range && (this.checkRangeHasChanges(sheet, args.rangeIdx) || !range.info)) {
            var showFieldAsHeader_1 = range.showFieldAsHeader;
            var indexes_1 = getCellIndexes(range.startCell);
            if (range.info) {
                range.info.loadedRange.forEach(function (loadedRange) {
                    for (var i = loadedRange[0]; i <= loadedRange[1] && (i < range.info.count + (showFieldAsHeader_1 ? 1 : 0)); i++) {
                        row = sheet.rows[i + indexes_1[0]];
                        if (row) {
                            for (var j = indexes_1[1]; j < indexes_1[1] + range.info.fldLen; j++) {
                                if (row.cells && row.cells[j]) {
                                    delete row.cells[j];
                                }
                            }
                        }
                    }
                });
                range.info = null;
            }
            var viewport = this.parent.viewport;
            var refreshRange_1 = [viewport.topIndex, viewport.leftIndex, viewport.bottomIndex, viewport.rightIndex];
            var eventArgs = {
                sheet: sheet, indexes: refreshRange_1, dataSourceChange: true, promise: 
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                new Promise(function (resolve, reject) { resolve((function () { })()); })
            };
            this.updateSheetFromDataSourceHandler(eventArgs);
            eventArgs.promise.then(function () {
                _this.parent.trigger('dataSourceChanged', { data: args.changedData, action: 'dataSourceChanged', rangeIndex: Number(args.rangeIdx), sheetIndex: Number(args.sheetIdx) });
                _this.parent.notify('updateView', { indexes: refreshRange_1, checkWrap: true });
            });
        }
    };
    DataBind.prototype.checkRangeHasChanges = function (sheet, rangeIdx) {
        if (this.parent.isAngular) {
            var changedRangeIdx = 'changedRangeIdx';
            if (sheet[changedRangeIdx] === parseInt(rangeIdx, 10)) {
                delete sheet[changedRangeIdx];
                return true;
            }
            return false;
        }
        else {
            return true;
        }
    };
    /**
     * Triggers dataSourceChange event when cell data changes
     *
     * @param {Object} args - Specify the args.
     * @param {number} args.sheetIdx - Specify the sheetIdx.
     * @param {number} args.activeSheetIndex - Specify the activeSheetIndex.
     * @param {string} args.address - Specify the address.
     * @param {number} args.startIndex - Specify the startIndex.
     * @param {number} args.endIndex - Specify the endIndex.
     * @param {string} args.modelType - Specify the modelType.
     * @param {RowModel[]} args.deletedModel - Specify the deletedModel.
     * @param {RowModel[]} args.model - Specify the model.
     * @param {string} args.insertType - Specify the insertType.
     * @param {number} args.index - Specify the index.
     * @param {string} args.type - Specify the type.
     * @param {string} args.pastedRange - Specify the pasted range.
     * @param {string} args.range - Specify the range.
     * @param {boolean}  args.isUndoRedo - Specify the boolean value.
     * @param {string} args.requestType - Specify the requestType.
     * @param {Object[]} args.data - Specify the data.
     * @param {boolean}  args.isDataRequest - Specify the isDataRequest.
     * @param {boolean} args.isMethod - Specify the isMethod.
     * @returns {void} - Triggers dataSourceChange event when cell data changes
     */
    DataBind.prototype.dataChangedHandler = function (args) {
        var _this = this;
        var changedData = [{}];
        var action;
        var cell;
        var dataRange;
        var startCell;
        var inRange;
        var inRangeCut;
        var deleteRowDetails;
        var sheetIdx = args.sheetIdx === undefined ? this.parent.activeSheetIndex : args.sheetIdx;
        var sheet = this.parent.sheets[sheetIdx];
        var cellIndices;
        var cutIndices;
        sheet.ranges.forEach(function (range, idx) {
            if (range.dataSource) {
                var isNewRow = void 0;
                startCell = getCellIndexes(range.startCell);
                dataRange = startCell.concat([startCell[0] + range.info.count + (range.showFieldAsHeader ? 0 : -1),
                    startCell[1] + range.info.fldLen - 1]);
                if (args.modelType === 'Row' || args.modelType === 'Column') {
                    if (args.modelType === 'Column') {
                        if (args.insertType) {
                            inRange = dataRange[1] < args.index && dataRange[3] >= args.index;
                            cellIndices = [args.index];
                            if (!inRange) {
                                if ((dataRange[3] + 1 === args.index && args.insertType === 'after')) {
                                    args.model.forEach(function () {
                                        range.info.flds.splice(args.index - startCell[1], 0, '');
                                    });
                                    range.info.fldLen += args.model.length;
                                }
                                else if (dataRange[1] >= args.index) {
                                    range.startCell = getCellAddress(startCell[0], startCell[1] + args.model.length);
                                }
                            }
                            else {
                                args.model.forEach(function () {
                                    range.info.flds.splice(args.index - startCell[1], 0, '');
                                });
                                range.info.fldLen += args.model.length;
                            }
                        }
                        else {
                            inRange = dataRange[1] <= args.startIndex && dataRange[3] >= args.startIndex;
                            if (inRange) {
                                for (var i = args.startIndex; i <= args.endIndex; i++) {
                                    if (i <= dataRange[3]) {
                                        range.info.flds.splice(args.startIndex, 1);
                                        range.info.fldLen -= 1;
                                    }
                                }
                            }
                        }
                        return;
                    }
                    else {
                        if (args.insertType) {
                            inRange = ((!range.showFieldAsHeader && (args.insertType === 'above' || args.isMethod)) ? dataRange[0] <=
                                args.index : dataRange[0] < args.index) && dataRange[2] >= args.index;
                            cellIndices = [args.index];
                            if (!inRange) {
                                if ((dataRange[2] + 1 === args.index && args.insertType === 'below')) {
                                    isNewRow = true;
                                    range.info.count += args.model.length;
                                }
                                else if (dataRange[0] >= args.index) {
                                    range.startCell = getCellAddress(startCell[0] + args.model.length, startCell[1]);
                                }
                            }
                            else {
                                isNewRow = true;
                                range.info.count += args.model.length;
                            }
                            if (args.isMethod) {
                                return;
                            }
                        }
                        else {
                            inRange = dataRange[0] <= args.startIndex && dataRange[2] >= args.startIndex;
                            if (args.isDataRequest) {
                                cellIndices = [args.startIndex, dataRange[1], args.startIndex, dataRange[1]];
                            }
                            else {
                                action = 'delete';
                            }
                        }
                    }
                }
                else {
                    cellIndices = getRangeIndexes(args.requestType && args.requestType.toLowerCase().includes('paste') ? args.pastedRange.split('!')[1] :
                        args.sheetIdx > -1 ? args.address : (args.address || args.range || args.fillRange).split('!')[1]);
                    var dataRangeIndices = [range.showFieldAsHeader ? dataRange[0] + 1 : dataRange[0]].concat(dataRange.slice(1, 4));
                    if (range.showFieldAsHeader && cellIndices[0] === startCell[0]) {
                        for (var i = cellIndices[1]; i <= cellIndices[3]; i++) {
                            if (i >= dataRangeIndices[1] && i <= dataRangeIndices[3]) {
                                range.info.flds[i - startCell[1]] = getCell(startCell[0], i, sheet, false, true).value || '';
                            }
                        }
                    }
                    inRange = isInRange(dataRangeIndices, cellIndices, true);
                    if (args.requestType === 'paste' && args.copiedInfo.isCut) {
                        cutIndices = [].slice.call(args.copiedInfo.range);
                        if (range.showFieldAsHeader && cutIndices[0] === startCell[0]) {
                            for (var i = cutIndices[1]; i <= cutIndices[3]; i++) {
                                if (i >= dataRangeIndices[1] && i <= dataRangeIndices[3]) {
                                    range.info.flds[i - startCell[1]] = '';
                                }
                            }
                            inRange = false;
                        }
                        inRangeCut = isInRange(dataRangeIndices, cutIndices, true);
                    }
                }
                if (inRange || isNewRow || inRangeCut) {
                    if (args.modelType === 'Row' && !args.insertType && !args.isDataRequest) {
                        args.deletedModel.forEach(function (row, rowIdx) {
                            changedData[rowIdx] = {};
                            range.info.flds.forEach(function (fld, idx) {
                                if (row.cells) {
                                    cell = row.cells[startCell[1] + idx];
                                    changedData[rowIdx][fld] = _this.getFormattedValue(cell);
                                }
                                else {
                                    changedData[rowIdx][fld] = null;
                                }
                            });
                            range.info.count -= 1;
                        });
                        if (args.isMethod) {
                            return;
                        }
                        deleteRowDetails = { count: args.deletedModel.length, index: args.endIndex };
                    }
                    else {
                        action = isNewRow ? 'add' : 'edit';
                        var addedCutData_1 = 0;
                        if (inRangeCut) {
                            addedCutData_1 = cutIndices[2] - cutIndices[0] + 1;
                            var _loop_2 = function (i) {
                                changedData[i] = {};
                                range.info.flds.forEach(function (fld, idx) {
                                    if (fld) {
                                        cell = getCell(cutIndices[0] + i, startCell[1] + idx, sheet);
                                        changedData[i][fld] = _this.getFormattedValue(cell);
                                    }
                                });
                            };
                            for (var i = 0; i < addedCutData_1; i++) {
                                _loop_2(i);
                            }
                        }
                        if (inRange || isNewRow) {
                            var filterCheck = !args.isDataRequest && !inRangeCut && !isNewRow && !args.skipFilterCheck;
                            var _loop_3 = function (i, count) {
                                if (filterCheck && (getRow(sheet, cellIndices[0] + i) || {}).isFiltered) {
                                    return out_count_1 = count, "continue";
                                }
                                changedData[count + addedCutData_1] = {};
                                range.info.flds.forEach(function (fld, idx) {
                                    if (fld) {
                                        cell = getCell(cellIndices[0] + i, startCell[1] + idx, sheet);
                                        changedData[count + addedCutData_1][fld] = _this.getFormattedValue(cell);
                                    }
                                });
                                count++;
                                out_count_1 = count;
                            };
                            var out_count_1;
                            for (var i = 0, count = 0; i < (isNewRow ? args.model.length : (cellIndices[2] - cellIndices[0])
                                + 1 || 1); i++) {
                                _loop_3(i, count);
                                count = out_count_1;
                            }
                        }
                    }
                    if (args.isDataRequest) {
                        args.data = changedData;
                    }
                    else {
                        _this.parent.trigger('dataSourceChanged', { data: changedData, action: action, rangeIndex: idx, sheetIndex: sheetIdx });
                    }
                }
                else if (deleteRowDetails && deleteRowDetails.count && dataRange[0] > deleteRowDetails.index) {
                    range.startCell = getCellAddress(startCell[0] - deleteRowDetails.count, startCell[1]);
                }
            }
        });
    };
    DataBind.prototype.getFormattedValue = function (cell) {
        var value = this.parent.getDisplayText(cell);
        if (value === '') {
            return null;
        }
        else if (cell && !cell.format && typeof cell.value === 'number') {
            return cell.value;
        }
        return value;
    };
    DataBind.prototype.triggerDataChangeHandler = function (args) {
        var dataChangingActions = ['insert', 'delete', 'edit', 'cellDelete', 'cellSave', 'autofill', 'clipboard', 'clear'];
        var triggerDataChange = true;
        if ((args.action === 'delete' || args.action === 'insert') && ['Sheet'].indexOf(args.eventArgs.modelType) > -1) {
            triggerDataChange = false;
        }
        else if (args.action === 'clear' && ['Clear Formats', 'Clear Hyperlinks'].indexOf(args.eventArgs.type) > -1) {
            triggerDataChange = false;
        }
        else if (args.action === 'clipboard' && args.eventArgs.requestType === 'Formats') {
            triggerDataChange = false;
        }
        if (args.isUndo && (args.action === 'delete' || args.action === 'insert')) {
            if (args.action === 'delete') {
                args.eventArgs.index = args.eventArgs.startIndex;
                args.eventArgs.model = args.eventArgs.deletedModel;
                args.eventArgs.insertType = 'below';
            }
            else {
                args.eventArgs.startIndex = args.eventArgs.index;
                args.eventArgs.endIndex = args.eventArgs.index + args.eventArgs.model.length - 1;
                args.eventArgs.deletedModel = args.eventArgs.model;
                delete args.eventArgs.insertType;
            }
        }
        if (triggerDataChange && dataChangingActions.indexOf(args.action) > -1) {
            this.parent.notify(dataChanged, args.eventArgs);
        }
    };
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} - Get the module name.
     * @private
     */
    DataBind.prototype.getModuleName = function () {
        return 'dataBind';
    };
    /**
     * Destroys the Data binding module.
     *
     * @returns {void} - Destroys the Data binding module.
     */
    DataBind.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
        this.requestedInfo = [];
    };
    return DataBind;
}());

/**
 * Specifies spreadsheet internal events
 */
/** @hidden */
var ribbon = 'ribbon';
/** @hidden */
var formulaBar = 'formulaBar';
/** @hidden */
var sheetTabs = 'sheetTabs';
/** @hidden */
var refreshSheetTabs = 'refreshSheetTabs';
/** @hidden */
var isFormulaBarEdit = 'isFormulaBarEdit';
/** @hidden */
var initialLoad = 'initialLoad';
/** @hidden */
var contentLoaded = 'contentLoaded';
/** @hidden */
var mouseDown = 'mouseDown';
/** @hidden */
var spreadsheetDestroyed = 'spreadsheetDestroyed';
/** @hidden */
var editOperation = 'editOperation';
/** @hidden */
var formulaOperation = 'formulaOperation';
/** @hidden */
var formulaBarOperation = 'formulaBarOperation';
/** @hidden */
var click = 'click';
/** @hidden */
var keyUp = 'keyUp';
/** @hidden */
var keyDown = 'keyDown';
/** @hidden */
var formulaKeyUp = 'formulaKeyUp';
/** @hidden */
var formulaBarUpdate = 'formulaBarUpdate';
/** @hidden */
var onVerticalScroll = 'verticalScroll';
/** @hidden */
var onHorizontalScroll = 'horizontalScroll';
/** @hidden */
var beforeContentLoaded = 'beforeContentLoaded';
/** @hidden */
var beforeVirtualContentLoaded = 'beforeVirtualContentLoaded';
/** @hidden */
var virtualContentLoaded = 'virtualContentLoaded';
/** @hidden */
var contextMenuOpen = 'contextMenuOpen';
/** @hidden */
var cellNavigate = 'cellNavigate';
/** @hidden */
var mouseUpAfterSelection = 'mouseUpAfterSelection';
/** @hidden */
var cMenuBeforeOpen = 'contextmenuBeforeOpen';
/** @hidden */
var insertSheetTab = 'insertSheetTab';
/** @hidden */
var removeSheetTab = 'removeSheetTab';
/** @hidden */
var renameSheetTab = 'renameSheetTab';
/** @hidden */
var ribbonClick = 'ribboClick';
/** @hidden */
var refreshRibbon = 'ribbonRefresh';
/** @hidden */
var enableToolbarItems = 'enableToolbarItems';
/** @hidden */
var tabSwitch = 'tabSwitch';
/** @hidden */
var selectRange = 'selectRange';
/** @hidden */
var cut = 'cut';
/** @hidden */
var copy = 'copy';
/** @hidden */
var paste = 'paste';
/** @hidden */
var clearCopy = 'clearCopy';
/** @hidden */
var dataBound = 'dataBound';
/** @hidden */
var beforeDataBound = 'beforeDataBound';
/** @hidden */
var addContextMenuItems = 'addContextMenuItems';
/** @hidden */
var removeContextMenuItems = 'removeContextMenuItems';
/** @hidden */
var enableContextMenuItems = 'enableContextMenuItems';
/** @hidden */
var enableFileMenuItems = 'enableFileMenuItems';
/** @hidden */
var hideFileMenuItems = 'hideFileMenuItems';
/** @hidden */
var addFileMenuItems = 'addFileMenuItems';
/** @hidden */
var hideRibbonTabs = 'hideRibbonTabs';
/** @hidden */
var enableRibbonTabs = 'enableRibbonTabs';
/** @hidden */
var addRibbonTabs = 'addRibbonTabs';
/** @hidden */
var addToolbarItems = 'addToolbarItems';
/** @hidden */
var hideToolbarItems = 'hideToolbarItems';
/** @hidden */
var beforeRibbonCreate = 'beforeRibbonCreate';
/** @hidden */
var rowHeightChanged = 'rowHeightChanged';
/** @hidden */
var colWidthChanged = 'colWidthChanged';
/** @hidden */
var onContentScroll = 'onContentScroll';
/** @hidden */
var deInitProperties = 'deInitProperties';
/** @hidden */
var activeSheetChanged = 'activeSheetChanged';
/** @hidden */
var renameSheet = 'renameSheet';
/** @hidden */
var initiateCustomSort = 'initiateCustomSort';
/** @hidden */
var applySort = 'applySort';
/** @hidden */
var collaborativeUpdate = 'collaborativeUpdate';
/** @hidden */
var autoFit = 'autoFitRowsColumns';
/** @hidden */
var updateToggleItem = 'updateToggleItem';
/** @hidden */
var initiateHyperlink = 'initiateHyperlink';
/** @hidden */
var editHyperlink = 'editHyperlink';
/** @hidden */
var openHyperlink = 'openHyperlink';
/** @hidden */
var removeHyperlink = 'removeHyperlink';
/** @hidden */
var createHyperlinkElement = 'createHyperlinkElement';
/** @hidden */
var sheetNameUpdate = 'sheetNameUpdate';
/** @hidden */
var hideSheet = 'hideSheet';
/** @hidden */
var performUndoRedo = 'performUndoRedo';
/** @hidden */
var updateUndoRedoCollection = 'updateUndoRedoCollection';
/** @hidden */
var setActionData = 'setActionData';
/** @hidden */
var getBeforeActionData = 'getBeforeActionData';
/** @hidden */
var clearUndoRedoCollection = 'clearUndoRedoCollection';
/** @hidden */
var initiateFilterUI = 'initiateFilterUI';
/** @hidden */
var renderFilterCell = 'renderFilterCell';
/** @hidden */
var reapplyFilter = 'reapplyFilter';
/** @hidden */
var filterByCellValue = 'filterByCellValue';
/** @hidden */
var clearFilter = 'clearFilter';
/** @hidden */
var getFilteredColumn = 'getFilteredColumn';
/** @hidden */
var completeAction = 'actionComplete';
/** @hidden */
var beginAction = 'actionBegin';
/** @hidden */
var filterCellKeyDown = 'filterCellKeyDown';
/** @hidden */
var getFilterRange = 'getFilterRange';
/** @hidden */
var setAutoFit = 'setAutoFit';
/** @hidden */
var refreshFormulaDatasource = 'refreshFormulaDatasource';
/** @hidden */
var setScrollEvent = 'setScrollEvent';
/** @hidden */
var initiateDataValidation = 'initiatedatavalidation';
/** @hidden */
var validationError = 'validationError';
/** @hidden */
var startEdit = 'startEdit';
/** @hidden */
var invalidData = 'invalidData';
/** @hidden */
var clearInvalid = 'clearInvalid';
/** @hidden */
var protectSheet = 'protectSheet';
/** @hidden */
var applyProtect = 'applyProtect';
/** @hidden */
var unprotectSheet = 'unprotectSheet';
/** @hidden */
var protectCellFormat = 'protectCellFormat';
/** @hidden */
var gotoDlg = 'renderGotoDlgt';
/** @hidden */
var findDlg = 'renderFindDlg';
/** @hidden */
var findHandler = 'findHandler';
/** @hidden */
var replace = 'replaceHandler';
/** @hidden */
var created = 'created';
/** @hidden */
var editAlert = 'editAlert';
/** @hidden */
var setUndoRedo = 'setUndoRedo';
/** @hidden */
var enableFormulaInput = 'enableFormulaInput';
/** @hidden */
var protectSelection = 'protectSelection';
/** @hidden */
var hiddenMerge = 'hiddenMerge';
/** @hidden */
var checkPrevMerge = 'checkPrevMerge';
/** @hidden */
var checkMerge = 'checkMerge';
/** @hidden */
var removeDataValidation = 'removeDataValidation';
/** @hidden */
var showAggregate = 'showAggregate';
/** @hidden */
var initiateConditionalFormat = 'initiateConditionalFormat';
/** @hidden */
var setCF = 'setCF';
/** @hidden */
var clearViewer = 'clearViewer';
/** @hidden */
var initiateFormulaReference = 'initiateFormulaReference';
/** @hidden */
var initiateCur = 'initiateCur';
/** @hidden */
var clearCellRef = 'clearCellRef';
/** @hidden */
var editValue = 'editValue';
/** @hidden */
var addressHandle = 'addressHandle';
/** @hidden */
var initiateEdit = 'initiateEdit';
/** @hidden */
var forRefSelRender = 'forRefSelRender';
/** @hidden */
var blankWorkbook = 'blankWorkbook';
/** @hidden */
var insertImage = 'insertImage';
/** @hidden */
var refreshImgElem = 'refreshImgElem';
/** @hidden */
var refreshImgCellObj = 'refreshImgCellObj';
/** @hidden */
var getRowIdxFromClientY = 'getRowIdxFromClientY';
/** @hidden */
var getColIdxFromClientX = 'getColIdxFromClientX';
/** @hidden */
var createImageElement = 'createImageElement';
/** @hidden */
var deleteImage = 'deleteImage';
/** @hidden */
var deleteChart = 'deleteChart';
/** @hidden */
var refreshChartCellObj = 'refreshChartCellObj';
/** @hidden */
var refreshImagePosition = 'refreshImagePosition';
/** @hidden */
var updateTableWidth = 'updateTableWidth';
/** @hidden */
var focusBorder = 'focusBorder';
/** @hidden */
var clearChartBorder = 'clearChartBorder';
/** @hidden */
var insertChart = 'insertChart';
/** @hidden */
var chartRangeSelection = 'chartRangeSelection';
/** @hidden */
var insertDesignChart = 'insertDesignChart';
/** @hidden */
var removeDesignChart = 'removeDesignChart';
/** @hidden */
var chartDesignTab = 'chartDesignTab';
/** @hidden */
var addChartEle = 'addChartEle';
/** @hidden */
var isReact = 'isReact';
/** @hidden */
var renderReactTemplates = 'renderReactTemplates';
/** @hidden */
var clearTemplate = 'clearTemplate';
/** @hidden */
var protectWorkbook = 'protectWorkbook';
/** @hidden */
var unProtectWorkbook = 'unProtectWorkbook';
/** @hidden */
var getPassWord = 'getPassWord';
/** @hidden */
var importProtectWorkbook = 'importProtectWorkbook';
/** @hidden */
var selectionStatus = 'selectionStatus';
/** @hidden */
var freeze = 'freeze';
/** @hidden */
var overlayEleSize = 'overlayEleSize';
/** @hidden */
var updateScroll = 'updateScroll';
/** @hidden */
var positionAutoFillElement = 'positionAutoFillElement';
/** @hidden */
var hideAutoFillOptions = 'hideAutoFillOptions';
/** @hidden */
var performAutoFill = 'performAutoFill';
/** @hidden */
var selectAutoFillRange = 'selectAutoFillRange';
/** @hidden */
var autoFill = 'autoFill';
/** @hidden */
var fillRange = 'fillRange';
/** @hidden */
var UnProtectWorksheet = 'UnProtectWorksheet';
/** @hidden */
var hideAutoFillElement = 'hideAutoFillElement';
/** @hidden */
var unProtectSheetPassword = 'unProtectSheetPassword';
/** @hidden */
var updateTranslate = 'updateTranslate';
/** @hidden */
var getUpdatedScrollPosition = 'getUpdatedScrollPosition';
/** @hidden */
var updateScrollValue = 'updateScrollValue';

/**
 * Open properties.
 */
var WorkbookOpen = /** @__PURE__ @class */ (function () {
    function WorkbookOpen(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To open the excel file stream or excel url into the spreadsheet.
     *
     * @param {OpenOptions} options - Options to open a excel file.
     * @returns {void} - To open the excel file stream or excel url into the spreadsheet.
     */
    WorkbookOpen.prototype.open = function (options) {
        var _this = this;
        if (!this.parent.allowOpen) {
            return;
        }
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        if (options.jsonObject) {
            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
            this.fetchSuccess(options.jsonObject, null, true);
            return;
        }
        var formData = new FormData();
        if (options.file) {
            formData.append('file', options.file);
        }
        else if (options.sheetIndex >= 0) {
            formData.append('sheetPassword', options.sheetPassword);
            formData.append('sheetIndex', options.sheetIndex.toString());
        }
        else {
            this.parent.isOpen = false;
            return;
        }
        var args = { passWord: '' };
        if (options.password && options.password.length) {
            args.passWord = options.password;
        }
        if (args.passWord && args.passWord.length) {
            options.password = args.passWord;
        }
        if (options.password) {
            formData.append('password', options.password);
        }
        var eventArgs = {
            file: options.file || null,
            cancel: false,
            requestData: {
                method: 'POST',
                body: formData
            },
            password: args.passWord
        };
        if (isNullOrUndefined(options.sheetPassword)) {
            this.parent.trigger('beforeOpen', eventArgs);
            this.parent.notify(beginAction, { eventArgs: eventArgs, action: 'beforeOpen' });
        }
        if (eventArgs.cancel) {
            this.parent.isOpen = false;
            return;
        }
        fetch(this.parent.openUrl, eventArgs.requestData)
            .then(function (response) {
            if (response.ok) {
                return response.json();
            }
            else {
                return Promise.reject({
                    status: response.status,
                    statusText: response.statusText,
                    url: response.url
                });
            }
        })
            .then(function (data) { return _this.fetchSuccess(data, eventArgs); })
            .catch(function (error) { return _this.fetchFailure(error); });
    };
    WorkbookOpen.prototype.fetchFailure = function (error) {
        if (isUndefined(error.status) && isUndefined(error.statusText)) {
            error.statusText = 'Improper response';
        }
        this.parent.notify(openFailure, error);
        this.parent.isOpen = false;
    };
    WorkbookOpen.prototype.fetchSuccess = function (data, eventArgs, isOpenFromJson) {
        var openError = ['UnsupportedFile', 'InvalidUrl', 'NeedPassword', 'InCorrectPassword', 'InCorrectSheetPassword', 'CorrectSheetPassword'];
        var workbookData = data;
        workbookData = (typeof data === 'string') ? JSON.parse(data) : data;
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        var impData = workbookData.Workbook;
        if (openError.indexOf(impData) > -1) {
            this.parent.notify(openSuccess, { context: this, data: impData, eventArgs: eventArgs, isOpenFromJson: isOpenFromJson });
            return;
        }
        this.updateModel(impData, isOpenFromJson);
        this.parent.notify(openSuccess, { context: this, data: impData, isOpenFromJson: isOpenFromJson });
        this.parent.isOpen = false;
        if (eventArgs && eventArgs.password && eventArgs.password.length > 0) {
            if (this.parent.showSheetTabs) {
                this.parent.element.querySelector('.e-add-sheet-tab').removeAttribute('disabled');
                this.parent.element.querySelector('.e-add-sheet-tab').classList.remove('e-disabled');
            }
            this.parent.password = '';
        }
    };
    WorkbookOpen.prototype.updateModel = function (workbookModel, isOpenFromJson) {
        this.parent.notify(workbookFormulaOperation, { action: 'unRegisterSheet' });
        this.setSelectAllRange(workbookModel.sheets, isOpenFromJson);
        this.parent.sheetNameCount = 1;
        this.parent.sheets = [];
        this.parent.notify(sheetsDestroyed, {});
        workbookModel.activeSheetIndex = workbookModel.activeSheetIndex || 0;
        this.parent.setProperties({
            'sheets': workbookModel.sheets,
            'activeSheetIndex': workbookModel.activeSheetIndex,
            'definedNames': workbookModel.definedNames || [],
            'filterCollection': workbookModel.filterCollection || [],
            'sortCollection': workbookModel.sortCollection || []
        }, true);
        initSheet(this.parent);
        this.parent.notify(sheetCreated, null);
        this.parent.notify(workbookFormulaOperation, { action: 'registerSheet', isImport: true });
        this.parent.notify(workbookFormulaOperation, { action: 'initiateDefinedNames' });
        this.parent.notify(protectSheetWorkBook, null);
    };
    WorkbookOpen.prototype.setSelectAllRange = function (sheets, isOpenFromJson) {
        var _this = this;
        var curSheet;
        var curRange;
        sheets.forEach(function (sheet) {
            if (sheet.selectedRange) {
                var selectedIndex = getRangeIndexes(sheet.selectedRange);
                var rowCount = (isUndefined(sheet.rowCount) ? 100 : sheet.rowCount) - 1;
                var colCount = (isUndefined(sheet.colCount) ? 100 : sheet.colCount) - 1;
                if (selectedIndex[2] === 65535) {
                    selectedIndex[2] = rowCount;
                }
                if (selectedIndex[3] === 255) {
                    selectedIndex[3] = colCount;
                }
                if (selectedIndex[0] === 65535) {
                    selectedIndex[0] = rowCount;
                }
                if (selectedIndex[1] === 255) {
                    selectedIndex[1] = colCount;
                }
                sheet.selectedRange = getRangeAddress(selectedIndex);
            }
            // eslint-disable-next-line
            if (isOpenFromJson && _this.parent.isAngular) {
                for (var i = 0; i < _this.parent.sheets.length; i++) {
                    curSheet = _this.parent.sheets[i];
                    if (sheet.name === curSheet.name) {
                        if (sheet.ranges) {
                            sheet.ranges.forEach(function (range, index) {
                                curRange = curSheet.ranges[index];
                                if (curRange && curRange.template) {
                                    range.template = curRange.template;
                                }
                            });
                        }
                        break;
                    }
                }
            }
        });
    };
    /**
     * Adding event listener for workbook open.
     *
     * @returns {void} - Adding event listener for workbook open.
     */
    WorkbookOpen.prototype.addEventListener = function () {
        this.parent.on(workbookOpen, this.open.bind(this));
    };
    /**
     * Removing event listener workbook open.
     *
     * @returns {void} - removing event listener workbook open.
     */
    WorkbookOpen.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(workbookOpen, this.open.bind(this));
        }
    };
    /**
     * To Remove the event listeners
     *
     * @returns {void} - To Remove the event listeners
     */
    WorkbookOpen.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * Get the workbook open module name.
     *
     * @returns {string} - Get the module name.
     */
    WorkbookOpen.prototype.getModuleName = function () {
        return 'workbookOpen';
    };
    return WorkbookOpen;
}());

/**
 * @hidden
 * The `SaveWorker` module is used to perform save functionality with Web Worker.
 */
var SaveWorker = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for SaveWorker module in Workbook library.
     *
     * @private
     * @param {Workbook} parent - Specifies the workbook.
     */
    function SaveWorker(parent) {
        this.parent = parent;
    }
    /**
     * Process sheet.
     *
     * @param {string} sheet - specify the sheet
     * @param {number} sheetIndex - specify the sheetIndex
     * @returns {Object} - Process sheet.
     * @hidden
     */
    SaveWorker.prototype.processSheet = function (sheet, sheetIndex) {
        var parsedSheet = JSON.parse(sheet, function (key, value) {
            //Remove empty properties
            if ((Array.isArray(value) || typeof value === 'string') && !value.length) {
                return undefined;
            }
            return value;
        });
        return [sheetIndex, parsedSheet];
    };
    /**
     * Process save action.
     *
     * @param {Object} saveJSON - specify the object
     * @param {SaveOptions | Object} saveSettings - specify the saveSettings
     * @param {Object} customParams - specify the customParams
     * @param {Object} pdfLayoutSettings - specify the pdfLayoutSettings
     * @returns {void} - Process save action.
     * @hidden
     */
    SaveWorker.prototype.processSave = function (saveJSON, saveSettings, customParams, pdfLayoutSettings) {
        var formData = new FormData();
        var i;
        var keys = Object.keys(saveSettings);
        formData.append('JSONData', JSON.stringify(saveJSON));
        for (i = 0; i < keys.length; i++) {
            formData.append(keys[i], saveSettings[keys[i]]);
        }
        keys = Object.keys(customParams);
        for (i = 0; i < keys.length; i++) {
            formData.append(keys[i], customParams[keys[i]]);
        }
        formData.append('pdfLayoutSettings', JSON.stringify(pdfLayoutSettings));
        fetch(saveSettings.url, { method: 'POST', body: formData })
            .then(function (response) {
            if (response.ok) {
                return response.blob();
            }
            else {
                return Promise.reject({
                    message: response.statusText
                });
            }
        })
            .then(function (data) {
            new Promise(function (resolve) {
                var reader = new FileReader();
                reader.onload = function () {
                    var result = reader.result.toString();
                    if (result.indexOf('data:text/plain;base64,') > -1 || result.indexOf('data:text/html;base64,') > -1 ||
                        result.indexOf('data:application/json;base64,') > -1) {
                        var str = void 0;
                        result = result.replace('data:text/plain;base64,', '');
                        result = result.replace('data:text/html;base64,', '');
                        if (result.indexOf('data:application/json;base64,') > -1) {
                            result = result.replace('data:application/json;base64,', '');
                            str = atob(result).split('.');
                        }
                        else {
                            str = atob(result).split(/(\r\n|\n|\r)/gm);
                        }
                        if (str.length) {
                            var text = str[0].length > 1 && str[0][0] === '"' ? str[0].split('"')[1] + '.' : str[0];
                            postMessage({ dialog: text });
                        }
                    }
                    else {
                        postMessage(data);
                    }
                    resolve(reader.result);
                };
                reader.readAsDataURL(data);
            });
        })
            .catch(function (error) {
            postMessage({ error: error.message });
        });
        // try {
        //     let httpRequest: XMLHttpRequest = new XMLHttpRequest();
        //     let formData: FormData = new FormData();
        //     let i: number;
        //     let keys: string[] = Object.keys(saveSettings);
        //     httpRequest.onreadystatechange = (event: Event) => {
        //         if (httpRequest.readyState === 4 && httpRequest.status === 200) {
        //             (postMessage as Function)(httpRequest.response);
        //         }
        //     };
        //     httpRequest.onerror = (event: Event) => {
        //         (postMessage as Function)(event);
        //     };
        //     formData.append('JSONData', JSON.stringify(saveJSON));
        //     for (i = 0; i < keys.length; i++) {
        //         formData.append(keys[i], (<{ [key: string]: string }>saveSettings)[keys[i]]);
        //     }
        //     httpRequest.open('POST', saveSettings.saveUrl, false);
        //     httpRequest.send(formData);
        // } catch (e) {
        //     (postMessage as Function)({ error: e.message });
        // }
    };
    return SaveWorker;
}());

var __extends$2 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @hidden
 * The `WorkbookSave` module is used to handle the save action in Workbook library.
 */
var WorkbookSave = /** @__PURE__ @class */ (function (_super) {
    __extends$2(WorkbookSave, _super);
    /**
     * Constructor for WorkbookSave module in Workbook library.
     *
     * @private
     * @param {Workbook} parent - Specifies the workbook.
     */
    function WorkbookSave(parent) {
        var _this = _super.call(this, parent) || this;
        _this.isProcessCompleted = false;
        _this.saveJSON = {};
        _this.isFullPost = false;
        _this.needBlobData = false;
        _this.customParams = null;
        _this.pdfLayoutSettings = { fitSheetOnOnePage: false };
        _this.addEventListener();
        return _this;
    }
    /**
     * Get the module name.
     *
     * @returns {string} - To Get the module name.
     * @private
     */
    WorkbookSave.prototype.getModuleName = function () {
        return 'workbookSave';
    };
    /**
     * To destroy the WorkbookSave module.
     *
     * @returns {void} - To destroy the WorkbookSave module.
     * @hidden
     */
    WorkbookSave.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * @hidden
     * @returns {void} - add Event Listener
     */
    WorkbookSave.prototype.addEventListener = function () {
        this.parent.on(beginSave, this.initiateSave, this);
    };
    /**
     * @hidden
     * @returns {void} - remove Event Listener.
     */
    WorkbookSave.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(beginSave, this.initiateSave);
        }
    };
    /**
     * Initiate save process.
     *
     * @hidden
     * @param {Object} args - Specify the args.
     * @returns {void} - Initiate save process.
     */
    WorkbookSave.prototype.initiateSave = function (args) {
        var saveSettings = args.saveSettings;
        this.parent.notify(getFilteredCollection, null);
        this.saveSettings = {
            saveType: saveSettings.saveType,
            url: saveSettings.url,
            fileName: saveSettings.fileName || 'Sample'
            //passWord: saveSettings.passWord
        };
        this.isFullPost = args.isFullPost;
        this.needBlobData = args.needBlobData;
        if (this.needBlobData) {
            this.isFullPost = false;
        }
        this.customParams = args.customParams;
        this.pdfLayoutSettings = args.pdfLayoutSettings;
        this.updateBasicSettings();
        this.processSheets();
    };
    /**
     * Update save JSON with basic settings.
     *
     * @hidden
     * @returns {void} - Update save JSON with basic settings.
     */
    WorkbookSave.prototype.updateBasicSettings = function () {
        var jsonStr = this.getStringifyObject(this.parent, ['sheets', '_isScalar', 'observers', 'closed', 'isStopped', 'hasError',
            '__isAsync', 'beforeCellFormat', 'beforeCellRender', 'beforeDataBound', 'beforeOpen', 'beforeSave', 'beforeSelect',
            'beforeSort', 'cellEdit', 'cellEditing', 'cellSave', 'beforeCellSave', 'contextMenuItemSelect', 'contextMenuBeforeClose',
            'contextMenuBeforeOpen', 'created', 'dataBound', 'fileMenuItemSelect', 'fileMenuBeforeClose', 'fileMenuBeforeOpen',
            'saveComplete', 'sortComplete', 'select', 'actionBegin', 'actionComplete', 'afterHyperlinkClick', 'afterHyperlinkCreate',
            'beforeHyperlinkClick', 'beforeHyperlinkCreate', 'openComplete', 'openFailure', 'queryCellInfo', 'dialogBeforeOpen',
            'dataSourceChanged', 'beforeConditionalFormat']);
        var basicSettings = JSON.parse(jsonStr);
        var sheetCount = this.parent.sheets.length;
        if (sheetCount) {
            basicSettings.sheets = [];
        }
        this.saveJSON = basicSettings;
    };
    /**
     * Process sheets properties.
     *
     * @hidden
     * @returns {void} - Process sheets properties.
     */
    WorkbookSave.prototype.processSheets = function () {
        var i = 0;
        var sheetCount = this.parent.sheets.length;
        var skipProps = ['dataSource', 'startCell', 'query', 'showFieldAsHeader'];
        // eslint-disable-next-line
        if (this.parent.isAngular) {
            skipProps.push('template');
        }
        while (i < sheetCount) {
            executeTaskAsync(this, this.processSheet, this.updateSheet, [this.getStringifyObject(this.parent.sheets[i], skipProps), i]);
            i++;
        }
    };
    /**
     * Update processed sheet data.
     *
     * @hidden
     * @param {Object[]} data - Specifies the data.
     * @returns {void} - Update processed sheet data.
     */
    WorkbookSave.prototype.updateSheet = function (data) {
        this.saveJSON.sheets[data[0]] = data[1];
        this.isProcessCompleted = this.getSheetLength(this.saveJSON.sheets) === this.parent.sheets.length;
        if (this.isProcessCompleted) {
            this.save(this.saveSettings);
        }
    };
    WorkbookSave.prototype.getSheetLength = function (sheets) {
        var len = 0;
        sheets.forEach(function (sheet) {
            if (sheet) {
                len++;
            }
        });
        return len;
    };
    /**
     * Save process.
     *
     * @hidden
     * @param {SaveOptions} saveSettings - Specifies the save settings props.
     * @returns {void} - Save process.
     */
    WorkbookSave.prototype.save = function (saveSettings) {
        var args = { cancel: false, jsonObject: this.saveJSON };
        this.parent.notify(onSave, args);
        if (!args.cancel) {
            if (this.isFullPost) {
                this.initiateFullPostSave();
            }
            else {
                executeTaskAsync(this, { 'workerTask': this.processSave }, this.updateSaveResult, [this.saveJSON, saveSettings, this.customParams, this.pdfLayoutSettings], true);
            }
        }
        this.saveJSON = {};
    };
    /**
     * Update final save data.
     *
     * @hidden
     * @param {Object | Blob} result - specify the sve result.
     * @returns {void} - Update final save data.
     */
    WorkbookSave.prototype.updateSaveResult = function (result) {
        var args = {
            status: 'Success',
            message: '',
            url: this.saveSettings.url,
            fileName: this.saveSettings.fileName,
            saveType: this.saveSettings.saveType,
            blobData: null
        };
        if (typeof (result) === 'object' && result.error) {
            args.status = 'Failure';
            args.message = result.error.toString();
        }
        else if (typeof (result) === 'object' && result.dialog) {
            this.parent.notify(saveError, { content: result.dialog });
        }
        else {
            if (this.needBlobData) {
                args.blobData = result;
            }
            else {
                this.ClientFileDownload(result);
            }
        }
        this.parent.trigger('saveComplete', args);
        this.parent.notify(saveCompleted, args);
    };
    WorkbookSave.prototype.ClientFileDownload = function (blobData) {
        var anchor = this.parent.createElement('a', { attrs: { download: this.getFileNameWithExtension() } });
        var url = URL.createObjectURL(blobData);
        anchor.href = url;
        document.body.appendChild(anchor);
        anchor.click();
        URL.revokeObjectURL(url);
        document.body.removeChild(anchor);
    };
    WorkbookSave.prototype.initiateFullPostSave = function () {
        var keys = Object.keys(this.saveSettings);
        var i;
        var formElem = this.parent.createElement('form', { attrs: { method: 'POST', action: this.saveSettings.url } });
        var inputElem = this.parent.createElement('input', { attrs: { type: 'hidden', name: 'JSONData' } });
        inputElem.value = JSON.stringify(this.saveJSON);
        formElem.appendChild(inputElem);
        for (i = 0; i < keys.length; i++) {
            inputElem = this.parent.createElement('input', { attrs: { type: 'hidden', name: keys[i] } });
            inputElem.value = this.saveSettings[keys[i]];
            formElem.appendChild(inputElem);
        }
        keys = Object.keys(this.customParams);
        for (i = 0; i < keys.length; i++) {
            inputElem = this.parent.createElement('input', { attrs: { type: 'hidden', name: keys[i] } });
            inputElem.value = this.customParams[keys[i]];
            formElem.appendChild(inputElem);
        }
        inputElem = this.parent.createElement('input', { attrs: { type: 'hidden', name: 'pdfLayoutSettings' } });
        inputElem.value = JSON.stringify(this.pdfLayoutSettings);
        formElem.appendChild(inputElem);
        document.body.appendChild(formElem);
        formElem.submit();
        detach(formElem);
        this.parent.notify(saveCompleted, {});
    };
    /**
     * Get stringified workbook object.
     *
     * @hidden
     * @param {object} value - Specifies the value.
     * @param {string[]} skipProp - specifies the skipprop.
     * @returns {string} - Get stringified workbook object.
     */
    WorkbookSave.prototype.getStringifyObject = function (value, skipProp) {
        if (skipProp === void 0) { skipProp = []; }
        return JSON.stringify(value, function (key, value) {
            if (skipProp.indexOf(key) > -1) {
                return undefined;
            }
            else {
                // eslint-disable-next-line no-prototype-builtins
                if (value && typeof value === 'object' && value.hasOwnProperty('properties')) {
                    return value.properties;
                }
                else if (value !== null) {
                    return value;
                }
                else {
                    return undefined;
                }
            }
        });
    };
    WorkbookSave.prototype.getFileNameWithExtension = function (filename) {
        if (!filename) {
            filename = this.saveSettings.fileName;
        }
        var fileExt = this.getFileExtension();
        var idx = filename.lastIndexOf('.');
        if (idx > -1) {
            filename = filename.substr(0, idx);
        }
        return (filename + fileExt);
    };
    WorkbookSave.prototype.getFileExtension = function () {
        return ('.' + this.saveSettings.saveType.toLowerCase());
    };
    return WorkbookSave;
}(SaveWorker));

/**
 * Represent the common codes for calculate
 */
var CalculateCommon = /** @__PURE__ @class */ (function () {
    function CalculateCommon(parent) {
        this.parent = parent;
    }
    /**
     * For internal use only - Get the module name.
     *
     * @private
     * @returns {string} - Get the module name.
     */
    CalculateCommon.prototype.getModuleName = function () {
        return 'calc-common';
    };
    return CalculateCommon;
}());
/**
 * To check whether the object is undefined.
 *
 * @param {Object} value - To check the object is undefined
 * @returns {boolean} - Returns boolean value.
 * @private
 */
function isUndefined$1(value) {
    return ('undefined' === typeof value);
}
/**
 * @hidden
 * @param {string} value - specify the value
 * @returns {string} - get Skeleton Value.
 */
function getSkeletonVal(value) {
    switch (value) {
        case 'dd-MMM-yyyy':
        case 'dd MMM yyyy':
            value = 'medium';
            break;
        case 'MMM-yyyy':
        case 'MMM yyyy':
            value = 'yMMM';
            break;
        case 'MM-dd-yyyy': //short
        case 'dd-MM-yyyy':
        case 'dd-MM-yy':
        case 'MM/dd/yyyy':
        case 'dd/MM/yyyy':
        case 'dd/MM/yy':
            value = 'short';
            break;
        case 'dddd MMMM dd yyyy': //long
        case 'dd MMMM yyyy':
            value = 'long';
            break;
        case 'd MMMM yyyy':
            value = 'yMMMd';
            break;
        case 'yyyy':
            value = 'y';
            break;
        case 'h:mm':
            value = 'Hm';
            break;
        case 'h:mm tt':
            value = 'hm';
            break;
        case 'h':
            value = 'H';
            break;
        case 'h tt':
            value = 'h';
            break;
        case 'dddd':
            value = 'E';
            break;
        case 'h:mm:ss tt':
            value = 'hms';
            break;
        case 'h:mm:ss':
            value = 'Hms';
            break;
        case 'd':
            value = 'd';
            break;
        case 'd dddd':
            value = 'Ed';
            break;
        case 'M':
            value = 'M';
            break;
        case 'Md':
            value = 'Md';
            break;
        case 'MMM':
            value = 'MMM';
            break;
        case 'ddd MMM d':
            value = 'MMMEd';
            break;
        case 'MMM d':
            value = 'MMMd';
            break;
        case 'M/yyyy':
            value = 'yM';
            break;
        case 'ddd':
            value = 'E';
            break;
        default:
            value = '';
            break;
    }
    return value;
}

/**
 * Represents the getModules function.
 *
 * @param {Calculate} context - specify the context
 * @returns {ModuleDeclaration[]} - Represents the getModules function.
 */
function getModules(context) {
    var modules = [];
    if (context.includeBasicFormulas) {
        modules.push({
            member: 'basic-formulas',
            args: [context]
        });
    }
    return modules;
}

/**
 * Module loading operations
 */
var MODULE_SUFFIX = 'Module';
/**
 * To get nameSpace value from the desired object.
 *
 * @param {string} nameSpace - String value to the get the inner object
 * @param {any} obj - Object to get the inner object value.
 * @returns {any} - To get nameSpace value from the desired object.
 * @private
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function getValue$1(nameSpace, obj) {
    /* eslint-disable  @typescript-eslint/no-explicit-any */
    var value = obj;
    var splits = nameSpace.replace(/\[/g, '.').replace(/\]/g, '').split('.');
    for (var j = 0; j < splits.length && !isUndefined(value); j++) {
        value = value[splits[j]];
    }
    return value;
}
/**
 * To set value for the nameSpace in desired object.
 *
 * @param {string} nameSpace - String value to get the inner object
 * @param {any} value - Value that you need to set.
 * @param {any} obj - Object to get the inner object value.
 * @returns {void} - To set value for the nameSpace in desired object.
 * @private
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function setValue(nameSpace, value, obj) {
    var keyValues = nameSpace.replace(/\[/g, '.').replace(/\]/g, '').split('.');
    var start = obj || {};
    var fromObj = start;
    var j;
    var length = keyValues.length;
    var key;
    for (j = 0; j < length; j++) {
        key = keyValues[j];
        if (j + 1 === length) {
            fromObj[key] = value === undefined ? {} : value;
        }
        else if (isNullOrUndefined(fromObj[key])) {
            fromObj[key] = {};
        }
        fromObj = fromObj[key];
    }
    return start;
}
var ModuleLoader = /** @__PURE__ @class */ (function () {
    function ModuleLoader(parent) {
        this.loadedModules = [];
        this.parent = parent;
    }
    /**
     * Inject required modules in component library
     *
     * @param {ModuleDeclaration[]} requiredModules -  specify the required modules
     * @param {Function[]} moduleList - specify the module list
     * @returns {void} - Inject required modules in component library
     * @hidden
     */
    ModuleLoader.prototype.inject = function (requiredModules, moduleList) {
        var reqLengthVal = requiredModules.length;
        if (reqLengthVal === 0) {
            this.clean();
            return;
        }
        if (this.loadedModules.length) {
            this.clearUnusedModule(requiredModules);
        }
        for (var i = 0; i < reqLengthVal; i++) {
            var modl = requiredModules[i];
            for (var _i = 0, moduleList_1 = moduleList; _i < moduleList_1.length; _i++) {
                var module = moduleList_1[_i];
                var modName = modl.member;
                if (module.prototype.getModuleName() === modl.member && !this.isModuleLoaded(modName)) {
                    var moduleObject = this.createInstance(module, modl.args);
                    var memberName = this.getMemberName(modName);
                    if (modl.isProperty) {
                        setValue(memberName, module, this.parent);
                    }
                    else {
                        setValue(memberName, moduleObject, this.parent);
                    }
                    var loadedModule = modl;
                    loadedModule.member = memberName;
                    this.loadedModules.push(loadedModule);
                }
            }
        }
    };
    /**
     * Create Instance from constructor function with desired parameters.
     *
     * @param {Function} classFunction - Class function to which need to create instance
     * @param {any[]} params - Parameters need to passed while creating instance
     * @returns {any} - Create Instance from constructor function with desired parameters.
     * @private
     */
    ModuleLoader.prototype.createInstance = function (classFunction, params) {
        var arrayParam = params;
        arrayParam.unshift(undefined);
        return new (Function.prototype.bind.apply(classFunction, arrayParam));
    };
    /**
     * To remove the created object while control is destroyed
     *
     * @hidden
     * @returns {void} - To remove the created object while control is destroyed
     */
    ModuleLoader.prototype.clean = function () {
        for (var _i = 0, _a = this.loadedModules; _i < _a.length; _i++) {
            var modules = _a[_i];
            if (!modules.isProperty) {
                getValue$1(modules.member, this.parent).destroy();
            }
        }
        this.loadedModules = [];
    };
    /**
     * Removes all unused modules
     *
     * @param {ModuleDeclaration[]} moduleListName -  specify the module list name
     * @returns {void} - Removes all unused modules
     */
    ModuleLoader.prototype.clearUnusedModule = function (moduleListName) {
        var _this = this;
        var usedModule = moduleListName.map(function (arg) { return _this.getMemberName(arg.member); });
        var removeModule = this.loadedModules.filter(function (module) {
            return usedModule.indexOf(module.member) === -1;
        });
        for (var _i = 0, removeModule_1 = removeModule; _i < removeModule_1.length; _i++) {
            var moduleName = removeModule_1[_i];
            if (!moduleName.isProperty) {
                getValue$1(moduleName.member, this.parent).destroy();
            }
            this.loadedModules.splice(this.loadedModules.indexOf(moduleName), 1);
            this.deleteObject(this.parent, moduleName.member);
        }
    };
    /**
     * To get the name of the member.
     *
     * @param {string} name - specify the name
     * @returns {string} - To get the name of the member.
     */
    ModuleLoader.prototype.getMemberName = function (name) {
        return name[0].toLowerCase() + name.substring(1) + MODULE_SUFFIX;
    };
    /**
     * Delete an item from Object
     *
     * @param {any} obj - Object in which we need to delete an item.
     * @param {string} key - String value to the get the inner object
     * @returns {void} - Delete an item from Object
     * @private
     */
    ModuleLoader.prototype.deleteObject = function (obj, key) {
        delete obj[key];
    };
    /**
     * Returns boolean based on whether the module specified is loaded or not
     *
     * @param {string} modName - specify the name
     * @returns {boolean} - Returns boolean value
     */
    ModuleLoader.prototype.isModuleLoaded = function (modName) {
        for (var _i = 0, _a = this.loadedModules; _i < _a.length; _i++) {
            var mod = _a[_i];
            if (mod.member === this.getMemberName(modName)) {
                return true;
            }
        }
        return false;
    };
    return ModuleLoader;
}());

/* eslint-disable camelcase */
/*eslint camelcase: ["error", {properties: "never"}]*/
/**
 * @hidden
 */
var CommonErrors;
(function (CommonErrors) {
    CommonErrors[CommonErrors["na"] = 0] = "na";
    CommonErrors[CommonErrors["value"] = 1] = "value";
    CommonErrors[CommonErrors["ref"] = 2] = "ref";
    CommonErrors[CommonErrors["divzero"] = 3] = "divzero";
    CommonErrors[CommonErrors["num"] = 4] = "num";
    CommonErrors[CommonErrors["name"] = 5] = "name";
    CommonErrors[CommonErrors["null"] = 6] = "null";
})(CommonErrors || (CommonErrors = {}));
/**
 * @hidden
 */
var FormulasErrorsStrings;
(function (FormulasErrorsStrings) {
    FormulasErrorsStrings[FormulasErrorsStrings["operators_cannot_start_with_expression"] = 0] = "operators_cannot_start_with_expression";
    FormulasErrorsStrings[FormulasErrorsStrings["reservedWord_And"] = 1] = "reservedWord_And";
    FormulasErrorsStrings[FormulasErrorsStrings["reservedWord_Xor"] = 2] = "reservedWord_Xor";
    FormulasErrorsStrings[FormulasErrorsStrings["reservedWord_If"] = 3] = "reservedWord_If";
    FormulasErrorsStrings[FormulasErrorsStrings["number_contains_2_decimal_points"] = 4] = "number_contains_2_decimal_points";
    FormulasErrorsStrings[FormulasErrorsStrings["reservedWord_Else"] = 5] = "reservedWord_Else";
    FormulasErrorsStrings[FormulasErrorsStrings["reservedWord_Not"] = 6] = "reservedWord_Not";
    FormulasErrorsStrings[FormulasErrorsStrings["invalid_char_in_number"] = 7] = "invalid_char_in_number";
    FormulasErrorsStrings[FormulasErrorsStrings["invalid_characters_following_with_operator"] = 6] = "invalid_characters_following_with_operator";
    FormulasErrorsStrings[FormulasErrorsStrings["mismatched_parentheses"] = 8] = "mismatched_parentheses";
    FormulasErrorsStrings[FormulasErrorsStrings["unknown_formula_name"] = 9] = "unknown_formula_name";
    FormulasErrorsStrings[FormulasErrorsStrings["requires_a_single_argument"] = 10] = "requires_a_single_argument";
    FormulasErrorsStrings[FormulasErrorsStrings["requires_3_args"] = 11] = "requires_3_args";
    FormulasErrorsStrings[FormulasErrorsStrings["invalid_Math_argument"] = 12] = "invalid_Math_argument";
    FormulasErrorsStrings[FormulasErrorsStrings["requires_2_args"] = 13] = "requires_2_args";
    FormulasErrorsStrings[FormulasErrorsStrings["bad_index"] = 14] = "bad_index";
    FormulasErrorsStrings[FormulasErrorsStrings["too_complex"] = 15] = "too_complex";
    FormulasErrorsStrings[FormulasErrorsStrings["circular_reference"] = 16] = "circular_reference";
    FormulasErrorsStrings[FormulasErrorsStrings["missing_formula"] = 17] = "missing_formula";
    FormulasErrorsStrings[FormulasErrorsStrings["improper_formula"] = 18] = "improper_formula";
    FormulasErrorsStrings[FormulasErrorsStrings["invalid_expression"] = 19] = "invalid_expression";
    FormulasErrorsStrings[FormulasErrorsStrings["cell_empty"] = 20] = "cell_empty";
    FormulasErrorsStrings[FormulasErrorsStrings["bad_formula"] = 21] = "bad_formula";
    FormulasErrorsStrings[FormulasErrorsStrings["empty_expression"] = 22] = "empty_expression";
    FormulasErrorsStrings[FormulasErrorsStrings["virtual_mode_required"] = 23] = "virtual_mode_required";
    FormulasErrorsStrings[FormulasErrorsStrings["mismatched_tics"] = 24] = "mismatched_tics";
    FormulasErrorsStrings[FormulasErrorsStrings["wrong_number_arguments"] = 25] = "wrong_number_arguments";
    FormulasErrorsStrings[FormulasErrorsStrings["invalid_arguments"] = 26] = "invalid_arguments";
    FormulasErrorsStrings[FormulasErrorsStrings["iterations_do_not_converge"] = 27] = "iterations_do_not_converge";
    FormulasErrorsStrings[FormulasErrorsStrings["calculation_overflow"] = 29] = "calculation_overflow";
    FormulasErrorsStrings[FormulasErrorsStrings["already_registered"] = 28] = "already_registered";
    FormulasErrorsStrings[FormulasErrorsStrings["missing_sheet"] = 30] = "missing_sheet";
    FormulasErrorsStrings[FormulasErrorsStrings["cannot_parse"] = 31] = "cannot_parse";
    FormulasErrorsStrings[FormulasErrorsStrings["expression_cannot_end_with_an_operator"] = 32] = "expression_cannot_end_with_an_operator";
    FormulasErrorsStrings[FormulasErrorsStrings["spill"] = 33] = "spill";
    FormulasErrorsStrings[FormulasErrorsStrings["div"] = 34] = "div";
})(FormulasErrorsStrings || (FormulasErrorsStrings = {}));

/**
 * Export Common modules for Calculate.
 */

/**
 * Represents the basic formulas module.
 */
var BasicFormulas = /** @__PURE__ @class */ (function () {
    function BasicFormulas(parent) {
        this.formulas = [
            { formulaName: 'SUM', category: 'Math & Trig', description: 'Sums individual values, cell references or ranges.' },
            {
                formulaName: 'SUMIFS', category: 'Math & Trig',
                description: 'Sums the cells specified by a given set of conditionsor criteria.'
            },
            {
                formulaName: 'SUMPRODUCT', category: 'Math & Trig',
                description: 'Returns sum of the product of given ranges of arrays.'
            },
            { formulaName: 'ABS', category: 'Math & Trig', description: 'Returns the absolute value of a number.' },
            { formulaName: 'RAND', category: 'Math & Trig', description: 'Return a random number between 0 and 1.' },
            { formulaName: 'FLOOR', category: 'Math & Trig', description: 'Returns the round a number down to the nearest integer.' },
            { formulaName: 'CEILING', category: 'Math & Trig', description: 'Returns a number rounded up to a multiple of another number.' },
            {
                formulaName: 'SUMIF', category: 'Math & Trig',
                description: 'It will sum up cells that meet the given criteria.'
            },
            {
                formulaName: 'PRODUCT', category: 'Math & Trig',
                description: 'Multiplies all the numbers given as arguments and returns the product.'
            },
            {
                formulaName: 'AVERAGE', category: 'Statistical',
                description: 'The sum of the numbers divided by how many numbers are being averaged.'
            },
            {
                formulaName: 'AVERAGEIF', category: 'Statistical',
                description: 'Computes the average of the numbers in a range that meet the supplied criteria.'
            },
            {
                formulaName: 'COUNT', category: 'Statistical',
                description: 'Counts the numbers in the list of arguments, exclude text entries.'
            },
            { formulaName: 'COUNTA', category: 'Statistical', description: 'Counts the non-empty values in the list of arguments.' },
            {
                formulaName: 'COUNTIF', category: 'Statistical',
                description: 'Counts the number of cells in a range that meet a specified condition.'
            },
            {
                formulaName: 'COUNTIFS', category: 'Statistical',
                description: 'Counts the number of times each cells in all the ranges that meet the specific conditions.'
            },
            {
                formulaName: 'AVERAGEA', category: 'Statistical',
                description: 'Calculates the average of values in the list of arguments.Arguments can be numbers, names, arrays or references.'
            },
            {
                formulaName: 'AVERAGEIFS', category: 'Statistical',
                description: 'Conditionally returns the average of the contents of cells for the set of ranges.'
            },
            {
                formulaName: 'MIN', category: 'Statistical',
                description: 'Returns the smaller number in set of arguments.'
            },
            { formulaName: 'MAX', category: 'Statistical', description: 'Returns the largest number in set of arguments.' },
            { formulaName: 'DATE', category: 'Date', description: 'Returns the date, given the year, month and day of the month.' },
            { formulaName: 'DAY', category: 'Date', description: 'Returns the day of a given date.' },
            { formulaName: 'TODAY', category: 'Date', description: 'Returns the current date as date value.' },
            { formulaName: 'DAYS', category: 'Date', description: 'Returns the number of days between two dates.' },
            { formulaName: 'WEEKDAY', category: 'Date', description: 'Returns the day of the week corresponding to a date.' },
            {
                formulaName: 'IF', category: 'Logical',
                description: 'Returns one value if a logical expression is TRUE and another if it is FALSE'
            },
            {
                formulaName: 'AND', category: 'Logical',
                description: 'Returns TRUE if all the arguments are considered TRUE, and FALSE otherwise.'
            },
            {
                formulaName: 'IFS', category: 'Logical',
                description: 'Checks multiple conditions and returns a value corresponding to the first TRUE result.'
            },
            {
                formulaName: 'IFERROR', category: 'Logical',
                description: 'Returns a value you specify if a formula evaluates to an error; otherwise, it returns the result of the formula.'
            },
            {
                formulaName: 'CHOOSE', category: 'Lookup & Reference',
                description: 'Returns a value from a list, given an index number.'
            },
            {
                formulaName: 'INDEX', category: 'Lookup & Reference',
                description: 'Returns a value from a table, given a row and column number.'
            },
            { formulaName: 'FIND', category: 'Text', description: 'Returns the position of a string of text within another string.' },
            { formulaName: 'CONCATENATE', category: 'Text', description: ' Used to join two or more strings together.' },
            { formulaName: 'CONCAT', category: 'Text', description: 'Concatenates a list or range of text strings.' },
            { formulaName: 'SUBTOTAL', category: 'Lookup & Reference', description: 'Returns a subtotal in a list or database.' },
            { formulaName: 'RADIANS', category: 'Math & Trig', description: 'Converts degrees to radians.' },
            {
                formulaName: 'OR', category: 'Logical',
                description: 'Returns TRUE if any arguments considered TRUE, and all the arguments are FALSE it will return FALSE.'
            },
            {
                formulaName: 'MATCH', category: 'Lookup & Reference',
                description: 'Returns the relative position of an checked item in range that matches a specified value in a specified order'
            },
            {
                formulaName: 'RANDBETWEEN', category: 'Math & Trig', description: 'Returns an integer random number in a specified range.'
            },
            {
                formulaName: 'SLOPE', category: 'Statistical',
                description: 'Returns the slope of the line from linear regression of the data points.'
            },
            {
                formulaName: 'INTERCEPT', category: 'Statistical',
                description: 'Calculates the point of the Y-intercept line via linear regression.'
            },
            {
                formulaName: 'UNIQUE', category: 'Lookup & Reference',
                description: 'Returns a unique values from a range or array.'
            },
            {
                formulaName: 'ROUNDUP', category: 'Math & Trig', description: 'Rounds a number away from zero.'
            },
            {
                formulaName: 'INT', category: 'Math & Trig', description: 'Returns a number to the nearest integer.'
            },
            {
                formulaName: 'LN', category: 'Math & Trig', description: 'Returns the natural logarithm of a number.'
            },
            {
                formulaName: 'ISNUMBER', category: 'Information', description: 'Returns TRUE, if the argument is number and FALSE otherwise.'
            },
            {
                formulaName: 'ROUND', category: 'Math & Trig', description: 'Rounds a number to a specified number of digits.'
            },
            {
                formulaName: 'LOG', category: 'Math & Trig', description: 'Returns the logarithm of a number to the base that you specify.'
            },
            {
                formulaName: 'POWER', category: 'Math & Trig', description: 'Returns the result of a number raised to power.'
            },
            {
                formulaName: 'TRUNC', category: 'Math & Trig',
                description: 'Returns the truncated value of a number to a specified number of decimal places.'
            },
            {
                formulaName: 'EXP', category: 'Math & Trig', description: 'Returns e raised to the power of the given number.'
            },
            {
                formulaName: 'GEOMEAN', category: 'Statistical',
                description: 'Returns the geometric mean of an array or range of positive data.'
            },
            { formulaName: 'TEXT', category: 'Lookup & Reference', description: 'Converts a value to text in specified number format.' },
            { formulaName: 'SORT', category: 'Lookup & Reference', description: 'Sorts a range of an array.' },
            { formulaName: 'T', category: 'Text', description: 'Checks whether a value is text or not and returns the text.' },
            { formulaName: 'EXACT', category: 'Text', description: 'Checks whether a two text strings are exactly same and returns TRUE or FALSE.' },
            { formulaName: 'LEN', category: 'Text', description: 'Returns a number of characters in a given string.' },
            { formulaName: 'MOD', category: 'Math & Trig', description: 'Returns a remainder after a number is divided by divisor.' },
            { formulaName: 'ODD', category: 'Math & Trig', description: 'Rounds a positive number up and negative number down to the nearest odd integer.' },
            { formulaName: 'PI', category: 'Math & Trig', description: 'Returns the value of pi.' },
            { formulaName: 'COUNTBLANK', category: 'Statistical', description: 'Returns the number of empty cells in a specified range of cells.' },
            { formulaName: 'EVEN', category: 'Math & Trig', description: 'Rounds a positive number up and negative number down to the nearest even integer.' },
            { formulaName: 'FACT', category: 'Math & Trig', description: 'Returns the factorial of a number.' },
            { formulaName: 'DECIMAL', category: 'Math & Trig', description: 'Converts a text representation of a number in a given base into a decimal number.' },
            { formulaName: 'DEGREES', category: 'Math & Trig', description: 'Converts radians to degrees.' },
            { formulaName: 'ADDRESS', category: 'Lookup & Reference', description: 'Returns a cell reference as text, given specified row and column numbers.' },
            { formulaName: 'TIME', category: 'Date & Time', description: 'Converts hours, minutes, seconds to the time formatted text.' },
            { formulaName: 'CHAR', category: 'Text', description: 'Returns the character from the specified number.' },
            { formulaName: 'CODE', category: 'Text', description: 'Returns the numeric code for the first character in a given string.' },
            { formulaName: 'DOLLAR', category: 'Text', description: 'Converts the number to currency formatted text.' },
            { formulaName: 'SMALL', category: 'Statistical', description: 'Returns the k-th smallest value in a given array.' },
            { formulaName: 'LARGE', category: 'Statistical', description: 'Returns the k-th largest value in a given array.' },
            { formulaName: 'MEDIAN', category: 'Statistical', description: 'Returns the median of the given set of numbers.' },
            { formulaName: 'EDATE', category: 'Date & Time', description: 'Returns a date with given number of months before or after the specified date.' },
            { formulaName: 'DATEVALUE', category: 'Date & Time', description: 'Converts a date string into date value.' },
            { formulaName: 'HOUR', category: 'Date & Time', description: 'Returns the number of hours in a specified time string.' },
            { formulaName: 'MINUTE', category: 'Date & Time', description: 'Returns the number of minutes in a specified time string.' },
            { formulaName: 'SECOND', category: 'Date & Time', description: 'Returns the number of seconds in a specified time string.' },
            { formulaName: 'NOW', category: 'Date & Time', description: 'Returns the current date and time.' },
            { formulaName: 'MONTH', category: 'Date & Time', description: 'Returns the number of months in a specified date string.' },
            { formulaName: 'PROPER', category: 'Text', description: 'Converts a text to proper case; first letter to uppercase and other letters to lowercase.' }
        ];
        this.isConcat = false;
        this.parent = parent;
        this.init();
    }
    BasicFormulas.prototype.init = function () {
        var fn;
        for (var i = 0; i < this.formulas.length; i++) {
            fn = getValue('Compute' + this.formulas[i].formulaName, this).bind(this);
            this.addFormulaCollection(this.formulas[i].formulaName.toUpperCase(), fn, this.formulas[i].category, this.formulas[i].description);
        }
    };
    BasicFormulas.prototype.addFormulaCollection = function (formulaName, functionName, formulaCategory, description) {
        this.parent.libraryFormulas = {
            fName: formulaName, handler: functionName, category: formulaCategory,
            description: description
        };
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args
     * @returns {string | number} - Comput sum value
     */
    BasicFormulas.prototype.ComputeSUM = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        var sum = 0;
        var val;
        var orgValue;
        if (!isNullOrUndefined(args)) {
            var argArr = args;
            for (var i = 0; i < argArr.length; i++) {
                var argValue = argArr[i].toString();
                if (argValue.indexOf(':') > -1 && this.parent.isCellReference(argValue)) {
                    var cellCollection = this.parent.getCellCollection(argValue.split(this.parent.tic).join(''));
                    for (var j = 0; j < cellCollection.length; j++) {
                        val = this.parent.getValueFromArg(cellCollection[j]);
                        if (this.parent.getErrorStrings().indexOf(val) > -1) {
                            return val;
                        }
                        if (isNullOrUndefined(val[0]) || isNaN(this.parent.parseFloat(val))) {
                            continue;
                        }
                        sum = sum + this.parent.parseFloat(val);
                    }
                }
                else {
                    if (argArr[i].split(this.parent.tic).join('') === this.parent.trueValue) {
                        argArr[i] = '1';
                    }
                    if (argArr[i].split(this.parent.tic).join('') === this.parent.falseValue) {
                        argArr[i] = '0';
                    }
                    orgValue = this.parent.getValueFromArg(argArr[i].split(this.parent.tic).join(''));
                    if (this.parent.getErrorStrings().indexOf(orgValue) > -1) {
                        return orgValue;
                    }
                    if (isNullOrUndefined(orgValue) || isNaN(this.parent.parseFloat(orgValue))) {
                        continue;
                    }
                    if (orgValue.length > 0) {
                        sum = sum + this.parent.parseFloat(orgValue + '');
                    }
                }
            }
        }
        return sum.toString().indexOf('.') > -1 ? sum.toFixed(2) : sum;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string | number} - Compute the Integer.
     */
    BasicFormulas.prototype.ComputeINT = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var str;
        var num;
        var index;
        if (!isNullOrUndefined(args) && args.length !== 1 || args[0] === '') {
            str = this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        if (args[0] !== '' && args.length === 1) {
            str = args[0];
            index = str.indexOf('"');
            str = str.indexOf('"') > -1 ? str.replace('"', '') : str;
            str = str.indexOf('"') > -1 ? str.replace('"', '') : str;
            str = this.parent.getValueFromArg(str);
            str = str.toUpperCase() === 'TRUE' ? '1' : (str === 'FALSE' ? '0' : str);
            num = this.parent.parseFloat(str);
            num = Math.floor(num);
        }
        if (isNaN(num)) {
            str = index > -1 ? this.parent.getErrorStrings()[CommonErrors.value] : this.parent.getErrorStrings()[CommonErrors.name];
        }
        return num ? num : str;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {Date | string} - Compute the Today.
     */
    BasicFormulas.prototype.ComputeTODAY = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var str;
        if (args && args[0] !== '') {
            str = this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        else {
            var dt = new Date(Date.now());
            if (this.parent.parentObject.getModuleName() === 'spreadsheet') {
                str = this.parent.parentObject.dateToInt(dt);
                if (this.parent.parser.storedStringText.toUpperCase().indexOf('TODAY') === 0) {
                    this.parent.parentObject.setDateFormat(this.parent.getSheetId(this.parent.grid), this.parent.rowIndex(this.parent.cell) - 1, this.parent.colIndex(this.parent.cell) - 1);
                }
            }
            else {
                str = dt.getFullYear() + '/' + this.parent.calculateDate((dt.getMonth() + 1).toString()) + '/'
                    + this.parent.calculateDate(dt.getDate().toString());
            }
        }
        return str;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {number} - Compute the day from the date.
     */
    BasicFormulas.prototype.ComputeWEEKDAY = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var day;
        if (args[0] === '') {
            day = this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        else {
            var date = this.parent.getValueFromArg(args[0]);
            day = Math.ceil(Number(date)) % 7 || 7;
        }
        return day;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string} - Compute to the Proper casing.
     */
    BasicFormulas.prototype.ComputePROPER = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var str;
        if (args && args[0] === '' || args.length !== 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        else {
            var arg1 = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
            if (arg1 === this.parent.getErrorStrings()[CommonErrors.name]) {
                return this.parent.getErrorStrings()[CommonErrors.name];
            }
            var splitArgs1 = arg1.toLowerCase().split(' ');
            for (var i = 0; i < splitArgs1.length; i++) {
                if (splitArgs1[i][0]) {
                    for (var j = 0; j < splitArgs1[i].length; j++) {
                        if (splitArgs1[i].charCodeAt(j) >= 97 && splitArgs1[i].charCodeAt(j) <= 122) {
                            splitArgs1[i] = splitArgs1[i].replace(splitArgs1[i][j], splitArgs1[i][j].toUpperCase());
                            break;
                        }
                    }
                }
            }
            str = splitArgs1.join(' ');
            if (str.indexOf('-') > 0) {
                var splitArgs2 = str.split('-');
                for (var i = 0; i < splitArgs2.length; i++) {
                    if (splitArgs2[i][0]) {
                        for (var j = 0; j < splitArgs2[i].length; j++) {
                            if (splitArgs2[i].charCodeAt(j) >= 97 && splitArgs2[i].charCodeAt(j) <= 122) {
                                splitArgs2[i] = splitArgs2[i].replace(splitArgs2[i][j], splitArgs2[i][j].toUpperCase());
                                break;
                            }
                        }
                    }
                }
                str = splitArgs2.join('-');
            }
            if (str.indexOf(',') > 0) {
                var splitArgs3 = str.split(',');
                for (var i = 0; i < splitArgs3.length; i++) {
                    if (splitArgs3[i][0]) {
                        for (var j = 0; j < splitArgs3[i].length; j++) {
                            if (splitArgs3[i].charCodeAt(j) >= 97 && splitArgs3[i].charCodeAt(j) <= 122) {
                                splitArgs3[i] = splitArgs3[i].replace(splitArgs3[i][j], splitArgs3[i][j].toUpperCase());
                                break;
                            }
                        }
                    }
                }
                str = splitArgs3.join(',');
            }
        }
        return str;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string | number} - Compute the Sum product.
     */
    BasicFormulas.prototype.ComputeSUMPRODUCT = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var sum = 0;
        var count = 0;
        var index;
        var mulValues = null;
        var ranges = args;
        for (var k = 0; k < ranges.length; ++k) {
            var range = ranges[k];
            if (!range.startsWith(this.parent.tic) && this.parent.isCellReference(range)) {
                var i = range.indexOf(':');
                var startRow = this.parent.rowIndex(range.substr(0, i));
                var endRow = this.parent.rowIndex(range.substr(i + 1));
                if (!(startRow !== -1 || endRow === -1) === (startRow === -1 || endRow !== -1)) {
                    return this.parent.getErrorStrings()[CommonErrors.name];
                }
                var col1 = this.parent.colIndex(range.substr(0, i));
                var col2 = this.parent.colIndex(range.substr(i + 1));
                if (mulValues === null) {
                    count = (endRow - startRow + 1) * (col2 - col1 + 1);
                    mulValues = [];
                    for (i = 0; i < count; ++i) {
                        mulValues[i] = 1; //To create required index.
                    }
                }
                i = 0;
                for (var row = startRow; row <= endRow; ++row) {
                    for (var col = col1; col <= col2; ++col) {
                        var cellRef = this.getSheetReference(range) + this.parent.convertAlpha(col) + (row);
                        var result = this.parent.getValueFromArg(cellRef);
                        if (!isNaN(parseFloat(result))) {
                            //To return #VALUE! error when array dimensions are mismatched.
                            if (isNaN(mulValues[i])) {
                                return this.parent.getErrorStrings()[CommonErrors.name];
                            }
                            mulValues[i] = mulValues[i] * parseFloat(result);
                        }
                        else {
                            mulValues[i] = 0;
                        }
                        i++;
                    }
                }
            }
            else {
                var s1 = this.parent.getValueFromArg(range);
                index = s1.indexOf('"');
                if (this.parent.getErrorStrings().indexOf(s1) > -1) {
                    return s1;
                }
                else if (index > -1) {
                    return 0;
                }
                else {
                    return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
                }
            }
        }
        for (var i = 0; i < count; ++i) {
            sum += mulValues[i];
        }
        return sum;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string | number} - Compute the Roundup.
     */
    BasicFormulas.prototype.ComputeROUNDUP = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var str;
        var num;
        var arg1;
        var arg2;
        var index;
        var len = args.length;
        if (!isNullOrUndefined(args) && len > 2) {
            str = this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        if (len === 1 && args[0] !== '') {
            index = args[0].indexOf('"');
            arg1 = args[0].indexOf('"') > -1 ? args[0].replace('"', '') : args[0];
            arg1 = arg1.indexOf('"') > -1 ? arg1.replace('"', '') : arg1;
            arg1 = arg1.toUpperCase() === 'TRUE' ? '1' : (arg1 === 'FALSE' ? '0' : arg1);
            arg1 = this.parent.getValueFromArg(arg1);
            num = this.parent.parseFloat(arg1);
            if (num > 0) {
                num += .4999999999; // To round the number, we using this value.
            }
            else if (num < 0) {
                num -= .4999999999;
            }
            num = this.parent.parseFloat(num.toFixed(0));
            str = num.toString();
        }
        else if (len === 2 && args[0] !== '' && args[1] !== '') {
            index = args[0].indexOf('"') > -1 ? args[0].indexOf('"') : (args[1].indexOf('"') > -1 ? args[1].indexOf('"') : -1);
            arg1 = args[0].indexOf('"') > -1 ? args[0].replace('"', '') : args[0];
            arg1 = arg1.indexOf('"') > -1 ? arg1.replace('"', '') : arg1;
            arg2 = args[1].indexOf('"') > -1 ? args[1].replace('"', '') : args[1];
            arg2 = arg2.indexOf('"') > -1 ? arg2.replace('"', '') : arg2;
            arg1 = arg1.toUpperCase() === 'TRUE' ? '1' : (arg1 === 'FALSE' ? '0' : arg1);
            arg2 = arg2.toUpperCase() === 'TRUE' ? '1' : (arg2 === 'FALSE' ? '0' : arg2);
            arg1 = this.parent.getValueFromArg(arg1);
            arg2 = this.parent.getValueFromArg(arg2);
            var digits = Math.ceil(this.parent.parseFloat(arg2));
            num = this.parent.parseFloat(arg1);
            if (digits > 0) {
                if (num > 0) {
                    num += .4999999999 / Math.pow(10, digits);
                }
                else if (num < 0) {
                    num -= .4999999999 / Math.pow(10, digits);
                }
                num = this.parent.parseFloat(num.toFixed(digits));
                str = num.toFixed(digits);
                if (isNaN(num)) {
                    if (digits.toString().indexOf('"') > -1) {
                        str = this.parent.getErrorStrings()[CommonErrors.value];
                    }
                    else {
                        str = this.parent.getErrorStrings()[CommonErrors.name];
                    }
                }
            }
            else {
                if (num > 0) {
                    num = (num / Math.pow(10, -digits)) + .49999;
                }
                else if (num < 0) {
                    num = (num / Math.pow(10, -digits)) - .49999;
                }
                num = this.parent.parseFloat(num.toFixed(0)) * Math.pow(10, -digits);
                str = num.toString();
                if (isNaN(num)) {
                    str = (digits.toString().indexOf('"') > -1) ? this.parent.getErrorStrings()[CommonErrors.value] :
                        str = this.parent.getErrorStrings()[CommonErrors.name];
                }
            }
        }
        else {
            str = index > -1 ? this.parent.getErrorStrings()[CommonErrors.value] :
                this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        return str;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {number | string} - Compute the count.
     */
    BasicFormulas.prototype.ComputeCOUNT = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var argArr = args;
        var argVal;
        var cellColl;
        var result = 0;
        var cellValue;
        for (var i = 0; i < argArr.length; i++) {
            argVal = argArr[i];
            if (argVal.indexOf(':') > -1 && this.parent.isCellReference(argVal)) {
                cellColl = this.parent.getCellCollection(argVal.split(this.parent.tic).join(''));
                for (var j = 0; j < cellColl.length; j++) {
                    cellValue = this.parent.getValueFromArg(cellColl[j]);
                    if (!isNaN(this.parent.parseFloat(cellValue))) {
                        if (argVal.length > 0 && argVal !== '' && argVal !== ' ') {
                            result++;
                        }
                    }
                }
            }
            else {
                argVal = argVal.split(this.parent.tic).join('');
                if (!isNaN(this.parent.parseFloat(this.parent.getValueFromArg(argVal)))) {
                    if (argVal.length > 0 && argVal !== '' && argVal !== ' ') {
                        result++;
                    }
                }
            }
        }
        return result;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {Date | string} - Compute the Date.
     */
    BasicFormulas.prototype.ComputeDATE = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var argArr = args;
        if (argArr.length !== 3) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        for (var i = 0; i < argArr.length; ++i) {
            argArr[i] = this.parent.getValueFromArg(argArr[i]);
        }
        argArr[0] = (argArr[0].split(this.parent.tic).join('') === 'TRUE') ? '1' : (argArr[0].split(this.parent.tic).join('') === 'FALSE') ? '0' : argArr[0];
        argArr[1] = (argArr[1].split(this.parent.tic).join('') === 'TRUE') ? '1' : (argArr[1].split(this.parent.tic).join('') === 'FALSE') ? '0' : argArr[1];
        argArr[2] = (argArr[2].split(this.parent.tic).join('') === 'TRUE') ? '1' : (argArr[2].split(this.parent.tic).join('') === 'FALSE') ? '0' : argArr[2];
        /* eslint-enable */
        var year = this.parent.parseFloat(argArr[0].split(this.parent.tic).join(''));
        var month = this.parent.parseFloat(argArr[1].split(this.parent.tic).join(''));
        var day = this.parent.parseFloat(argArr[2].split(this.parent.tic).join(''));
        var days = 0;
        if (!isNaN(year) && !isNaN(month) && !isNaN(day)) {
            if (year < 0) {
                return this.parent.getErrorStrings()[CommonErrors.num].toString();
            }
            while (month > 12) {
                month -= 12;
                year++;
            }
            days = this.parent.getSerialDateFromDate(year, month, day);
        }
        else {
            return this.parent.getErrorStrings()[CommonErrors.value].toString();
        }
        if (days === 0) {
            return this.parent.getErrorStrings()[CommonErrors.num].toString();
        }
        var date = this.parent.fromOADate(days);
        if (date.toString() !== 'Invalid Date') {
            return date.getFullYear() + '/' + this.parent.calculateDate((date.getMonth() + 1).toString()) + '/' + this.parent.calculateDate(date.getDate().toString());
        }
        return days.toString();
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {number | string} - Compute the ceiling.
     */
    BasicFormulas.prototype.ComputeFLOOR = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        var argArr = args;
        var argCount = argArr.length;
        var splitArg = argArr[1].split(this.parent.tic).join('');
        var argValue = [];
        var fnum;
        var significance;
        if (argCount !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        argValue.push(fnum = this.parent.parseFloat(this.parent.getValueFromArg(argArr[0].split(this.parent.tic).join(''))));
        argArr[1] = (splitArg === this.parent.trueValue) ? '1' : (splitArg === this.parent.falseValue) ? '0' : argArr[1];
        argValue.push(significance = this.parent.parseFloat(this.parent.getValueFromArg(argArr[1].split(this.parent.tic).join(''))));
        if (fnum > 0 && significance < 0) {
            return this.parent.getErrorStrings()[CommonErrors.num];
        }
        if (fnum > 0 && significance === 0) {
            return this.parent.getErrorStrings()[CommonErrors.divzero];
        }
        for (var i = 0; i < argArr.length; i++) {
            if (argArr[i].indexOf(this.parent.tic) > -1) {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
        }
        if (isNaN(fnum)) {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        return Math.floor(fnum / significance) * significance;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {number | string} - Compute the ceiling.
     */
    BasicFormulas.prototype.ComputeCEILING = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        var argArr = args;
        var orgValue = [];
        var argCount = argArr.length;
        var splitArg = argArr[1].split(this.parent.tic).join('');
        var cnum;
        var significance;
        if (argCount !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        orgValue.push(cnum = this.parent.parseFloat(this.parent.getValueFromArg(argArr[0].split(this.parent.tic).join(''))));
        argArr[1] = (splitArg === this.parent.trueValue) ? '1' : (splitArg === this.parent.falseValue) ? '0' : argArr[1];
        orgValue.push(significance = this.parent.parseFloat(this.parent.getValueFromArg(argArr[1].split(this.parent.tic).join(''))));
        if (cnum > 0 && significance < 0) {
            return this.parent.getErrorStrings()[CommonErrors.num];
        }
        for (var i = 0; i < argArr.length; i++) {
            if (argArr[i].indexOf(this.parent.tic) > -1) {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
        }
        if (isNaN(cnum)) {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        if (significance === 0) {
            return 0;
        }
        return Math.ceil(cnum / significance) * significance;
    };
    /**
     * @hidden
     * @param {string[]} serialNumber - specify the serialNumber.
     * @returns {number | string} - Compute the DAY.
     */
    BasicFormulas.prototype.ComputeDAY = function () {
        var serialNumber = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            serialNumber[_i] = arguments[_i];
        }
        var date = serialNumber;
        var result;
        if (isNullOrUndefined(date) || (date.length === 1 && date[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        if (date.length > 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var dateVal = this.parent.getValueFromArg(date[0].split(this.parent.tic).join(''));
        if (!isNaN(this.parent.parseFloat(dateVal))) {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        // else {
        //     dateVal = dateVal;
        // }
        result = this.parent.parseDate(dateVal);
        if (Object.prototype.toString.call(result) === '[object Date]') {
            /* eslint-disable-next-line */
            result = result.getDate();
        }
        return result;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string | number} - Compute the IF value.
     */
    BasicFormulas.prototype.ComputeIF = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        if (this.parent.getErrorStrings().indexOf(args[0]) > 0) {
            return args[0];
        }
        var argArr = args;
        var skipTick;
        if (argArr.length === 4 && argArr[3] === 'nestedFormulaTrue') {
            skipTick = true;
            argArr.pop();
        }
        var condition;
        var result;
        if (argArr.length > 3 || argArr.length === 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        else if (argArr.length <= 3) {
            condition = this.parent.getValueFromArg(argArr[0]);
            if (this.parent.getErrorStrings().indexOf(condition) > -1) {
                return condition;
            }
            if (condition === this.parent.trueValue || this.parent.parseFloat(condition) > 0 || this.parent.parseFloat(condition) < 0) {
                result = this.parent.getValueFromArg(argArr[1]);
            }
            else if (condition === this.parent.falseValue || this.parent.parseFloat(condition) === 0) {
                if (isNullOrUndefined(argArr[2])) {
                    return this.parent.falseValue;
                }
                result = this.parent.getValueFromArg(argArr[2]);
            }
            else {
                return this.parent.formulaErrorStrings[FormulasErrorsStrings.requires_3_args];
            }
        }
        if (!skipTick && result.indexOf(this.parent.tic) > -1) {
            return result.split(this.parent.tic).join('');
        }
        else {
            return result;
        }
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {number | string} - Compute the IFERROR value.
     */
    BasicFormulas.prototype.ComputeIFERROR = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        var argArr = args;
        var condition;
        if (argArr.length !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        condition = this.parent.getValueFromArg(argArr[0]);
        if (condition === this.parent.trueValue || condition === this.parent.falseValue) {
            return condition;
        }
        if (condition[0] === this.parent.arithMarker) {
            condition = condition.replace(this.parent.arithMarker, ' ');
        }
        condition = this.parent.getValueFromArg(condition).toUpperCase().split(this.parent.tic).join('');
        if (condition[0] === '#' || condition.indexOf('Infinity') > -1 || this.parent.getErrorStrings().indexOf(condition) > -1) {
            return this.parent.getValueFromArg(argArr[1]).split(this.parent.tic).join('');
        }
        else {
            return condition;
        }
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the PRODUCT value.
     */
    BasicFormulas.prototype.ComputePRODUCT = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        if (isNullOrUndefined(range) || (range.length === 1 && range[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        var product = 1;
        var val;
        var orgValue;
        var argsHit = true;
        var parseVal;
        if (!isNullOrUndefined(range)) {
            var argArr = range;
            for (var i = 0; i < argArr.length; i++) {
                var rangevalue = argArr[i];
                if (rangevalue.indexOf(':') > -1 && this.parent.isCellReference(rangevalue)) {
                    var cellCollection = this.parent.getCellCollection(rangevalue);
                    for (var j = 0; j < cellCollection.length; j++) {
                        val = this.parent.getValueFromArg(cellCollection[j].split(this.parent.tic).join(''));
                        if (this.parent.getErrorStrings().indexOf(val) > -1) {
                            return val;
                        }
                        val = (val.split(this.parent.tic).join('') === 'TRUE') ? '1' :
                            (val.split(this.parent.tic).join('') === 'FALSE') ? '0' : val;
                        parseVal = this.parent.parseFloat(val);
                        if (!isNaN(parseVal)) {
                            if (val.length > 0) {
                                product = product * parseVal;
                                argsHit = false;
                            }
                        }
                    }
                }
                else {
                    orgValue = this.parent.getValueFromArg(argArr[i].split(this.parent.tic).join(''));
                    if (this.parent.getErrorStrings().indexOf(orgValue) > -1) {
                        return orgValue;
                    }
                    orgValue = (orgValue.split(this.parent.tic).join('') === 'TRUE') ? '1' :
                        (orgValue.split(this.parent.tic).join('') === 'FALSE') ? '0' : orgValue;
                    parseVal = this.parent.parseFloat(orgValue);
                    if (!isNaN(parseVal)) {
                        if (orgValue.length > 0) {
                            product = product * parseVal;
                            argsHit = false;
                        }
                    }
                    if (this.parent.getErrorStrings().indexOf(orgValue) > -1) {
                        return orgValue;
                    }
                }
            }
        }
        return argsHit ? '0' : product.toString();
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the Choose value.
     */
    BasicFormulas.prototype.ComputeDAYS = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var result;
        if (isNullOrUndefined(range) && (range.length === 1 && range[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        if (range.length !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var argsArr = range;
        if (argsArr[0].split(this.parent.tic).join('') === this.parent.trueValue) {
            argsArr[0] = '1';
        }
        if (argsArr[0].split(this.parent.tic).join('') === this.parent.falseValue) {
            argsArr[0] = '0';
        }
        var endDate = this.parent.getValueFromArg(argsArr[0].split(this.parent.tic).join(''));
        var startDate = this.parent.getValueFromArg(argsArr[1].split(this.parent.tic).join(''));
        startDate = (startDate === '' || startDate == null) ? new Date(Date.parse('1899-12-31')).toDateString() : startDate;
        endDate = (endDate === '' || endDate == null) ? new Date(Date.parse('1899-12-31')).toDateString() : endDate;
        if (endDate[0] === '#') {
            return endDate;
        }
        if (startDate[0] === '#') {
            return startDate;
        }
        var d1 = this.parent.intToDate(endDate);
        var d2 = this.parent.intToDate(startDate);
        if (d1.toString()[0] === '#') {
            return d1.toString();
        }
        if (d2.toString()[0] === '#') {
            return d2.toString();
        }
        if (Object.prototype.toString.call(d1) === '[object Date]' && Object.prototype.toString.call(d2) === '[object Date]') {
            /* eslint-disable-next-line */
            result = Math.ceil(d1.getTime() - d2.getTime()) / (1000 * 3600 * 24);
        }
        else {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        return Math.round(result);
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {number | string} - Compute the unique.
     */
    BasicFormulas.prototype.ComputeUNIQUE = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var argArr = args;
        var result;
        if (isNullOrUndefined(args) || args[0] === '' || argArr.length > 3) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var byCol = argArr[1] ? argArr[1].toUpperCase() : 'FALSE';
        var exactlyOne = argArr[2] ? argArr[2].toUpperCase() : 'FALSE';
        var uniqueCollection = [];
        if (argArr[0].indexOf(':') > -1) {
            if (isNullOrUndefined(argArr[0].match(/[0-9]/))) {
                var splitArray = argArr[0].split(':');
                argArr[0] = splitArray[0] + '1' + ':' + splitArray[1] + (this.parent.spreadSheetUsedRange[0] + 1);
            }
            else if (isNullOrUndefined(argArr[0].toUpperCase().match(/[A-Z]/))) {
                var splitArray = argArr[0].split(':');
                argArr[0] = 'A' + splitArray[0] + ':' + getAlphalabel(this.parent.spreadSheetUsedRange[1] + 1) + splitArray[1];
            }
            var rangeSplit = argArr[0].split(':');
            if (this.parent.isCellReference(rangeSplit[0]) && this.parent.isCellReference(rangeSplit[1])) {
                var collection = this.parent.dependencyCollection;
                for (var i = 0; i < collection.length; i++) {
                    if (collection[i].split(':')[0] === argArr[0].split(':')[0]) {
                        this.clearDependency(collection[i]);
                    }
                }
                if (this.parent.dependencyCollection.indexOf(argArr[0]) === -1) {
                    this.parent.dependencyCollection.push(argArr[0]);
                }
                else {
                    this.clearDependency(argArr[0]);
                }
                var j = argArr[0].indexOf(':');
                var swap = void 0;
                var rowIdx = this.parent.rowIndex(this.parent.substring(argArr[0], 0, j));
                var colIdx = this.parent.colIndex(this.parent.substring(argArr[0], 0, j));
                var endRowIdx = this.parent.rowIndex(this.parent.substring(argArr[0], j + 1, j + argArr[0].length - j - 1));
                var endColIdx = this.parent.colIndex(this.parent.substring(argArr[0], j + 1, j + argArr[0].length - j - 1));
                if (rowIdx > endRowIdx) {
                    swap = endRowIdx;
                    endRowIdx = rowIdx;
                    rowIdx = swap;
                }
                if (colIdx > endColIdx) {
                    swap = endColIdx;
                    endColIdx = colIdx;
                    colIdx = swap;
                }
                var sheetIndex = '';
                if (argArr[0].indexOf('!') === 0) {
                    sheetIndex = argArr[0].substring(0, argArr[0].replace('!', '').indexOf('!') + 2);
                }
                argArr[0] = sheetIndex + getAlphalabel(colIdx) + rowIdx + ':' + getAlphalabel(endColIdx) + endRowIdx;
                var cellRange = this.parent.getCellCollection(argArr[0]);
                var colDiff = endColIdx - colIdx;
                var cellValues = [];
                for (var i = 0; i < cellRange.length; i++) {
                    cellValues.push(cellRange[i]);
                }
                if (byCol === 'FALSE') {
                    if (colDiff === 0) {
                        for (var i = 0; i < cellValues.length; i++) {
                            var val = this.parent.getValueFromArg(cellValues[i]);
                            val = val === '' ? '0' : val;
                            uniqueCollection.push(val);
                        }
                    }
                    else {
                        var temp = '';
                        var diff = colDiff;
                        for (var i = 0; i < cellValues.length; i++) {
                            if (i === cellValues.length - 1) {
                                var val = this.parent.getValueFromArg(cellValues[i]);
                                val = val === '' ? '0' : val;
                                temp = temp + val + '+';
                                uniqueCollection.push(temp.substring(0, temp.length - 1));
                            }
                            if (i <= diff) {
                                var val = this.parent.getValueFromArg(cellValues[i]);
                                val = val === '' ? '0' : val;
                                temp = temp + val + '+';
                            }
                            else {
                                uniqueCollection.push(temp.substring(0, temp.length - 1));
                                diff = colDiff + i;
                                var val = this.parent.getValueFromArg(cellValues[i]);
                                val = val === '' ? '0' : val;
                                temp = val + '+';
                            }
                        }
                    }
                }
                else {
                    var temp = '';
                    var diff = colDiff + 1;
                    var rowDiff = endRowIdx - rowIdx;
                    for (var i = 0; i < diff; i++) {
                        for (var j_1 = 0; j_1 <= rowDiff; j_1++) {
                            var val = this.parent.getValueFromArg(cellValues[j_1 * diff + i]);
                            val = val === '' ? '0' : val;
                            temp = temp + val + '+';
                        }
                        uniqueCollection.push(temp.substring(0, temp.length - 1));
                        temp = '';
                    }
                }
                var tmp = [];
                var tmp2 = [];
                for (var i = 0; i < uniqueCollection.length; i++) {
                    if (tmp.indexOf(uniqueCollection[i]) === -1) {
                        tmp.push(uniqueCollection[i]);
                    }
                    else {
                        tmp2.push(uniqueCollection[i]);
                    }
                }
                if (exactlyOne === 'TRUE') {
                    var exactOne = [];
                    for (var i = 0; i < tmp.length; i++) {
                        if (tmp2.indexOf(tmp[i]) === -1) {
                            exactOne.push(tmp[i]);
                        }
                    }
                    tmp = exactOne;
                }
                var actCell = this.parent.actCell;
                actCell = actCell.indexOf('!') > -1 ? actCell.split('!')[1] : actCell;
                var actRowIdx = this.parent.rowIndex(actCell);
                var actColIdx = this.parent.colIndex(actCell);
                if (this.parent.dependencyLevel === 0) {
                    if (byCol === 'FALSE') {
                        for (var i = actRowIdx, diff = tmp.length + actRowIdx; i < diff; i++) {
                            var splitValue = tmp[0].split('+');
                            for (var j_2 = actColIdx, diff2 = splitValue.length + actColIdx; j_2 < diff2; j_2++) {
                                if (i === diff - 1 && j_2 === diff2 - 1 &&
                                    this.parent.uniqueRange.indexOf(this.parent.actCell + ':' + getAlphalabel(j_2) + i) === -1) {
                                    this.parent.uniqueRange.push(this.parent.actCell + ':' + getAlphalabel(j_2) + i);
                                }
                                if (this.checkSpill(j_2, i)) {
                                    return this.parent.formulaErrorStrings[FormulasErrorsStrings.spill];
                                }
                            }
                        }
                    }
                    else {
                        for (var i = actColIdx, diff = tmp.length + actColIdx; i < diff; i++) {
                            var splitValue = tmp[0].split('+');
                            for (var j_3 = actRowIdx, diff2 = splitValue.length + actRowIdx; j_3 < diff2; j_3++) {
                                if (i === diff - 1 && j_3 === diff2 - 1 &&
                                    this.parent.uniqueRange.indexOf(this.parent.actCell + ':' + getAlphalabel(i) + j_3) === -1) {
                                    this.parent.uniqueRange.push(this.parent.actCell + ':' + getAlphalabel(i) + j_3);
                                }
                                if (this.checkSpill(i, j_3)) {
                                    return this.parent.formulaErrorStrings[FormulasErrorsStrings.spill];
                                }
                            }
                        }
                    }
                }
                else if (this.parent.dependencyLevel > 0 &&
                    this.parent.getValueFromArg(getAlphalabel(actColIdx) + actRowIdx, true).indexOf('#SPILL!') > -1) {
                    return this.parent.formulaErrorStrings[FormulasErrorsStrings.spill];
                }
                if (byCol === 'FALSE') {
                    for (var i = 0; i < tmp.length; i++) {
                        var splitValue = tmp[i].split('+');
                        if (i > 0) {
                            actRowIdx++;
                            actColIdx = this.parent.colIndex(actCell);
                        }
                        for (var i_1 = 0; i_1 < splitValue.length; i_1++) {
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            this.parent.parentObject.setValueRowCol(this.parent.getSheetID(this.parent.grid) + 1, splitValue[i_1], actRowIdx, actColIdx);
                            if (splitValue[i_1 + 1]) {
                                actColIdx++;
                            }
                        }
                    }
                    result = tmp[0].split('+')[0];
                }
                else {
                    for (var i = 0; i < tmp.length; i++) {
                        var splitValue = tmp[i].split('+');
                        for (var i_2 = 0; i_2 < splitValue.length; i_2++) {
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            this.parent.parentObject.setValueRowCol(this.parent.getSheetID(this.parent.grid) + 1, splitValue[i_2], actRowIdx, actColIdx);
                            if (splitValue[i_2 + 1]) {
                                actRowIdx++;
                            }
                            else {
                                actColIdx++;
                                actRowIdx = this.parent.rowIndex(actCell);
                            }
                        }
                    }
                    result = tmp[0].split('+')[0];
                }
            }
        }
        else if (this.parent.isCellReference(argArr[0])) {
            if (this.parent.dependencyCollection.indexOf(argArr[0]) === -1) {
                this.parent.dependencyCollection.push(argArr[0]);
            }
            else {
                this.clearDependency(argArr[0]);
            }
            result = this.parent.getValueFromArg(argArr[0]);
        }
        return result;
    };
    BasicFormulas.prototype.checkSpill = function (i, j) {
        var spill = false;
        var value = this.parent.getValueFromArg(getAlphalabel(i) + j, true);
        var formulaAddress = '!' + this.parent.getSheetID(this.parent.grid) + '!' + getAlphalabel(i) + j;
        var formulaString;
        if (this.parent.getFormulaInfoTable().get(formulaAddress)) {
            formulaString = this.parent.getFormulaInfoTable().get(formulaAddress).formulaText;
        }
        if (value && (value.indexOf('UNIQUE') < 0 ||
            (formulaString && !formulaString.toUpperCase().includes('UNIQUE'))) &&
            value !== this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments] && !this.parent.skipSpill) {
            spill = true;
        }
        return spill;
    };
    BasicFormulas.prototype.clearDependency = function (value) {
        var actCell = this.parent.actCell;
        actCell = actCell.indexOf('!') > -1 ? actCell.split('!')[1] : actCell;
        var actRowIdx = this.parent.rowIndex(actCell);
        var actColIdx = this.parent.colIndex(actCell);
        var j = value.indexOf(':');
        var rowIndex = this.parent.rowIndex(this.parent.substring(value, 0, j));
        var colIndex = this.parent.colIndex(this.parent.substring(value, 0, j));
        var eRowIdx = this.parent.rowIndex(this.parent.substring(value, j + 1, j + value.length - j - 1));
        var eColIdx = this.parent.colIndex(this.parent.substring(value, j + 1, j + value.length - j - 1));
        var rowDiff = eRowIdx - rowIndex + actRowIdx;
        var colDiff = eColIdx - colIndex + actColIdx;
        var formulaText = this.parent.getFormulaInfoTable().get('!' + this.parent.getSheetID(this.parent.grid) + '!' + actCell) ?
            this.parent.getFormulaInfoTable().get('!' + this.parent.getSheetID(this.parent.grid) + '!' + actCell).getFormulaText() : '';
        for (var i = actRowIdx; i <= rowDiff; i++) {
            for (var j_4 = actColIdx; j_4 <= colDiff; j_4++) {
                if (this.parent.dependencyLevel > 0 || formulaText.indexOf('UNIQUE') > -1) {
                    if (this.parent.getValueFromArg('!' + this.parent.getSheetID(this.parent.grid) + '!' +
                        getAlphalabel(actColIdx) + actRowIdx, true).indexOf('#SPILL!') > -1) {
                        return;
                    }
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    this.parent.parentObject.setValueRowCol(this.parent.getSheetID(this.parent.grid) + 1, null, i, j_4);
                }
            }
        }
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string} - Compute the text or null value.
     */
    BasicFormulas.prototype.ComputeT = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var result = '';
        if (isNullOrUndefined(args) || args.length !== 1 || args[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        var value = args[0];
        value = value.indexOf(':') > -1 ? value.split(':')[0] : value;
        value = this.parent.getValueFromArg(value);
        var letters = /^[0-9.]+$/;
        if (value.match(letters) === null && value.toUpperCase() !== 'TRUE' && value.toUpperCase() !== 'FALSE') {
            result = value;
        }
        return result;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the hours.
     */
    BasicFormulas.prototype.ComputeHOUR = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length !== 1 || isNullOrUndefined(args)) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        if (args[0] === '') {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        if (!this.parent.isCellReference(args[0]) && args[0].indexOf(this.parent.tic) === -1) {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        var cellVal = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
        cellVal = this.parent.intToTime(cellVal);
        var date = new Date(Date.parse(cellVal));
        var hValue = parseInt(cellVal, 10);
        if (hValue < 0) {
            return this.parent.getErrorStrings()[CommonErrors.num];
        }
        if (date.toString() === 'Invalid Date') {
            var argVal = (new Date(Date.now())).toLocaleDateString() + ' ' + cellVal;
            date = new Date(Date.parse(argVal));
        }
        if (date.toString() === 'Invalid Date') {
            date = this.parent.fromOADate(parseInt(cellVal, 10));
        }
        if (date.toString() === 'Invalid Date') {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        return date.getHours();
    };
    /**
     * @hidden
     * @param {string} argArr - specify the args.
     * @returns {string | boolean} - Compute the hours.
     */
    BasicFormulas.prototype.ComputeMINUTE = function () {
        var argArr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            argArr[_i] = arguments[_i];
        }
        if (argArr.length !== 1 || isNullOrUndefined(argArr)) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        if (argArr[0] === '') {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        if (!this.parent.isCellReference(argArr[0]) && argArr[0].indexOf(this.parent.tic) === -1) {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        var cellVal = this.parent.getValueFromArg(argArr[0]).split(this.parent.tic).join('');
        cellVal = this.parent.intToTime(cellVal);
        var dateVal = new Date(Date.parse(cellVal));
        var MValue = parseInt(cellVal, 10);
        if (MValue < 0) {
            return this.parent.getErrorStrings()[CommonErrors.num];
        }
        if (dateVal.toString() === 'Invalid Date') {
            var argVal = (new Date(Date.now())).toLocaleDateString() + ' ' + cellVal;
            dateVal = new Date(Date.parse(argVal));
        }
        if (dateVal.toString() === 'Invalid Date') {
            dateVal = this.parent.fromOADate(parseInt(cellVal, 10));
        }
        if (dateVal.toString() === 'Invalid Date') {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        return dateVal.getMinutes();
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the hours.
     */
    BasicFormulas.prototype.ComputeSECOND = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length !== 1 || isNullOrUndefined(args)) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        if (!this.parent.isCellReference(args[0]) && args[0].indexOf(this.parent.tic) === -1) {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        if (args[0] === '') {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        var cellVal = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
        cellVal = this.parent.intToTime(cellVal);
        var dateValue = new Date(Date.parse(cellVal));
        var sValue = parseInt(cellVal, 10);
        if (sValue < 0) {
            return this.parent.getErrorStrings()[CommonErrors.num];
        }
        if (dateValue.toString() === 'Invalid Date') {
            var argVal = (new Date(Date.now())).toLocaleDateString() + ' ' + cellVal;
            dateValue = new Date(Date.parse(argVal));
        }
        if (dateValue.toString() === 'Invalid Date') {
            dateValue = this.parent.fromOADate(parseInt(cellVal, 10));
        }
        if (dateValue.toString() === 'Invalid Date') {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        return dateValue.getSeconds();
    };
    /**
     * @hidden
     * @param {string} argsVal - specify the args.
     * @returns {string | boolean} - Compute the months.
     */
    BasicFormulas.prototype.ComputeMONTH = function () {
        var argsVal = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            argsVal[_i] = arguments[_i];
        }
        if (argsVal[0] === '') {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        if (argsVal.length !== 1 || isNullOrUndefined(argsVal)) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        if (!this.parent.isCellReference(argsVal[0]) && argsVal[0].indexOf(this.parent.tic) === -1) {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        var format = this.spreadsheetFormat(argsVal[0]);
        var displayText = this.spreadsheetDisplayText(argsVal[0]);
        var cellVal = this.parent.getValueFromArg(argsVal[0]).split(this.parent.tic).join('');
        var dateValue = this.parseDouble(cellVal);
        var month = 0;
        var date = new Date(Date.parse(cellVal));
        if (!isNaN(dateValue) && date.getFullYear() > 9999) {
            date = this.parent.fromOADate(dateValue);
        }
        var mValue = parseInt(cellVal, 10);
        if (mValue < 0) {
            return this.parent.getErrorStrings()[CommonErrors.num];
        }
        if (mValue === 0 && cellVal !== format && format.indexOf('h:mm') > -1) {
            date = this.parent.fromOADate(parseInt(displayText, 10));
        }
        if (date.toString() === 'Invalid Date') {
            date = this.parent.fromOADate(parseInt(cellVal, 10));
        }
        if (date.toString() === 'Invalid Date') {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        else if (date.toString() !== 'Invalid Date') {
            month = date.getMonth() + 1;
        }
        return month.toString();
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string } - Compute the time and date value.
     */
    BasicFormulas.prototype.ComputeNOW = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length !== 1 || args[0] !== '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        var date = new Date(Date.now());
        var intl = new Internationalization();
        var dFormatter = intl.getDateFormat({ skeleton: 'short', type: 'dateTime' });
        var formattedString = dFormatter(date);
        return formattedString;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the exact value or not.
     */
    BasicFormulas.prototype.ComputeEXACT = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var result = false;
        if (isNullOrUndefined(args) || args.length !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        var value2 = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('');
        var value1 = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
        if (value1 === value2) {
            result = true;
        }
        return result;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the exact value or not.
     */
    BasicFormulas.prototype.ComputeLEN = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || args.length !== 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        else if (args[0] === '') {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        var value = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
        if (value === '#NAME?') {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        return value.length;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the remainder from the given numbers.
     */
    BasicFormulas.prototype.ComputeMOD = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || args.length !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        var value1 = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
        var value2 = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('');
        if (value2 === '' || value2 === '0') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.div];
        }
        else if (value1 === '' || value1 === '0') {
            return '0';
        }
        else if (value1 === '#NAME?' || value2 === '#NAME?') {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        else if (value1.toUpperCase().match(/[A-Z]/) || value2.toUpperCase().match(/[A-Z]/)) {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        var result = parseFloat(value1.replace('-', '')) % parseFloat(value2);
        if (parseFloat(value2) < 0) {
            result = result * -1;
        }
        if (isNaN(result)) {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        return result;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the next odd number.
     */
    BasicFormulas.prototype.ComputeODD = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args[0] === '') {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        else if (isNullOrUndefined(args) || args.length !== 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        var val = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
        if (val === '#NAME?') {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        else if (val === '') {
            val = '0';
        }
        else if (val.toUpperCase().match(/[A-Z]/)) {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        var result = Math.ceil(parseInt(val, 10));
        var isOne = result === 0;
        result = result % 2 === 0 ? (result > 0 ? result + 1 : result - 1) : result;
        if (Math.ceil(parseInt(val, 10)) % 2 !== 0) {
            if (parseInt(val, 10) > 0 && parseFloat(val) > parseInt(val, 10)) {
                result = result + 2;
            }
            else if (parseInt(val, 10) < 0 && parseFloat(val) < parseInt(val, 10)) {
                result = result - 2;
            }
        }
        if (isNaN(result)) {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        return isOne ? 1 : result;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the next even number.
     */
    BasicFormulas.prototype.ComputeEVEN = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || args.length !== 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        else if (args[0] === '') {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        var value1 = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
        if (value1 === '#NAME?') {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        else if (value1 === '') {
            value1 = '0';
        }
        else if (value1.toUpperCase().match(/[A-Z]/)) {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        var result = Math.ceil(parseFloat(value1));
        result = result % 2 === 0 ? result : (result > 0 ? result + 1 : result - 1);
        if (Math.ceil(parseFloat(value1)) % 2 === 0) {
            if (parseInt(value1, 10) > 0 && parseFloat(value1) > parseInt(value1, 10)) {
                result = result + 2;
            }
            else if (parseInt(value1, 10) < 0 && parseFloat(value1) < parseInt(value1, 10)) {
                result = result - 2;
            }
        }
        if (isNaN(result)) {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        return result;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the value of pi.
     */
    BasicFormulas.prototype.ComputePI = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var result;
        if (args && args[0] !== '') {
            result = this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        else {
            result = Math.PI;
        }
        return result;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the median value.
     */
    BasicFormulas.prototype.ComputeMEDIAN = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var value1;
        if (isNullOrUndefined(args) || args[0] === '' || args.length !== 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        var cellCollection = this.parent.getCellCollection(args[0]);
        var num = [];
        for (var a = 0; a < cellCollection.length; a++) {
            num.push(parseInt(this.parent.getValueFromArg(cellCollection[a]).split(this.parent.tic).join(''), 10));
        }
        num = num.sort(function (n1, n2) { return n1 - n2; });
        var len = num.length;
        for (var j = 0; j < len; j++) {
            if (isNaN(num[j])) {
                num.splice(j, 1);
                j--;
                if (num.length === 0) {
                    break;
                }
            }
        }
        if (num.length % 2 !== 0 && num[parseInt((num.length / 2).toString(), 10)]) {
            value1 = num[parseInt((num.length / 2).toString(), 10)];
        }
        else if (!isNaN(num[num.length / 2]) && !isNaN(num[num.length / 2 - 1])) {
            value1 = (num[num.length / 2] + num[num.length / 2 - 1]) / 2;
        }
        else {
            return this.parent.getErrorStrings()[CommonErrors.num];
        }
        return value1;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the edate value.
     */
    BasicFormulas.prototype.ComputeEDATE = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var date;
        var mValue;
        if (args.length !== 2 || isNullOrUndefined(args)) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        else if (args[0] === '') {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        else {
            var dValue = this.parent.getValueFromArg(args[0]);
            mValue = this.parent.getValueFromArg(args[1]);
            mValue = parseInt(mValue, 10);
            if (isNaN(mValue)) {
                return this.parent.getErrorStrings()[CommonErrors.num];
            }
            date = (isNaN(parseInt(dValue, 10))) ? new Date(Date.parse(dValue)) : this.parent.fromOADate(parseInt(dValue, 10));
            if (isNullOrUndefined(this.parent.isDate(date))) {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
        }
        return new Date(date.setMonth(date.getMonth() + mValue)).toLocaleDateString();
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the date value.
     */
    BasicFormulas.prototype.ComputeDATEVALUE = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var date;
        var dValue;
        if (args.length !== 1 || isNullOrUndefined(args)) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        else if (args[0] === '' || this.parent.isCellReference(args[0])) {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        else {
            if (args[0].indexOf(this.parent.tic) === -1) {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
            dValue = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
            date = (isNaN(parseInt(dValue, 10))) ? new Date(Date.parse(dValue)) : this.parent.fromOADate(parseInt(dValue, 10));
            if (isNullOrUndefined(this.parent.isDate(date)) || parseInt(dValue, 10).toString().length !== 5) {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
            if (this.parent.isDate(dValue) && this.parent.isDate(dValue).getFullYear().toString().length !== 4) {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
        }
        return parseFloat(dValue).toFixed(0).toString();
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the count blank value.
     */
    BasicFormulas.prototype.ComputeCOUNTBLANK = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var result = 0;
        if (args.length !== 1 || isNullOrUndefined(args) || !this.parent.isCellReference(args[0])) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        else if (args[0] === '') {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        else {
            var cellRange = this.parent.getCellCollection(args[0]);
            for (var i = 0; i < cellRange.length; i++) {
                if (this.parent.getValueFromArg(cellRange[i]) === '') {
                    result++;
                }
            }
        }
        return result;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the factorial value.
     */
    BasicFormulas.prototype.ComputeFACT = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var fact = 1;
        if (isNullOrUndefined(args) || args.length !== 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        else if (args[0] === '') {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        else {
            var value = parseInt(this.parent.getValueFromArg(args[0]).split(this.parent.tic).join(''), 10);
            if (this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('').toUpperCase().match(/[A-Z]/)) {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
            if (value < 0) {
                return this.parent.getErrorStrings()[CommonErrors.num];
            }
            for (var i = 1; i <= value; i++) {
                fact = fact * i;
            }
        }
        return fact;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the decimal value.
     */
    BasicFormulas.prototype.ComputeDECIMAL = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var value;
        if (isNullOrUndefined(args) || args.length !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        else {
            var val = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
            var val1 = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('');
            if (val === '' && val1 !== '') {
                return 0;
            }
            else if (val !== '' && val1 === '') {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
            if (isNaN(parseInt(val1, 10))) {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
            value = parseInt(val, parseInt(val1, 10));
        }
        return isNaN(value) ? this.parent.getErrorStrings()[CommonErrors.name] : value;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the degrees value.
     */
    BasicFormulas.prototype.ComputeDEGREES = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var value;
        if (isNullOrUndefined(args) || args.length !== 1 || args[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        else {
            var pi = Math.PI;
            var val = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
            if (val.toUpperCase().match(/[A-Z]/)) {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
            if (isNaN(parseInt(val, 10))) {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
            value = parseFloat(val) * (180 / pi);
        }
        return parseInt(value.toString(), 10);
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the cell address.
     */
    BasicFormulas.prototype.ComputeADDRESS = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var value;
        if (isNullOrUndefined(args) || args.length > 5 || args[0] === '' || args[1] === '' || args.length < 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        args[2] = args[2] ? args[2] : '1';
        args[3] = args[3] ? args[3] : 'TRUE';
        var rowIndex = this.parent.getValueFromArg(args[0]);
        var colIndex = this.parent.getValueFromArg(args[1]);
        var absIndex = this.parent.getValueFromArg(args[2]);
        var refStyle = this.parent.getValueFromArg(args[3]);
        absIndex = absIndex.split(this.parent.tic).join('');
        refStyle = refStyle.split(this.parent.tic).join('');
        rowIndex = rowIndex.split(this.parent.tic).join('');
        colIndex = colIndex.split(this.parent.tic).join('');
        if (parseInt(rowIndex, 10) <= 0 || parseInt(colIndex, 10) <= 0) {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        if (rowIndex.toUpperCase().match(/[A-Z]/) || colIndex.toUpperCase().match(/[A-Z]/) || absIndex.toUpperCase().match(/[A-Z]/)) {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        if (refStyle === 'TRUE' || refStyle === '1') {
            if (absIndex === '1') {
                value = '$' + getAlphalabel(parseInt(colIndex, 10)) + '$' + parseInt(rowIndex, 10);
            }
            else if (absIndex === '2') {
                value = getAlphalabel(parseInt(colIndex, 10)) + '$' + parseInt(rowIndex, 10);
            }
            else if (absIndex === '3') {
                value = '$' + getAlphalabel(parseInt(colIndex, 10)) + parseInt(rowIndex, 10);
            }
            else if (absIndex === '4') {
                value = getAlphalabel(parseInt(colIndex, 10)) + parseInt(rowIndex, 10);
            }
        }
        else if (refStyle === 'FALSE' || refStyle === '0') {
            if (absIndex === '1') {
                value = 'R' + parseInt(rowIndex, 10) + 'C' + parseInt(colIndex, 10);
            }
            else if (absIndex === '2') {
                value = 'R' + parseInt(rowIndex, 10) + 'C[' + parseInt(colIndex, 10) + ']';
            }
            else if (absIndex === '3') {
                value = 'R[' + parseInt(rowIndex, 10) + ']C' + parseInt(colIndex, 10);
            }
            else if (absIndex === '4') {
                value = 'R[' + parseInt(rowIndex, 10) + ']C[' + parseInt(colIndex, 10) + ']';
            }
        }
        var err = ['TRUE', 'FALSE', '1', '0'];
        if (err.indexOf(refStyle) === -1) {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        if (!isNullOrUndefined(args[4]) && args[4] !== '') {
            var val = this.parent.getValueFromArg(args[4]).split(this.parent.tic).join('');
            if (val === '#NAME?') {
                return this.parent.getErrorStrings()[CommonErrors.name];
            }
            value = val + '!' + value;
        }
        return value;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the time.
     */
    BasicFormulas.prototype.ComputeTIME = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || args.length !== 3 || args[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        var hours = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
        var minutes = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('');
        var seconds = this.parent.getValueFromArg(args[2]).split(this.parent.tic).join('');
        if (hours === '#NAME?' || minutes === '#NAME?' || seconds === '#NAME?') {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        hours = parseInt(hours, 10);
        minutes = parseInt(minutes, 10);
        seconds = parseInt(seconds, 10);
        if (isNaN(hours) || isNaN(minutes) || isNaN(seconds)) {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        if (hours.toString().toUpperCase().match(/[A-Z]/) || minutes.toString().toUpperCase().match(/[A-Z]/) ||
            seconds.toString().toUpperCase().match(/[A-Z]/)) {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        if (hours > 32767 || minutes > 32767 || seconds > 32767) {
            return this.parent.getErrorStrings()[CommonErrors.num];
        }
        var value = new Date(1900, 0, 1, hours, minutes, seconds);
        var hh = value.getHours();
        var m = value.getMinutes();
        // let s: string | number = value.getSeconds();
        var dd = 'AM';
        var h = hh;
        if (h >= 12) {
            h = hh - 12;
            dd = 'PM';
        }
        if (h === 0) {
            h = 12;
        }
        m = m < 10 ? '0' + m : m;
        // s = s < 10 ? '0' + s : s;
        h = h < 10 ? '0' + h : h;
        return h + ':' + m + ' ' + dd;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the char value.
     */
    BasicFormulas.prototype.ComputeCHAR = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var value;
        if (isNullOrUndefined(args) || args.length !== 1 || args[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        var val = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
        if (val === '#NAME?') {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        if (val.toUpperCase().match(/^[0-9]+$/)) {
            var char = parseInt(val, 10);
            if (char > 255 || char <= 0) {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
            value = String.fromCharCode(char);
        }
        else {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        return value;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the code value.
     */
    BasicFormulas.prototype.ComputeCODE = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var val;
        if (isNullOrUndefined(args) || args.length !== 1 || args[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        var value = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
        if (value === '#NAME?') {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        if (value !== '') {
            val = value.charCodeAt(0);
        }
        else {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        return val;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the currency value.
     */
    BasicFormulas.prototype.ComputeDOLLAR = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var value;
        if (isNullOrUndefined(args) || args.length !== 2 || args[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        var val = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
        var val2 = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('');
        val = val === '' ? '0' : val;
        val2 = val2 === '' ? '0' : val2;
        if (val === '#NAME?') {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        if (val.toUpperCase().match(/^[0-9.]+$/) && val2.toUpperCase().match(/^[0-9.]+$/)) {
            var intl = new Internationalization();
            value = intl.formatNumber(parseFloat(parseFloat(val).toFixed(parseInt(val2, 10))), { format: '$#,##.00' });
        }
        else {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        return value;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the k-th smallest value.
     */
    BasicFormulas.prototype.ComputeSMALL = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var value1;
        if (isNullOrUndefined(args) || args[0] === '' || args.length !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        var cellCollection = this.parent.getCellCollection(args[0]);
        var numArray = [];
        for (var j = 0; j < cellCollection.length; j++) {
            numArray.push(parseFloat(this.parent.getValueFromArg(cellCollection[j]).split(this.parent.tic).join('')));
        }
        numArray = numArray.sort(function (n1, n2) { return n1 - n2; });
        var len = numArray.length;
        for (var k = 0; k < len; k++) {
            if ((isNaN(numArray[k]))) {
                numArray.splice(k, 1);
                k--;
                if (numArray.length === 0) {
                    break;
                }
            }
        }
        var val1 = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('');
        if (val1 === '#NAME?') {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        val1 = parseInt(val1, 10);
        if (val1.toString().toUpperCase().match(/^[0-9]+$/) && numArray[val1 - 1]
            && numArray[val1 - 1].toString().toUpperCase().match(/^[-.0-9]+$/) && val1 !== 0) {
            value1 = numArray[val1 - 1];
        }
        else if (isNullOrUndefined(numArray[val1 - 1])) {
            return this.parent.getErrorStrings()[CommonErrors.num];
        }
        else {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        return value1;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the k-th largest value.
     */
    BasicFormulas.prototype.ComputeLARGE = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var value;
        if (isNullOrUndefined(args) || args.length !== 2 || args[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        var cellCollection = this.parent.getCellCollection(args[0]);
        var numArr = [];
        for (var i = 0; i < cellCollection.length; i++) {
            numArr.push(parseFloat(this.parent.getValueFromArg(cellCollection[i]).split(this.parent.tic).join('')));
        }
        numArr = numArr.sort(function (n1, n2) { return n2 - n1; });
        var length = numArr.length;
        for (var k = 0; k < length; k++) {
            if ((isNaN(numArr[k]))) {
                numArr.splice(k, 1);
                k--;
                if (numArr.length === 0) {
                    break;
                }
            }
        }
        var val = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('');
        if (val === '#NAME?') {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        val = parseInt(val, 10);
        if (val.toString().toUpperCase().match(/^[0-9]+$/) && numArr[val - 1] &&
            numArr[val - 1].toString().toUpperCase().match(/^[-.0-9]+$/) && val !== 0) {
            value = numArr[val - 1];
        }
        else if (isNullOrUndefined(numArr[val - 1])) {
            return this.parent.getErrorStrings()[CommonErrors.num];
        }
        else {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        return value;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string | number} - Compute the Choose value.
     */
    BasicFormulas.prototype.ComputeCHOOSE = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        if (args.length < 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var argsArr = args;
        if (argsArr[0].indexOf(':') > -1 && this.parent.isCellReference(argsArr[0])) {
            var cellCollection = this.parent.getCellCollection(argsArr[0]);
            if (cellCollection.length === 1) {
                argsArr[0] = cellCollection[0];
            }
            else {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
        }
        var cond = this.parent.getValueFromArg(argsArr[0]);
        if (this.parent.getErrorStrings().indexOf(cond) > -1) {
            return cond;
        }
        var indexNum = this.parent.parseFloat(this.parent.getValueFromArg(argsArr[0].split(this.parent.tic).join('')));
        if (indexNum < 1) {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        indexNum = Math.floor(indexNum);
        var result;
        if (isNullOrUndefined(argsArr[indexNum])) {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        result = argsArr[indexNum];
        if (result === '') {
            result = '0';
        }
        if (result.indexOf(':') > -1 && this.parent.isCellReference(result)) {
            var cellCollection = this.parent.getCellCollection(argsArr[0].split(this.parent.tic).join(''));
            if (cellCollection.length === 1) {
                argsArr[0] = cellCollection[0];
            }
            else {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
        }
        return this.parent.getValueFromArg(result).split(this.parent.tic).join('');
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the SUMIF value.
     */
    BasicFormulas.prototype.ComputeSUMIF = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var argArr = range;
        if (argArr[0].indexOf(':') < 0 && !this.parent.isCellReference(argArr[0]) ||
            (argArr[2] && argArr[2].indexOf(':') < 0 && !this.parent.isCellReference(argArr[2]))) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.improper_formula];
        }
        if (argArr.length > 3 || argArr.length < 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var result = this.parent.computeSumIfAndAvgIf(range);
        if (typeof result === 'string' && (this.parent.formulaErrorStrings.indexOf(result)
            || this.parent.getErrorStrings().indexOf(result))) {
            return result;
        }
        return result[0];
    };
    /**
     * @hidden
     * @param {string[]} absValue - specify the absValue.
     * @returns {string | number} - Compute the AVERAGE value.
     */
    BasicFormulas.prototype.ComputeABS = function () {
        var absValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            absValue[_i] = arguments[_i];
        }
        var argArr = absValue;
        var cellvalue = '';
        var absVal;
        if (absValue.length === 0 || absValue.length > 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        if (argArr[0].toString().split(this.parent.tic).join('').trim() === '' || argArr[0].indexOf(this.parent.tic) > -1) {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        if (this.parent.isCellReference(argArr[0])) {
            cellvalue = this.parent.getValueFromArg(argArr[0]);
            if (cellvalue === '') {
                return this.parent.getErrorStrings()[CommonErrors.name];
            }
            absVal = this.parent.parseFloat(cellvalue);
            if (isNaN(absVal)) {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
        }
        else {
            absVal = this.parent.parseFloat(argArr[0]);
            if (isNaN(absVal)) {
                return this.parent.getErrorStrings()[CommonErrors.name];
            }
        }
        return Math.abs(absVal);
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {string} - Compute the AVERAGE value.
     */
    BasicFormulas.prototype.ComputeAVERAGE = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        var argArr = args;
        for (var i = 0; i < argArr.length; i++) {
            if (argArr[i].indexOf(':') > -1) {
                if (argArr[i].indexOf(this.parent.tic) > -1) {
                    return this.parent.getErrorStrings()[CommonErrors.value];
                }
            }
        }
        return this.parent.calculateAvg(argArr);
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the AVERAGEIF value.
     */
    BasicFormulas.prototype.ComputeAVERAGEIF = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var argList = range;
        if (argList[0].indexOf(':') < 0 && !this.parent.isCellReference(argList[0])) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.improper_formula];
        }
        var resultVal = this.parent.computeSumIfAndAvgIf(range);
        if (typeof resultVal === 'string' && (this.parent.formulaErrorStrings.indexOf(resultVal)
            || this.parent.getErrorStrings().indexOf(resultVal))) {
            return resultVal;
        }
        return this.parent.parseFloat(resultVal[0]) / this.parent.parseFloat(resultVal[1]);
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string} - Compute the CONCATENATE value.
     */
    BasicFormulas.prototype.ComputeCONCATENATE = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        if (isNullOrUndefined(range) || (range.length === 1 && range[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_arguments];
        }
        var argsList = range;
        var result = '';
        var tempStr = '';
        for (var i = 0; i < argsList.length; i++) {
            if (argsList[i].indexOf(':') > -1 && this.parent.isCellReference(argsList[i])) {
                if (this.isConcat) {
                    var cells = this.parent.getCellCollection(argsList[i]);
                    for (var i_3 = 0; i_3 < cells.length; i_3++) {
                        tempStr = this.parent.getValueFromArg(cells[i_3]);
                        result = result + tempStr;
                    }
                }
                else {
                    return this.parent.getErrorStrings()[CommonErrors.value];
                }
            }
            else {
                if (argsList.length === 1 && argsList[0].indexOf(this.parent.tic) < 0) {
                    return this.parent.getErrorStrings()[CommonErrors.name];
                }
                else {
                    tempStr = this.parent.getValueFromArg(argsList[i]);
                    result = result + tempStr;
                }
            }
            if (this.parent.getErrorStrings().indexOf(tempStr) > -1) {
                return tempStr;
            }
        }
        return result.split(this.parent.tic).join('');
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string} - Compute the CONCAT value.
     */
    BasicFormulas.prototype.ComputeCONCAT = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        this.isConcat = true;
        return this.ComputeCONCATENATE.apply(this, range);
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string | number} - Compute the MAX value.
     */
    BasicFormulas.prototype.ComputeMAX = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.parent.computeMinMax(args, 'max');
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string} - Compute the MIN value.
     */
    BasicFormulas.prototype.ComputeMIN = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.parent.computeMinMax(args, 'min');
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string} - Compute the RAND value.
     */
    BasicFormulas.prototype.ComputeRAND = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length === 1 && args[0] === '') {
            args.length = 0;
        }
        if (args.length > 0) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        return Math.random().toString();
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string} - Compute the AND value.
     */
    BasicFormulas.prototype.ComputeAND = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.parent.computeAndOr(args, 'and');
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string} - Compute the OR value.
     */
    BasicFormulas.prototype.ComputeOR = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.parent.computeAndOr(args, 'or');
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {string | number} - Compute the find value.
     */
    BasicFormulas.prototype.ComputeFIND = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var argsList = args;
        if (argsList.length > 3) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var findText = this.parent.removeTics(this.parent.getValueFromArg(argsList[0]));
        var withinText = this.parent.removeTics(this.parent.getValueFromArg(argsList[1]));
        if (this.parent.getErrorStrings().indexOf(findText) > -1 || this.parent.getErrorStrings().indexOf(withinText) > -1) {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        var startNum = 1;
        if (argsList.length === 3) {
            startNum = this.parent.removeTics(this.parent.getValueFromArg(argsList[2]));
            if (this.parent.getErrorStrings().indexOf(startNum) > -1) {
                return startNum;
            }
            startNum = this.parent.parseFloat(startNum);
            if (isNaN(startNum)) {
                startNum = 1;
            }
        }
        if (startNum <= 0 || startNum > withinText.length) {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        var loc = withinText.indexOf(findText, startNum - 1);
        if (loc < 0) {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        return (Number(loc) + Number(1)).toString();
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the index.
     */
    BasicFormulas.prototype.ComputeINDEX = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var argArr = range;
        var argCount = argArr.length;
        if (isNullOrUndefined(range) || (argArr.length === 1 && argArr[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        if (argCount > 3) {
            return this.parent.getErrorStrings()[CommonErrors.ref];
        }
        var rangeValue = '';
        var rangeArr = [];
        if (argCount > 2) {
            for (var i_4 = 0; i_4 < argCount; i_4++) {
                if (this.parent.isCellReference(argArr[i_4]) && argArr[i_4].indexOf(':') < 0) {
                    return this.parent.getErrorStrings()[CommonErrors.ref];
                }
                if (this.parent.isCellReference(argArr[i_4])) {
                    rangeArr[i_4] = argArr[i_4];
                }
            }
        }
        rangeValue = argArr[0];
        argArr[1] = argArr[1] === '' ? '1' : argArr[1];
        argArr[1] = this.parent.getValueFromArg(argArr[1]);
        if (this.parent.getErrorStrings().indexOf(argArr[1]) > -1) {
            return argArr[1];
        }
        if (!isNullOrUndefined(argArr[2])) {
            argArr[2] = argArr[2] === '' ? '1' : argArr[2];
            argArr[2] = this.parent.getValueFromArg(argArr[2]);
            if (this.parent.getErrorStrings().indexOf(argArr[2]) > -1) {
                return argArr[2];
            }
            if (argArr[2] === '0') {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
        }
        var row = parseFloat(argArr[1]);
        row = !isNaN(row) ? row : -1;
        var col = parseFloat(argArr[2] ? argArr[2] : '1');
        col = !isNaN(col) ? col : -1;
        if (row === -1 || col === -1) {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        var i = argArr[0].indexOf(':');
        var startRow = this.parent.rowIndex(rangeValue.substring(0, i));
        var endRow = this.parent.rowIndex(rangeValue.substring(i + 1));
        var startCol = this.parent.colIndex(rangeValue.substring(0, i));
        var endCol = this.parent.colIndex(rangeValue.substring(i + 1));
        if (row > endRow - startRow + 1 || col > endCol - startCol + 1) {
            return this.parent.getErrorStrings()[CommonErrors.ref];
        }
        row = startRow + row - 1;
        col = startCol + col - 1;
        var cellRef = this.getSheetReference(rangeValue) + this.parent.convertAlpha(col) + row;
        var result = this.parent.getValueFromArg(cellRef);
        if (result === '') {
            return 0;
        }
        return result;
    };
    BasicFormulas.prototype.getSheetReference = function (range) {
        return range.indexOf(this.parent.sheetToken) === 0 && range.lastIndexOf(this.parent.sheetToken) > range.indexOf(this.parent.sheetToken) ? range.substring(0, range.lastIndexOf(this.parent.sheetToken) + 1) : '';
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the if.
     */
    BasicFormulas.prototype.ComputeIFS = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var argArr = range;
        if (isNullOrUndefined(range) || (argArr.length === 1 && argArr[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var condition = '';
        var result = '';
        for (var i = 0; i < argArr.length; i++) {
            condition = this.parent.getValueFromArg(argArr[i]);
            if (condition !== this.parent.trueValue && condition !== this.parent.falseValue) {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
            if (condition === this.parent.trueValue) {
                if (argArr[i + 1].indexOf(this.parent.arithMarker) > -1) {
                    return this.parent.trueValue;
                }
                if (this.parent.isCellReference(argArr[i + 1].split(this.parent.tic).join(''))) {
                    result = this.parent.getValueFromArg(argArr[i + 1]);
                }
                else {
                    result = (argArr[i + 1].indexOf(this.parent.tic) > -1) ? argArr[i + 1].split(this.parent.tic).join('') :
                        this.parent.getErrorStrings()[CommonErrors.name];
                }
                i = i + 1;
                return result;
            }
            else if (condition === this.parent.falseValue) {
                i = i + 1;
            }
        }
        return this.parent.getErrorStrings()[CommonErrors.na];
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {number | string} - Compute the count.
     */
    BasicFormulas.prototype.ComputeCOUNTA = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var argArr = args;
        var cellColl;
        var result = 0;
        var cellValue;
        for (var i = 0; i < argArr.length; i++) {
            if (argArr[i].indexOf(':') > -1 && this.parent.isCellReference(argArr[i])) {
                cellColl = this.parent.getCellCollection(argArr[i].split(this.parent.tic).join(''));
                for (var j = 0; j < cellColl.length; j++) {
                    cellValue = this.parent.getValueFromArg(cellColl[j]);
                    if (cellValue.length > 0) {
                        result++;
                    }
                }
            }
            else {
                var cellValue_1 = this.parent.getValueFromArg(argArr[i].split(this.parent.tic).join(''));
                if (cellValue_1.length > 0) {
                    result++;
                }
            }
        }
        return result;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {number | string} - Compute the average.
     */
    BasicFormulas.prototype.ComputeAVERAGEA = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var argArrs = args;
        var cellCol;
        var result = 0;
        var cellValue;
        var length = 0;
        var parseValue;
        for (var k = 0; k < argArrs.length; k++) {
            if (argArrs[k].indexOf(':') > -1 && this.parent.isCellReference(argArrs[k])) {
                cellCol = this.parent.getCellCollection(argArrs[k].split(this.parent.tic).join(''));
                for (var j = 0; j < cellCol.length; j++) {
                    cellValue = this.parent.getValueFromArg(cellCol[j]);
                    if (cellValue.toUpperCase() === this.parent.trueValue) {
                        cellValue = '1';
                    }
                    else if (cellValue.toUpperCase() === this.parent.falseValue || cellValue === '') {
                        cellValue = '0';
                    }
                    else if (this.parent.getErrorStrings().indexOf(cellValue) > -1) {
                        return cellValue;
                    }
                    else if (cellValue.length > 0) {
                        parseValue = parseFloat(cellValue);
                        cellValue = !isNaN(parseValue) ? parseValue : 0;
                        result = result + cellValue;
                        length = length + 1;
                    }
                }
                length = cellCol.length;
            }
            else {
                if (argArrs[k] === this.parent.trueValue) {
                    argArrs[k] = '1';
                }
                if (argArrs[k] === this.parent.falseValue || argArrs[k] === '') {
                    argArrs[k] = '0';
                }
                cellValue = this.parent.getValueFromArg(argArrs[k].split(this.parent.tic).join(''));
                if (this.parent.getErrorStrings().indexOf(cellValue) > -1) {
                    return cellValue;
                }
                if (cellValue.length > 0) {
                    parseValue = parseFloat(cellValue);
                    cellValue = !isNaN(parseValue) ? parseValue : 0;
                    result = result + cellValue;
                    length = length + 1;
                }
            }
            if (length === 0) {
                return this.parent.getErrorStrings()[CommonErrors.divzero];
            }
        }
        return result / length;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {number | string} - Compute the count if.
     */
    BasicFormulas.prototype.ComputeSORT = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var argArr = args;
        var result;
        if (isNullOrUndefined(args) || args[0] === '' || argArr.length > 4) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        argArr[1] = argArr[1] ? argArr[1] : '1';
        argArr[2] = argArr[2] ? argArr[2] : '1'; // 1 = Ascending, -1 = Descending. Default is ascending order.
        var order = argArr[2] === '1' ? 'Ascending' : 'Descending';
        argArr[3] = argArr[3] ? argArr[3].toUpperCase() : 'FALSE'; // Default is FALSE = sort by column or row
        argArr[0] = argArr[0].split('$').join('');
        var cellCollection;
        var valueCollection = [];
        if (argArr[0].indexOf(':') > -1) {
            var rangeSplit = argArr[0].split(':');
            if (this.parent.isCellReference(rangeSplit[0]) && this.parent.isCellReference(rangeSplit[1])) {
                var j = argArr[0].indexOf(':');
                var swap = void 0;
                var rowIdx = this.parent.rowIndex(this.parent.substring(argArr[0], 0, j));
                var colIdx = this.parent.colIndex(this.parent.substring(argArr[0], 0, j));
                var eRowIdx = this.parent.rowIndex(this.parent.substring(argArr[0], j + 1, j + argArr[0].length - j - 1));
                var eColIdx = this.parent.colIndex(this.parent.substring(argArr[0], j + 1, j + argArr[0].length - j - 1));
                if (rowIdx > eRowIdx) {
                    swap = eRowIdx;
                    eRowIdx = rowIdx;
                    rowIdx = swap;
                }
                if (colIdx > eColIdx) {
                    swap = eColIdx;
                    eColIdx = colIdx;
                    colIdx = swap;
                }
                argArr[2] = this.parent.getValueFromArg(argArr[2]);
                if (argArr[2] !== '1') {
                    if (argArr[2] !== '-1') {
                        return this.parent.getErrorStrings()[CommonErrors.value];
                    }
                }
                if (!isNaN(this.parseDouble(argArr[1])) && this.parseDouble(argArr[1]) < 1) {
                    return this.parent.getErrorStrings()[CommonErrors.value];
                }
                if (argArr[3].toUpperCase() !== this.parent.trueValue) {
                    if (argArr[3].toUpperCase() !== this.parent.falseValue) {
                        return this.parent.getErrorStrings()[CommonErrors.value];
                    }
                }
                var sheetIdx = '';
                if (argArr[0].indexOf('!') === 0) {
                    sheetIdx = argArr[0];
                    sheetIdx = sheetIdx.replace('!', '');
                    sheetIdx = sheetIdx.indexOf('!');
                    sheetIdx = argArr[0].substring(0, sheetIdx + 2);
                }
                argArr[0] = sheetIdx + getAlphalabel(colIdx) + rowIdx + ':' + getAlphalabel(eColIdx) + eRowIdx;
                cellCollection = this.parent.getCellCollection(argArr[0]);
                for (var i = 0; i < cellCollection.length; i++) {
                    valueCollection.push(this.parent.getValueFromArg(cellCollection[i]));
                }
                var colSort = [];
                var totalColumn = eColIdx - colIdx + 1;
                if (argArr[3] === 'TRUE') {
                    for (var i = 0; i < totalColumn; i++) {
                        if (valueCollection[i + ((this.parseDouble(argArr[1]) - 1) * totalColumn)]) {
                            colSort.push(isNaN(this.parseDouble(valueCollection[i + ((this.parseDouble(argArr[1]) - 1) * totalColumn)])) ?
                                valueCollection[i + ((this.parseDouble(argArr[1]) - 1) * totalColumn)] :
                                this.parseDouble(valueCollection[i + ((this.parseDouble(argArr[1]) - 1) * totalColumn)]));
                        }
                    }
                }
                if (argArr[3] === 'FALSE') {
                    for (var i = 0; i < valueCollection.length; i++) {
                        if (valueCollection[i * totalColumn + this.parseDouble(argArr[1]) - 1]) {
                            colSort.push(isNaN(this.parseDouble(valueCollection[i * totalColumn + this.parseDouble(argArr[1]) - 1])) ?
                                valueCollection[i * totalColumn + this.parseDouble(argArr[1]) - 1] :
                                this.parseDouble(valueCollection[i * totalColumn + this.parseDouble(argArr[1]) - 1]));
                        }
                    }
                }
                var sortedVal = DataUtil.sort(colSort, null, DataUtil.fnSort(order));
                var id = [];
                for (var a = 0; a < sortedVal.length; a++) {
                    for (var b = 0; b < colSort.length; b++) {
                        if (JSON.stringify(sortedVal[a]) === JSON.stringify(colSort[b])) {
                            if (id.indexOf(b) === -1) {
                                id.push(b);
                            }
                        }
                    }
                }
                if (argArr[3] === 'TRUE') {
                    for (var startRow = rowIdx, rowInc = 0; startRow <= eRowIdx; startRow++, rowInc++) {
                        for (var a = 0, colInc = 0; a < id.length; a++, colInc++) {
                            var cellValue = this.parent.getValueFromArg(sheetIdx + getAlphalabel(id[a] + colIdx) + startRow);
                            var activeCell = this.parent.actCell;
                            activeCell = activeCell.indexOf('!') > -1 ? activeCell.split('!')[1] : activeCell;
                            var actRowIdx = this.parent.rowIndex(activeCell);
                            var actColIdx = this.parent.colIndex(activeCell);
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            this.parent.parentObject.setValueRowCol(this.parent.getSheetID(this.parent.grid) + 1, cellValue, actRowIdx + rowInc, actColIdx + colInc);
                        }
                    }
                    result = this.parent.getValueFromArg(sheetIdx + getAlphalabel(id[0] + colIdx) + rowIdx);
                }
                if (argArr[3] === 'FALSE') {
                    for (var a = 0, rowInc = 0; a < id.length; a++, rowInc++) {
                        for (var startCol = colIdx, colInc = 0; startCol <= eColIdx; startCol++, colInc++) {
                            var value = this.parent.getValueFromArg(sheetIdx + getAlphalabel(startCol) + (id[a] + rowIdx));
                            var activeCell = this.parent.actCell;
                            activeCell = activeCell.indexOf('!') > -1 ? activeCell.split('!')[1] : activeCell;
                            var actColIdx = this.parent.colIndex(activeCell);
                            var actRowIdx = this.parent.rowIndex(activeCell);
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            this.parent.parentObject.setValueRowCol(this.parent.getSheetID(this.parent.grid) + 1, value, actRowIdx + rowInc, actColIdx + colInc);
                        }
                    }
                    result = this.parent.getValueFromArg(sheetIdx + getAlphalabel(colIdx) + (id[0] + rowIdx));
                }
            }
        }
        return result;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {number | string} - Compute the count if.
     */
    BasicFormulas.prototype.ComputeCOUNTIF = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var argArr = args;
        if (isNullOrUndefined(args) || args[0] === '' || argArr.length !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var cellColl;
        var result = 0;
        var cellValue;
        var stack = [];
        var op = 'equal';
        var condition = argArr[1].split(this.parent.tic).join('');
        if (condition.startsWith('<=')) {
            op = 'lessEq';
            condition = condition.substring(2);
        }
        else if (condition.startsWith('>=')) {
            op = 'greaterEq';
            condition = condition.substring(2);
        }
        else if (condition.startsWith('<>')) {
            op = 'notEq';
            condition = condition.substring(2);
        }
        else if (condition.startsWith('<')) {
            op = 'less';
            condition = condition.substring(1);
        }
        else if (condition.startsWith('>')) {
            op = 'greater';
            condition = condition.substring(1);
        }
        else if (condition.startsWith('=')) {
            op = 'equal';
            condition = condition.substring(1);
        }
        if (argArr[0].indexOf(':') > -1 && this.parent.isCellReference(argArr[0])) {
            cellColl = this.parent.getCellCollection(argArr[0].split(this.parent.tic).join(''));
            for (var j = 0; j < cellColl.length; j++) {
                cellValue = this.parent.getValueFromArg(cellColl[j]);
                if (condition.indexOf('*') > -1 || condition.indexOf('?') > -1) {
                    cellValue = this.parent.findWildCardValue(condition, cellValue);
                }
                stack.push(cellValue);
                stack.push(condition);
                if (this.parent.processLogical(stack, op) === this.parent.trueValue) {
                    result++;
                }
            }
        }
        return result;
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the sum if.
     */
    BasicFormulas.prototype.ComputeSUMIFS = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var sum = this.parent.computeIfsFormulas(range, this.parent.falseValue);
        return sum;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {string | number} - Compute the Text.
     */
    BasicFormulas.prototype.ComputeTEXT = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var checkArgs;
        var argsLength = args.length;
        for (var i = 0; i < argsLength; i++) {
            if (isNullOrUndefined(checkArgs)) {
                checkArgs = args[i];
            }
            else {
                checkArgs = checkArgs + ',' + args[i];
            }
        }
        var splitIndex = checkArgs.indexOf(',');
        var frtArg = checkArgs.slice(0, splitIndex);
        var scndArg = checkArgs.slice(checkArgs.indexOf('"') + 1, checkArgs.length);
        var checkScndArg = scndArg.indexOf('"');
        if (splitIndex > -1 && checkScndArg !== scndArg.length - 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var s1 = frtArg;
        var s2 = scndArg.slice(0, scndArg.length - 1);
        var dTime = new Date(1900, 0, 1, 0, 0, 0);
        var checkString = s1 + ',' + s2;
        var intl = new Internationalization();
        if (this.parent.getErrorStrings().indexOf(checkString) > -1) {
            return checkString;
        }
        s1 = this.parent.getValueFromArg(s1);
        s2 = s2.split(this.parent.tic).join('');
        if (s2 === '') {
            return '';
        }
        if (s1 === '' && (s2.length > 0 && (s2.toUpperCase().indexOf('M') > -1 || s2.toUpperCase().indexOf('D') > -1
            || s2.toUpperCase().indexOf('Y') > -1 || s2.toUpperCase().indexOf('S') > -1 || s2.toUpperCase().indexOf('T') > -1)
            || s2.toUpperCase().indexOf('H') > -1)) {
            s1 = dTime.toString();
        }
        var d = this.parseDouble(s1);
        if (isNaN(d) && this.parent.isDate(new Date(s1)) !== null) {
            d = this.parent.toOADate(new Date(s1));
        }
        dTime = Date.parse(s1.split(this.parent.tic).join(''));
        if (!isNaN(d) || !isNaN(dTime)) {
            if (s2[0] === '[') {
                return this.parent.tic + s1 + this.parent.tic;
            }
            if (s2.length > 0 && (s2.toUpperCase().indexOf('M') > -1 || s2.toUpperCase().indexOf('D') > -1
                || s2.toUpperCase().indexOf('Y') > -1 || s2.toUpperCase().indexOf('S') > -1 || s2.toUpperCase().indexOf('T') > -1)
                || s2.toUpperCase().indexOf('H') > -1) {
                s2 = s2.split('Y').join('y').split('D').join('d').split('H').join('h');
                s2 = s2.split('S').join('s').split('m').join('M').split('AM/PM').join('tt');
                var formatChar = s2.split('');
                var isH = false;
                var isMFound = false;
                var i = 0;
                // let mcount: number = 0;
                var lastCharIndex = 0;
                var totalCharforM = 0;
                for (i = 0; i < formatChar.length;) {
                    var c = formatChar[i];
                    if (c === 's' && formatChar[lastCharIndex] === 'M') {
                        formatChar[lastCharIndex] = 'm';
                        if (formatChar[lastCharIndex - 1] === 'M') {
                            formatChar[lastCharIndex - 1] = 'm';
                        }
                    }
                    if (this.parent.isChar(c)) {
                        lastCharIndex = i;
                        if (c === 'M') {
                            // mcount++;
                            totalCharforM++;
                        }
                    }
                    else if (totalCharforM > 1) {
                        totalCharforM++;
                    }
                    if (c === 'M' && isH) {
                        formatChar[i] = 'm';
                        isMFound = true;
                    }
                    if (c === 'h') {
                        isH = true;
                    }
                    else if (this.parent.isChar(c) && c !== 'M' && c !== 'h' && !isMFound) {
                        isH = false;
                        isMFound = false;
                    }
                    i++;
                }
                s2 = String(formatChar);
                s2 = s2.split(',').join('').split('\n').join(' ');
                var dt = this.parent.fromOADate(d);
                if (d === 0) {
                    dt = dTime;
                }
                var getSkeleton = getSkeletonVal(s2);
                if (getSkeleton === '') {
                    return this.parent.getErrorStrings()[CommonErrors.name];
                }
                var dFormatter = intl.getDateFormat({ skeleton: getSkeleton, type: 'date' });
                var formattedString = dFormatter(new Date(dt.toString()));
                s1 = formattedString;
            }
            else {
                s1 = intl.formatNumber(d, { format: s2 });
            }
        }
        return s1;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {number | string} - Compute the count if.
     */
    BasicFormulas.prototype.ComputeCOUNTIFS = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var sum = this.parent.computeIfsFormulas(args, this.parent.trueValue);
        return sum;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {number | string} - Compute the Average if.
     */
    BasicFormulas.prototype.ComputeAVERAGEIFS = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var sum = this.parent.computeIfsFormulas(args, this.parent.falseValue, this.parent.trueValue);
        return sum;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {string | number} - Compute the Match.
     */
    BasicFormulas.prototype.ComputeMATCH = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var argArr = args;
        if (isNullOrUndefined(argArr) || (argArr.length === 1 && argArr[0] === '') || argArr.length < 2 || argArr.length > 3) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var cellColl;
        var cellValue = [];
        var lookupVal = argArr[0].split(this.parent.tic).join('');
        if (this.parent.isCellReference(lookupVal)) {
            lookupVal = this.parent.getValueFromArg(lookupVal);
        }
        if (!lookupVal.toString().length) {
            return this.parent.getErrorStrings()[CommonErrors.na];
        }
        argArr[2] = isNullOrUndefined(argArr[2]) ? '1' : argArr[2].split(this.parent.tic).join('');
        if (argArr[2].split(this.parent.tic).join('') === this.parent.trueValue) {
            argArr[2] = '1';
        }
        if (argArr[2].split(this.parent.tic).join('') === this.parent.falseValue) {
            argArr[2] = '0';
        }
        var matchType = parseFloat(argArr[2]);
        if (matchType !== -1 && matchType !== 0 && matchType !== 1) {
            return this.parent.getErrorStrings()[CommonErrors.na];
        }
        var index = 0;
        var indexVal = '';
        if (argArr[1].indexOf(':') > -1 || this.parent.isCellReference(argArr[1])) {
            cellColl = this.parent.getCellCollection(argArr[1].split(this.parent.tic).join(''));
            for (var j = 0; j < cellColl.length; j++) {
                cellValue[j] = this.parent.getValueFromArg(cellColl[j]).split(this.parent.tic).join('');
            }
            for (var i = 0; i < cellValue.length; i++) {
                if (!cellValue[i].toString().length) {
                    continue;
                }
                if (matchType === 1) {
                    if (lookupVal === cellValue[i]) {
                        return i + 1;
                    }
                    else if (lookupVal > cellValue[i]) {
                        if (!indexVal) {
                            index = i + 1;
                            indexVal = cellValue[i];
                        }
                        else if (cellValue[i] > indexVal) {
                            index = i + 1;
                            indexVal = cellValue[i];
                        }
                    }
                }
                else if (matchType === 0) {
                    if (lookupVal.indexOf('*') > -1 || lookupVal.indexOf('?') > -1) {
                        cellValue[i] = this.parent.findWildCardValue(lookupVal, cellValue[i]);
                    }
                    if (lookupVal === cellValue[i]) {
                        return i + 1;
                    }
                    if (this.parent.parseFloat(lookupVal) === this.parent.parseFloat(cellValue[i])) {
                        return i + 1;
                    }
                }
                else if (matchType === -1) {
                    if (lookupVal === cellValue[i]) {
                        return i + 1;
                    }
                    else if (lookupVal < cellValue[i]) {
                        if (!indexVal) {
                            index = i + 1;
                            indexVal = cellValue[i];
                        }
                        else if (cellValue[i] < indexVal) {
                            index = i + 1;
                            indexVal = cellValue[i];
                        }
                    }
                }
            }
        }
        return index ? index : this.parent.getErrorStrings()[CommonErrors.na];
    };
    // /**
    //  * @hidden
    //  * @param {string[]} range - specify the range.
    //  * @returns {string | number} - Compute the lookup value.
    //  */
    // public ComputeLOOKUP(...range: string[]): string | number {
    //     const argArr: string[] = range;
    //     let result: string = '';
    //     if (isNullOrUndefined(argArr) || (argArr.length === 1 && argArr[0] === '') || argArr.length < 2 || argArr.length > 3) {
    //         return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
    //     }
    //     result = this.parent.computeLookup(argArr);
    //     return result;
    // }
    // /**
    //  * @hidden
    //  * @param {string[]} range - specify the range.
    //  * @returns {string | number} - Compute the vlookup value.
    //  */
    // public ComputeVLOOKUP(...range: string[]): string | number {
    //     const argArr: string[] = range;
    //     let result: string = '';
    //     if (isNullOrUndefined(argArr) || (argArr.length === 1 && argArr[0] === '') || argArr.length < 3 || argArr.length > 4) {
    //         return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
    //     }
    //     result = this.parent.computeVLookup(argArr);
    //     return result;
    // }
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the sub total value.
     */
    BasicFormulas.prototype.ComputeSUBTOTAL = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var argArr = range;
        var result = '';
        if (argArr.length < 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var formula = this.parent.parseFloat(this.parent.getValueFromArg(argArr[0].split(this.parent.tic).join('')));
        // if (isNaN(formula)) {
        //     this.parent.getErrorStrings()[CommonErrors.value];
        // }
        // if ((formula < 1 || formula > 11) && (formula < 101 || formula > 111)) {
        //     this.parent.getErrorStrings()[CommonErrors.value];
        // }
        var cellRef = argArr.slice(1, argArr.length);
        switch (formula) {
            case 1:
            case 101:
                result = this.ComputeAVERAGE.apply(this, cellRef);
                break;
            case 2:
            case 102:
                result = this.ComputeCOUNT.apply(this, cellRef);
                break;
            case 3:
            case 103:
                result = this.ComputeCOUNTA.apply(this, cellRef);
                break;
            case 4:
            case 104:
                result = this.ComputeMAX.apply(this, cellRef);
                break;
            case 5:
            case 105:
                result = this.ComputeMIN.apply(this, cellRef);
                break;
            case 6:
            case 106:
                result = this.ComputePRODUCT.apply(this, cellRef);
                break;
            case 7:
            case 107:
                result = this.ComputeDAY.apply(this, cellRef);
                break;
            case 8:
            case 108:
                result = this.ComputeCONCAT.apply(this, cellRef);
                break;
            case 9:
            case 109:
                result = this.ComputeSUM.apply(this, cellRef);
                break;
            case 10:
            case 110:
                result = this.ComputeAVERAGEA.apply(this, cellRef);
                break;
            case 11:
            case 111:
                result = this.ComputeABS.apply(this, cellRef);
                break;
            default:
                result = this.parent.getErrorStrings()[CommonErrors.value];
                break;
        }
        return result;
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the Radians value.
     */
    BasicFormulas.prototype.ComputeRADIANS = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var argArr = range;
        var result;
        if (argArr[0] === '' || argArr.length > 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        if (argArr[0].indexOf(':') > -1 || argArr[0].split(this.parent.tic).join('') === '') {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        var val = argArr[0].split(this.parent.tic).join('');
        argArr[0] = isNaN(this.parent.parseFloat(val)) ? argArr[0] : val;
        var cellvalue = this.parent.getValueFromArg(argArr[0]);
        var radVal = this.parent.parseFloat(cellvalue);
        if (!isNaN(radVal)) {
            result = Math.PI * (radVal) / 180;
        }
        else {
            if (cellvalue.indexOf(this.parent.tic) > -1) {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
            else {
                return this.parent.getErrorStrings()[CommonErrors.name];
            }
        }
        return result;
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the random between value.
     */
    BasicFormulas.prototype.ComputeRANDBETWEEN = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var argsLength = range.length;
        var min;
        var max;
        var argVal;
        if (argsLength !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        for (var i = 0; i < argsLength; i++) {
            if (range[i] === '') {
                return this.parent.getErrorStrings()[CommonErrors.na];
            }
            if (range[i].indexOf(this.parent.tic) > -1) {
                if (isNaN(parseFloat(range[i].split(this.parent.tic).join('')))) {
                    return this.parent.getErrorStrings()[CommonErrors.value];
                }
                else {
                    range[i] = range[i].split(this.parent.tic).join('');
                }
            }
            argVal = parseFloat(this.parent.getValueFromArg(range[i]));
            if (!this.parent.isCellReference(range[i])) {
                if (isNaN(argVal)) {
                    return this.parent.getErrorStrings()[CommonErrors.name];
                }
                if (i === 0) {
                    min = argVal;
                }
                else {
                    max = argVal;
                }
            }
            else {
                argVal = this.parent.getValueFromArg(range[i]) === '' ? 0 : argVal;
                if (i === 0) {
                    min = argVal;
                }
                else {
                    max = argVal;
                }
                if (min === 0 && max === 0) {
                    return '0';
                }
                if (isNaN(argVal)) {
                    return this.parent.getErrorStrings()[CommonErrors.value];
                }
            }
        }
        if (max < min) {
            return this.parent.getErrorStrings()[CommonErrors.num];
        }
        if (min === 0) {
            return Math.floor(Math.random() * (max - (min - 1))) + min;
        }
        else {
            return max - min === 1 ? Math.round((Math.random() * (max - min)) + min) : Math.floor(Math.random() * (max - (min - 1))) + min;
        }
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the slope value.
     */
    BasicFormulas.prototype.ComputeSLOPE = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var argArr = range;
        if (argArr.length !== 2 || argArr[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var xPointsRange = this.parent.getCellCollection(argArr[1].split(this.parent.tic).join(''));
        var yPointsRange = this.parent.getCellCollection(argArr[0].split(this.parent.tic).join(''));
        if (yPointsRange.length !== xPointsRange.length) {
            return this.parent.getErrorStrings()[CommonErrors.na];
        }
        var yPoints = this.getDataCollection(yPointsRange);
        var xPoints = this.getDataCollection(xPointsRange);
        if (xPoints.indexOf('#NAME?') > -1 || yPoints.indexOf('#NAME?') > -1) {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        var sumXY = 0;
        var sumX2 = 0;
        var sumX = 0;
        var sumY = 0;
        for (var i = 0, len = xPoints.length; i < len; ++i) {
            if (Number(xPoints[i]).toString() !== 'NaN' && Number(yPoints[i]).toString() !== 'NaN') {
                sumXY += Number(xPoints[i]) * Number(yPoints[i]);
                sumX += Number(xPoints[i]);
                sumY += Number(yPoints[i]);
                sumX2 += Number(xPoints[i]) * Number(xPoints[i]);
            }
        }
        // if ((sumXY - sumX * sumY) === 0 || (sumX2 - sumX * sumX) === 0) {
        //     this.parent.getErrorStrings()[CommonErrors.divzero];
        // }
        var result = ((sumXY - sumX * sumY / xPoints.length) / (sumX2 - sumX * sumX / xPoints.length)).toString();
        if (result === 'NaN') {
            return this.parent.getErrorStrings()[CommonErrors.divzero];
        }
        return result;
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the intercept.
     */
    BasicFormulas.prototype.ComputeINTERCEPT = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var argArr = range;
        if (argArr[0] === '' || argArr.length !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var yValuesRange = this.parent.getCellCollection(argArr[0].split(this.parent.tic).join(''));
        var xValuesRange = this.parent.getCellCollection(argArr[1].split(this.parent.tic).join(''));
        if (yValuesRange.length !== xValuesRange.length) {
            return this.parent.getErrorStrings()[CommonErrors.na];
        }
        var xValues = this.getDataCollection(xValuesRange);
        var yValues = this.getDataCollection(yValuesRange);
        if (xValues.indexOf('#NAME?') > -1 || yValues.indexOf('#NAME?') > -1) {
            return this.parent.getErrorStrings()[CommonErrors.name];
        }
        var sumX = 0;
        var sumY = 0;
        for (var i = 0, len = xValues.length; i < len; ++i) {
            sumX += Number(xValues[i]);
            sumY += Number(yValues[i]);
        }
        sumX = sumX / xValues.length;
        sumY = sumY / xValues.length;
        var sumXY = 0;
        var sumX2 = 0;
        var diff;
        for (var i = 0, len = xValues.length; i < len; ++i) {
            diff = Number(xValues[i]) - sumX;
            sumXY += diff * (Number(yValues[i]) - sumY);
            sumX2 += diff * diff;
        }
        var result = (sumY - sumXY / sumX2 * sumX).toString();
        // if ((sumY - sumXY) === 0 || (sumX2 * sumX) === 0) {
        //     this.parent.getErrorStrings()[CommonErrors.divzero];
        // }
        if (result === 'NaN') {
            return this.parent.getErrorStrings()[CommonErrors.divzero];
        }
        return result;
    };
    /**
     * @hidden
     * @param {string[]} logValue - specify the log value.
     * @returns {string | number} - Compute the value.
     */
    BasicFormulas.prototype.ComputeLN = function () {
        var logValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            logValue[_i] = arguments[_i];
        }
        var argArr = logValue;
        var cellvalue = '';
        var logVal;
        var orgValue;
        if (logValue.length === 0 || logValue.length > 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        if (this.parent.isCellReference(argArr[0])) {
            cellvalue = this.parent.getValueFromArg(argArr[0]);
            logVal = this.parent.parseFloat(cellvalue);
            if (logVal <= 0 || cellvalue === '') {
                return this.parent.getErrorStrings()[CommonErrors.num];
            }
            if (isNaN(logVal)) {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
        }
        else {
            orgValue = this.parent.getValueFromArg(argArr[0].split(this.parent.tic).join(''));
            logVal = this.parent.parseFloat(orgValue);
            if (logVal <= 0 || logVal.toString() === '') {
                return this.parent.getErrorStrings()[CommonErrors.num];
            }
            if (isNaN(logVal)) {
                return this.parent.getErrorStrings()[CommonErrors.value];
            }
        }
        return Math.log(logVal);
    };
    /**
     * @hidden
     * @param {string[]} logValue - specify the log value.
     * @returns {boolean | string} - Compute the Isnumber value.
     */
    BasicFormulas.prototype.ComputeISNUMBER = function () {
        var logValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            logValue[_i] = arguments[_i];
        }
        var argArr = logValue;
        if (logValue.length === 0 || logValue.length > 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var orgValue = (this.parent.isCellReference(argArr[0])) ? this.parent.getValueFromArg(argArr[0]) :
            this.parent.getValueFromArg(argArr[0].split(this.parent.tic).join(''));
        if (orgValue.toString() === '') {
            return false;
        }
        var logVal = this.parent.parseFloat(orgValue);
        return !isNaN(logVal) ? true : false;
    };
    /**
     * @hidden
     * @param {string[]} logValue - specify the log value.
     * @returns {number | string} - Compute the round value.
     */
    BasicFormulas.prototype.ComputeROUND = function () {
        var logValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            logValue[_i] = arguments[_i];
        }
        var argArr = logValue;
        var orgValue;
        var x = 0;
        var digits = 0;
        var round;
        var numStr;
        var digStr;
        var mult;
        if (logValue.length === 0 || logValue.length > 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        if (logValue.length === 1) {
            orgValue = (argArr[0].split(this.parent.tic).join('') === 'TRUE')
                ? '1'
                : (argArr[0].split(this.parent.tic).join('') === 'FALSE')
                    ? '0'
                    : argArr[0];
            return Math.round(this.parent.parseFloat(orgValue)).toString();
        }
        numStr = this.parent.getValueFromArg(argArr[0]);
        digStr = (argArr[1].split(this.parent.tic).join('')) === '' ? '0' :
            this.parent.getValueFromArg(argArr[1].split(this.parent.tic).join(''));
        numStr = (numStr.split(this.parent.tic).join('') === 'TRUE')
            ? '1'
            : (numStr.split(this.parent.tic).join('') === 'FALSE')
                ? '0' : numStr;
        digStr = (digStr.split(this.parent.tic).join('') === 'TRUE') ? '1'
            : (digStr.split(this.parent.tic).join('') === 'FALSE')
                ? '0' : digStr;
        if (numStr !== '' && digStr !== '') {
            x = this.parent.parseFloat(numStr);
            digits = this.parent.parseFloat(digStr);
            if (!isNaN(digits) && !isNaN(x) && digits > 0) {
                round = x.toFixed(digits);
            }
            else {
                mult = Math.pow(10, -digits);
                round = Math.round(x / mult) * mult;
            }
        }
        return round.toString();
    };
    /**
     * @hidden
     * @param {string[]} logValue - specify the log value.
     * @returns {boolean | string} - Compute the power value.
     */
    BasicFormulas.prototype.ComputePOWER = function () {
        var logValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            logValue[_i] = arguments[_i];
        }
        var argArr = logValue;
        var power;
        var orgNumValue;
        var orgPowValue;
        if (logValue.length === 0 || logValue.length > 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        orgNumValue = this.parent.getValueFromArg(argArr[0]);
        orgPowValue = this.parent.getValueFromArg(argArr[1]);
        orgNumValue = (orgNumValue.split(this.parent.tic).join('') === 'TRUE') ? '1' :
            (orgNumValue.split(this.parent.tic).join('') === 'FALSE') ? '0' : orgNumValue;
        orgPowValue = (orgPowValue.split(this.parent.tic).join('') === 'TRUE') ? '1' :
            (orgPowValue.split(this.parent.tic).join('') === 'FALSE') ? '0' : orgPowValue;
        var logNumValue = this.parent.parseFloat(orgNumValue);
        var logPowValue = this.parent.parseFloat(orgPowValue);
        if (!isNaN(logNumValue) && !isNaN(logPowValue)) {
            if (logNumValue === 0 && logPowValue < 0) {
                return this.parent.getErrorStrings()[CommonErrors.divzero];
            }
            if (logNumValue === 0 && logPowValue === 0) {
                return this.parent.getErrorStrings()[CommonErrors.num];
            }
            power = Math.pow(logNumValue, logPowValue);
        }
        else {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
        return power.toString();
    };
    /**
     * @hidden
     * @param {string[]} logValue - specify the log value.
     * @returns {number | string} - Compute the log value.
     */
    BasicFormulas.prototype.ComputeLOG = function () {
        var logValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            logValue[_i] = arguments[_i];
        }
        var argArr = logValue;
        var orgNumValue;
        var orgBaseValue;
        if (logValue.length === 0 || logValue.length > 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        orgNumValue = this.parent.getValueFromArg(argArr[0]);
        orgBaseValue = (logValue.length === 2) ? this.parent.getValueFromArg(argArr[1]) : '10';
        if ((orgNumValue === '' || orgNumValue === null) || (orgBaseValue === '' || orgBaseValue === null)) {
            return this.parent.getErrorStrings()[CommonErrors.num];
        }
        orgNumValue = (orgNumValue.split(this.parent.tic).join('') === 'TRUE') ? '1' :
            (orgNumValue.split(this.parent.tic).join('') === 'FALSE') ? '0' : orgNumValue;
        orgBaseValue = (orgBaseValue.split(this.parent.tic).join('') === 'TRUE') ? '1' :
            (orgBaseValue.split(this.parent.tic).join('') === 'FALSE') ? '0' : orgBaseValue;
        var logNumValue = this.parent.parseFloat(orgNumValue);
        var logBaseValue = this.parent.parseFloat(orgBaseValue);
        if (logNumValue <= 0 || logBaseValue <= 0) {
            return this.parent.getErrorStrings()[CommonErrors.num];
        }
        if (logBaseValue === 1) {
            return this.parent.getErrorStrings()[CommonErrors.divzero];
        }
        if (!isNaN(logNumValue) && !isNaN(logBaseValue)) {
            return ((Math.log(logNumValue) / Math.LN10) / (Math.log(logBaseValue) / Math.LN10)).toString();
        }
        else {
            return this.parent.getErrorStrings()[CommonErrors.value];
        }
    };
    /**
     * @hidden
     * @param {string[]} logValue - specify the log value.
     * @returns {boolean | string} - Compute the trunc value.
     */
    BasicFormulas.prototype.ComputeTRUNC = function () {
        var logValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            logValue[_i] = arguments[_i];
        }
        var argArr = logValue;
        var orgNumValue;
        var orgDigitValue = 0;
        if (logValue.length === 0 || logValue.length > 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        if (logValue.length === 2) {
            orgDigitValue = this.parent.getValueFromArg(argArr[1]);
            orgDigitValue = (orgDigitValue.split(this.parent.tic).join('') === 'TRUE') ? '1' :
                (orgDigitValue.split(this.parent.tic).join('') === 'FALSE') ? '0' : orgDigitValue;
            orgDigitValue = this.parent.parseFloat(orgDigitValue);
        }
        orgNumValue = this.parent.getValueFromArg(argArr[0]);
        orgNumValue = (orgNumValue.split(this.parent.tic).join('') === 'TRUE') ? '1' :
            (orgNumValue.split(this.parent.tic).join('') === 'FALSE') ? '0' : orgNumValue;
        var logNumValue = this.parent.parseFloat(orgNumValue.split(this.parent.tic).join(''));
        if (isNaN(logNumValue) || isNaN(orgDigitValue)) {
            return (argArr[0] === this.parent.tic || this.parent.isCellReference(argArr[0]) || (argArr[1] === this.parent.tic
                || this.parent.isCellReference(argArr[1]))) ? this.parent.getErrorStrings()[CommonErrors.value]
                : this.parent.getErrorStrings()[CommonErrors.name];
        }
        var normalizer = Math.pow(10, orgDigitValue);
        var logDigitValue = (logNumValue < 0) ? -1 : 1;
        return (logDigitValue * Math.floor(normalizer * Math.abs(logNumValue)) / normalizer).toString();
    };
    /**
     * @hidden
     * @param {string[]} logValue - specify the log value.
     * @returns {boolean | string} - Compute the expression.
     */
    BasicFormulas.prototype.ComputeEXP = function () {
        var logValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            logValue[_i] = arguments[_i];
        }
        var argArr = logValue;
        var orgNumValue;
        if (logValue.length === 0 || logValue.length > 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        orgNumValue = this.parent.getValueFromArg(argArr[0]);
        orgNumValue = (orgNumValue.split(this.parent.tic).join('') === 'TRUE') ? '1' :
            (orgNumValue.split(this.parent.tic).join('') === 'FALSE') ? '0' : orgNumValue;
        if (orgNumValue === '') {
            orgNumValue = '0';
        }
        var logNumValue = this.parent.parseFloat(orgNumValue);
        if (logNumValue > 709) {
            return this.parent.getErrorStrings()[CommonErrors.num];
        }
        if (isNaN(logNumValue)) {
            return (argArr[0] === this.parent.tic || this.parent.isCellReference(argArr[0])) ?
                this.parent.getErrorStrings()[CommonErrors.value]
                : this.parent.getErrorStrings()[CommonErrors.name];
        }
        return Math.exp(logNumValue).toString();
    };
    /**
     * @hidden
     * @param {string[]} logValue - specify the log value
     * @returns {boolean | string} - compute the value.
     */
    BasicFormulas.prototype.ComputeGEOMEAN = function () {
        var logValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            logValue[_i] = arguments[_i];
        }
        var argArr = logValue;
        var sum = 1;
        var count = 0;
        var cellVal = 0;
        var dev;
        var r;
        var s;
        var cell;
        if (logValue.length === 0) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        for (r = 0; r < argArr.length; r++) {
            if (argArr[r].indexOf(':') > -1) {
                if (argArr[0] === this.parent.tic) {
                    return this.parent.getErrorStrings()[CommonErrors.value];
                }
                cell = this.parent.getCellCollection(argArr[r].split(this.parent.tic).join(''));
                for (s = 0; s < cell.length; s++) {
                    cellVal = this.parent.getValueFromArg(cell[s]);
                    cellVal = (cellVal.split(this.parent.tic).join('') === 'TRUE') ? '1' :
                        (cellVal.split(this.parent.tic).join('') === 'FALSE') ? '0' : cellVal;
                    dev = this.parent.parseFloat(cellVal);
                    if (dev <= 0) {
                        return this.parent.getErrorStrings()[CommonErrors.num];
                    }
                    else if (!isNaN(dev)) {
                        count++;
                        sum = sum * dev;
                    }
                }
            }
            else {
                cellVal = this.parent.getValueFromArg(argArr[r]);
                if (cellVal.length > 0) {
                    cellVal = (cellVal.split(this.parent.tic).join('') === 'TRUE') ? '1' :
                        (cellVal.split(this.parent.tic).join('') === 'FALSE') ? '0' : cellVal;
                    if (!this.parent.isCellReference(argArr[r])) {
                        if (isNaN(this.parent.parseFloat(cellVal))) {
                            return this.parent.getErrorStrings()[CommonErrors.name];
                        }
                    }
                    dev = this.parent.parseFloat(cellVal);
                    if (dev <= 0) {
                        return this.parent.getErrorStrings()[CommonErrors.num];
                    }
                    else if (!isNaN(dev)) {
                        count++;
                        sum = sum * dev;
                    }
                }
            }
        }
        if (count > 0) {
            sum = Math.pow(sum, 1 / count);
        }
        return sum.toString();
    };
    BasicFormulas.prototype.getDataCollection = function (cells) {
        var cellsData = [];
        for (var i = 0, len = cells.length; i < len; i++) {
            cellsData.push(this.parent.getValueFromArg(cells[i]));
        }
        return cellsData;
    };
    /**
     * @hidden
     * @param {string} value - specify the value
     * @returns {number} - Returns parse double value.
     */
    BasicFormulas.prototype.parseDouble = function (value) {
        var val = this.parent.parseFloat(value.toString());
        return !isNaN(val) ? val : NaN;
    };
    /**
     * @hidden
     * @param {string} value - specify the value
     * @returns {string} - Returns spreadsheet display text.
     */
    BasicFormulas.prototype.spreadsheetDisplayText = function (value) {
        // eslint-disable-next-line
        if (this.parent.parentObject && this.parent.parentObject.element && this.parent.parentObject.element.classList.contains('e-spreadsheet') && this.parent.isCellReference(value)) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var indexes = this.parent.parentObject.getIndexes(value);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            value = this.parent.parentObject.getDisplayText(this.parent.parentObject.
                getActiveSheet().rows[indexes.startIdx].cells[indexes.endIdx]);
        }
        return value;
    };
    /**
     * @hidden
     * @param {string} value - specify the value
     * @returns {string} - Returns spreadsheet format.
     */
    BasicFormulas.prototype.spreadsheetFormat = function (value) {
        // eslint-disable-next-line
        if (this.parent.parentObject && this.parent.parentObject.element && this.parent.parentObject.element.classList.contains('e-spreadsheet') && this.parent.isCellReference(value)) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var index = this.parent.parentObject.getIndexes(value);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            value = this.parent.parentObject.getActiveSheet().rows[index.startIdx].cells[index.endIdx].format;
        }
        return value;
    };
    BasicFormulas.prototype.getModuleName = function () {
        return 'basic-formulas';
    };
    return BasicFormulas;
}());

/**
 * Export formula modules.
 */

var Parser = /** @__PURE__ @class */ (function () {
    function Parser(parent) {
        this.emptyStr = '';
        this.storedStringText = this.emptyStr;
        this.sheetToken = '!';
        /** @hidden */
        this.tokenAdd = 'a';
        /** @hidden */
        this.tokenSubtract = 's';
        /** @hidden */
        this.tokenMultiply = 'm';
        /** @hidden */
        this.tokenDivide = 'd';
        /** @hidden */
        this.tokenLess = 'l';
        this.charEm = 'r';
        this.charEp = 'x';
        /** @hidden */
        this.tokenGreater = 'g';
        /** @hidden */
        this.tokenEqual = 'e';
        /** @hidden */
        this.tokenLessEq = 'k';
        /** @hidden */
        this.tokenGreaterEq = 'j';
        /** @hidden */
        this.tokenNotEqual = 'o';
        /** @hidden */
        this.tokenAnd = 'c';
        this.tokenEm = 'v';
        this.tokenEp = 't';
        /** @hidden */
        this.tokenOr = String.fromCharCode(126);
        this.charAnd = 'i';
        this.charLess = '<';
        this.charGreater = '>';
        this.charEqual = '=';
        this.charLessEq = 'f';
        this.charGreaterEq = 'h';
        this.charNoEqual = 'z';
        this.stringGreaterEq = '>=';
        this.stringLessEq = '<=';
        this.stringNoEqual = '<>';
        this.stringAnd = '&';
        this.stringOr = '^';
        this.charOr = 'w';
        this.charAdd = '+';
        this.charSubtract = '-';
        this.charMultiply = '*';
        this.charDivide = '/';
        this.fixedReference = '$';
        this.spaceString = ' ';
        this.ignoreBracet = false;
        /** @hidden */
        this.isError = false;
        /** @hidden */
        this.isFormulaParsed = false;
        this.findNamedRange = false;
        this.stringsColl = new Map();
        this.tokens = [
            this.tokenAdd, this.tokenSubtract, this.tokenMultiply, this.tokenDivide, this.tokenLess,
            this.tokenGreater, this.tokenEqual, this.tokenLessEq, this.tokenGreaterEq, this.tokenNotEqual, this.tokenAnd, this.tokenOr
        ];
        this.charNOTop = String.fromCharCode(167);
        this.specialSym = ['~', '@', '#', '?'];
        this.isFailureTriggered = false;
        this.parent = parent;
    }
    /**
     * @hidden
     * @param {string} text - specify the text
     * @param {string} fkey - specify the formula key
     * @returns {string} - returns parse.
     */
    Parser.prototype.parse = function (text, fkey) {
        if (this.parent.isTextEmpty(text)) {
            return text;
        }
        if (this.parent.getFormulaCharacter() !== String.fromCharCode(0) && this.parent.getFormulaCharacter() === text[0]) {
            text = text.substring(1);
        }
        if (this.parent.namedRanges.size > 0 || this.parent.storedData.size > 0) {
            text = this.checkForNamedRangeAndKeyValue(text);
            this.findNamedRange = false;
        }
        text = text.split('-+').join('-');
        text = text.split('--').join('+');
        text = text.split('+-').join('-');
        text = text.split('-' + '(' + '-').join('(');
        var formulaString = this.storeStrings(text);
        text = this.storedStringText;
        var i = 0;
        if (isNullOrUndefined(formulaString)) {
            text = text.split(' ').join('');
        }
        text = text.split('=>').join('>=');
        text = text.split('=<').join('<=');
        if (text[text.length - 1] !== this.parent.arithMarker || this.indexOfAny(text, this.tokens) !== (text.length - 2)) {
            text = text.toUpperCase();
        }
        if (text.indexOf(this.sheetToken) > -1) {
            var family = this.parent.getSheetFamilyItem(this.parent.grid);
            if (family.sheetNameToParentObject != null && family.sheetNameToParentObject.size > 0) {
                if (text[0] !== this.sheetToken.toString()) {
                    text = this.parent.setTokensForSheets(text);
                }
                var sheetToken = this.parent.getSheetToken(text.split(this.parent.tic).join(this.emptyStr));
                var scopedRange = this.checkScopedRange(text.split('"').join(this.emptyStr).split(this.sheetToken).join(''));
                if (isNullOrUndefined(sheetToken) && sheetToken !== '' && this.parent.namedRanges.size > 0 && scopedRange !== '') {
                    text = scopedRange;
                }
            }
        }
        text = this.markLibraryFormulas(text);
        try {
            text = this.formulaAutoCorrection(text);
        }
        catch (ex) {
            var args = {
                message: ex.message, exception: ex, isForceCalculable: ex.formulaCorrection,
                computeForceCalculate: false
            };
            if (!args.isForceCalculable) {
                throw this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_expression];
            }
            if (!this.isFailureTriggered) {
                this.parent.trigger('onFailure', args);
                this.isFailureTriggered = true;
            }
            if (args.isForceCalculable && args.computeForceCalculate) {
                text = this.formulaAutoCorrection(text, args);
                this.parent.storedData.get(fkey).formulaText = '=' + text;
            }
            else {
                throw this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_expression];
            }
        }
        if (!this.ignoreBracet) {
            i = text.indexOf(')');
            while (i > -1) {
                var k = text.substring(0, i).lastIndexOf('(');
                if (k === -1) {
                    throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.mismatched_parentheses]);
                }
                if (k === i - 1) {
                    throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.empty_expression]);
                }
                var s = this.emptyStr;
                if (this.ignoreBracet) {
                    s = this.parent.substring(text, k, i - k + 1);
                }
                else {
                    s = this.parent.substring(text, k + 1, i - k - 1);
                }
                try {
                    text = text.substring(0, k) + this.parseSimple(s) + text.substring(i + 1);
                }
                catch (ex) {
                    var args = this.exceptionArgs(ex);
                    if (!this.isFailureTriggered) {
                        this.parent.trigger('onFailure', args);
                        this.isFailureTriggered = true;
                    }
                    var errorMessage = (typeof args.exception === 'string') ? args.exception : args.message;
                    return (this.parent.getErrorLine(ex) ? '' : '#' + this.parent.getErrorLine(ex) + ': ') + errorMessage;
                }
                i = text.indexOf(')');
            }
        }
        if (!this.ignoreBracet && text.indexOf('(') > -1) {
            throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.mismatched_parentheses]);
        }
        text = this.parseSimple(text);
        if (formulaString !== null && formulaString.size > 0) {
            text = this.setStrings(text, formulaString);
        }
        return text;
    };
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    Parser.prototype.exceptionArgs = function (ex) {
        return {
            message: ex.message, exception: ex, isForceCalculable: ex.formulaCorrection,
            computeForceCalculate: false
        };
    };
    Parser.prototype.formulaAutoCorrection = function (formula, args) {
        var arithemeticArr = ['*', '+', '-', '/', '^', '&'];
        var logicalSym = ['>', '=', '<'];
        var i = 0;
        var form = '';
        var op = '';
        var firstOp = '';
        var secondprevOp = '';
        var secondnextOp = '';
        var firstDigit = '';
        var secondDigit = '';
        var countDigit = 0;
        if (this.parent.formulaErrorStrings.indexOf(formula) > -1) {
            return formula;
        }
        else {
            if (this.indexOfAny(formula, this.specialSym) > -1) {
                throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_expression], false);
            }
            while (i < formula.length) {
                formula = formula.split('-*').join('-').split('/*').join('/').split('*/').join('*').split('-/').join('-').
                    split('*+').join('*').split('+*').join('+');
                if ((this.parent.isDigit(formula[i]) && ((formula.length > i + 1)
                    && (this.indexOfAny(formula[i + 1], arithemeticArr) > -1)) && ((formula.length > i + 2)
                    && (!isNullOrUndefined(formula[i + 2]) && this.indexOfAny(formula[i + 2], arithemeticArr) > -1))) &&
                    (formula[i + 2] !== '-' || (formula[i + 1] !== '*' && formula[i + 1] !== '/'))) {
                    if (isNullOrUndefined(args)) {
                        throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.invalid_expression], true);
                    }
                    if (args.computeForceCalculate) {
                        if (this.parent.isDigit(formula[i])) {
                            if (countDigit < 1) {
                                firstDigit = formula[i];
                                firstOp = formula[i + 1];
                                if (isNullOrUndefined(firstOp)) {
                                    firstOp = this.emptyStr;
                                }
                                firstOp = firstOp === '&' ? '' : firstOp;
                                countDigit = countDigit + 1;
                                form = form + firstDigit + firstOp;
                            }
                            else if (countDigit < 2) {
                                secondDigit = formula[i];
                                secondprevOp = formula[i - 1];
                                secondnextOp = formula[i + 1];
                                countDigit = 0;
                                if (secondprevOp === '-') {
                                    secondnextOp = isNullOrUndefined(secondnextOp) ? this.emptyStr : secondnextOp;
                                    secondnextOp = secondnextOp === '&' ? '' : secondnextOp;
                                    form = form + secondprevOp + secondDigit + secondnextOp;
                                }
                                else {
                                    secondnextOp = isNullOrUndefined(secondnextOp) ? this.emptyStr : secondnextOp;
                                    form = form + secondDigit + secondnextOp;
                                }
                            }
                            i = i + 2;
                        }
                        else {
                            form = (formula[i] === '-') ? form + formula[i] : form;
                            i = i + 1;
                        }
                    }
                    else {
                        throw this.parent.formulaErrorStrings[FormulasErrorsStrings.improper_formula];
                    }
                    /* eslint-disable-next-line */
                }
                else if ((this.parent.isDigit(formula[i]) || formula[i] === this.parent.rightBracket || this.parent.storedData.has(formula[i].toUpperCase())) && (isNullOrUndefined(formula[i + 1]) || this.indexOfAny(formula[i + 1], arithemeticArr)) > -1) {
                    op = isNullOrUndefined(formula[i + 1]) ? this.emptyStr : formula[i + 1];
                    op = op === '&' ? '' : op;
                    form = formula[i - 1] === '-' ? form + formula[i - 1] + formula[i] + op : form + formula[i] + op;
                    i = i + 2;
                    /* eslint-disable-next-line */
                }
                else if (this.indexOfAny(formula[i], logicalSym) > -1 && !isNullOrUndefined(formula[i - 1]) && !isNullOrUndefined(formula[i + 1])) {
                    form = form + formula[i];
                    i = i + 1;
                }
                else if (formula[i] === 'q') {
                    while (formula[i] !== this.parent.leftBracket) {
                        form = form + formula[i];
                        i = i + 1;
                    }
                }
                else if (formula[i] === this.parent.leftBracket || formula[i] === this.parent.rightBracket || formula[i] === '{' || formula[i] === '}' || formula[i] === '(' || formula[i] === ')') {
                    form = form + formula[i];
                    i = i + 1;
                }
                else if (this.parent.isUpperChar(formula[i]) || formula[i].indexOf(':') > -1 || formula[i] === this.parent.getParseArgumentSeparator() || ((formula[i] === '%') && (this.parent.isDigit(formula[i - 1])))) {
                    form = form + formula[i];
                    i = i + 1;
                }
                else if (formula[i] === this.parent.tic || formula[i] === ' ' || formula[i] === '.' || formula[i] === this.sheetToken ||
                    formula[i] === '$') {
                    form = form + formula[i];
                    i = i + 1;
                }
                else {
                    if (this.parent.isDigit(formula[i])) {
                        form = formula[i - 1] === '-' ? form + formula[i - 1] + formula[i] : form + formula[i];
                    }
                    if (formula[i] === '-' || formula[i] === '+') {
                        form = form + formula[i];
                        form = form.split('++').join('+').split('+-').join('-').split('-+').join('-');
                    }
                    if (formula[i] === '/' || formula[i] === '*') {
                        form = form + formula[i];
                    }
                    i = i + 1;
                }
            }
        }
        form = form === this.emptyStr ? formula : form;
        if (this.indexOfAny(form[form.length - 1], arithemeticArr) > -1) {
            form = form.substring(0, form.length - 1);
        }
        form = form.split('--').join('-').split('-+').join('-').split('+-').join('-');
        return form;
    };
    Parser.prototype.checkScopedRange = function (text) {
        var _this = this;
        var scopedRange = this.emptyStr;
        var b = 'NaN';
        var id = this.parent.getSheetID(this.parent.grid);
        var sheet = this.parent.getSheetFamilyItem(this.parent.grid);
        if (text[0] === this.sheetToken.toString()) {
            var i = text.indexOf(this.sheetToken, 1);
            var v = parseInt(text.substr(1, i - 1), 10);
            if (i > 1 && !this.parent.isNaN(v)) {
                text = text.substring(i + 1);
                id = v;
            }
        }
        var token = '!' + id.toString() + '!';
        if (sheet === null || sheet.sheetNameToToken == null) {
            return b;
        }
        sheet.sheetNameToToken.forEach(function (value, key) {
            if (sheet.sheetNameToToken.get(key).toString() === token) {
                var s_1 = _this.emptyStr;
                _this.parent.namedRanges.forEach(function (value, key) {
                    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                    if (!isNullOrUndefined(_this.parent.parentObject)) {
                        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                        s_1 = (_this.parent.parentObject.getActiveSheet().name + _this.sheetToken + text).toUpperCase();
                    }
                    else {
                        s_1 = sheet.sheetNameToToken.get(key).toUpperCase();
                    }
                    if (_this.parent.getNamedRanges().has(s_1)) {
                        scopedRange = (_this.parent.getNamedRanges().get(s_1)).toUpperCase();
                        b = scopedRange;
                    }
                });
            }
        });
        return b;
    };
    Parser.prototype.storeStrings = function (tempString) {
        var i = 0;
        var j = 0;
        var id = 0;
        var key = '';
        var storedString = null;
        var condition;
        var ticLoc = tempString.indexOf(this.parent.tic);
        if (ticLoc > -1) {
            i = tempString.indexOf(this.parent.tic);
            while (i > -1 && tempString.length > 0) {
                if (storedString === null) {
                    storedString = this.stringsColl;
                }
                j = i + 1 < tempString.length ? tempString.indexOf(this.parent.tic, i + 1) : -1;
                if (j === -1) {
                    throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.mismatched_tics]);
                }
                condition = this.parent.substring(tempString, i, j - i + 1);
                key = this.parent.tic + this.spaceString + id.toString() + this.parent.tic;
                storedString = storedString.set(key, condition);
                tempString = tempString.substring(0, i) + key + tempString.substring(j + 1);
                i = i + key.length;
                if (i <= tempString.length) {
                    i = tempString.indexOf(this.parent.tic, i);
                }
                id++;
            }
        }
        this.storedStringText = tempString;
        return storedString;
    };
    Parser.prototype.setStrings = function (text, formulaString) {
        for (var i = 0; i < formulaString.size; i++) {
            formulaString.forEach(function (value, key) {
                text = text.split(key).join(value);
            });
        }
        return text;
    };
    /**
     * @hidden
     * @param {string} formulaText - specify the formula text
     * @returns {string} - parse simple.
     */
    Parser.prototype.parseSimple = function (formulaText) {
        var needToContinue = true;
        var text = formulaText;
        if (text.length > 0 && text[0] === '+') {
            text = text.substring(1);
        }
        if (text === '#DIV/0!') {
            return '#DIV/0!';
        }
        if (text === '#NAME?') {
            return '#NAME?';
        }
        if (text === '') {
            return text;
        }
        if (this.parent.formulaErrorStrings.indexOf(text) > -1) {
            return text;
        }
        text = text.split(this.stringLessEq).join(this.charLessEq);
        text = text.split(this.stringGreaterEq).join(this.charGreaterEq);
        text = text.split(this.stringNoEqual).join(this.charNoEqual);
        text = text.split(this.stringAnd).join(this.charAnd);
        text = text.split(this.stringOr).join(this.charOr);
        text = text.split(this.fixedReference).join(this.emptyStr);
        needToContinue = true;
        var expTokenArray = [this.tokenEp, this.tokenEm];
        var mulTokenArray = [this.tokenMultiply, this.tokenDivide];
        var addTokenArray = [this.tokenAdd, this.tokenSubtract];
        var mulCharArray = [this.charMultiply, this.charDivide];
        var addCharArray = [this.charAdd, this.charSubtract];
        var compareTokenArray = [this.tokenLess, this.tokenGreater, this.tokenEqual, this.tokenLessEq,
            this.tokenGreaterEq, this.tokenNotEqual];
        var compareCharArray = [this.charLess, this.charGreater, this.charEqual, this.charLessEq,
            this.charGreaterEq, this.charNoEqual];
        var expCharArray = [this.charEp, this.charEm];
        var andTokenArray = [this.tokenAnd];
        var andCharArray = [this.charAnd];
        var orCharArray = [this.charOr];
        var orTokenArray = [this.tokenOr];
        text = this.parseSimpleOperators(text, expTokenArray, expCharArray);
        text = this.parseSimpleOperators(text, orTokenArray, orCharArray);
        if (needToContinue) {
            text = this.parseSimpleOperators(text, mulTokenArray, mulCharArray);
        }
        if (needToContinue) {
            text = this.parseSimpleOperators(text, addTokenArray, addCharArray);
        }
        if (needToContinue) {
            text = this.parseSimpleOperators(text, compareTokenArray, compareCharArray);
        }
        if (needToContinue) {
            text = this.parseSimpleOperators(text, andTokenArray, andCharArray);
        }
        return text;
    };
    /**
     * @hidden
     * @param {string} formulaText - specify the formula text
     * @param {string[]} markers -  specify the markers
     * @param {string[]} operators - specify the operators
     * @returns {string} - parse Simple Operators
     */
    Parser.prototype.parseSimpleOperators = function (formulaText, markers, operators) {
        if (this.parent.getErrorStrings().indexOf(formulaText) > -1) {
            return formulaText;
        }
        var text = formulaText;
        var i = 0;
        var op = '';
        for (var c = 0; c < operators.length; c++) {
            op = op + operators[c];
        }
        /* eslint-disable */
        text = text.split("---").join("-").split("--").join("+").split(this.parent.getParseArgumentSeparator() + "-").join(this.parent.getParseArgumentSeparator() + "u").split(this.parent.leftBracket + "-").join(this.parent.leftBracket + "u").split("=-").join("=u");
        text = text.split(',+').join(',').split(this.parent.leftBracket + '+').join(this.parent.leftBracket).split('=+').join('=').split('>+').join('>').split('<+').join('<').split('/+').join('/').split('*+').join('*').split('++').join('+').split("*-").join("*u").toString();
        
        /* eslint-enable */
        if (text.length > 0 && text[0] === '-') {
            text = text.substring(1).split('-').join(this.tokenOr);
            text = '0-' + text;
            text = this.parseSimpleOperators(text, [this.tokenSubtract], [this.charSubtract]);
            text = text.split(this.tokenOr).join('-');
        }
        else if (text.length > 0 && text[0] === '+') {
            text = text.substring(1);
        }
        else if (text.length > 0 && text[text.length - 1] === '+') {
            text = text.substring(0, text.length - 1);
        }
        try {
            if (this.indexOfAny(text, operators) > -1) {
                i = this.indexOfAny(text, operators);
                while (i > -1) {
                    var left = '';
                    var right = '';
                    var leftIndex = 0;
                    var rightIndex = 0;
                    var isNotOperator = text[i] === this.charNOTop;
                    var j = 0;
                    if (!isNotOperator) {
                        j = i - 1;
                        if (text[j] === this.parent.arithMarker) {
                            var k = this.findLeftMarker(text.substring(0, j - 1));
                            if (k < 0) {
                                throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.cannot_parse]);
                            }
                            left = this.parent.substring(text, k + 1, j - k - 1);
                            leftIndex = k + 1;
                        }
                        else if (text[j] === this.parent.rightBracket) {
                            var bracketCount = 0;
                            var k = j - 1;
                            while (k > 0 && (text[k] !== 'q' || bracketCount !== 0)) {
                                if (text[k] === 'q') {
                                    bracketCount--;
                                }
                                else if (text[k] === this.parent.rightBracket) {
                                    bracketCount++;
                                }
                                k--;
                            }
                            if (k < 0) {
                                throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.cannot_parse]);
                            }
                            left = this.parent.substring(text, k, j - k + 1);
                            leftIndex = k;
                        }
                        else if (text[j] === this.parent.tic[0]) {
                            var l = text.substring(0, j - 1).lastIndexOf(this.parent.tic);
                            if (l < 0) {
                                throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.cannot_parse]);
                            }
                            left = this.parent.substring(text, l, j - l + 1);
                            leftIndex = l;
                        }
                        else {
                            var period = false;
                            while (j > -1 && (this.parent.isDigit(text[j]) ||
                                (!period && text[j] === this.parent.getParseDecimalSeparator()))) {
                                if (text[j] === this.parent.getParseDecimalSeparator()) {
                                    period = true;
                                }
                                j = j - 1;
                            }
                            if (j > -1 && period && text[j] === this.parent.getParseDecimalSeparator()) {
                                /* eslint-disable-next-line */
                                throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.number_contains_2_decimal_points]);
                            }
                            j = j + 1;
                            if (j === 0 || (j > 0 && !this.parent.isUpperChar(text[j - 1]))) {
                                left = 'n' + this.parent.substring(text, j, i - j);
                                leftIndex = j;
                            }
                            else {
                                j = j - 1;
                                while (j > -1 && (this.parent.isUpperChar(text[j]) || this.parent.isDigit(text[j]))) {
                                    j = j - 1;
                                }
                                if (j > -1 && text[j] === this.sheetToken) {
                                    j = j - 1;
                                    while (j > -1 && text[j] !== this.sheetToken) {
                                        j = j - 1;
                                    }
                                    if (j > -1 && text[j] === this.sheetToken) {
                                        j = j - 1;
                                    }
                                }
                                if (j > -1 && text[j] === ':') {
                                    //// handle range operands
                                    j = j - 1;
                                    while (j > -1 && this.parent.isDigit(text[j])) {
                                        j = j - 1;
                                    }
                                    while (j > -1 && this.parent.isUpperChar(text[j])) {
                                        j = j - 1;
                                    }
                                    if (j > -1 && text[j] === this.sheetToken) {
                                        j--;
                                        while (j > -1 && text[j] !== this.sheetToken) {
                                            j--;
                                        }
                                        if (j > -1 && text[j] === this.sheetToken) {
                                            j--;
                                        }
                                    }
                                    j = j + 1;
                                    left = this.parent.substring(text, j, i - j);
                                    left = this.parent.getCellFrom(left);
                                }
                                else {
                                    j = j + 1;
                                    left = this.parent.substring(text, j, i - j);
                                }
                                this.parent.updateDependentCell(left);
                                leftIndex = j;
                            }
                            if ((this.parent.namedRanges.size > 0 && this.parent.namedRanges.has(left.toUpperCase())) ||
                                (this.parent.storedData.has(left.toUpperCase()))) {
                                left = 'n' + this.checkForNamedRangeAndKeyValue(left);
                            }
                        }
                    }
                    else {
                        leftIndex = i;
                    }
                    if (i === text.length - 1) {
                        /* eslint-disable-next-line */
                        throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.expression_cannot_end_with_an_operator]);
                    }
                    else {
                        j = i + 1;
                        var uFound = text[j] === 'u'; // for 3*-2
                        if (uFound) {
                            j = j + 1;
                        }
                        if (text[j] === this.parent.tic[0]) {
                            var k = text.substring(j + 1).indexOf(this.parent.tic);
                            if (k < 0) {
                                throw this.parent.formulaErrorStrings[FormulasErrorsStrings.cannot_parse];
                            }
                            right = this.parent.substring(text, j, k + 2);
                            rightIndex = k + j + 2;
                        }
                        else if (text[j] === this.parent.arithMarker) {
                            var k = this.findRightMarker(text.substring(j + 1));
                            if (k < 0) {
                                throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.cannot_parse]);
                            }
                            right = this.parent.substring(text, j + 1, k);
                            rightIndex = k + j + 2;
                        }
                        else if (text[j] === 'q') {
                            var bracketCount = 0;
                            var k = j + 1;
                            while (k < text.length && (text[k] !== this.parent.rightBracket || bracketCount !== 0)) {
                                if (text[k] === this.parent.rightBracket) {
                                    bracketCount++;
                                }
                                else if (text[k] === 'q') {
                                    bracketCount--;
                                }
                                k++;
                            }
                            if (k === text.length) {
                                throw this.parent.formulaErrorStrings[FormulasErrorsStrings.cannot_parse];
                            }
                            right = this.parent.substring(text, j, k - j + 1);
                            if (uFound) {
                                right = 'u' + right;
                            }
                            rightIndex = k + 1;
                        }
                        else if (this.parent.isDigit(text[j]) || text[j] === this.parent.getParseDecimalSeparator()) {
                            var period = (text[j] === this.parent.getParseDecimalSeparator());
                            j = j + 1;
                            /* eslint-disable-next-line */
                            while (j < text.length && (this.parent.isDigit(text[j]) || (!period && text[j] === this.parent.getParseDecimalSeparator()))) {
                                if (text[j] === this.parent.getParseDecimalSeparator()) {
                                    period = true;
                                }
                                j = j + 1;
                            }
                            if (j < text.length && text[j] === '%') {
                                j += 1;
                            }
                            if (period && j < text.length && text[j] === this.parent.getParseDecimalSeparator()) {
                                throw this.parent.formulaErrorStrings[FormulasErrorsStrings.number_contains_2_decimal_points];
                            }
                            right = 'n' + this.parent.substring(text, i + 1, j - i - 1);
                            rightIndex = j;
                        }
                        else if (this.parent.isUpperChar(text[j]) || text[j] === this.sheetToken || text[j] === 'u') {
                            if (text[j] === this.sheetToken) {
                                j = j + 1;
                                while (j < text.length && text[j] !== this.sheetToken) {
                                    j = j + 1;
                                }
                            }
                            j = j + 1;
                            var jTemp = 0;
                            var inbracket = false;
                            while (j < text.length && (this.parent.isUpperChar(text[j]) || text[j] === '_'
                                || text[j] === '.' || text[j] === '[' || text[j] === ']' || text[j] === '#' || text[j] === ' '
                                || text[j] === '%' || text[j] === this.parent.getParseDecimalSeparator() && inbracket)) {
                                if (j !== text.length - 1 && text[j] === '[' && text[j + 1] === '[') {
                                    inbracket = true;
                                }
                                if (j !== text.length - 1 && text[j] === ']' && text[j + 1] === ']') {
                                    inbracket = false;
                                }
                                j++;
                                jTemp++;
                            }
                            var noCellReference = (j === text.length) || !this.parent.isDigit(text[j]);
                            if (jTemp > 1) {
                                while (j < text.length && (this.parent.isUpperChar(text[j]) || this.parent.isDigit(text[j])
                                    || text[j] === ' ' || text[j] === '_')) {
                                    j++;
                                }
                                noCellReference = true;
                            }
                            while (j < text.length && this.parent.isDigit(text[j])) {
                                j = j + 1;
                            }
                            if (j < text.length && text[j] === ':') {
                                j = j + 1;
                                if (j < text.length && text[j] === this.sheetToken) {
                                    j++;
                                    while (j < text.length && text[j] !== this.sheetToken) {
                                        j = j + 1;
                                    }
                                    if (j < text.length && text[j] === this.sheetToken) {
                                        j++;
                                    }
                                }
                                while (j < text.length && this.parent.isUpperChar(text[j])) {
                                    j = j + 1;
                                }
                                while (j < text.length && this.parent.isDigit(text[j])) {
                                    j = j + 1;
                                }
                                j = j - 1;
                                right = this.parent.substring(text, i + 1, j - i);
                                right = this.parent.getCellFrom(right);
                            }
                            else {
                                j = j - 1;
                                right = this.parent.substring(text, i + 1, j - i);
                                uFound = text[j] === 'u';
                                if (uFound) {
                                    right = 'u' + right;
                                }
                            }
                            if (noCellReference && right.startsWith(this.sheetToken)) {
                                noCellReference = !this.parent.isCellReference(right);
                            }
                            if (!noCellReference) {
                                this.parent.updateDependentCell(right);
                            }
                            if ((this.parent.namedRanges.size > 0 && this.parent.namedRanges.has(right.toUpperCase()))
                                || (this.parent.storedData.has(right.toUpperCase()))) {
                                right = 'n' + this.checkForNamedRangeAndKeyValue(right);
                            }
                            rightIndex = j + 1;
                        }
                    }
                    var p = op.indexOf(text[i]);
                    var s = this.parent.arithMarker + left + right + markers[p] + this.parent.arithMarker;
                    if (leftIndex > 0) {
                        s = text.substring(0, leftIndex) + s;
                    }
                    if (rightIndex < text.length) {
                        s = s + text.substring(rightIndex);
                    }
                    s = s.split(this.parent.arithMarker2).join(this.parent.arithMarker.toString());
                    text = s;
                    i = this.indexOfAny(text, operators);
                }
            }
            else {
                if (text.length > 0 && (this.parent.isUpperChar(text[0]) || text[0] === this.sheetToken)) {
                    var isCharacter = true;
                    var checkLetter = true;
                    var oneTokenFound = false;
                    var textLen = text.length;
                    for (var k = 0; k < textLen; ++k) {
                        if (text[k] === this.sheetToken) {
                            if (k > 0 && !oneTokenFound) {
                                throw this.parent.getErrorStrings()[CommonErrors.ref];
                            }
                            oneTokenFound = true;
                            k++;
                            while (k < textLen && this.parent.isDigit(text[k])) {
                                k++;
                            }
                            if (k === textLen || text[k] !== this.sheetToken) {
                                isCharacter = false;
                                break;
                            }
                        }
                        else {
                            if (!checkLetter && this.parent.isChar(text[k])) {
                                isCharacter = false;
                                break;
                            }
                            if (this.parent.isChar(text[k]) || this.parent.isDigit(text[k]) || text[k] === this.sheetToken) {
                                checkLetter = this.parent.isUpperChar(text[k]);
                            }
                            else {
                                isCharacter = false;
                                break;
                            }
                        }
                    }
                    if (isCharacter) {
                        this.parent.updateDependentCell(text);
                    }
                }
            }
            return text;
        }
        catch (ex) {
            return ex;
        }
    };
    /**
     * @hidden
     * @param {string} text - specify the text
     * @param {string[]} operators - specify the operators
     * @returns {number} - returns index.
     */
    Parser.prototype.indexOfAny = function (text, operators) {
        for (var i = 0; i < text.length; i++) {
            if (operators.indexOf(text[i]) > -1) {
                return i;
            }
        }
        return -1;
    };
    /**
     * @hidden
     * @param {string} text - specify the text
     * @returns {number} - find Left Marker.
     */
    Parser.prototype.findLeftMarker = function (text) {
        var ret = -1;
        if (text.indexOf(this.parent.arithMarker) > -1) {
            var bracketLevel = 0;
            for (var i = text.length - 1; i >= 0; --i) {
                if (text[i] === this.parent.rightBracket) {
                    bracketLevel--;
                }
                else if (text[i] === this.parent.leftBracket) {
                    bracketLevel++;
                }
                else if (text[i] === this.parent.arithMarker && bracketLevel === 0) {
                    ret = i;
                    break;
                }
            }
        }
        return ret;
    };
    /**
     * @hidden
     * @param {string} text - specify the text.
     * @returns {number} - find Right Marker.
     */
    Parser.prototype.findRightMarker = function (text) {
        var ret = -1;
        if (text.indexOf(this.parent.arithMarker) > -1) {
            var bracketLevel = 0;
            for (var j = 0; j < text.length; ++j) {
                if (text[j] === this.parent.rightBracket) {
                    bracketLevel--;
                }
                else if (text[j] === this.parent.leftBracket) {
                    bracketLevel++;
                }
                else if (text[j] === this.parent.arithMarker && bracketLevel === 0) {
                    ret = j;
                    break;
                }
            }
        }
        return ret;
    };
    /**
     * @hidden
     * @param {string} formula - specify the formula
     * @param {string} fKey - specify the formula key.
     * @returns {string} - parse formula.
     */
    Parser.prototype.parseFormula = function (formula, fKey) {
        if (formula.length > 0 && formula[0] === this.parent.getFormulaCharacter()) {
            formula = formula.substring(1);
        }
        if (formula.indexOf('#REF!') > -1) {
            return this.parent.getErrorStrings()[CommonErrors.ref];
        }
        if (formula.length > 0 && formula[0] === '+') {
            formula = formula.substring(1);
        }
        try {
            this.isFailureTriggered = false;
            this.isError = false;
            formula = this.parse(formula.trim(), fKey);
            this.isFormulaParsed = true;
        }
        catch (ex) {
            var args = this.exceptionArgs(ex);
            if (!this.isFailureTriggered) {
                this.parent.trigger('onFailure', args);
                this.isFailureTriggered = true;
            }
            var errorMessage = (typeof args.exception === 'string') ? args.exception : args.message;
            formula = (isNullOrUndefined(this.parent.getErrorLine(ex)) ? '' : '#' + this.parent.getErrorLine(ex) + ': ') + errorMessage;
            this.isError = true;
        }
        return formula;
    };
    /**
     * @hidden
     * @param {string} formula - specify the formula
     * @returns {string} - mark library formulas.
     */
    Parser.prototype.markLibraryFormulas = function (formula) {
        var bracCount = 0;
        var rightParens = formula.indexOf(')');
        if (rightParens === -1) {
            formula = this.markNamedRanges(formula);
        }
        else {
            while (rightParens > -1) {
                var parenCount = 0;
                var leftParens = rightParens - 1;
                while (leftParens > -1 && (formula[leftParens] !== '(' || parenCount !== 0)) {
                    if (formula[leftParens] === ')') {
                        parenCount++;
                    }
                    // else if (formula[leftParens] === ')') {
                    //     parenCount--;
                    // }
                    leftParens--;
                }
                if (leftParens === -1) {
                    throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.mismatched_parentheses]);
                }
                var i = leftParens - 1;
                while (i > -1 && (this.parent.isChar(formula[i]))) {
                    i--;
                }
                var len = leftParens - i - 1;
                var libFormula = this.parent.substring(formula, i + 1, len);
                if (len > 0 && !isNullOrUndefined(this.parent.getFunction(libFormula))) {
                    if (this.parent.substring(formula, i + 1, len) === 'AREAS') {
                        this.ignoreBracet = true;
                    }
                    else {
                        this.ignoreBracet = false;
                    }
                    var substr = this.parent.substring(formula, leftParens, rightParens - leftParens + 1);
                    try {
                        var args = void 0;
                        substr = substr.split('(').join('').split(')').join('');
                        substr = '(' + this.formulaAutoCorrection(substr, args) + ')';
                    }
                    catch (ex) {
                        var args = {
                            message: ex.message, exception: ex,
                            isForceCalculable: ex.formulaCorrection, computeForceCalculate: false
                        };
                        if (!args.isForceCalculable) {
                            throw this.parent.formulaErrorStrings[FormulasErrorsStrings.improper_formula];
                        }
                        if (!this.isFailureTriggered) {
                            this.parent.trigger('onFailure', args);
                            this.isFailureTriggered = true;
                            bracCount = bracCount + 1;
                        }
                        args.computeForceCalculate = bracCount > 0 ? true : args.computeForceCalculate;
                        if (args.isForceCalculable) {
                            if (args.computeForceCalculate) {
                                substr = substr.split('(').join('').split(')').join('');
                                substr = '(' + this.formulaAutoCorrection(substr, args) + ')';
                            }
                            else {
                                throw this.parent.formulaErrorStrings[FormulasErrorsStrings.improper_formula];
                            }
                        }
                        else {
                            throw this.parent.formulaErrorStrings[FormulasErrorsStrings.improper_formula];
                        }
                    }
                    substr = this.markNamedRanges(substr);
                    substr = this.swapInnerParens(substr);
                    substr = this.addParensToArgs(substr);
                    var id = substr.lastIndexOf(this.parent.getParseArgumentSeparator());
                    if (id === -1) {
                        if (substr.length > 2 && substr[0] === '(' && substr[substr.length - 1] === ')') {
                            if (substr[1] !== '{' && substr[1] !== '(') {
                                substr = substr.substring(0, substr.length - 1) + '}' + substr.substring(substr.length - 1);
                                substr = substr[0] + '{' + substr.substring(1);
                            }
                        }
                    }
                    formula = formula.substring(0, i + 1) + 'q' + this.parent.substring(formula, i + 1, len) +
                        (substr.split('(').join(this.parent.leftBracket))
                            .split(')').join(this.parent.rightBracket) + formula.substring(rightParens + 1);
                }
                else if (len > 0) {
                    return this.parent.getErrorStrings()[CommonErrors.name];
                }
                else {
                    var s = this.emptyStr;
                    if (leftParens > 0) {
                        s = formula.substring(0, leftParens);
                    }
                    s = s + '{' + this.parent.substring(formula, leftParens + 1, rightParens - leftParens - 1) + '}';
                    if (rightParens < formula.length) {
                        s = s + formula.substring(rightParens + 1);
                    }
                    s = this.markNamedRanges(s);
                    formula = s;
                }
                rightParens = formula.indexOf(')');
            }
        }
        formula = (formula.split('{').join('(')).split('}').join(')');
        return formula;
    };
    /**
     * @hidden
     * @param {string} fSubstr - specify the string
     * @returns {string} - swap inner parens.
     */
    Parser.prototype.swapInnerParens = function (fSubstr) {
        if (fSubstr.length > 2) {
            fSubstr = fSubstr[0] + fSubstr.substr(1, fSubstr.length - 2).split('(').join('{').split(')').join('}') + fSubstr[fSubstr.length - 1];
        }
        return fSubstr;
    };
    /**
     * @hidden
     * @param {string} fSubstr - specify the string
     * @returns {string} - add parens to args.
     */
    Parser.prototype.addParensToArgs = function (fSubstr) {
        if (fSubstr.length === 0) {
            return this.emptyStr;
        }
        var rightSides = [];
        rightSides.push(this.parent.getParseArgumentSeparator());
        rightSides.push(this.parent.rightBracket);
        var id = fSubstr.lastIndexOf(this.parent.getParseArgumentSeparator());
        var k = 0;
        if (id === -1) {
            if (fSubstr.length > 2 && fSubstr[0] === '(' && fSubstr[fSubstr.length - 1] === ')') {
                if (fSubstr[1] !== '{' && fSubstr[1] !== '(') {
                    fSubstr = fSubstr.substring(0, fSubstr.length - 1) + '}' + fSubstr.substring(fSubstr.length - 1);
                    fSubstr = fSubstr[0] + '{' + fSubstr.substring(1);
                }
                else {
                    var marker = ['+', '-', '*', '/'];
                    id = this.lastIndexOfAny(fSubstr, marker);
                    if (k === 0 && fSubstr[fSubstr.length - 1] === ')') {
                        k = fSubstr.length - 1;
                    }
                    if (k > 0) {
                        if (fSubstr[id + 1] !== '{' && fSubstr[id - 1] === '}') {
                            fSubstr = fSubstr.substr(0, k) + '}' + fSubstr.substr(k);
                            fSubstr = fSubstr.substr(0, id + 1) + '{' + fSubstr.substr(id + 1);
                        }
                    }
                }
            }
        }
        else {
            var oneTimeOnly = true;
            while (id > -1) {
                var j = this.indexOfAny(fSubstr.substring(id + 1, fSubstr.length), rightSides);
                if (j >= 0) {
                    j = id + j + 1;
                }
                else if (j === -1 && fSubstr[fSubstr.length - 1] === ')') {
                    j = fSubstr.length - 1;
                }
                if (j > 0) {
                    if (fSubstr[id + 1] !== '{' && fSubstr[j - 1] !== '}') {
                        fSubstr = fSubstr.substr(0, j) + '}' + fSubstr.substr(j);
                        fSubstr = fSubstr.substr(0, id + 1) + '{' + fSubstr.substr(id + 1);
                    }
                }
                id = fSubstr.substr(0, id).lastIndexOf(this.parent.getParseArgumentSeparator());
                if (oneTimeOnly && id === -1 && fSubstr[0] === '(') {
                    id = 0;
                    oneTimeOnly = false;
                }
            }
        }
        fSubstr = fSubstr.split('{}').join(this.emptyStr);
        return fSubstr;
    };
    /**
     * @hidden
     * @param {string} text - specify the text
     * @param {string[]} operators - specify the operators
     * @returns {number} - returns last Index Of Any.
     */
    Parser.prototype.lastIndexOfAny = function (text, operators) {
        for (var i = text.length - 1; i > -1; i--) {
            if (operators.indexOf(text[i]) > -1) {
                return i;
            }
        }
        return -1;
    };
    /**
     * @hidden
     * @param {string} formula - specify the formula
     * @returns {string} - mark Named Ranges.
     */
    Parser.prototype.markNamedRanges = function (formula) {
        var markers = [')', this.parent.getParseArgumentSeparator(), '}', '+', '-', '*', '/', '<', '>', '=', '&'];
        var i = (formula.length > 0 && (formula[0] === '(' || formula[0] === '{')) ? 1 : 0;
        if (formula.indexOf('#N/A') > -1) {
            formula = formula.split('#N/A').join('#N~A');
        }
        if (formula.indexOf('#DIV/0!') > -1) {
            formula = formula.split('#DIV/0!').join('#DIV~0!');
        }
        var end = this.indexOfAny(formula.substring(i), markers);
        while (end > -1 && end + i < formula.length) {
            var scopedRange = this.emptyStr;
            var s = null;
            if ((this.parent.substring(formula, i, end)).indexOf('[') > -1) {
                s = this.getTableRange(this.parent.substring(formula, i, end));
            }
            else if (this.parent.storedData.has(this.parent.substring(formula, i, end))) {
                s = this.checkForNamedRangeAndKeyValue(this.parent.substring(formula, i, end));
            }
            else if (this.parent.namedRanges.has(this.parent.substring(formula, i, end))) {
                s = this.checkForNamedRangeAndKeyValue(this.parent.substring(formula, i, end));
            }
            if (isNullOrUndefined(s)) {
                scopedRange = this.checkScopedRange(this.parent.substring(formula, i, end));
                if (scopedRange !== 'NaN') {
                    this.findNamedRange = true;
                    s = scopedRange;
                }
                else if (this.parent.substring(formula, i, end).startsWith(this.sheetToken.toString())) {
                    //let formulaStr: number = this.parent.substring(formula, i, end).indexOf(this.sheetToken, 1);
                    // if (formulaStr > 1) {
                    //     s = this.parent.namedRanges.get(this.parent.substring
                    // (formula.substring(i), formulaStr + 1, end - formulaStr - 1));
                    // }
                }
                if (!isNullOrUndefined(s) && this.findNamedRange) {
                    if (s.indexOf(this.fixedReference) > -1) {
                        s = s.split(this.fixedReference).join(this.emptyStr);
                    }
                }
            }
            if (!isNullOrUndefined(s)) {
                s = s.toUpperCase();
                s = this.parent.setTokensForSheets(s);
                s = this.markLibraryFormulas(s);
            }
            if (!isNullOrUndefined(s) && s !== this.emptyStr) {
                formula = formula.substring(0, i) + s + formula.substring(i + end);
                i += s.length + 1;
            }
            else {
                i += end + 1;
                while (i < formula.length && !this.parent.isUpperChar(formula[i]) && formula[i] !== this.sheetToken) {
                    i++;
                }
            }
            end = i;
            if (i < formula.length - 1 && formula[i] === '{') {
                i = i + 1;
            }
            end = this.indexOfAny(formula.substring(i), markers);
            while (end === 0 && i < formula.length - 1) {
                i++;
                end = this.indexOfAny(formula.substring(i), markers);
            }
            if ((end === -1 || formula.substring(i).indexOf('[') > -1) && i < formula.length) {
                if (formula.substring(i).indexOf('[') > -1) {
                    s = this.getTableRange(formula.substring(i));
                }
                else {
                    if (this.parent.storedData.has(formula.substring(i))) {
                        s = this.parent.storedData.size > 0 ? this.checkForNamedRangeAndKeyValue(formula.substring(i)) : s;
                    }
                    else {
                        s = this.parent.namedRanges.size > 0 ? this.checkForNamedRangeAndKeyValue(formula.substring(i)) : s;
                    }
                }
                if (isNullOrUndefined(s)) {
                    scopedRange = this.checkScopedRange(formula.substring(i));
                    if (scopedRange !== 'NaN') {
                        s = scopedRange;
                    }
                }
                if (!isNullOrUndefined(s) && s !== this.emptyStr) {
                    s = s.toUpperCase();
                    s = this.parent.setTokensForSheets(s);
                    s = this.markLibraryFormulas(s);
                    if (s != null) {
                        var val = formula.substring(i);
                        if (val[val.length - 1] === ')') {
                            formula = formula.substring(0, i) + s + ')';
                        }
                        else {
                            formula = formula.substring(0, i) + s;
                        }
                        i += s.toString().length + 1;
                    }
                }
                end = (i < formula.length) ? this.indexOfAny(formula.substring(i), markers) : -1;
            }
        }
        if (formula.indexOf('#N~A') > -1) {
            formula = formula.split('#N~A').join('#N/A');
        }
        if (formula.indexOf('#DIV~0!') > -1) {
            formula = formula.split('#DIV~0!').join('#DIV/0!');
        }
        return formula;
    };
    /**
     * @hidden
     * @param {string} text - specify the text.
     * @returns {string} - check For Named Range And Key Value
     */
    Parser.prototype.checkForNamedRangeAndKeyValue = function (text) {
        var scopedRange = this.emptyStr;
        if (text.indexOf('[') > -1) {
            var namerangeValue = this.getTableRange(text);
            if (!isNullOrUndefined(namerangeValue)) {
                this.findNamedRange = true;
                text = namerangeValue;
            }
        }
        scopedRange = this.checkScopedRange(text);
        if (scopedRange !== 'NaN') {
            this.findNamedRange = true;
            text = scopedRange;
        }
        else {
            if (text.indexOf(this.sheetToken) > -1) {
                var sheet = this.parent.getSheetFamilyItem(this.parent.grid);
                var value = text.split('"').join(this.emptyStr);
                value = value.substr(0, value.indexOf(this.sheetToken));
                if (sheet.sheetNameToToken.has(value.toUpperCase())) {
                    /* eslint-disable */
                    var sheetIndex = parseInt(sheet.sheetNameToToken.get(value.toUpperCase()).split(this.sheetToken).join(this.emptyStr));
                    // if (!ej.isNullOrUndefined(this.parentObject) && this.parentObject.pluginName == "ejSpreadsheet") {
                    //     var name = text.replace(value, this.parentObject.model.sheets[(sheetIndex + 1)].sheetInfo.text.toUpperCase()).split("'").join(this._string_empty);
                    //     if (this.getNamedRanges().length > 0 && this.getNamedRanges().contains(name.toUpperCase())) {
                    //         text = name;
                    //     }
                    // }
                    /* tslint-enable */
                }
            }
            if (this.parent.storedData.size > 0 && this.parent.storedData.has(text)) {
                text = 'A' + this.parent.colIndex(text);
            }
            if (this.parent.namedRanges.size > 0 && this.parent.namedRanges.has(text.toUpperCase())) {
                if (!isNullOrUndefined(this.parent.parentObject)) {
                    text = this.parse(this.parent.namedRanges.get(text.toUpperCase()));
                }
                else {
                    text = this.parse(this.parent.namedRanges.get(text.toUpperCase()));
                    text = this.parent.setTokensForSheets(text);
                    if (text.indexOf(this.fixedReference) > -1) {
                        text.split(this.fixedReference).join(this.emptyStr);
                    }
                    this.findNamedRange = true;
                }
            }
            if (this.findNamedRange) {
                if (text[0] !== '!' && text[0] !== 'q' && text[0] !== 'bq') {
                    text = this.parent.setTokensForSheets(text);
                    if (text.indexOf(this.fixedReference) > -1) {
                        text = text.split(this.fixedReference).join(this.emptyStr);
                    }
                }
            }
        }
        return text;
    };
    Parser.prototype.getTableRange = function (text) {
        text = text.replace(' ', this.emptyStr).toUpperCase();
        var name = text.replace(']', this.emptyStr).replace('#DATA', this.emptyStr);
        var tableName = name;
        if (name.indexOf(this.parent.getParseArgumentSeparator()) > -1) {
            tableName = name.substring(0, name.indexOf(this.parent.getParseArgumentSeparator())).replace('[', this.emptyStr);
            name = name.replace('[', this.emptyStr).replace(this.parent.getParseArgumentSeparator(), '_');
        }
        var range = this.emptyStr;
        return name.toUpperCase();
    };
    Parser.prototype.findNextEndIndex = function (formula, loc) {
        var count = 0;
        var l = loc;
        var found = false;
        while (!found && loc < formula.length) {
            if (formula[l] === '[') {
                count++;
            }
            else if (formula[l] === ']') {
                count--;
                if (count === 0) {
                    found = true;
                }
            }
            loc++;
        }
        loc = loc - l;
        return loc;
    };
    
    return Parser;
}());

var __extends$3 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Represents the calculate library.
 */
var Calculate = /** @__PURE__ @class */ (function (_super) {
    __extends$3(Calculate, _super);
    /**
     * Base constructor for creating Calculate library.
     *
     * @param {Object} parent - specify the parent
     */
    function Calculate(parent) {
        var _this = _super.call(this, null, null) || this;
        _this.lFormulas = new Map();
        /** @hidden */
        _this.storedData = new Map();
        _this.keyToRowsMap = new Map();
        _this.rowsToKeyMap = new Map();
        /** @hidden */
        _this.rightBracket = String.fromCharCode(161);
        /** @hidden */
        _this.leftBracket = String.fromCharCode(162);
        /** @hidden */
        _this.sheetToken = '!';
        _this.emptyString = '';
        _this.leftBrace = '{';
        _this.rightBrace = '}';
        _this.cell = _this.emptyString;
        _this.cellPrefix = '!0!A';
        _this.treatEmptyStringAsZero = false;
        /** @hidden */
        // eslint-disable-next-line no-useless-escape
        _this.tic = '\"';
        /** @hidden */
        _this.singleTic = '\'';
        /** @hidden */
        _this.trueValue = 'TRUE';
        /** @hidden */
        _this.falseValue = 'FALSE';
        _this.parseDecimalSeparator = '.';
        /** @hidden */
        _this.arithMarker = String.fromCharCode(180);
        /** @hidden */
        _this.arithMarker2 = _this.arithMarker + _this.arithMarker;
        _this.dependentCells = null;
        _this.dependentFormulaCells = null;
        _this.minValue = Number.MIN_SAFE_INTEGER;
        _this.maxValue = Number.MAX_SAFE_INTEGER;
        _this.categoryCollection = ['All'];
        _this.dependencyLevel = 0;
        _this.refreshedCells = new Map();
        _this.computedValues = null;
        /** @hidden */
        _this.randomValues = new Map();
        /** @hidden */
        _this.isRandomVal = false;
        /** @hidden */
        _this.randCollection = [];
        /** @hidden */
        _this.dependencyCollection = [];
        /** @hidden */
        _this.uniqueRange = [];
        /** @hidden */
        _this.skipSpill = false;
        /**
         * @hidden
         */
        _this.formulaErrorStrings = [
            'binary operators cannot start an expression',
            'cannot parse',
            'bad library',
            'invalid char in front of',
            'number contains 2 decimal points',
            'expression cannot end with an operator',
            'invalid characters following an operator',
            'invalid character in number',
            'mismatched parentheses',
            'unknown formula name',
            'requires a single argument',
            'requires 3 arguments',
            'invalid Math argument',
            'requires 2 arguments',
            '#NAME?',
            'too complex',
            'circular reference: ',
            'missing formula',
            'improper formula',
            'invalid expression',
            'cell empty',
            'bad formula',
            'empty expression',
            '',
            'mismatched string quotes',
            'wrong number of arguments',
            'invalid arguments',
            'iterations do not converge',
            'Control is already registered',
            'Calculation overflow',
            'Missing sheet',
            'cannot_parse',
            'expression_cannot_end_with_an_operator',
            '#SPILL!',
            '#DIV/0!'
        ];
        _this.errorStrings = null;
        _this.parseArgumentSeparator = ',';
        _this.dateTime1900 = new Date(1900, 0, 1, 0, 0, 0);
        _this.isParseDecimalSeparatorChanged = false;
        _this.isArgumentSeparatorChanged = false;
        _this.sheetFamilyID = 0;
        _this.defaultFamilyItem = null;
        _this.sheetFamiliesList = null;
        _this.modelToSheetID = null;
        /** @hidden */
        _this.tokenCount = 0;
        _this.sortedSheetNames = null;
        _this.tempSheetPlaceHolder = String.fromCharCode(133);
        /** @hidden */
        _this.namedRanges = new Map();
        _this.formulaInfoTable = null;
        _this.oaDate = new Date(1899, 11, 30);
        _this.millisecondsOfaDay = 24 * 60 * 60 * 1000;
        _this.parseDateTimeSeparator = '/';
        var moduleLoader = new ModuleLoader(_this);
        if (_this.includeBasicFormulas) {
            Calculate_1.Inject(BasicFormulas);
        }
        if (_this.injectedModules && _this.injectedModules.length) {
            moduleLoader.inject(_this.requiredModules(), _this.injectedModules);
        }
        _this.parentObject = isNullOrUndefined(parent) ? _this : parent;
        _this.grid = _this.parentObject;
        _this.parser = new Parser(_this);
        return _this;
    }
    Calculate_1 = Calculate;
    Object.defineProperty(Calculate.prototype, "libraryFormulas", {
        get: function () {
            return this.lFormulas;
        },
        // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
        set: function (formulaColl) {
            this.lFormulas.set(formulaColl.fName, { handler: formulaColl.handler, category: formulaColl.category, description: formulaColl.description });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * To get the argument separator to split the formula arguments.
     *
     * @returns {string} - To get the argument separator to split the formula arguments.
     */
    Calculate.prototype.getParseArgumentSeparator = function () {
        var seperator = ',';
        if (!this.isArgumentSeparatorChanged && seperator !== this.parseArgumentSeparator) {
            this.parseArgumentSeparator = seperator;
        }
        return this.parseArgumentSeparator;
    };
    /**
     * To set the argument separator to split the formula arguments.
     *
     * @param {string} value - Argument separator based on the culture.
     * @returns {void} - To set the argument separator to split the formula arguments.
     */
    Calculate.prototype.setParseArgumentSeparator = function (value) {
        this.parseArgumentSeparator = value;
        this.isArgumentSeparatorChanged = true;
    };
    /**
     * To get the date separator to split the date value.
     *
     * @returns {string} - To get the date separator to split the date value.
     */
    Calculate.prototype.getParseDateTimeSeparator = function () {
        return this.parseDateTimeSeparator;
    };
    /**
     * To set whether the empty string is treated as zero or not.
     *
     * @param {boolean} value - specify the boolean.
     * @returns {void} - To set whether the empty string is treated as zero or not.
     */
    Calculate.prototype.setTreatEmptyStringAsZero = function (value) {
        this.treatEmptyStringAsZero = value;
    };
    /**
     * To get whether the empty string is treated as zero or not.
     *
     * @returns {boolean} - To get whether the empty string is treated as zero or not.
     */
    Calculate.prototype.getTreatEmptyStringAsZero = function () {
        return this.treatEmptyStringAsZero;
    };
    /**
     * To set the date separator to split the date value.
     *
     * @param {string} value - Argument separator based on the culture.
     * @returns {void} - To set the date separator to split the date value.
     */
    Calculate.prototype.setParseDateTimeSeparator = function (value) {
        this.parseDateTimeSeparator = value;
    };
    /**
     * To provide the array of modules needed.
     *
     * @hidden
     * @returns {ModuleDeclaration[]} - To provide the array of modules needed.
     */
    Calculate.prototype.requiredModules = function () {
        return getModules(this);
    };
    /**
     * Dynamically injects the required modules to the library.
     *
     * @hidden
     * @param {Function[]} moduleList - Specify the module list
     * @returns {void} - Dynamically injects the required modules to the library.
     */
    Calculate.Inject = function () {
        var moduleList = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            moduleList[_i] = arguments[_i];
        }
        if (!this.prototype.injectedModules) {
            this.prototype.injectedModules = [];
        }
        for (var j = 0; j < moduleList.length; j++) {
            if (this.prototype.injectedModules.indexOf(moduleList[j]) === -1) {
                this.prototype.injectedModules.push(moduleList[j]);
            }
        }
    };
    /**
     * Get injected modules
     *
     * @hidden
     * @returns {Function[]} - get Injected Modules
     */
    Calculate.prototype.getInjectedModules = function () {
        return this.injectedModules;
    };
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    Calculate.prototype.onPropertyChanged = function (newProp, oldProp) {
        /** code snippets */
    };
    Calculate.prototype.getModuleName = function () {
        return 'calculate';
    };
    /**
     * @hidden
     * @returns {string} - get Formula Character.
     */
    Calculate.prototype.getFormulaCharacter = function () {
        return '=';
    };
    /**
     * @hidden
     * @param {string} text - specify the text
     * @returns {boolean} - Returns boolean value.
     */
    Calculate.prototype.isUpperChar = function (text) {
        var charCode = text.charCodeAt(0);
        return ((charCode > 64) && (charCode < 91));
    };
    Calculate.prototype.resetKeys = function () {
        this.storedData.clear();
        this.keyToRowsMap.clear();
        this.rowsToKeyMap.clear();
    };
    /**
     * @hidden
     * @param {string} cellRef -  specify the cell reference
     * @returns {void} - update Dependent Cell
     */
    Calculate.prototype.updateDependentCell = function (cellRef) {
        var family = this.getSheetFamilyItem(this.grid);
        var cell = this.cell;
        if (cell !== this.emptyString) {
            if (family.sheetNameToParentObject !== null) {
                var token = family.parentObjectToToken.get(this.grid);
                if (cell.indexOf(this.sheetToken) === -1) {
                    cell = token + cell;
                }
                if (cellRef.indexOf(this.sheetToken) === -1) {
                    cellRef = token + cellRef;
                }
            }
            if (this.getDependentCells().has(cellRef)) {
                var formulaCells = this.getDependentCells().get(cellRef);
                if (formulaCells.indexOf(cell) < 0) {
                    formulaCells.push(cell);
                }
            }
            else {
                this.getDependentCells().set(cellRef, [cell]);
            }
            this.addToFormulaDependentCells(cellRef);
        }
    };
    Calculate.prototype.addToFormulaDependentCells = function (cellRef) {
        var cell1 = this.cell;
        var family = this.getSheetFamilyItem(this.grid);
        if (family.sheetNameToParentObject != null && cell1.indexOf(this.sheetToken) === -1) {
            var token = family.parentObjectToToken.get(this.grid);
            cell1 = token + cell1;
        }
        if (!this.getDependentFormulaCells().has(cell1)) {
            this.getDependentFormulaCells().set(cell1, new Map());
            this.getDependentFormulaCells().get(cell1).set(cellRef, cellRef);
        }
        else if (!(this.getDependentFormulaCells().get(cell1)).has(cellRef)) {
            this.getDependentFormulaCells().get(cell1).set(cellRef, cellRef);
        }
    };
    /**
     * @hidden
     * @returns {Map<string, string[]>} - get Dependent Cells
     */
    Calculate.prototype.getDependentCells = function () {
        if (this.isSheetMember()) {
            var family = this.getSheetFamilyItem(this.grid);
            if (family.sheetDependentCells == null) {
                family.sheetDependentCells = new Map();
            }
            return family.sheetDependentCells;
        }
        else {
            if (this.dependentCells == null) {
                this.dependentCells = new Map();
            }
            return this.dependentCells;
        }
    };
    /**
     * @hidden
     * @returns {Map<string, Map<string, string>>} - get Dependent Formula Cells
     */
    Calculate.prototype.getDependentFormulaCells = function () {
        if (this.isSheetMember()) {
            var family = this.getSheetFamilyItem(this.grid);
            if (family.sheetDependentFormulaCells == null) {
                family.sheetDependentFormulaCells = new Map();
            }
            return family.sheetDependentFormulaCells;
        }
        else {
            if (this.dependentFormulaCells == null) {
                this.dependentFormulaCells = new Map();
            }
            return this.dependentFormulaCells;
        }
    };
    /**
     * To get library formulas collection.
     *
     * @returns {Map<string, Function>} - To get library formulas collection.
     */
    Calculate.prototype.getLibraryFormulas = function () {
        return this.lFormulas;
    };
    /**
     * To get library function.
     *
     * @param {string} libFormula - Library formula to get a corresponding function.
     * @returns {Function} - To get library function.
     */
    Calculate.prototype.getFunction = function (libFormula) {
        if (this.getLibraryFormulas().has(libFormula.toUpperCase())) {
            return this.getLibraryFormulas().get(libFormula.toUpperCase()).handler;
        }
        else {
            return null;
        }
    };
    /**
     * @hidden
     * @param {string} val - specify the value.
     * @returns {Date} - convert integer to date.
     */
    Calculate.prototype.intToDate = function (val) {
        var dateVal = Number(val);
        dateVal = (dateVal > 0 && dateVal < 1) ? (1 + dateVal) : (dateVal === 0) ? 1 : dateVal;
        if (dateVal > 60) {
            dateVal -= 1; // Due to leap year issue of 1900 in MSExcel.
        }
        return new Date(((dateVal - 1) * (1000 * 3600 * 24)) + new Date('01/01/1900').getTime());
    };
    Calculate.prototype.getFormulaInfoTable = function () {
        if (this.isSheetMember()) {
            var family = this.getSheetFamilyItem(this.grid);
            if (family.sheetFormulaInfotable === null) {
                family.sheetFormulaInfotable = new Map();
            }
            return family.sheetFormulaInfotable;
        }
        else {
            if (this.formulaInfoTable === null) {
                this.formulaInfoTable = new Map();
            }
            return this.formulaInfoTable;
        }
    };
    /**
     * To get the formula text.
     *
     * @private
     * @param {string} key - specify the key.
     * @returns {string} - To get the formula text.
     */
    Calculate.prototype.getFormula = function (key) {
        key = key.toUpperCase();
        if (this.storedData.has(key)) {
            return this.storedData.get(key).getFormulaText();
        }
        return '';
    };
    /**
     * To get the formula text.
     *
     * @returns {void} - To get the formula text.
     */
    Calculate.prototype.getParseDecimalSeparator = function () {
        var seperator = '.';
        if (!this.isParseDecimalSeparatorChanged && seperator !== this.parseDecimalSeparator) {
            this.parseDecimalSeparator = seperator;
        }
        return this.parseDecimalSeparator;
    };
    /**
     * To get the formula text.
     *
     * @param {string} value - Specifies the decimal separator value.
     * @returns {void} - To get the formula text.
     */
    Calculate.prototype.setParseDecimalSeparator = function (value) {
        this.parseDecimalSeparator = value;
        this.isParseDecimalSeparatorChanged = true;
    };
    /**
     * @hidden
     * @param {string} cellRef -  specify the cell reference
     * @returns {string} - get sheet token.
     */
    Calculate.prototype.getSheetToken = function (cellRef) {
        var i = 0;
        var temp = this.emptyString;
        if (i < cellRef.length && cellRef[i] === this.sheetToken) {
            i++;
            while (i < cellRef.length && cellRef[i] !== this.sheetToken) {
                i++;
            }
            temp = cellRef.substring(0, i + 1);
        }
        if (i < cellRef.length) {
            return temp;
        }
        throw this.formulaErrorStrings[FormulasErrorsStrings.bad_index];
    };
    /**
     * @hidden
     * @param {Object} grd - specify the id
     * @returns {number} - get sheet id.
     */
    Calculate.prototype.getSheetID = function (grd) {
        var family = this.getSheetFamilyItem(grd);
        if (family.sheetNameToParentObject != null && family.sheetNameToParentObject.size > 0) {
            var token = family.parentObjectToToken.get(grd);
            if (token) {
                token = token.split(this.sheetToken).join(this.emptyString);
                var id = this.parseFloat(token);
                if (!this.isNaN(id)) {
                    return id;
                }
            }
        }
        return -1;
    };
    /**
     * @hidden
     * @param {string | number} value - specify the value.
     * @returns {number} - parse float
     */
    Calculate.prototype.parseFloat = function (value) {
        return Number(value);
    };
    /**
     * To get the row index of the given cell.
     *
     * @param {string} cell - Cell address for getting row index.
     * @returns {number} - To get the row index of the given cell.
     */
    Calculate.prototype.rowIndex = function (cell) {
        var i = 0;
        var isLetter = false;
        if (i < cell.length && cell[i] === this.sheetToken) {
            i++;
            while (i < cell.length && cell[i] !== this.sheetToken) {
                i++;
            }
            i++;
        }
        while (i < cell.length && this.isChar(cell[i])) {
            isLetter = true;
            i++;
        }
        var result = parseInt(cell.substring(i), 10);
        if (i < cell.length && !this.isNaN(result)) {
            return result;
        }
        if (isLetter) {
            return -1;
        }
        throw this.formulaErrorStrings[FormulasErrorsStrings.bad_index];
    };
    /**
     * To get the column index of the given cell.
     *
     * @param {string} cell - Cell address for getting column index.
     * @returns {number} - To get the column index of the given cell.
     */
    Calculate.prototype.colIndex = function (cell) {
        var j = 0;
        var k = 0;
        cell = cell.toUpperCase();
        if (j < cell.length && cell[j] === this.sheetToken) {
            j++;
            while (j < cell.length && cell[j] !== this.sheetToken) {
                j++;
            }
            j++;
        }
        while (j < cell.length && this.isChar(cell[j])) {
            var charCode = cell[j].charCodeAt(0);
            k = k * 26 + charCode - 64;
            j++;
        }
        if (k === 0) {
            return -1;
        }
        return k;
    };
    /**
     * To get the valid error strings.
     *
     * @hidden
     * @returns {string[]} - to get error strings.
     */
    Calculate.prototype.getErrorStrings = function () {
        if (this.errorStrings === null) {
            this.errorStrings = ['#N/A', '#VALUE!', '#REF!', '#DIV/0!', '#NUM!', '#NAME?', '#NULL!'];
        }
        return this.errorStrings;
    };
    /**
     * @hidden
     * @param {string} text - specify the text
     * @param {number} startIndex - specify the start index
     * @param {number} length - specify the length
     * @returns {string} - Returns sub string
     */
    Calculate.prototype.substring = function (text, startIndex, length) {
        return text.substring(startIndex, length + startIndex);
    };
    /**
     * @hidden
     * @param {string} c - specify the characer of the string
     * @returns {boolean} - Return the boolean type
     */
    Calculate.prototype.isChar = function (c) {
        if ((c.charCodeAt(0) >= 65 && c.charCodeAt(0) <= 90) || (c.charCodeAt(0) >= 97 && c.charCodeAt(0) <= 122)) {
            return true;
        }
        return false;
    };
    /**
     * @hidden
     * @param {Object} model - specify the model
     * @returns {CalcSheetFamilyItem} - get Sheet Family Item.
     */
    Calculate.prototype.getSheetFamilyItem = function (model) {
        if (this.sheetFamilyID === 0) {
            if (this.defaultFamilyItem == null) {
                this.defaultFamilyItem = new CalcSheetFamilyItem();
            }
            return this.defaultFamilyItem;
        }
        if (this.sheetFamiliesList == null) {
            this.sheetFamiliesList = new Map();
        }
        var i = this.modelToSheetID.get(model);
        if (!this.sheetFamiliesList.has(i)) {
            this.sheetFamiliesList.set(i, new CalcSheetFamilyItem());
        }
        return this.sheetFamiliesList.get(i);
    };
    /**
     * Register a key value pair for formula.
     *
     * @param {string} key - Key for formula reference .
     * @param {string | number} value - Value for the corresponding key.
     * @returns {void} - Register a key value pair for formula.
     */
    Calculate.prototype.setKeyValue = function (key, value) {
        key = key.toUpperCase();
        var str = value.toString().trim();
        if (!this.storedData.get(key) || str.indexOf(this.leftBrace) === 0) {
            this.storedData.set(key, new FormulaInfo());
            this.keyToRowsMap.set(key, this.keyToRowsMap.size + 1);
            this.rowsToKeyMap.set(this.rowsToKeyMap.size + 1, key);
        }
        var fInfo = this.storedData.get(key);
        if (fInfo.getFormulaText() != null && fInfo.getFormulaText().length > 0 && fInfo.getFormulaText() !== str) {
            var s1 = this.cellPrefix + this.keyToRowsMap.get(key).toString();
            var formulaDependent = this.getDependentFormulaCells().get(s1);
            if (formulaDependent != null) {
                this.clearFormulaDependentCells(s1);
            }
        }
        if (str.length > 0 && str[0] === this.getFormulaCharacter()) {
            fInfo.setFormulaText(str);
        }
        else if (fInfo.getFormulaValue() !== str) {
            fInfo.setFormulaText('');
            fInfo.setParsedFormula('');
            fInfo.setFormulaValue(str);
        }
    };
    /**
     * @hidden
     * @param {string} cell - specify the cell
     * @returns {void} - clears the  Formula Dependent Cells.
     */
    Calculate.prototype.clearFormulaDependentCells = function (cell) {
        var _this = this;
        var dependentFormula = this.getDependentFormulaCells().get(cell);
        if (dependentFormula) {
            dependentFormula.forEach(function (value, key) {
                var s = key;
                var dependent = _this.getDependentCells().get(s);
                _this.arrayRemove(dependent, cell);
                if (dependent.length === 0) {
                    _this.getDependentCells().delete(s);
                }
            });
            this.getDependentFormulaCells().delete(cell);
        }
    };
    Calculate.prototype.arrayRemove = function (array, value) {
        var index = array.indexOf(value);
        if (index !== -1) {
            array.splice(index, 1);
        }
        return array;
    };
    /**
     * Register a key value pair for formula.
     *
     * @param {string} key - Key for getting the corresponding value.
     * @returns {string | number} - to get key value.
     */
    Calculate.prototype.getKeyValue = function (key) {
        key = key.toUpperCase();
        if (this.storedData.has(key) !== null) {
            var fInfo = this.storedData.get(key);
            var fText = fInfo.getFormulaText();
            if (fText.length > 0 && fText[0] === this.getFormulaCharacter()) {
                this.cell = this.cellPrefix + this.keyToRowsMap.get(key).toString();
                fText = fText.substring(1);
                try {
                    fInfo.setParsedFormula(this.parser.parseFormula(fText, key));
                }
                catch (ex) {
                    var args = {
                        message: ex.message, exception: ex, isForceCalculable: false,
                        computeForceCalculate: false
                    };
                    this.trigger('onFailure', args);
                    fInfo.setFormulaValue(args.message);
                    return this.storedData.get(key).getFormulaValue();
                }
                try {
                    fInfo.setFormulaValue(this.computeFormula(fInfo.getParsedFormula()));
                }
                catch (ex) {
                    var args = {
                        message: ex.message, exception: ex, isForceCalculable: false,
                        computeForceCalculate: false
                    };
                    this.trigger('onFailure', args);
                    var errorMessage = (typeof args.exception === 'string') ? args.exception : args.message;
                    return (isNullOrUndefined(this.getErrorLine(ex)) ? '' : '#' + this.getErrorLine(ex) + ': ') + errorMessage;
                }
            }
            return this.storedData.get(key).getFormulaValue();
        }
        else {
            return this.emptyString;
        }
    };
    Calculate.prototype.getNamedRanges = function () {
        return this.namedRanges;
    };
    /**
     * Adds a named range to the NamedRanges collection.
     *
     * @param {string} name - Name of the named range.
     * @param {string} range - Range for the specified name.
     * @returns {boolean} - Adds a named range to the NamedRanges collection.
     */
    Calculate.prototype.addNamedRange = function (name, range) {
        var sheetScopeName = name.split(this.sheetToken);
        if (sheetScopeName.length > 1) {
            var family = this.getSheetFamilyItem(this.grid);
            if (!family.parentObjectToToken.get(sheetScopeName[0])) {
                return false;
            }
            name = sheetScopeName[0] + this.sheetToken + sheetScopeName[1].toUpperCase();
        }
        else {
            name = name.toUpperCase();
        }
        this.namedRanges.set(name, range);
        return true;
    };
    /**
     * Remove the specified named range form the named range collection.
     *
     * @param {string} name - Name of the specified named range.
     * @returns {boolean} - Remove the specified named range form the named range collection.
     */
    Calculate.prototype.removeNamedRange = function (name) {
        name = name.toUpperCase();
        if (this.namedRanges.get(name) != null) {
            this.namedRanges.delete(name);
            return true;
        }
        return false;
    };
    /**
     * @hidden
     * @param {number} col - specify the column
     * @returns {string} - to convert the alpha.
     */
    Calculate.prototype.convertAlpha = function (col) {
        var arrCol = [];
        var n = 0;
        var charText = 'A';
        while (col > 0) {
            col--;
            var aCharValue = charText.charCodeAt(0);
            arrCol[n] = String.fromCharCode(col % 26 + aCharValue);
            col = parseInt((col / 26).toString(), 10);
            n++;
        }
        var arr = [];
        for (var i = 0; i < n; i++) {
            arr[n - i - 1] = arrCol[i];
        }
        return arr.join('');
    };
    /**
     * @hidden
     * @param {string} cellRange - specify the cell range.
     * @returns {string} - to get cell collection.
     */
    Calculate.prototype.getCellCollection = function (cellRange) {
        if (cellRange.indexOf(':') < 0) {
            if (!this.isCellReference(cellRange)) {
                return cellRange.split(this.getParseArgumentSeparator());
            }
            else {
                cellRange = cellRange + ':' + cellRange;
            }
        }
        var token = this.emptyString;
        var sheetTokenIndex = cellRange.indexOf(this.sheetToken);
        if (sheetTokenIndex > -1) {
            var index = sheetTokenIndex;
            var s = index + 1;
            while (s < cellRange.length) {
                if (cellRange[s] === this.sheetToken) {
                    token = cellRange.substr(0, s + 1);
                    break;
                }
                s++;
            }
        }
        var i = cellRange.indexOf(':');
        var row1;
        var row2;
        var col1;
        var col2;
        if (i > 0 && this.isChar(cellRange[i - 1])) {
            var k = i - 2;
            while (k >= 0 && this.isDigit(cellRange[k])) {
                k--;
            }
        }
        row1 = this.rowIndex(this.substring(cellRange, 0, i));
        row2 = this.rowIndex(this.substring(cellRange, i + 1, i + cellRange.length - i - 1));
        col1 = this.colIndex(this.substring(cellRange, 0, i));
        col2 = this.colIndex(this.substring(cellRange, i + 1, i + cellRange.length - i - 1));
        if (row1 > row2) {
            i = row2;
            row2 = row1;
            row1 = i;
        }
        if (col1 > col2) {
            i = col2;
            col2 = col1;
            col1 = i;
        }
        var cells = [];
        var j;
        var c = 0;
        for (i = row1; i <= row2; i++) {
            for (j = col1; j <= col2; j++) {
                cells[c] = token + this.emptyString + this.convertAlpha(j) + i.toString();
                c++;
            }
        }
        return cells;
    };
    /**
     * Compute the given formula.
     *
     * @param {string} formulaText - Specifies to compute the given formula.
     * @returns {string | number} - compute the given formula
     */
    Calculate.prototype.computeFormula = function (formulaText) {
        return this.calculateFormula(formulaText, false);
    };
    Calculate.prototype.calculateFormula = function (formulaText, refresh) {
        var parsedText;
        var lastIndexOfq;
        var formulatResult;
        var nestedFormula = false;
        var fNested;
        if (this.parser.isError) {
            return formulaText;
        }
        if (!this.parser.isFormulaParsed) {
            parsedText = this.parser.parseFormula(formulaText);
        }
        else {
            parsedText = formulaText;
        }
        this.parser.isFormulaParsed = false;
        try {
            lastIndexOfq = this.findLastIndexOfq(parsedText);
            if (lastIndexOfq > 0) {
                nestedFormula = true;
            }
            if (parsedText !== this.emptyString && lastIndexOfq > -1) {
                var i = lastIndexOfq + 1;
                while (i > -1) {
                    if (parsedText[i] !== this.rightBracket) {
                        i++;
                        continue;
                    }
                    var sFormula = parsedText.substring(lastIndexOfq, i + 1);
                    var libFormula = sFormula.split(this.leftBracket)[0].split('q').join(this.emptyString);
                    var args = void 0;
                    if (this.getLibraryFormulas().get(libFormula.toUpperCase()).isCustom) {
                        args = sFormula.substring(sFormula.indexOf(this.leftBracket) + 1, sFormula.indexOf(this.rightBracket))
                            .split(this.getParseArgumentSeparator());
                        var j = 0;
                        var customArgs = [];
                        for (j = 0; j < args.length; j++) {
                            customArgs.push(this.getValueFromArg(args[j]));
                        }
                        args = customArgs;
                    }
                    else {
                        args = sFormula.substring(sFormula.indexOf(this.leftBracket) + 1, sFormula.indexOf(this.rightBracket))
                            .replace(',n', ',').split(this.getParseArgumentSeparator());
                        if (sFormula.includes(this.getParseArgumentSeparator() + this.tic)) {
                            var joinIdx = null;
                            for (var k = 0; k < args.length; k++) {
                                if (args[k] && args[k][0] === this.tic && args[k][args[k].length - 1] !== this.tic) {
                                    joinIdx = k;
                                }
                                if (joinIdx !== null && joinIdx === k - 1 && args[k][0] !== this.tic && args[k][args[k].length - 1] ===
                                    this.tic) {
                                    args[joinIdx] = args[joinIdx] + this.getParseArgumentSeparator() + args[k];
                                    args.splice(k, 1);
                                    joinIdx = null;
                                }
                            }
                        }
                        if (nestedFormula && libFormula && libFormula === 'IF') {
                            args.push('nestedFormulaTrue');
                        }
                    }
                    formulatResult = isNullOrUndefined(this.getFunction(libFormula)) ? this.getErrorStrings()[CommonErrors.name] : this.getFunction(libFormula).apply(void 0, args);
                    if (nestedFormula) {
                        fNested = this.processNestedFormula(parsedText, sFormula, formulatResult);
                        var q = this.findLastIndexOfq(fNested);
                        if (q === 0) {
                            nestedFormula = false;
                        }
                        if (q === -1) {
                            formulatResult = this.computeValue(fNested, refresh);
                        }
                        lastIndexOfq = i = q;
                        parsedText = fNested;
                        continue;
                    }
                    break;
                }
            }
            else if (this.formulaErrorStrings.indexOf(parsedText) > -1) {
                formulatResult = parsedText;
            }
            else if (parsedText !== this.emptyString && lastIndexOfq === -1) {
                formulatResult = this.computeValue(parsedText, refresh);
            }
        }
        catch (ex) {
            var args = { message: ex.message, exception: ex, isForceCalculable: false, computeForceCalculate: false };
            this.trigger('onFailure', args);
            var errorMessage = (typeof args.exception === 'string') ? args.exception : args.message;
            formulatResult = (isNullOrUndefined(this.getErrorLine(ex)) ? '' : '#' + this.getErrorLine(ex) + ': ') + errorMessage;
        }
        return formulatResult;
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range
     * @returns {number[] | string} - to compute if and average if.
     */
    Calculate.prototype.computeSumIfAndAvgIf = function (range) {
        if (isNullOrUndefined(range) || range[0] === this.emptyString || range.length === 0) {
            return this.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var argArr = range;
        for (var i = 0; i < argArr.length; i++) {
            if (this.isCellReference(argArr[i]) && isNullOrUndefined(argArr[i].match(/[0-9]/)) && argArr[i].indexOf('!') < 0) {
                var splitArray = argArr[i].split(':');
                argArr[i] = splitArray[0] + '1' + ':' + splitArray[1] + this.spreadSheetUsedRange[0];
            }
        }
        var argCount = argArr.length;
        if (argCount !== 2 && argCount !== 3 && argCount === 0) {
            return this.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var rangevalue = argArr[0];
        var criteria = argArr[1].trim();
        criteria = criteria.split(this.tic).join(this.emptyString);
        if (criteria.length > 255) {
            return this.getErrorStrings()[CommonErrors.value];
        }
        var isAsterisk = criteria.includes('*');
        var criteriaValue = isAsterisk ? criteria.replace(/\*/g, '').trim() : criteria;
        criteriaValue = this.isCellReference(criteriaValue) ? this.getValueFromArg(criteriaValue) : criteria;
        if (isAsterisk) {
            if (criteria[0] === '*') {
                criteriaValue = '*' + criteriaValue;
            }
            if (criteria[criteria.length - 1] === '*') {
                criteriaValue += '*';
            }
        }
        criteria = criteriaValue;
        var opt = this.parser.tokenEqual;
        if (criteria.startsWith('<=')) {
            opt = this.parser.tokenLessEq;
            criteria = criteria.substring(2);
        }
        else if (criteria.startsWith('>=')) {
            opt = this.parser.tokenGreaterEq;
            criteria = criteria.substring(2);
        }
        else if (criteria.startsWith('<>')) {
            opt = this.parser.tokenNotEqual;
            criteria = criteria.substring(2);
        }
        else if (criteria.startsWith('<')) {
            opt = this.parser.tokenLess;
            criteria = criteria.substring(1);
        }
        else if (criteria.startsWith('>')) {
            opt = this.parser.tokenGreater;
            criteria = criteria.substring(1);
        }
        else if (criteria.startsWith('=')) {
            opt = this.parser.tokenEqual;
            criteria = criteria.substring(1);
        }
        var checkCriteria = this.parseFloat(criteria);
        var criteriaRangeArray = argArr[0];
        var sumRange = this.getCellCollection(argCount > 2 ? argArr[2] : rangevalue);
        var criteriaRange = this.getCellCollection(criteriaRangeArray);
        var result = this.getComputeSumIfValue(criteriaRange, sumRange, criteria, checkCriteria, opt, isAsterisk);
        return [result[0], result[1]];
    };
    // Commented unused method
    // /**
    //  * @hidden
    //  * @param {string[]} range - specify the range
    //  * @returns {string} - to compute lookup
    //  */
    // public computeLookup(range: string[]): string {
    //     if (range.length === 0) {
    //         return this.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
    //     }
    //     const checkCrte: string[] = [];
    //     const findMaxVal: string[] | string = [];
    //     const argArr: string[] = range;
    //     const argCount: number = argArr.length;
    //     const criterias: string = argArr[0].split(this.tic).join(this.emptyString);
    //     const rangevalue: string = argArr[1];
    //     const lookupRangeArray: string = argCount === 2 ? rangevalue : argArr[2];
    //     const criteriaRange: string[] | string = this.getCellCollection(argArr[1]);
    //     const lookupRange: string[] | string = this.getCellCollection(lookupRangeArray);
    //     for (let i: number = 0; i < criteriaRange.length; i++) {
    //         findMaxVal[i] = this.getValueFromArg(criteriaRange[i]).split(this.tic).join('');
    //     }
    //     const s: string[] = findMaxVal.toString().split(this.getParseArgumentSeparator());
    //     const maxVal: number = this.parseFloat(s[s.sort().length - 1]);
    //     const minVal: number = this.parseFloat(s[0]);
    //     for (let j: number = 0; j < criteriaRange.length; j++) {
    //         checkCrte[j] = this.getValueFromArg(criteriaRange[j]).split(this.tic).join('');
    //         if (criterias === checkCrte[j]) {
    //             return this.getValueFromArg(lookupRange[j]).split(this.tic).join('');
    //         } else if (this.parseFloat(criterias) === this.parseFloat(checkCrte[j])) {
    //             return this.getValueFromArg(lookupRange[j]).split(this.tic).join('');
    //         } else if (this.parseFloat(criterias) < minVal) {
    //             return this.getErrorStrings()[CommonErrors.na];
    //         } else if (this.parseFloat(criterias) > maxVal) {
    //             const index: number = findMaxVal.indexOf(maxVal.toString());
    //             return this.getValueFromArg(lookupRange[index]).split(this.tic).join('');
    //         }
    //     }
    //     if (findMaxVal.indexOf(criterias) < 0) {
    //         const temp: string[] = [];
    //         for (let n: number = 0; n < s.length; n++) {
    //             if (this.parseFloat(criterias) > this.parseFloat(s[n])) {
    //                 temp.push(s[n]);
    //             }
    //         }
    //         const index: number = findMaxVal.indexOf(temp[temp.length - 1]);
    //         return this.getValueFromArg(lookupRange[index]).split(this.tic).join('');
    //     }
    //     return this.getErrorStrings()[CommonErrors.na];
    // }
    // public computeVLookup(range: string[]): string {
    //     const argArr: string[] = range;
    //     const findMaxValue: string[] | string = [];
    //     let lookupValue: string = argArr[0].split(this.tic).join('');
    //     if (lookupValue.indexOf(':') > - 1) {
    //         return this.getErrorStrings()[CommonErrors.value];
    //     }
    //     if (this.isCellReference(lookupValue)) {
    //         lookupValue = this.getValueFromArg(lookupValue);
    //     }
    //     if (argArr[1].indexOf(':') < - 1) {
    //         return this.getErrorStrings()[CommonErrors.na];
    //     }
    //     let lookupRange: string[] | string = [];
    //     let firstCol: string = '';
    //     let secCol: string = '';
    //     if (this.isCellReference(argArr[1])) {
    //         lookupRange = this.getCellCollection(argArr[1]);
    //         if (argArr[1].indexOf(':') > - 1) {
    //             const index: number = argArr[1].indexOf(':');
    //             for (let i: number = 0; i < index; i++) {
    //                 const tempCell: string = this.isChar(argArr[1][i]) ? argArr[1][i] : '';
    //                 firstCol = firstCol + tempCell;
    //             }
    //             for (let j: number = index; j < argArr[1].length; j++) {
    //                 const tempCell2: string = this.isChar(argArr[1][j]) ? argArr[1][j] : '';
    //                 secCol = secCol + tempCell2;
    //             }
    //         }
    //     }
    //     const lookupCol: number = this.colIndex(firstCol) + this.parseFloat(argArr[2]);
    //     if (lookupCol > this.colIndex(secCol)) {
    //         return this.getErrorStrings()[CommonErrors.na];
    //     }
    //     if (lookupCol === this.colIndex(firstCol)) {
    //         return this.getErrorStrings()[CommonErrors.na];
    //     }
    //     const lookupCell: string = this.convertAlpha(lookupCol);
    //     argArr[3] = isNullOrUndefined(argArr[3]) ? this.trueValue : argArr[3].split(this.tic).join('');
    //     let cellValue: string = '';
    //     for (let i: number = 0; i < lookupRange.length; i++) {
    //         findMaxValue[i] = this.getValueFromArg(lookupRange[i]).split(this.tic).join('');
    //     }
    //     const s: string[] = findMaxValue.toString().split(this.getParseArgumentSeparator());
    //     const maxValue: number = this.parseFloat(s[s.sort().length - 1]);
    //     const minValue: number = this.parseFloat(s[0]);
    //     for (let j: number = 0; j < lookupRange.length; j++) {
    //         cellValue = this.getValueFromArg(lookupRange[j]);
    //         if (argArr[3].toUpperCase() === this.trueValue) {
    //             if (lookupValue === cellValue) {
    //                 return this.getValueFromArg(lookupCell + j).split(this.tic).join('');
    //             } else if (this.parseFloat(lookupValue) === this.parseFloat(cellValue)) {
    //                 return this.getValueFromArg(lookupCell + j).split(this.tic).join('');
    //             } else if (this.parseFloat(lookupValue) < minValue) {
    //                 return this.getErrorStrings()[CommonErrors.na];
    //             } else if (this.parseFloat(lookupValue) > maxValue) {
    //                 const index: number = findMaxValue.indexOf(maxValue.toString());
    //                 return this.getValueFromArg(lookupCell + index).split(this.tic).join('');
    //             }
    //         }
    //         if (argArr[3] === this.falseValue) {
    //             if (lookupValue === cellValue) {
    //                 return this.getValueFromArg(lookupCell + j);
    //             }
    //         }
    //     }
    //     return this.getErrorStrings()[CommonErrors.na];
    // }
    Calculate.prototype.findWildCardValue = function (lookVal, cellValue) {
        var finalText = '';
        if (lookVal.indexOf('?') > -1) {
            var index = lookVal.indexOf('?');
            var checStr1 = lookVal[index - 1];
            var checStr2 = lookVal[index + 1];
            if (cellValue.indexOf(checStr1) > -1 && cellValue.indexOf(checStr2) > -1) {
                var newIndex = cellValue.indexOf(checStr1);
                if (cellValue[newIndex] === checStr1 && cellValue[newIndex + 2] === checStr2) {
                    finalText = lookVal;
                }
                else {
                    finalText = cellValue;
                }
            }
            else {
                finalText = cellValue;
            }
        }
        else if (lookVal.indexOf('*') > -1) {
            var index = lookVal.indexOf('*');
            var left = '';
            var right = '';
            var compRight = this.falseValue;
            var compLeft = this.falseValue;
            for (var i = index - 1; i >= 0; i--) {
                left = left + lookVal[i];
                compLeft = this.trueValue;
            }
            for (var i = index + 1; i < lookVal.length; i++) {
                right = right + lookVal[i];
                compRight = this.trueValue;
            }
            var leftVal = left === '' ? -1 : cellValue.indexOf(left.split('').reverse().join(''));
            var rightVal = right === '' ? -1 : cellValue.indexOf(right);
            if (leftVal > -1 || rightVal > -1) {
                if (compLeft === this.trueValue) {
                    finalText = (left.split('').reverse().join('') === cellValue.substr(0, left.length)) ? lookVal : cellValue;
                }
                else if (compRight === this.trueValue) {
                    finalText = (right === cellValue.substring(cellValue.length - right.length, cellValue.length)) ? lookVal : cellValue;
                }
            }
            else {
                finalText = cellValue;
            }
        }
        return finalText;
    };
    /** @hidden */
    /* eslint-disable-next-line */
    Calculate.prototype.getComputeSumIfValue = function (criteriaRange, sumRange, criteria, checkCriteria, op, isAsterisk) {
        var sum = 0;
        var count = 0;
        // const isFirst: boolean = isAsterisk && criteria && criteria[0] === '*';
        switch (op) {
            case this.parser.tokenEqual:
                {
                    var criteriaValue = isAsterisk ? criteria.replace(/\*/g, '') : criteria;
                    for (var i = 0; i < criteriaRange.length; i++) {
                        var value = this.getValueFromArg(criteriaRange[i].split(this.tic).join(''));
                        var val = this.parseFloat(value);
                        if (value === criteria && val === checkCriteria) {
                            var value1 = this.getValueFromArg(sumRange[i].split(this.tic).join(''));
                            var val1 = this.parseFloat(value1);
                            sum = sum + val1;
                            count = count + 1;
                        }
                        else if (value === criteria) {
                            sum = sum + this.getValueFromRange(sumRange, i);
                            count = count + 1;
                        }
                        else if (isAsterisk && criteriaValue && value) {
                            if (criteria[0] === '*' && criteriaValue.length <= value.length && criteriaValue === value.slice(0, criteriaValue.length)) {
                                sum = sum + this.getValueFromRange(sumRange, i);
                                count = count + 1;
                            }
                            if (criteria[criteria.length - 1] === '*' && criteriaValue.length <= value.length && criteriaValue ===
                                value.slice(value.length - criteriaValue.length, value.length)) {
                                sum = sum + this.getValueFromRange(sumRange, i);
                                count = count + 1;
                            }
                        }
                    }
                }
                break;
            case this.parser.tokenLess:
                {
                    for (var i = 0; i < criteriaRange.length; i++) {
                        var value = this.getValueFromArg(criteriaRange[i].split(this.tic).join(''));
                        var val = this.parseFloat(value);
                        if (val < checkCriteria) {
                            var value1 = this.getValueFromArg(sumRange[i].split(this.tic).join(''));
                            var val1 = this.parseFloat(value1);
                            sum = sum + val1;
                            count = count + 1;
                        }
                    }
                }
                break;
            case this.parser.tokenGreater:
                {
                    for (var i = 0; i < criteriaRange.length; i++) {
                        var value = this.getValueFromArg(criteriaRange[i].split(this.tic).join(''));
                        var val = this.parseFloat(value);
                        if (val > checkCriteria) {
                            var value1 = this.getValueFromArg(sumRange[i].split(this.tic).join(''));
                            var val1 = this.parseFloat(value1);
                            sum = sum + val1;
                            count = count + 1;
                        }
                    }
                }
                break;
            case this.parser.tokenLessEq:
                {
                    for (var i = 0; i < criteriaRange.length; i++) {
                        var value = this.getValueFromArg(criteriaRange[i].split(this.tic).join(''));
                        var val = this.parseFloat(value);
                        if (val <= checkCriteria) {
                            var value1 = this.getValueFromArg(sumRange[i].split(this.tic).join(''));
                            var val1 = this.parseFloat(value1);
                            sum = sum + val1;
                            count = count + 1;
                        }
                    }
                }
                break;
            case this.parser.tokenGreaterEq:
                {
                    for (var i = 0; i < criteriaRange.length; i++) {
                        var value = this.getValueFromArg(criteriaRange[i].split(this.tic).join(''));
                        var val = this.parseFloat(value);
                        if (val >= checkCriteria) {
                            var value1 = this.getValueFromArg(sumRange[i].split(this.tic).join(''));
                            var val1 = this.parseFloat(value1);
                            sum = sum + val1;
                            count = count + 1;
                        }
                    }
                }
                break;
            case this.parser.tokenNotEqual:
                {
                    for (var i = 0; i < criteriaRange.length; i++) {
                        var value = this.getValueFromArg(criteriaRange[i].split(this.tic).join(''));
                        var val = this.parseFloat(value);
                        if (value !== criteria && val !== checkCriteria) {
                            var value1 = this.getValueFromArg(sumRange[i].split(this.tic).join(''));
                            var val1 = this.parseFloat(value1);
                            sum = sum + val1;
                            count = count + 1;
                        }
                    }
                }
                break;
        }
        return [sum, count];
    };
    Calculate.prototype.getValueFromRange = function (sumRange, index) {
        var sumRangeVal = sumRange[index];
        sumRangeVal = this.getValueFromArg(sumRangeVal);
        return this.parseFloat(sumRangeVal.toString());
    };
    /**
     * @hidden
     * @param {string[]} args - specifies the args
     * @param {string} op - specify the operator.
     * @returns {string} - Compute and or.
     */
    Calculate.prototype.computeAndOr = function (args, op) {
        var result = op === 'and' ? true : false;
        var value;
        var parseVal;
        if (args.length === 0) {
            return this.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        for (var l = 0, len = args.length; l < len; l++) {
            if (args[l].split(this.tic).join('').trim() === this.emptyString) {
                return this.getErrorStrings()[CommonErrors.value];
            }
        }
        var ranges = args;
        for (var i = 0; i < ranges.length; i++) {
            if (ranges[i] === (this.tic)) {
                return this.getErrorStrings()[CommonErrors.value];
            }
            if (ranges[i].indexOf(':') > -1 && this.isCellReference(ranges[i])) {
                var cells = this.getCellCollection(ranges[i]);
                for (var j = 0; j < cells.length; j++) {
                    if (this.getErrorStrings().indexOf(cells[j]) > -1) {
                        return cells[j];
                    }
                    else if (cells[j][0] === this.tic) {
                        return this.getErrorStrings()[CommonErrors.name];
                    }
                    value = this.getValueFromArg(cells[j]);
                    if (value === '') {
                        value = this.trueValue;
                    }
                    if (this.getErrorStrings().indexOf(value) > -1) {
                        return value;
                    }
                    parseVal = this.parseFloat(value);
                }
            }
            else {
                value = this.getValueFromArg(ranges[i]).split(this.tic).join('').toUpperCase();
                if (this.getErrorStrings().indexOf(value) > -1) {
                    return value;
                }
                var tempdate = Date.parse(value.split(this.tic).join(''));
                if (!isNaN(tempdate)) {
                    result = true;
                }
                else if (!(value === this.trueValue || value === this.falseValue)) {
                    return this.getErrorStrings()[CommonErrors.value].toString();
                }
                parseVal = this.parseFloat(value);
            }
            result = op === 'and' ? (result && ((value === this.trueValue) || !(isNaN(parseVal)))) :
                (result || ((value === this.trueValue) || !(isNaN(parseVal))));
        }
        return result ? this.trueValue : this.falseValue;
    };
    /**
     * @hidden
     * @param {string} text - specify the text
     * @returns {string} - to strip out the tic from the formula arguments.
     */
    // To strip out the tic from the formula arguments.
    Calculate.prototype.removeTics = function (text) {
        if (text.length > 1 && text[0] === this.tic[0] && text[text.length - 1] === this.tic[0]) {
            text = this.substring(text, 1, text.length - 2);
        }
        return text;
    };
    /**
     * @hidden
     * @param {string} range - specify the range
     * @returns {string} - to get cell from the range.
     */
    Calculate.prototype.getCellFrom = function (range) {
        var cellRange = '';
        var cells = range.indexOf(':') > -1 ? range.split(':') : [range];
        //this.getCellsFromArgs(range);
        var last = cells.length - 1;
        var r1 = this.rowIndex(cells[0]);
        var x;
        if (r1 === this.rowIndex(cells[last])) {
            var c1 = this.colIndex(cells[0]);
            var c2 = this.colIndex(cells[last]);
            var c = this.colIndex(this.cell);
            if (c >= c1 && c <= c2) {
                cellRange = getAlphalabel(c).toString() + r1.toString();
            }
        }
        else if (this.colIndex(cells[0]) === this.colIndex(cells[last])) {
            x = this.colIndex(cells[0]);
            var r2 = this.rowIndex(cells[last]);
            var r = this.rowIndex(this.cell);
            if (r >= r1 && r <= r2) {
                cellRange = getAlphalabel(x).toString() + r.toString();
            }
        }
        return cellRange;
    };
    Calculate.prototype.computeValue = function (pFormula, refresh) {
        try {
            var stack = [];
            var i = 0;
            var sheet = '';
            stack.length = 0;
            while (i < pFormula.length) {
                var uFound = pFormula[i] === 'u'; // for 3*-2
                if (pFormula[i] === this.arithMarker) {
                    i = i + 1;
                    continue;
                }
                else if (this.isDigit(pFormula[i])) {
                    var s = this.emptyString;
                    while (i < pFormula.length && (this.isDigit(pFormula[i]) || pFormula[i] === this.parseDecimalSeparator)) {
                        s = s + pFormula[i];
                        i = i + 1;
                    }
                    stack.push(s);
                    if (!pFormula[i]) {
                        return stack.toString();
                    }
                }
                if (pFormula[i] === this.sheetToken) {
                    sheet = pFormula[i];
                    i = i + 1;
                    while (i < pFormula.length && pFormula[i] !== this.sheetToken) {
                        sheet = sheet + pFormula[i];
                        i = i + 1;
                    }
                    if (i < pFormula.length) {
                        sheet = sheet + pFormula[i];
                        i = i + 1;
                    }
                }
                else if (this.isUpperChar(pFormula[i])) {
                    var s = this.emptyString;
                    var textName = '';
                    while (i < pFormula.length && this.isUpperChar(pFormula[i])) {
                        var char = pFormula[i];
                        s = s + char;
                        i = i + 1;
                    }
                    while (i < pFormula.length && this.isDigit(pFormula[i])) {
                        var digit = pFormula[i];
                        s = s + digit;
                        i = i + 1;
                    }
                    if (i < pFormula.length && pFormula[i] === ':') {
                        s = s + pFormula[i];
                        i = i + 1;
                        if (i < pFormula.length && pFormula[i] === this.sheetToken) {
                            s = s + pFormula[i];
                            i = i + 1;
                            while (i < pFormula.length && pFormula[i] !== this.sheetToken) {
                                s = s + pFormula[i];
                                i = i + 1;
                            }
                        }
                        while (i < pFormula.length && this.isUpperChar(pFormula[i])) {
                            s = s + pFormula[i];
                            i = i + 1;
                        }
                        while (i < pFormula.length && this.isDigit(pFormula[i])) {
                            s = s + pFormula[i];
                            i = i + 1;
                        }
                        s = sheet + this.getCellFrom(s);
                    }
                    else {
                        s = sheet + s;
                    }
                    textName = this.getParentObjectCellValue(s, refresh).toString();
                    sheet = '';
                    if (typeof textName === 'string' && this.getErrorStrings().indexOf(textName) > -1) {
                        return textName;
                    }
                    stack.push(textName);
                }
                else if (pFormula[i] === 'q') {
                    var leftIdx = pFormula.substring(i + 1).indexOf(this.leftBracket);
                    var j = pFormula.substring(i + leftIdx + 1).indexOf(this.rightBracket);
                    pFormula = this.substring(pFormula, i + leftIdx + 2, j - 1);
                }
                else if (pFormula[i] === this.tic[0]) {
                    var s = pFormula[i].toString();
                    i = i + 1;
                    while (i < pFormula.length && pFormula[i] !== this.tic[0]) {
                        s = s + pFormula[i];
                        i = i + 1;
                    }
                    stack.push(s.split(this.tic).join(this.emptyString));
                    i = i + 1;
                }
                else if (pFormula[i] === '%' && stack.length > 0) {
                    var stackValue = stack[0];
                    var value = this.parseFloat(stackValue);
                    if (!this.isNaN(value)) {
                        stack.pop();
                        stack.push((value / 100).toString());
                    }
                    i = i + 1;
                }
                else if ((pFormula.substring(i)).indexOf(this.trueValue) === 0) {
                    stack.push(this.trueValue);
                    i += this.trueValue.length;
                }
                else if (pFormula.substring(i).indexOf(this.falseValue) === 0) {
                    stack.push(this.falseValue);
                    i += this.falseValue.length;
                }
                else if (pFormula[i] === this.tic[0] || pFormula[i] === '|') {
                    var s = pFormula[i].toString();
                    i++;
                    while (i < pFormula.length && pFormula[i] !== this.tic[0]) {
                        s = s + pFormula[i];
                        i = i + 1;
                    }
                    stack.push(s + this.tic);
                    i += 1;
                }
                else {
                    switch (pFormula[i]) {
                        case '#':
                            {
                                var errIndex = 0;
                                if (this.getErrorStrings().indexOf(pFormula.substring(i)) > -1) {
                                    if (pFormula.indexOf('!') === -1 || pFormula.substring(i).indexOf('!') === -1) {
                                        errIndex = pFormula.indexOf('#N/A') > -1 ?
                                            (pFormula.indexOf('#N/A') + 4 + i) : pFormula.indexOf('?') + 1 + i;
                                    }
                                    else {
                                        errIndex = pFormula.indexOf('!') + 1 + i;
                                    }
                                    stack.push(this.substring(pFormula, i, errIndex - i));
                                }
                                else {
                                    errIndex = i + 1;
                                    stack.push(this.substring(pFormula, i, errIndex - i));
                                }
                                i = errIndex;
                            }
                            break;
                        case 'n':
                            {
                                i = i + 1;
                                var s = '';
                                if (pFormula.substring(i).indexOf('Infinity') === 0) {
                                    s = 'Infinity';
                                    i += s.length;
                                }
                                else {
                                    if (pFormula[i] === 'u' || uFound || pFormula[i] === '-') {
                                        s = '-';
                                        if (!uFound) {
                                            i = i + 1;
                                        }
                                        else {
                                            uFound = false;
                                        }
                                    }
                                    while (i < pFormula.length && (this.isDigit(pFormula[i]))
                                        || pFormula[i] === this.getParseDecimalSeparator()) {
                                        s = s + pFormula[i];
                                        i = i + 1;
                                    }
                                    if (i < pFormula.length && pFormula[i] === '%') {
                                        i = i + 1;
                                        if (s === '') {
                                            if (stack.length > 0) {
                                                var stackValue = stack[0];
                                                var value = this.parseFloat(stackValue);
                                                if (!this.isNaN(value)) {
                                                    stack.pop();
                                                    stack.push((value / 100).toString());
                                                }
                                            }
                                        }
                                        else {
                                            s = (this.parseFloat(s) / 100).toString();
                                        }
                                    }
                                }
                                stack.push(s);
                            }
                            break;
                        case this.parser.tokenAdd:
                            {
                                this.getValArithmetic(stack, 'add');
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenSubtract:
                            {
                                this.getValArithmetic(stack, 'sub');
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenMultiply:
                            {
                                this.getValArithmetic(stack, 'mul');
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenDivide:
                            {
                                this.getValArithmetic(stack, 'div');
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenLess:
                            {
                                this.processLogical(stack, 'less');
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenGreater:
                            {
                                this.processLogical(stack, 'greater');
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenGreaterEq:
                            {
                                this.processLogical(stack, 'greaterEq');
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenLessEq:
                            {
                                this.processLogical(stack, 'lessEq');
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenNotEqual:
                            {
                                this.processLogical(stack, 'notEq');
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenOr:
                            {
                                this.processLogical(stack, 'or');
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenAnd:
                            {
                                this.processLogical(stack, 'and');
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenEqual:
                            {
                                this.processLogical(stack, 'equal');
                                i = i + 1;
                            }
                            break;
                        default: {
                            return this.getErrorStrings()[CommonErrors.value];
                        }
                    }
                }
            }
            if (stack.length === 0) {
                return this.emptyString;
            }
            else {
                var s = this.emptyString;
                var countValue = stack.length;
                while (countValue > 0) {
                    s = stack.pop() + s;
                    if (s === this.emptyString && this.isCellReference(pFormula) &&
                        this.getTreatEmptyStringAsZero()) {
                        return '0';
                    }
                    countValue--;
                }
                return s;
            }
        }
        catch (ex) {
            if (this.getErrorStrings().indexOf(ex) > -1 || this.formulaErrorStrings.indexOf(ex) > -1) {
                throw ex;
            }
            throw new FormulaError(this.formulaErrorStrings[FormulasErrorsStrings.invalid_expression]);
        }
    };
    Calculate.prototype.getValArithmetic = function (stack, operator) {
        var num1 = stack.pop();
        num1 = num1 === this.emptyString ? '0' : num1;
        var num = Number(num1);
        if (isNaN(num)) {
            if (num1 === this.getErrorStrings()[CommonErrors.divzero]) {
                throw this.getErrorStrings()[CommonErrors.divzero];
            }
            else {
                throw this.getErrorStrings()[CommonErrors.value];
            }
        }
        var num2 = stack.pop();
        num2 = num2 === this.emptyString ? '0' : num2;
        num = Number(num2);
        if (isNaN(num)) {
            if (num1 === this.getErrorStrings()[CommonErrors.divzero]) {
                throw this.getErrorStrings()[CommonErrors.divzero];
            }
            else {
                throw this.getErrorStrings()[CommonErrors.value];
            }
        }
        if (operator === 'add') {
            stack.push((Number(num2) + Number(num1)).toString());
        }
        if (operator === 'sub') {
            stack.push((Number(num2) - Number(num1)).toString());
        }
        if (operator === 'mul') {
            stack.push((Number(num2) * Number(num1)).toString());
        }
        if (operator === 'div') {
            if (this.isNaN(this.parseFloat(num1)) || this.isNaN(this.parseFloat(num2))) {
                stack.push(this.getErrorStrings()[CommonErrors.value]);
            }
            else if (this.parseFloat(num1) === 0) {
                stack.push(this.getErrorStrings()[CommonErrors.divzero]);
            }
            else {
                stack.push((Number(num2) / Number(num1)).toString());
            }
        }
    };
    /**
     * @hidden
     * @param {string[]} stack - specify the stack
     * @param {string} operator - specify the operator.
     * @returns {string} - To process the logical.
     */
    Calculate.prototype.processLogical = function (stack, operator) {
        var val1;
        var val2;
        var value1;
        var value2;
        if (operator !== 'and' && operator !== 'equal') {
            val1 = stack.pop();
            val2 = stack.pop();
            value1 = val1.indexOf(this.tic) > -1 ? val1 : this.parseFloat(val1);
            value2 = val2.indexOf(this.tic) > -1 ? val2 : this.parseFloat(val2);
        }
        var result;
        if (operator === 'less') {
            if (!this.isNaN(value1) && !this.isNaN(value2)) {
                result = (value2 < value1) ? this.trueValue : this.falseValue;
            }
            else {
                result = (val2.toUpperCase().split(this.tic).join('').localeCompare(val1.toUpperCase().split(this.tic).join('')) < 0) ?
                    this.trueValue : this.falseValue;
            }
        }
        if (operator === 'greater') {
            if (!this.isNaN(value1) && !this.isNaN(value2)) {
                result = (value2 > value1) ? this.trueValue : this.falseValue;
            }
            else {
                result = (val2.toUpperCase().split(this.tic).join('').localeCompare(val1.toUpperCase().split(this.tic).join('')) > 0) ?
                    this.trueValue : this.falseValue;
            }
        }
        if (operator === 'lessEq') {
            if (!this.isNaN(value1) && !this.isNaN(value2)) {
                result = (value2 <= value1) ? this.trueValue : this.falseValue;
            }
            else {
                result = (val2.toUpperCase().split(this.tic).join('').localeCompare(val1.toUpperCase().split(this.tic).join('')) <= 0) ?
                    this.trueValue : this.falseValue;
            }
        }
        if (operator === 'greaterEq') {
            if (!this.isNaN(value1) && !this.isNaN(value2)) {
                result = (value2 >= value1) ? this.trueValue : this.falseValue;
            }
            else {
                result = (val2.toUpperCase().split(this.tic).join('').localeCompare(val1.toUpperCase().split(this.tic).join('')) >= 0) ?
                    this.trueValue : this.falseValue;
            }
        }
        if (operator === 'notEq') {
            result = (val2 !== val1) ? this.trueValue : this.falseValue;
        }
        if (operator === 'and') {
            val1 = stack.pop().toString();
            val2 = '';
            if (stack.length > 0) {
                val2 = stack.pop().toString();
            }
            result = this.emptyString + val2 + val1 + this.emptyString;
            result = result.split(this.tic).join('');
        }
        if (operator === 'equal') {
            val1 = stack.pop().toString();
            val2 = stack.pop().toString();
            if (val2 === '' && val1 !== '') {
                val2 = '0';
            }
            result = val1 === val2 ? this.trueValue : this.falseValue;
        }
        if (operator === 'or') {
            result = Math.pow(this.parseFloat(value2), this.parseFloat(value1)).toString();
        }
        stack.push(result);
        return result;
    };
    /**
     * @hidden
     * @param {StoredCellInfo} sCell - specified the cell information
     * @returns {string[]} - compute stored cells
     */
    Calculate.prototype.computeStoreCells = function (sCell) {
        var cellValue = sCell.cellValue;
        var cellRanges = sCell.cellRange;
        var criterias = sCell.criteria;
        var argArr = sCell.argArray;
        var isCriteria = sCell.isCriteria;
        var storeCell = sCell.storedCells;
        var isCountIfs = sCell.isCountIfS;
        var i = sCell.countVal;
        var rangeLength = isCriteria === this.trueValue ? storeCell : cellValue;
        var tempStoredCell = [];
        for (var j = 0; j < rangeLength.length; j++) {
            var stack = [];
            var cellVal = this.getValueFromArg(cellValue[j]);
            var criteria = void 0;
            var newCell = '';
            criteria = argArr[2].split(this.tic).join(this.emptyString);
            criteria = this.isCellReference(criteria) ? this.getValueFromArg(criteria) : criteria;
            isCriteria = isCountIfs === this.trueValue ? this.trueValue : isCriteria;
            if (isCriteria === this.trueValue) {
                var cell = '';
                var count = 0;
                var newCount = 0;
                storeCell[j] = isCountIfs === this.trueValue && i === 0 ? cellValue[j] : storeCell[j];
                cell = storeCell[j];
                // convert the new cell ranges  for find in range with criteria.
                while (!this.isDigit(cell[count])) {
                    count = count + 1;
                }
                if (this.isCellReference(cellRanges[i]) && cellRanges[i].indexOf(':') > -1) {
                    var k = cellRanges[i].indexOf(':');
                    newCell = this.substring(cellRanges[i], k);
                    while (!this.isDigit(newCell[newCount])) {
                        newCount = newCount + 1;
                    }
                }
                var cellAlpha = this.substring(cell, count);
                var newCellAlpha = this.substring(newCell, newCount);
                newCell = storeCell[j].split(cellAlpha).join(newCellAlpha);
                cellVal = this.getValueFromArg(newCell);
                criteria = isCountIfs === this.trueValue ? criterias[i].split(this.tic).join(this.emptyString) :
                    criterias[i - 1].split(this.tic).join(this.emptyString);
            }
            var op = 'equal';
            if (criteria.startsWith('<=')) {
                op = 'lessEq';
                criteria = criteria.substring(2);
            }
            else if (criteria.startsWith('>=')) {
                op = 'greaterEq';
                criteria = criteria.substring(2);
            }
            else if (criteria.startsWith('<>')) {
                op = 'notEq';
                criteria = criteria.substring(2);
            }
            else if (criteria.startsWith('<')) {
                op = 'less';
                criteria = criteria.substring(1);
            }
            else if (criteria.startsWith('>')) {
                op = 'greater';
                criteria = criteria.substring(1);
            }
            else if (criteria.startsWith('=')) {
                op = 'equal';
                criteria = criteria.substring(1);
            }
            if (criteria.indexOf('*') > -1 || criteria.indexOf('?') > -1) {
                cellVal = this.findWildCardValue(criteria, cellVal);
            }
            stack.push(cellVal.toLowerCase());
            stack.push(criteria.toLowerCase());
            if (this.processLogical(stack, op) === this.trueValue) {
                if (isCriteria === this.falseValue) {
                    tempStoredCell.push(cellValue[j]);
                }
                else {
                    tempStoredCell.push(newCell);
                }
            }
        }
        storeCell = tempStoredCell;
        tempStoredCell = [];
        return storeCell;
    };
    Calculate.prototype.computeIfsFormulas = function (range, isCountIfs, isAvgIfs) {
        if (isNullOrUndefined(range) || range[0] === '' || range.length === 0) {
            return this.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var argArr = range;
        var argCount = argArr.length;
        if (argCount < 2 || argCount > 127) {
            return this.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        var cellRanges = [];
        var criterias = [];
        var storedCell = [];
        var storedCellLength = 0;
        var sum = 0;
        for (var i = 0; i < argArr.length; i++) {
            if (argArr[i].indexOf(':') > -1 && this.isCellReference(argArr[i])) {
                cellRanges.push(argArr[i]);
            }
            else {
                criterias.push(argArr[i]);
            }
        }
        cellRanges = cellRanges.toString().split(',,').join(',');
        cellRanges = cellRanges.split(this.getParseArgumentSeparator());
        var len = [];
        for (var i = 0; i < cellRanges.length; i++) {
            len.push(this.getCellCollection(cellRanges[i]).length);
        }
        for (var j = 0; j < len.length; j++) {
            if (len[j] && len[j + 1] && len[j] !== len[j + 1]) {
                return this.getErrorStrings()[CommonErrors.value];
            }
        }
        var cellvalue;
        var isCriteria;
        if (isCountIfs === this.falseValue) {
            isCriteria = this.falseValue;
            cellvalue = this.getCellCollection(cellRanges[1]);
            var sCell = {
                cellValue: cellvalue, cellRange: cellRanges, criteria: criterias,
                argArray: argArr, isCriteria: isCriteria, storedCells: storedCell, isCountIfS: isCountIfs
            };
            storedCell = this.computeStoreCells(sCell);
            storedCellLength = storedCell.length;
            if (storedCellLength === 0) {
                return isAvgIfs === this.trueValue ? this.getErrorStrings()[CommonErrors.divzero] : 0;
            }
        }
        // Compare criteria and convert the new cell ranges.
        var startRange = isCountIfs === this.trueValue ? 0 : 2;
        for (var i = startRange; i < cellRanges.length; i++) {
            isCriteria = this.trueValue;
            isCriteria = isCountIfs === this.trueValue && i === 0 ? this.falseValue : this.trueValue;
            cellvalue = this.getCellCollection(cellRanges[i]);
            var sCell = {
                cellValue: cellvalue, cellRange: cellRanges, criteria: criterias,
                argArray: argArr, isCriteria: isCriteria, storedCells: storedCell, isCountIfS: isCountIfs, countVal: i
            };
            storedCell = this.computeStoreCells(sCell);
            storedCellLength = storedCell.length;
            if (storedCellLength === 0) {
                return 0;
            }
        }
        var avgValCount = 0;
        for (var j = 0; j < storedCell.length; j++) {
            // convert the new cell ranges  for find sum in range 0(first range)
            var cell = '';
            var newCell = '';
            var count = 0;
            var newCount = 0;
            cell = storedCell[j];
            while (!this.isDigit(cell[count])) {
                count = count + 1;
            }
            if (this.isCellReference(cellRanges[0]) && cellRanges[0].indexOf(':') > -1) {
                var k = cellRanges[0].indexOf(':');
                newCell = this.substring(cellRanges[0], k);
                while (!this.isDigit(newCell[newCount])) {
                    newCount = newCount + 1;
                }
            }
            var cellAlpha = this.substring(cell, count);
            var newCellAlpha = this.substring(newCell, newCount);
            cellvalue = storedCell[j].split(cellAlpha).join(newCellAlpha);
            if (isCountIfs === this.trueValue) {
                sum = sum + 1;
            }
            else {
                avgValCount++;
                var argValue = this.getValueFromArg(cellvalue);
                sum = sum + parseFloat(argValue === '' ? '0' : argValue);
            }
        }
        if (isAvgIfs === this.trueValue) {
            sum = sum / avgValCount;
        }
        return sum;
    };
    Calculate.prototype.processNestedFormula = function (pText, sFormula, fResult) {
        var interiorCalcFString = pText.split(sFormula).join('n' + fResult);
        return interiorCalcFString;
    };
    /**
     * @hidden
     * @param {string | number} value - Specify the value
     * @returns {boolean} -  Returns boolean value
     */
    Calculate.prototype.isNaN = function (value) {
        if (value.toString() === 'NaN' || typeof value === 'string') {
            return true;
        }
        return false;
    };
    /**
     * @hidden
     * @param {number} doubleNumber - To specify the double number
     * @returns {Date} - Returns date.
     */
    Calculate.prototype.fromOADate = function (doubleNumber) {
        var result = new Date();
        result.setTime((doubleNumber * this.millisecondsOfaDay) + Date.parse(this.oaDate.toString()));
        return result;
    };
    /**
     * @hidden
     * @param {number} year - Specify the year.
     * @param {number} month - Specify the month.
     * @param {number} day - Specify the day.
     * @returns {number} -  to get serial date from date.
     */
    Calculate.prototype.getSerialDateFromDate = function (year, month, day) {
        var days = 0;
        if (year < 1900) {
            year += 1900;
        }
        var isValidMonth = false;
        while (!isValidMonth) {
            while (month > 12) {
                year++;
                month -= 12;
            }
            isValidMonth = true;
            var tempDay = new Date(year, month, 1, -1).getDate();
            while (day > tempDay) {
                tempDay = new Date(year, month, 1, -1).getDate();
                month++;
                day -= tempDay;
                isValidMonth = false;
            }
            if (day < 1) {
                month--;
                tempDay = new Date(year, month, 1, -1).getDate();
                day = tempDay - day;
            }
        }
        var dateTime = Date.parse(year.toString() + this.getParseDateTimeSeparator() + month.toString() +
            this.getParseDateTimeSeparator() + day.toString());
        if (!this.isNaN(dateTime)) {
            days = this.toOADate(new Date(dateTime));
        }
        return days;
    };
    /**
     * @hidden
     * @param {string | number} value - Specify the Time
     * @returns {string} -  returns to time.
     */
    Calculate.prototype.intToTime = function (value) {
        if (isNullOrUndefined(value)) {
            return '';
        }
        var val = value.toString().split('.');
        if (!isNullOrUndefined(val[1])) {
            value = parseFloat(val[0] + 1 + '.' + val[1]) || value;
        }
        var time = this.intToDate(value.toString());
        var intl = new Internationalization();
        return intl.formatDate(time, {
            type: 'time',
            skeleton: 'medium',
            format: 'h:mm:ss a'
        });
    };
    /**
     * @hidden
     * @param {Date} dateTime - Specify the date Time
     * @returns {number} -  returns to date.
     */
    Calculate.prototype.toOADate = function (dateTime) {
        var result = (dateTime.getTime() - Date.parse(this.oaDate.toString())) / this.millisecondsOfaDay;
        return result;
    };
    /**
     * @hidden
     * @param {string} date - Specify the date
     * @returns {string} -  returns calculate Date
     */
    Calculate.prototype.calculateDate = function (date) {
        return (this.parseFloat(date) < 10) ? '0' + date : date;
    };
    /**
     * @hidden
     * @param {string} s - Specify the s
     * @returns {boolean} -  returns boolean value.
     */
    Calculate.prototype.isTextEmpty = function (s) {
        return s === null || s === '';
    };
    /**
     * @hidden
     * @param {string} text - Specify the text
     * @returns {boolean} -  returns boolean value.
     */
    Calculate.prototype.isDigit = function (text) {
        var charCode = text.charCodeAt(0);
        if ((charCode > 47) && (charCode < 58)) {
            return true;
        }
        return false;
    };
    Calculate.prototype.findLastIndexOfq = function (fString) {
        return fString.lastIndexOf('q');
    };
    /**
     * To get the exact value from argument.
     *
     * @param {string} arg - Formula argument for getting a exact value.
     * @param {boolean} isUnique - It specifies unique formula or not.
     * @returns {string} - To get the exact value from argument.
     */
    Calculate.prototype.getValueFromArg = function (arg, isUnique) {
        arg = arg.trim();
        var s = arg;
        var dateTime = this.dateTime1900;
        var pObjCVal = s;
        if (isNullOrUndefined(s) || this.isTextEmpty(s)) {
            return s;
        }
        else if (arg[0] === this.tic || arg[0] === this.singleTic) {
            dateTime = this.isDate(arg.split(this.tic).join(''));
            if (this.isNaN(this.parseFloat(arg.split(this.tic).join(''))) && !isNullOrUndefined(dateTime) &&
                !this.isNaN(dateTime.getDate()) && this.dateTime1900 <= dateTime) {
                return this.toOADate(dateTime).toString();
            }
            return arg;
        }
        else {
            arg = arg.split('u').join('-');
            if (!this.isUpperChar(s[0]) && (this.isDigit(s[0]) || s[0] === this.getParseDecimalSeparator() || s[0] === '-' || s[0] === 'n')) {
                if (s[0] === 'n') {
                    s = s.substring(1);
                    if (s.indexOf('"n') > -1) {
                        s = s.replace('"n', '"');
                    }
                }
                return s;
            }
        }
        var symbolArray = ['+', '-', '/', '*', ')', ')', '{'];
        if ((this.parser.indexOfAny(s, symbolArray) === -1 && this.isUpperChar(s[0])) || s[0] === this.sheetToken) {
            if (s !== this.trueValue && s !== this.falseValue && this.isCellReference(s)) {
                var f = this.getSheetFamilyItem(this.grid);
                if (f.sheetNameToParentObject !== null && f.sheetNameToParentObject.size > 0 && s.indexOf(this.sheetToken) === -1) {
                    var token = f.parentObjectToToken.get(this.grid);
                    s = token + s;
                }
            }
            if (s === this.cell) {
                var dependent = this.getDependentCells().get(s);
                if (dependent != null && dependent.indexOf(s) > -1) {
                    this.arrayRemove(dependent, s);
                }
                if (!this.getDependentFormulaCells().has(this.cell)) {
                    this.clearFormulaDependentCells(this.cell);
                }
                // eslint-disable-next-line no-throw-literal
                if (!isUnique) {
                    throw this.formulaErrorStrings[FormulasErrorsStrings.circular_reference] + s;
                }
            }
            pObjCVal = this.getParentObjectCellValue(s, false, isUnique);
            this.updateDependentCell(s);
            return pObjCVal.toString();
        }
        if (this.getErrorStrings().indexOf(arg) > -1) {
            return arg;
        }
        return this.computeValue(pObjCVal.toString(), false);
    };
    /* eslint-disable-next-line */
    Calculate.prototype.isDate = function (date) {
        if (typeof date === 'object' || Date.parse(date) !== null) {
            var dateval = new Date(Date.parse(date));
            if (dateval >= this.dateTime1900) {
                return dateval;
            }
            else {
                return null;
            }
        }
        else {
            return null;
        }
    };
    Calculate.prototype.isValidCellReference = function (text) {
        var start = 0;
        var end = 0;
        var j = 0;
        var numArr = [89, 71, 69];
        var cellTxt = this.emptyString;
        if (this.namedRanges.has(text)) {
            return false;
        }
        for (var i = 0; i < text.length; i++) {
            if (this.isChar(text[i])) {
                end++;
            }
        }
        cellTxt = text.substring(start, end);
        if (cellTxt.length < 4) {
            while (j < cellTxt.length) {
                if (!isNullOrUndefined(cellTxt[j]) && cellTxt[j].charCodeAt(0) < numArr[j]) {
                    j++;
                    continue;
                }
                else if (isNullOrUndefined(cellTxt[j]) && j > 0) {
                    break;
                }
                else {
                    return false;
                }
            }
            var cellNum = this.parseFloat(text.substring(end, text.length));
            if (cellNum < 1048576) { // Maximum number of rows in excel.
                return true;
            }
        }
        return false;
    };
    /** @hidden */
    /* eslint-disable-next-line */
    Calculate.prototype.parseDate = function (date) {
        if (!this.isNaN(date)) {
            if (date instanceof Date) {
                return new Date(date);
            }
            var d = parseInt(date, 10);
            if (d < 0) {
                return this.getErrorStrings()[CommonErrors.num];
            }
            if (d <= 60) {
                return new Date(this.dateTime1900.getTime() + (d - 1) * 86400000);
            }
            return new Date(this.dateTime1900.getTime() + (d - 2) * 86400000);
        }
        if (typeof date === 'string') {
            date = new Date(date);
            if (!this.isNaN(date)) {
                return date;
            }
        }
        return this.getErrorStrings()[CommonErrors.value];
    };
    /**
     * @hidden
     * @param {string} args - Specify the args
     * @returns {boolean} - Returns boolean value.
     */
    Calculate.prototype.isCellReference = function (args) {
        if (args === this.emptyString) {
            return false;
        }
        args = args.trim();
        args = this.setTokensForSheets(args);
        var sheetToken1 = this.getSheetToken(args);
        var containsBoth = false;
        if (sheetToken1 !== '') {
            args = args.split(sheetToken1).join(this.emptyString);
        }
        var isAlpha = false;
        var isNum = false;
        if (args.indexOf(':') !== args.lastIndexOf(':')) {
            return false;
        }
        var charArray = (args.split('').join(this.getParseArgumentSeparator())).split(this.getParseArgumentSeparator());
        for (var c = 0; c < charArray.length; c++) {
            if (this.isChar(charArray[c])) {
                isAlpha = true;
            }
            else if (this.isDigit(charArray[c])) {
                isNum = true;
            }
            else if (charArray[c] === ':') {
                if (isAlpha && isNum) {
                    containsBoth = true;
                }
                isAlpha = false;
                isNum = false;
            }
            else {
                return false;
            }
        }
        if (args.indexOf(':') > -1 && args.indexOf(this.tic) === -1) {
            if (containsBoth && isAlpha && isNum) {
                return true;
            }
            else if (((isAlpha && !isNum) || (!isAlpha && isNum)) && !containsBoth) {
                return true;
            }
            else {
                return false;
            }
        }
        if (isAlpha && isNum && args.indexOf(this.tic) === -1) {
            return true;
        }
        return false;
    };
    /**
     * @hidden
     * @param {string} text - Specify the text.
     * @returns {string} - set Tokens For Sheets.
     */
    Calculate.prototype.setTokensForSheets = function (text) {
        var family = this.getSheetFamilyItem(this.grid);
        var sortedSheetNamesCollection = this.getSortedSheetNames();
        if (sortedSheetNamesCollection != null) {
            for (var n = 0; n < sortedSheetNamesCollection.length; n++) {
                var token = family.sheetNameToToken.get(sortedSheetNamesCollection[n]);
                token = token.split(this.sheetToken).join(this.tempSheetPlaceHolder);
                var s = this.singleTic + 'SHEET' + sortedSheetNamesCollection[n] + this.singleTic + this.sheetToken;
                if (text.indexOf(s) === -1) {
                    s = 'SHEET' + sortedSheetNamesCollection[n] + this.sheetToken;
                }
                text = text.split(s).join(token);
                s = sortedSheetNamesCollection[n] + this.sheetToken;
                text = text.split(s).join(token);
            }
        }
        text = text.split(this.tempSheetPlaceHolder).join(this.sheetToken);
        if (text.indexOf('!!') > -1) {
            text = text.replace('!!', '!');
            var textSplit = text.split('');
            textSplit[1] = (parseInt(textSplit[1], 10) + 1).toString();
            text = textSplit.join('');
        }
        return text;
    };
    Calculate.prototype.getParentObjectCellValue = function (val, refresh, isUnique) {
        if (val === this.trueValue || val === this.falseValue) {
            return val;
        }
        var i = val.lastIndexOf(this.sheetToken);
        var row = 0;
        var col = 0;
        var grid = this.grid;
        var family = this.getSheetFamilyItem(grid);
        if (i > -1 && family.tokenToParentObject !== null) {
            this.grid = family.tokenToParentObject.get(val.substring(0, i + 1));
            row = this.rowIndex(val);
            col = this.colIndex(val);
        }
        else if (i === -1) {
            var j = 0;
            while (j < val.length && this.isChar(val[j])) {
                j++;
            }
            if (j === val.length) {
                val = val.toLowerCase();
                return val === '' ? this.getErrorStrings()[CommonErrors.value] : this.getErrorStrings()[CommonErrors.name];
            }
            else {
                row = this.rowIndex(val);
                col = this.colIndex(val);
                if (family.isSheetMember && family.parentObjectToToken != null) {
                    val = family.parentObjectToToken.get(this.grid) + val;
                }
            }
        }
        var saveCell = (this.cell === '' || this.cell === null) ? '' : this.cell;
        this.cell = val;
        if (saveCell === this.cell && !isUnique) {
            throw this.formulaErrorStrings[FormulasErrorsStrings.circular_reference];
        }
        var cValue = this.getParentCellValue(row, col, this.grid, saveCell, grid, refresh);
        this.grid = grid;
        this.cell = saveCell;
        return cValue;
    };
    Calculate.prototype.getParentCellValue = function (row, col, grd, fromCell, fromCellGrd, refresh) {
        // formulainfotable
        var cValue;
        var gridId = this.getSheetId(grd);
        if (this.parentObject.getValueRowCol === undefined) {
            cValue = this.getValueRowCol(gridId, row, col);
        }
        else {
            if (fromCell) {
                fromCell = fromCellGrd === grd ? '' : fromCell + ',' +
                    (fromCellGrd && typeof fromCellGrd === 'string' && Number(fromCellGrd) > -1 ? fromCellGrd : this.getSheetID(fromCellGrd));
            }
            cValue = this.parentObject.getValueRowCol(gridId, row, col, fromCell, refresh);
            return isNullOrUndefined(cValue) ? this.emptyString : cValue.toString();
        }
        if (cValue === '' || cValue === undefined) {
            cValue = '';
        }
        // if (cValue[cValue.length - 1] == ("%") && !this.isNaN(d)) {
        //     cValue = (Number(d) / 100).toString();
        // }
        return cValue;
    };
    Calculate.prototype.getSheetId = function (grd) {
        return grd && typeof grd === 'string' && Number(grd) > -1 ? Number(grd) : this.getSheetID(grd) + 1;
    };
    /**
     * Getting the formula result.
     *
     * @param {Object} grid - Specifies the parent object.
     * @param {number} row - Row index of the parent object or key.
     * @param {number} col - Column index of the parent object.
     * @returns {string} - Getting the formula result.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    Calculate.prototype.getValueRowCol = function (grid, row, col) {
        var key = this.rowsToKeyMap.get(row).toString();
        var result = this.getKeyValue(key).toString();
        if (result != null && result[result.length - 1] === ('%') && result.length > 1) {
            var d = this.parseFloat(result.substring(0, result.length - 1));
            if (this.isNaN(d)) {
                result = (Number(d) / 100).toString();
            }
        }
        return result;
    };
    /**
     * To add custom library formula.
     *
     * @param {string} formulaName - Custom Formula name.
     * @param {string} functionName - Custom function name.
     * @returns {void} - To add custom library formula.
     */
    Calculate.prototype.defineFunction = function (formulaName, functionName) {
        if (typeof functionName === 'string') {
            functionName = getValue(functionName, window);
        }
        formulaName = formulaName.toUpperCase();
        this.libraryFormulas.set(formulaName, { handler: functionName, isCustom: true });
    };
    /**
     * Specifies when changing the value.
     *
     * @param {string} grid - Parent object reference name.
     * @param {ValueChangedArgs} changeArgs - Value changed arguments.
     * @param {boolean} isCalculate - Value that allow to calculate.
     * @param {number[]} usedRangeCol - Specify the used range collection.
     * @param {boolean} refresh - Specifies for refreshing the value.
     * @param {string} sheetName - Specifies for sheet name for spreadsheet.
     * @returns {void} - Specifies when changing the value.
     */
    Calculate.prototype.valueChanged = function (grid, changeArgs, isCalculate, usedRangeCol, refresh, sheetName, skip) {
        var pgrid = grid;
        this.spreadSheetUsedRange = usedRangeCol;
        this.grid = grid;
        this.skipSpill = skip;
        var isComputedValueChanged = true;
        var isCompute = true;
        var calcFamily = this.getSheetFamilyItem(pgrid);
        var cellTxt = getAlphalabel(changeArgs.getColIndex()) + changeArgs.getRowIndex().toString();
        this.actCell = sheetName + '!' + cellTxt;
        if (calcFamily.sheetNameToParentObject !== null && calcFamily.sheetNameToParentObject.size > 0) {
            var token = calcFamily.parentObjectToToken.get(pgrid);
            cellTxt = token + cellTxt;
        }
        var argVal = changeArgs.getValue().toUpperCase();
        if (argVal.indexOf('=RAND()') > -1 || argVal.indexOf('RAND()') > -1 || argVal.indexOf('=RANDBETWEEN(') > -1 ||
            argVal.indexOf('RANDBETWEEN(') > -1 || this.randomValues.has(cellTxt)) {
            var randStrVal = this.randCollection.toString();
            if (!this.randomValues.has(cellTxt)) {
                this.randomValues.set(cellTxt, changeArgs.getValue());
                this.randCollection.push(cellTxt);
                this.isRandomVal = true;
            }
            else if (this.randomValues.has(cellTxt)) {
                if (argVal.indexOf('=RAND()') > -1 || argVal.indexOf('RAND()') > -1 || argVal.indexOf('=RANDBETWEEN(') > -1 ||
                    argVal.indexOf('RANDBETWEEN(') > -1) {
                    this.randomValues.set(cellTxt, changeArgs.getValue());
                }
                else if (changeArgs.getValue().toUpperCase() !== this.randomValues.get(cellTxt.toUpperCase())) {
                    this.randomValues.delete(cellTxt);
                    randStrVal = randStrVal.split(cellTxt + this.parseArgumentSeparator).join('').split(this.parseArgumentSeparator + cellTxt).join('').split(cellTxt).join('');
                    this.randCollection = randStrVal.split(this.parseArgumentSeparator);
                }
                if (this.randomValues.size === 0 && this.randCollection.length) {
                    this.isRandomVal = false;
                    this.randomValues.clear();
                    this.randCollection = [];
                }
            }
        }
        if (changeArgs.getValue() && changeArgs.getValue()[0] === this.getFormulaCharacter()) {
            this.cell = cellTxt;
            var formula = void 0;
            if (!isNullOrUndefined(isCompute)) {
                isCompute = isCalculate;
            }
            if (this.getFormulaInfoTable().has(cellTxt)) {
                formula = this.getFormulaInfoTable().get(cellTxt);
                if (changeArgs.getValue() !== formula.getFormulaText() || formula.getParsedFormula() == null) {
                    formula.setFormulaText(changeArgs.getValue());
                    if (this.getDependentFormulaCells().has(this.cell)) {
                        this.clearFormulaDependentCells(this.cell);
                    }
                    try {
                        formula.setParsedFormula(this.parser.parseFormula(changeArgs.getValue()));
                    }
                    catch (ex) {
                        formula.setFormulaValue(ex);
                        isCompute = false;
                    }
                }
                if (isCompute) {
                    this.parser.isFormulaParsed = true;
                    var cValue = this.calculateFormula(formula.getParsedFormula(), refresh);
                    isComputedValueChanged = (cValue !== formula.getFormulaValue());
                    formula.setFormulaValue(cValue);
                }
            }
            else {
                formula = new FormulaInfo();
                formula.setFormulaText(changeArgs.getValue());
                if (!this.getDependentFormulaCells().has(cellTxt)) {
                    this.getDependentFormulaCells().set(cellTxt, new Map());
                }
                try {
                    formula.setParsedFormula(this.parser.parseFormula(changeArgs.getValue()));
                }
                catch (ex) {
                    formula.setFormulaValue(ex);
                    isCompute = false;
                }
                if (isCompute) {
                    formula.setFormulaValue(this.calculateFormula(formula.getParsedFormula(), refresh));
                }
                if (this.getFormulaInfoTable().has(cellTxt)) {
                    this.getFormulaInfoTable().set(cellTxt, formula);
                }
                else {
                    this.getFormulaInfoTable().set(cellTxt, formula);
                }
            }
            if (isCompute) {
                /* eslint-disable */
                if (this.parentObject.setValueRowCol === undefined) {
                    this.setValueRowCol(this.getSheetID(pgrid) + 1, formula.getFormulaValue(), changeArgs.getRowIndex(), changeArgs.getColIndex());
                }
                else {
                    this.parentObject.setValueRowCol(this.getSheetId(pgrid), formula.getFormulaValue(), changeArgs.getRowIndex(), changeArgs.getColIndex(), formula.getFormulaText());
                }
                /* eslint-enable */
            }
        }
        else if (this.getFormulaInfoTable().has(cellTxt)) {
            this.getFormulaInfoTable().delete(cellTxt);
            if (this.getDependentFormulaCells().has(cellTxt)) {
                this.clearFormulaDependentCells(cellTxt);
            }
        }
        if (isCompute && isComputedValueChanged && this.getDependentCells().has(cellTxt) &&
            this.getDependentCells().get(cellTxt).toString() !== cellTxt) {
            this.getComputedValue().clear();
            this.refresh(cellTxt);
        }
    };
    /**
     * @hidden
     * @returns {Map<string, string | number>} - To get computed value.
     */
    Calculate.prototype.getComputedValue = function () {
        if (this.computedValues === null) {
            this.computedValues = new Map();
        }
        return this.computedValues;
    };
    /**
     * @hidden
     * @param {number} value - specify the value
     * @param {string | number} formulaValue -  specify the formula value.
     * @param {number} row - specify the row
     * @param {number} col - specify the col.
     * @returns {void} - to set value row and column.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    Calculate.prototype.setValueRowCol = function (value, formulaValue, row, col) {
        /* No Implementation */
    };
    Calculate.prototype.getSortedSheetNames = function () {
        var family = this.getSheetFamilyItem(this.grid);
        if (family != null && family.sheetNameToToken != null) {
            var arr_1 = [];
            family.sheetNameToToken.forEach(function (value, key) {
                arr_1.push(key);
                arr_1.sort();
            });
            this.sortedSheetNames = arr_1;
            this.sortedSheetNames.sort();
            if (this.sortedSheetNames.length > 9 && this.sortedSheetNames[0].includes('1') && this.sortedSheetNames[1].includes('10')) {
                this.sortedSheetNames.splice(this.sortedSheetNames.indexOf('2'), 0, this.sortedSheetNames[0]);
                this.sortedSheetNames.splice(0, 1);
            }
        }
        return this.sortedSheetNames;
    };
    /**
     * @hidden
     * @param {string} error -  specify the string
     * @returns {string} - to get error line.
     */
    Calculate.prototype.getErrorLine = function (error) {
        /* eslint-disable-next-line */
        var errorStack = error.stack ? error.stack.split('\n')[1].split(':') : null;
        return errorStack ? errorStack[errorStack.length - 2] : null; // Getting row number of the error file.
    };
    /** @hidden
     * @returns {number} - to return the sheet id
     */
    Calculate.prototype.createSheetFamilyID = function () {
        if (this.sheetFamilyID === Number.MAX_SAFE_INTEGER) {
            this.sheetFamilyID = Number.MIN_SAFE_INTEGER;
        }
        return this.sheetFamilyID++;
    };
    /**
     * @hidden
     * @param {string[]} args - Specify the args.
     * @param {string} operation - Specify the operation.
     * @returns {string} - To compute min max.
     */
    Calculate.prototype.computeMinMax = function (args, operation) {
        var result;
        var argVal;
        var countStrVal = 0;
        if (isNullOrUndefined(args) || args.length === 0) {
            return this.formulaErrorStrings[FormulasErrorsStrings.wrong_number_arguments];
        }
        for (var k = 0, len = args.length; k < len; k++) {
            if (args[k].split(this.tic).join('').trim() === this.emptyString) {
                return this.getErrorStrings()[CommonErrors.value];
            }
        }
        result = (operation === 'max') ? this.minValue : this.maxValue;
        var argArr = args;
        if (argArr.length > 255) {
            return this.getErrorStrings()[CommonErrors.value];
        }
        for (var i = 0; i < argArr.length; i++) {
            if (argArr[i].indexOf(':') > -1 && this.isCellReference(argArr[i])) {
                var cellValue = this.getCellCollection(argArr[i]);
                for (var j = 0; j < cellValue.length; j++) {
                    argVal = this.getValueFromArg(cellValue[j]);
                    if (this.getErrorStrings().indexOf(argVal) > -1) {
                        return argVal;
                    }
                    var cellVal = this.parseFloat(argVal);
                    if (argVal === '' || this.isNaN(this.parseFloat(cellVal))) {
                        countStrVal = countStrVal + 1;
                        if (countStrVal === cellValue.length) {
                            result = 0;
                        }
                        continue;
                    }
                    else {
                        result = (operation === 'max') ? Math.max(result, cellVal) : Math.min(result, cellVal);
                    }
                }
            }
            else {
                var val = this.getValueFromArg(argArr[i]) || '0';
                if (this.getErrorStrings().indexOf(val) > -1) {
                    return val;
                }
                var cellVal = this.isNaN(this.parseFloat(val)) ? 0 : this.parseFloat(val);
                result = operation === 'max' ? Math.max(result, cellVal) : Math.min(result, cellVal);
            }
        }
        return result.toString();
    };
    /**
     * @hidden
     * @param {string[]} args - Specify the args.
     * @returns {string} - to calculate average.
     */
    Calculate.prototype.calculateAvg = function (args) {
        var sumCell = 0;
        var argArr = args;
        var cellVal = [];
        var avgVal = 0;
        var countNum = 0;
        var countNum1 = 0;
        for (var k = 0; k < argArr.length; k++) {
            if (argArr[k].indexOf(':') > -1 && this.isCellReference(argArr[k])) {
                countNum = 0;
                cellVal = this.getCellCollection(argArr[k]);
                avgVal = 0;
                for (var i = 0; i < cellVal.length; i++) {
                    var value = this.getValueFromArg(cellVal[i]);
                    if (isNullOrUndefined(value) || isNaN(this.parseFloat(value))) {
                        continue;
                    }
                    avgVal = avgVal + this.parseFloat(value);
                    countNum = countNum + 1;
                }
                if (countNum === 0) {
                    return this.getErrorStrings()[CommonErrors.divzero];
                }
                avgVal = avgVal / countNum;
                sumCell = avgVal + sumCell;
            }
            else {
                if (argArr[k].indexOf(this.tic) > -1) {
                    if (isNaN(parseFloat(argArr[k].split(this.tic).join('')))) {
                        return this.getErrorStrings()[CommonErrors.value];
                    }
                }
                if (argArr[k].length === 0) {
                    argArr[k] = '1';
                }
                var value = this.getValueFromArg(argArr[k].split(this.tic).join(''));
                if (isNullOrUndefined(value) || isNaN(this.parseFloat(value))) {
                    return this.getErrorStrings()[CommonErrors.name];
                }
                sumCell = sumCell + this.parseFloat(value);
            }
        }
        return (sumCell / (argArr.length - countNum1)).toString();
    };
    /**
     * @hidden
     * @param {string} refName - specify the reference name.
     * @param {Object | string } model - model - Specify the model.model
     * @param {number} sheetFamilyID - specify the sheet family id.
     * @returns {string} - register Grid As Sheet.
     */
    Calculate.prototype.registerGridAsSheet = function (refName, model, sheetFamilyID) {
        if (isNullOrUndefined(this.modelToSheetID)) {
            this.modelToSheetID = new Map();
        }
        if (isNullOrUndefined(this.modelToSheetID.get(model))) {
            this.modelToSheetID.set(model, sheetFamilyID);
        }
        var family = this.getSheetFamilyItem(model);
        family.isSheetMember = true;
        var tempRef = refName.toUpperCase();
        if (family.parentObjectToToken.size === 0) {
            family.parentObjectToToken = new Map();
        }
        if (family.sheetNameToParentObject.size === 0) {
            family.sheetNameToParentObject = new Map();
        }
        if (family.sheetNameToToken.size === 0) {
            family.sheetNameToToken = new Map();
        }
        if (family.tokenToParentObject.size === 0) {
            family.tokenToParentObject = new Map();
        }
        if (!isUndefined(family.sheetNameToParentObject.get(tempRef))) {
            var token = family.sheetNameToToken.get(tempRef);
            family.tokenToParentObject.set(token, model);
            family.parentObjectToToken.set(model, token);
        }
        else {
            var token = this.sheetToken + this.tokenCount.toString() + this.sheetToken;
            this.tokenCount++;
            family.tokenToParentObject.set(token, model);
            family.parentObjectToToken.set(model, token);
            family.sheetNameToToken.set(tempRef, token);
            family.sheetNameToParentObject.set(tempRef, model);
        }
        return refName;
    };
    /**
     * @hidden
     * @param {string} refName - Specify the reference name
     * @param {string | Object} model - Specify the model
     * @param {boolean} unRegisterAll - Un registed all the availbe model.
     * @returns {void} - To un register grid sheet.
     */
    Calculate.prototype.unregisterGridAsSheet = function (refName, model, unRegisterAll) {
        var _this = this;
        var modelArr = [model];
        if (unRegisterAll) {
            modelArr = [];
            if (!isNullOrUndefined(this.modelToSheetID)) {
                this.modelToSheetID.forEach(function (value, key) {
                    modelArr.push(key);
                });
            }
        }
        modelArr.forEach(function (value) {
            var family = _this.getSheetFamilyItem(value);
            var refName1 = (unRegisterAll ? value : refName).toUpperCase();
            if (family.sheetNameToParentObject != null && family.sheetNameToParentObject.has(refName1)) {
                family.sheetNameToParentObject.delete(refName1);
                var token = family.sheetNameToToken.get(refName1);
                family.sheetNameToToken.delete(refName1);
                family.tokenToParentObject.delete(token);
                family.parentObjectToToken.delete(value);
                if (unRegisterAll) {
                    family.sheetDependentCells = new Map();
                }
            }
        });
    };
    /**
     * @hidden
     * @param {string} formula - Specify the formula
     * @returns {string | number} - To compute the expression.
     */
    Calculate.prototype.computeExpression = function (formula) {
        var parsedFormula = this.parser.parseFormula(formula);
        var calcValue = this.computeFormula(parsedFormula);
        return calcValue;
    };
    Calculate.prototype.isSheetMember = function () {
        var family = this.getSheetFamilyItem(this.grid);
        return isNullOrUndefined(family) ? false : family.isSheetMember;
    };
    /**
     * To dispose the calculate engine.
     *
     * @returns {void} - To dispose the calculate engine.
     */
    Calculate.prototype.dispose = function () {
        this.resetKeys();
        // this.dependentCells.clear();
        // this.dependentFormulaCells.clear();
        this.namedRanges.clear();
        // this.sheetFamiliesList.clear();
        this.lFormulas.clear();
    };
    Calculate.prototype.refreshRandValues = function (cellRef) {
        var rowIdx;
        var colIdx;
        var value;
        var tokenRef = '';
        var stringCollection = this.randCollection.toString();
        var family;
        if (this.randomValues.has(cellRef)) {
            this.randomValues.delete(cellRef);
            stringCollection = stringCollection.split(cellRef + this.parseArgumentSeparator).join('').split(this.parseArgumentSeparator + cellRef).join('').split(cellRef).join('');
            if (this.randomValues.size === 0 && stringCollection === '') {
                this.randomValues.clear();
                this.randCollection = [];
            }
            else {
                this.randCollection = stringCollection.split(this.parseArgumentSeparator);
            }
        }
        for (var i = 0; i < this.randomValues.size; i++) {
            rowIdx = this.rowIndex(this.randCollection[i]);
            colIdx = this.colIndex(this.randCollection[i]);
            tokenRef = (parseFloat(this.getSheetToken(this.randCollection[i]).split(this.sheetToken).join('')) + 1).toString();
            family = this.getSheetFamilyItem(tokenRef);
            this.grid = family.sheetNameToParentObject.get(tokenRef);
            value = this.randomValues.get(this.randCollection[i]);
            value = this.computeFormula(value);
            if (this.parentObject.setValueRowCol === undefined) {
                this.setValueRowCol(this.getSheetID(this.grid) + 1, value, rowIdx, colIdx);
            }
            else {
                this.parentObject.setValueRowCol(this.getSheetId(this.grid), value, rowIdx, colIdx);
            }
        }
    };
    Calculate.prototype.refresh = function (cellRef) {
        if (this.dependencyLevel === 0) {
            this.refreshedCells.clear();
        }
        if (this.getDependentCells().has(cellRef) && this.getDependentCells().get(cellRef) !== null) {
            var family = this.getSheetFamilyItem(this.grid);
            this.dependencyLevel = this.dependencyLevel + 1;
            try {
                var dependentCells = this.getDependentCells().get(cellRef);
                var i = void 0;
                for (i = 0; i < dependentCells.length; i++) {
                    var dCell = dependentCells[i];
                    var token = this.getSheetToken(dCell);
                    this.actCell = dCell.split(token)[1];
                    if (token.length) {
                        this.grid = family.tokenToParentObject.get(token);
                    }
                    try {
                        var rowIdx = this.rowIndex(dCell);
                        var colIdx = this.colIndex(dCell);
                        var formulaInfo = this.getFormulaInfoTable().get(dCell);
                        var result = void 0;
                        if (formulaInfo) {
                            this.cell = dCell;
                            if (!this.getComputedValue().has(dCell)) {
                                this.parser.isFormulaParsed = true;
                                result = this.calculateFormula(formulaInfo.getParsedFormula(), true);
                                this.computedValues.set(dCell, result);
                            }
                            else {
                                result = this.getComputedValue().get(dCell);
                            }
                            formulaInfo.setFormulaValue(result);
                        }
                        if (this.parentObject.setValueRowCol === undefined) {
                            this.setValueRowCol(this.getSheetID(this.grid) + 1, formulaInfo.getFormulaValue(), rowIdx, colIdx);
                        }
                        else {
                            this.parentObject.setValueRowCol(this.getSheetId(this.grid), formulaInfo.getFormulaValue(), rowIdx, colIdx, formulaInfo.getFormulaText());
                        }
                        if (!this.refreshedCells.has(dCell)) {
                            this.refreshedCells.set(dCell, []);
                            this.refresh(dCell);
                        }
                    }
                    catch (ex) {
                        continue;
                    }
                }
            }
            finally {
                this.grid = family.tokenToParentObject.get(this.getSheetToken(cellRef));
                this.dependencyLevel--;
                if (this.dependencyLevel === 0) {
                    this.refreshedCells.clear();
                }
            }
        }
    };
    var Calculate_1;
    __decorate$2([
        Property(true)
    ], Calculate.prototype, "includeBasicFormulas", void 0);
    __decorate$2([
        Event$1()
    ], Calculate.prototype, "onFailure", void 0);
    Calculate = Calculate_1 = __decorate$2([
        NotifyPropertyChanges
    ], Calculate);
    return Calculate;
}(Base));
/** @hidden */
var FormulaError = /** @__PURE__ @class */ (function () {
    function FormulaError(errorMessage, formulaAutoCorrection) {
        this.formulaCorrection = false;
        this.message = errorMessage;
        this.formulaCorrection = formulaAutoCorrection;
    }
    return FormulaError;
}());
/** @hidden */
var FormulaInfo = /** @__PURE__ @class */ (function () {
    function FormulaInfo() {
        /**
         * @hidden
         */
        this.calcID = Number.MIN_VALUE + 1;
        this.calcID1 = Number.MIN_VALUE + 1;
    }
    /**
     * @hidden
     * @returns {void} - To get Formula Text
     */
    FormulaInfo.prototype.getFormulaText = function () {
        return this.formulaText;
    };
    /**
     * @hidden
     * @param {string} value - Specify the value
     * @returns {void} - To set Formula Text
     */
    FormulaInfo.prototype.setFormulaText = function (value) {
        this.formulaText = value;
    };
    /**
     * @hidden
     * @returns {string} - To get Formula Value
     */
    FormulaInfo.prototype.getFormulaValue = function () {
        return this.formulaValue;
    };
    /**
     * @hidden
     * @param {string | number} value - Specify the value
     * @returns {void} - To set Parsed Formula
     */
    FormulaInfo.prototype.setFormulaValue = function (value) {
        this.formulaValue = value;
    };
    /**
     * @hidden
     * @returns {string} - To get Parsed Formula
     */
    FormulaInfo.prototype.getParsedFormula = function () {
        return this.parsedFormula;
    };
    /**
     * @hidden
     * @param {string} value - Specify the value
     * @returns {void} - To set Parsed Formula
     */
    FormulaInfo.prototype.setParsedFormula = function (value) {
        this.parsedFormula = value;
    };
    return FormulaInfo;
}());
/** @hidden */
var CalcSheetFamilyItem = /** @__PURE__ @class */ (function () {
    function CalcSheetFamilyItem() {
        /**
         * @hidden
         */
        this.isSheetMember = false;
        /**
         * @hidden
         */
        this.parentObjectToToken = new Map();
        /**
         * @hidden
         */
        this.sheetDependentCells = new Map();
        /**
         * @hidden
         */
        this.sheetDependentFormulaCells = new Map();
        /**
         * @hidden
         */
        this.sheetNameToParentObject = new Map();
        /**
         * @hidden
         */
        this.sheetNameToToken = new Map();
        /**
         * @hidden
         */
        this.tokenToParentObject = new Map();
        /**
         * @hidden
         */
        this.sheetFormulaInfotable = new Map();
    }
    return CalcSheetFamilyItem;
}());
/**
 * @hidden
 * @param {number} col - Specify the column
 * @returns {string} - To returns get Alphalabel.
 */
function getAlphalabel(col) {
    var cols = [];
    var n = 0;
    var charText = 'A';
    while (col > 0 && n < 9) {
        col--;
        var aCharNo = charText.charCodeAt(0);
        cols[n] = String.fromCharCode(col % 26 + aCharNo);
        col = parseInt((col / 26).toString(), 10);
        n++;
    }
    var chs = [];
    for (var i = 0; i < n; i++) {
        chs[n - i - 1] = cols[i];
    }
    return chs.join('');
}
var ValueChangedArgs = /** @__PURE__ @class */ (function () {
    function ValueChangedArgs(row, col, value) {
        this.row = row;
        this.col = col;
        this.value = value;
        this.getRowIndex = function () {
            return row;
        };
        this.setRowIndex = function (value) {
            row = value;
        };
        this.getColIndex = function () {
            return col;
        };
        this.setColIndex = function (value) {
            col = value;
        };
        this.getValue = function () {
            return value;
        };
        // this.setValue = (value: number): void => {
        //     value = value;
        // };
        return this;
    }
    return ValueChangedArgs;
}());

/**
 * Export Calculate Modules.
 */

/**
 * Export calculate modules
 */

/**
 * @hidden
 * The `WorkbookFormula` module is used to handle the formula operation in Workbook.
 */
var WorkbookFormula = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for formula module in Workbook.
     *
     * @param {Workbook} workbook - Specifies the workbook.
     * @private
     */
    function WorkbookFormula(workbook) {
        this.uniqueOBracket = String.fromCharCode(129);
        this.uniqueCBracket = String.fromCharCode(130);
        this.uniqueCSeparator = String.fromCharCode(131);
        this.uniqueCOperator = String.fromCharCode(132);
        this.uniquePOperator = String.fromCharCode(133);
        this.uniqueSOperator = String.fromCharCode(134);
        this.uniqueMOperator = String.fromCharCode(135);
        this.uniqueDOperator = String.fromCharCode(136);
        this.uniqueModOperator = String.fromCharCode(137);
        this.uniqueConcateOperator = String.fromCharCode(138);
        this.uniqueEqualOperator = String.fromCharCode(139);
        this.uniqueExpOperator = String.fromCharCode(140);
        this.uniqueGTOperator = String.fromCharCode(141);
        this.uniqueLTOperator = String.fromCharCode(142);
        this.sheetInfo = [];
        this.parent = workbook;
        this.init();
    }
    WorkbookFormula.prototype.init = function () {
        this.addEventListener();
        this.initCalculate();
        this.registerSheet();
    };
    /**
     * To destroy the formula module.
     *
     * @returns {void}
     * @hidden
     */
    WorkbookFormula.prototype.destroy = function () {
        this.removeEventListener();
        this.calculateInstance.dispose();
        this.calculateInstance = null;
        this.parent = null;
    };
    WorkbookFormula.prototype.addEventListener = function () {
        this.parent.on(workbookFormulaOperation, this.performFormulaOperation, this);
        this.parent.on(aggregateComputation, this.aggregateComputation, this);
        this.parent.on(getUniqueRange, this.getUniqueRange, this);
        this.parent.on(removeUniquecol, this.removeUniquecol, this);
        this.parent.on(clearFormulaDependentCells, this.clearFormulaDependentCells, this);
        this.parent.on(getFormulaInfoTable, this.getFormulaInfoTable, this);
        this.parent.on(formulaInValidation, this.formulaInValidation, this);
        this.parent.on(refreshInsertDelete, this.refreshInsertDelete, this);
    };
    WorkbookFormula.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(workbookFormulaOperation, this.performFormulaOperation);
            this.parent.off(aggregateComputation, this.aggregateComputation);
            this.parent.off(getUniqueRange, this.getUniqueRange);
            this.parent.off(removeUniquecol, this.removeUniquecol);
            this.parent.off(clearFormulaDependentCells, this.clearFormulaDependentCells);
            this.parent.off(getFormulaInfoTable, this.getFormulaInfoTable);
            this.parent.off(formulaInValidation, this.formulaInValidation);
            this.parent.off(refreshInsertDelete, this.refreshInsertDelete);
        }
    };
    /**
     * Get the module name.
     *
     * @returns {string} - Get the module name.
     * @private
     */
    WorkbookFormula.prototype.getModuleName = function () {
        return 'workbookFormula';
    };
    WorkbookFormula.prototype.initCalculate = function () {
        this.calculateInstance = new Calculate(this.parent);
        this.calcID = this.calculateInstance.createSheetFamilyID();
        this.calculateInstance.setTreatEmptyStringAsZero(true);
        this.calculateInstance.grid = this.parent.getActiveSheet().id.toString();
    };
    WorkbookFormula.prototype.clearFormulaDependentCells = function (args) {
        var cellRef = args.cellRef;
        cellRef = cellRef.split(':')[0];
        cellRef = '!' + this.parent.activeSheetIndex + '!' + cellRef;
        this.calculateInstance.clearFormulaDependentCells(cellRef);
    };
    WorkbookFormula.prototype.formulaInValidation = function (args) {
        var col = this.calculateInstance.getLibraryFormulas().get(args.value);
        args.skip = isNullOrUndefined(col);
    };
    WorkbookFormula.prototype.performFormulaOperation = function (args) {
        var action = args.action;
        var formulas = this.calculateInstance.getLibraryFormulas();
        var formulaInfo = (Array.from(formulas.values()));
        var collection;
        switch (action) {
            case 'getLibraryFormulas':
                args.formulaCollection = Array.from(formulas.keys());
                break;
            case 'getFormulaCategory':
                collection = ['All'];
                for (var i = 1; i < Array.from(formulas.values()).length; i++) {
                    if (collection.indexOf(formulaInfo[i].category) < 0) {
                        collection.push(formulaInfo[i].category);
                    }
                }
                args.categoryCollection = collection;
                break;
            case 'dropDownSelectFormulas':
                for (var i = 0; i < Array.from(formulas.values()).length; i++) {
                    if (args.selectCategory === formulaInfo[i].category) {
                        args.formulaCollection[i] = Array.from(formulas.keys())[i];
                    }
                }
                break;
            case 'getFormulaDescription':
                for (var i = 0; i < Array.from(formulas.values()).length; i++) {
                    if (args.selectedList === Array.from(formulas.keys())[i]) {
                        args.description = formulaInfo[i].description;
                    }
                }
                break;
            case 'registerSheet':
                this.registerSheet(args.sheetIndex, args.sheetCount);
                if (args.isImport) {
                    this.updateSheetInfo();
                }
                break;
            case 'unRegisterSheet':
                this.unRegisterSheet(args.sheetIndex, args.sheetCount, args.propertyChange);
                break;
            case 'initSheetInfo':
                this.updateSheetInfo();
                break;
            case 'refreshCalculate':
                if (args.isFormula) {
                    args.value = this.autoCorrectFormula(args.value, args.rowIndex, args.colIndex, args.sheetIndex);
                    if (args.isClipboard && args.value.toString().toUpperCase().includes('UNIQUE')) {
                        this.parent.sheets[args.sheetIndex].rows[args.rowIndex].cells[args.colIndex].value = '';
                    }
                }
                this.refreshCalculate(args.rowIndex, args.colIndex, args.value, args.isFormula, args.sheetIndex, args.isRefreshing, args.skip);
                args.value = args.value ? args.value.toString().split('-*').join('-').split('/*').join('/').split('*/').
                    join('*').split('-/').join('-').split('*+').join('*').split('+*').join('+') : args.value;
                break;
            case 'getArgumentSeparator':
                args.argumentSeparator = this.calculateInstance.getParseArgumentSeparator();
                break;
            case 'addDefinedName':
                args.isAdded = this.addDefinedName(args.definedName, false, args.index, args.isEventTrigger);
                break;
            case 'removeDefinedName':
                args.isRemoved = this.removeDefinedName(args.definedName, args.scope, args.isEventTrigger);
                break;
            case 'initiateDefinedNames':
                this.initiateDefinedNames();
                break;
            case 'renameUpdation':
                this.renameUpdation(args.value, args.pName);
                break;
            case 'addSheet':
                this.sheetInfo.push({ visibleName: args.visibleName, sheet: args.sheetName, index: args.sheetId });
                break;
            case 'getSheetInfo':
                args.sheetInfo = this.sheetInfo;
                break;
            case 'deleteSheetTab':
                for (var i = 0; i < this.sheetInfo.length; i++) {
                    if (this.sheetInfo[i].index === args.sheetId) {
                        var sheetName = this.sheetInfo[i].sheet;
                        this.sheetInfo.splice(i, 1);
                        var id = args.sheetId.toString();
                        this.sheetDeletion(sheetName, id);
                        this.calculateInstance.unregisterGridAsSheet(id, id);
                        break;
                    }
                }
                break;
            case 'getReferenceError':
                args.refError = this.referenceError();
                break;
            case 'getAlpha':
                args.col = getAlphalabel(args.col);
                break;
            case 'addCustomFunction':
                this.addCustomFunction(args.functionHandler, args.functionName);
                break;
            case 'computeExpression':
                args.calcValue = this.calculateInstance.computeExpression(args.formula);
                break;
            case 'registerGridInCalc':
                this.calculateInstance.grid = args.sheetID;
                break;
            case 'checkFormulaAdded':
                // eslint-disable-next-line no-case-declarations
                var family = this.calculateInstance.getSheetFamilyItem(args.sheetId);
                if (family.isSheetMember && !isNullOrUndefined(family.parentObjectToToken)) {
                    args.address = family.parentObjectToToken.get(args.sheetId) + args.address;
                }
                args.added = this.calculateInstance.getFormulaInfoTable().has(args.address);
                break;
        }
    };
    WorkbookFormula.prototype.referenceError = function () {
        return this.calculateInstance.getErrorStrings()[CommonErrors.ref];
    };
    WorkbookFormula.prototype.getSheetInfo = function () {
        return this.sheetInfo;
    };
    WorkbookFormula.prototype.addCustomFunction = function (functionHandler, functionName) {
        this.calculateInstance.defineFunction(functionName, functionHandler);
    };
    WorkbookFormula.prototype.getFormulaInfoTable = function (args) {
        var cellRef = args.cellRef;
        cellRef = cellRef.split(':')[0];
        cellRef = '!' + this.parent.activeSheetIndex + '!' + cellRef;
        args.toSkip = isNullOrUndefined(this.calculateInstance.getFormulaInfoTable().get(cellRef));
    };
    WorkbookFormula.prototype.updateSheetInfo = function () {
        var _this = this;
        this.sheetInfo = [];
        this.parent.sheets.forEach(function (sheet) {
            _this.sheetInfo.push({ visibleName: sheet.name, sheet: 'Sheet' + sheet.id, index: sheet.id });
        });
    };
    WorkbookFormula.prototype.sheetDeletion = function (delSheetName, sheetId) {
        var _this = this;
        var dependentCell = this.calculateInstance.getDependentCells();
        var fInfo;
        var formulaVal;
        var rowId;
        var colId;
        var token;
        var family = this.calculateInstance.getSheetFamilyItem(sheetId);
        dependentCell.forEach(function (dependentCellRefs, cellRef) {
            dependentCellRefs.forEach(function (dependentCellRef) {
                fInfo = _this.calculateInstance.getFormulaInfoTable().get(dependentCellRef);
                if (!isNullOrUndefined(fInfo)) {
                    formulaVal = fInfo.formulaText;
                    if (formulaVal.toUpperCase().indexOf(delSheetName.toUpperCase()) > -1) {
                        formulaVal = formulaVal.toUpperCase().split(delSheetName.toUpperCase() +
                            _this.calculateInstance.sheetToken).join(_this.referenceError());
                        rowId = _this.calculateInstance.rowIndex(dependentCellRef);
                        colId = _this.calculateInstance.colIndex(dependentCellRef);
                        token = dependentCellRef.slice(0, dependentCellRef.lastIndexOf(_this.calculateInstance.sheetToken) + 1);
                        _this.updateDataContainer([rowId - 1, colId - 1], { value: formulaVal, visible: false, sheetId: family.tokenToParentObject.has(token) ?
                                Number(family.tokenToParentObject.get(token)) : parseInt(dependentCellRef.split('!')[1], 10) + 1 });
                        _this.calculateInstance.refresh(fInfo.getParsedFormula());
                    }
                }
                token = cellRef.slice(0, cellRef.lastIndexOf(_this.calculateInstance.sheetToken) + 1);
                if (sheetId === (family.tokenToParentObject.has(token) ? family.tokenToParentObject.get(token) :
                    cellRef.split('!')[1])) {
                    _this.calculateInstance.getFormulaInfoTable().delete(cellRef);
                    _this.calculateInstance.clearFormulaDependentCells(cellRef);
                }
            });
        });
    };
    WorkbookFormula.prototype.renameUpdation = function (name, pName) {
        var _this = this;
        var sheet;
        var cell;
        var uPName = pName.toUpperCase();
        var escapeRegx = new RegExp('[!@#$%^&()+=\';,.{}|\\":<>~_-]', 'g');
        var exp = '(?=[\'!])(?=[^"]*(?:"[^"]*"[^"]*)*$)';
        var regx = new RegExp(pName.replace(escapeRegx, '\\$&') + exp, 'gi');
        this.sheetInfo.forEach(function (info, index) {
            sheet = _this.parent.sheets[index];
            for (var i = 0, rowLen = sheet.usedRange.rowIndex; i <= rowLen; i++) {
                for (var j = 0, colLen = sheet.usedRange.colIndex; j <= colLen; j++) {
                    cell = getCell(i, j, sheet, false, true);
                    if (cell.formula && checkIsFormula(cell.formula) && cell.formula.toUpperCase().includes(uPName) &&
                        cell.formula.match(regx)) {
                        cell.formula = cell.formula.replace(regx, name);
                    }
                }
            }
            if (info.visibleName === pName) {
                info.visibleName = name;
            }
        });
    };
    WorkbookFormula.prototype.updateDataContainer = function (indexes, data) {
        var sheet;
        var rowData;
        var colObj;
        for (var i = 0, len = this.parent.sheets.length; i < len; i++) {
            if (this.parent.sheets[i].id === data.sheetId) {
                sheet = this.parent.sheets[i];
                if (indexes[0] in sheet.rows) {
                    rowData = sheet.rows[indexes[0]];
                    if (indexes[1] in rowData.cells) {
                        colObj = rowData.cells[indexes[1]];
                        colObj.formula = data.value;
                        if (data.visible) {
                            if (i === this.parent.activeSheetIndex && sheet.activeCell === getCellAddress(indexes[0], indexes[1])) {
                                this.parent.notify(selectionComplete, {});
                            }
                        }
                        else {
                            colObj.value = this.referenceError();
                        }
                    }
                    else {
                        rowData.cells[indexes[1]] = colObj = {};
                    }
                }
                else {
                    rowData = sheet.rows[indexes[0]] = {};
                    rowData[indexes[1]] = colObj = {};
                }
                break;
            }
        }
    };
    WorkbookFormula.prototype.parseSheetRef = function (value) {
        var regx;
        // eslint-disable-next-line no-useless-escape
        var escapeRegx = new RegExp('[!@#$%^&()+=\';,.{}|\":<>~_-]', 'g');
        var i = 0;
        var sheetCount = this.parent.sheets.length;
        var temp = [];
        temp.length = 0;
        var regxTemp;
        var searchIdx;
        var idx;
        var valSearchIdx;
        var regxVisible;
        var sheetInfo = this.getSheetInfo();
        var exp = '(?=[\'!])(?=[^"]*(?:"[^"]*"[^"]*)*$)';
        for (i = 0; i < sheetCount; i++) {
            if (sheetInfo[i].sheet !== sheetInfo[i].visibleName) {
                regx = new RegExp(sheetInfo[i].visibleName.replace(escapeRegx, '\\$&') + exp, 'gi');
                idx = i;
                if (value.match(regx)) {
                    for (var j = i + 1; j < sheetCount; j++) {
                        regxTemp = new RegExp(sheetInfo[j].visibleName.replace(escapeRegx, '\\$&') + exp, 'gi');
                        searchIdx = value.search(regxTemp);
                        valSearchIdx = value.search(regx);
                        if (searchIdx > -1 && (searchIdx < valSearchIdx || (searchIdx === valSearchIdx && sheetInfo[j].visibleName.length >
                            sheetInfo[i].visibleName.length))) {
                            regxVisible = new RegExp('Sheet', 'gi');
                            if (sheetInfo[j].visibleName.search(regxVisible) !== 0) {
                                regx = regxTemp;
                                idx = j;
                            }
                        }
                    }
                    value = value.replace(regx, idx + '/');
                    temp.push(idx);
                }
            }
        }
        i = 0;
        while (i < temp.length) {
            regx = new RegExp(temp[i] + '/' + exp, 'gi');
            value = value.replace(regx, sheetInfo[temp[i]].sheet);
            i++;
        }
        return value;
    };
    WorkbookFormula.prototype.registerSheet = function (sheetIndex, sheetCount) {
        if (sheetIndex === void 0) { sheetIndex = 0; }
        if (sheetCount === void 0) { sheetCount = this.parent.sheets.length; }
        var id;
        while (sheetIndex < sheetCount) {
            id = getSheet(this.parent, sheetIndex).id + '';
            this.calculateInstance.registerGridAsSheet(id, id, this.calcID);
            sheetIndex++;
        }
    };
    WorkbookFormula.prototype.unRegisterSheet = function (sheetIndex, sheetCount, propertyChange) {
        if (sheetIndex === void 0) { sheetIndex = 0; }
        if (sheetCount === void 0) { sheetCount = this.parent.sheets.length; }
        var id;
        this.calculateInstance.tokenCount = 0;
        if (propertyChange) {
            this.calculateInstance.unregisterGridAsSheet(id, id, propertyChange);
        }
        else {
            while (sheetIndex < sheetCount) {
                id = getSheet(this.parent, sheetIndex).id + '';
                this.calculateInstance.unregisterGridAsSheet(id, id);
                sheetIndex++;
            }
        }
    };
    WorkbookFormula.prototype.getUniqueRange = function (args) {
        args.range = this.calculateInstance.uniqueRange;
    };
    WorkbookFormula.prototype.removeUniquecol = function () {
        var sheet = this.parent.getActiveSheet();
        for (var i = 0; i < this.calculateInstance.uniqueRange.length; i++) {
            var uniqRngAddress = this.calculateInstance.uniqueRange[i].split(':')[0].split('!');
            if (uniqRngAddress[0] === sheet.name && uniqRngAddress[1] === sheet.activeCell) {
                var range = getRangeIndexes(this.calculateInstance.uniqueRange[i]);
                this.calculateInstance.uniqueRange.splice(i, 1);
                for (var j = range[0]; j <= range[2]; j++) {
                    for (var k = range[1]; k <= range[3]; k++) {
                        var cell = getCell(j, k, this.parent.getActiveSheet());
                        cell.formula = '';
                        this.parent.updateCell({ value: '', formula: '' }, getRangeAddress([j, k]));
                    }
                }
            }
        }
    };
    WorkbookFormula.prototype.refreshCalculate = function (rowIdx, colIdx, value, isFormula, sheetIdx, isRefreshing, skip) {
        var sheet = isNullOrUndefined(sheetIdx) ? this.parent.getActiveSheet() : getSheet(this.parent, sheetIdx);
        var sheetId = sheet.id + '';
        var sheetName = sheet.name;
        if (isFormula) {
            value = this.parseSheetRef(value);
            var cellArgs = new ValueChangedArgs(rowIdx + 1, colIdx + 1, value);
            var usedRange = [sheet.usedRange.rowIndex, sheet.usedRange.colIndex];
            this.calculateInstance.valueChanged(sheetId, cellArgs, true, usedRange, isRefreshing, sheetName, skip);
            var referenceCollection = this.calculateInstance.randCollection;
            if (this.calculateInstance.isRandomVal === true) {
                var rowId = void 0;
                var colId = void 0;
                var refValue = '';
                if (this.calculateInstance.randomValues.size > 1 && this.calculateInstance.randomValues.size ===
                    referenceCollection.length) {
                    for (var i = 0; i < this.calculateInstance.randomValues.size; i++) {
                        rowId = this.calculateInstance.rowIndex(referenceCollection[i]);
                        colId = this.calculateInstance.colIndex(referenceCollection[i]);
                        refValue = this.calculateInstance.randomValues.get(referenceCollection[i]);
                        sheetId = (parseFloat(this.calculateInstance.getSheetToken(referenceCollection[i]).split(this.calculateInstance.sheetToken).join('')) + 1).toString();
                        var tempArgs = new ValueChangedArgs(rowId, colId, refValue);
                        this.calculateInstance.valueChanged(sheetId, tempArgs, true);
                    }
                }
            }
        }
        else {
            var family = this.calculateInstance.getSheetFamilyItem(sheetId);
            var cellRef = getColumnHeaderText(colIdx + 1) + (rowIdx + 1);
            if (family.isSheetMember && !isNullOrUndefined(family.parentObjectToToken)) {
                cellRef = family.parentObjectToToken.get(sheetId) + cellRef;
            }
            if (this.calculateInstance.getFormulaInfoTable().has(cellRef)) {
                this.calculateInstance.getFormulaInfoTable().delete(cellRef);
                this.calculateInstance.clearFormulaDependentCells(cellRef);
            }
            this.calculateInstance.getComputedValue().clear();
            this.calculateInstance.refresh(cellRef);
            this.calculateInstance.refreshRandValues(cellRef);
        }
        this.calculateInstance.cell = '';
        var updatedCell = getCell(rowIdx, colIdx, this.parent.getActiveSheet());
        if (updatedCell && value && value.toString().toUpperCase().indexOf('=SUM(') === 0) {
            var errorStrings = ['#N/A', '#VALUE!', '#REF!', '#DIV/0!', '#NUM!', '#NAME?', '#NULL!', 'invalid arguments'];
            var val = value.toString().toUpperCase().replace('=SUM', '').replace('(', '').replace(')', '').split(':')[0];
            if (isCellReference(val)) {
                var index = getRangeIndexes(val);
                var fCell = getCell(index[0], index[1], this.parent.getActiveSheet());
                if (fCell && fCell.value && fCell.format &&
                    errorStrings.indexOf(updatedCell.value) < 0 && errorStrings.indexOf(fCell.value) < 0) {
                    updatedCell.format = fCell.format;
                }
            }
        }
    };
    WorkbookFormula.prototype.autoCorrectFormula = function (formula, rowIdx, colIdx, sheetIdx) {
        if (!isNullOrUndefined(formula)) {
            formula = formula.toString();
            if (formula.split('(').length === 2 && formula.indexOf(')') < 0) {
                formula += ')';
            }
            var isEqual = void 0;
            if (formula.indexOf('=') === 0) {
                formula = formula.slice(1);
                isEqual = true;
            }
            var lessEq = formula.match(/</g);
            var greaterEq = formula.match(/>/g);
            var equal = formula.match(/=/g);
            if (lessEq) {
                var lessOp = '';
                for (var i = 0; i < lessEq.length; i++) {
                    lessOp = lessOp + lessEq[i];
                }
                formula = formula.replace(lessOp, '<');
            }
            if (greaterEq) {
                var greaterOp = '';
                for (var j = 0; j < greaterEq.length; j++) {
                    greaterOp = greaterOp + greaterEq[j];
                }
                formula = formula.replace(greaterOp, '>');
            }
            if (equal) {
                var equalOp = '';
                for (var c = 0; c < equal.length; c++) {
                    equalOp = equalOp + equal[c];
                }
                formula = formula.split(equalOp).join('=');
            }
            formula = isEqual ? '=' + formula : formula;
            if (lessEq || greaterEq || equal) {
                getCell(rowIdx, colIdx, isNullOrUndefined(sheetIdx) ? this.parent.getActiveSheet() : getSheet(this.parent, sheetIdx)).formula = formula;
            }
        }
        return formula;
    };
    WorkbookFormula.prototype.initiateDefinedNames = function () {
        var definedNames = this.parent.definedNames;
        var i = 0;
        while (i < definedNames.length) {
            var definedname = definedNames[i];
            var refersTo = this.parseSheetRef(definedname.refersTo);
            var range = getRangeFromAddress(refersTo);
            var cellRef = false;
            var isLink = refersTo.indexOf('http:') > -1 ? true : (refersTo.indexOf('https:') > -1 ? true : false);
            range = range.split('$').join('');
            range = range.split('=').join('');
            if (range.indexOf(':') > -1) {
                var rangeSplit = range.split(':');
                if (isCellReference(rangeSplit[0]) && isCellReference(rangeSplit[1])) {
                    cellRef = true;
                }
            }
            else if (range.indexOf(':') < 0) {
                if (isCellReference(range)) {
                    cellRef = true;
                }
            }
            if (isLink) {
                cellRef = false;
            }
            if (cellRef) {
                this.addDefinedName(definedname, true, undefined, true);
            }
            else {
                this.removeDefinedName(definedname.name, definedname.scope, true);
                i--;
            }
            i++;
        }
    };
    /**
     * @hidden
     * Used to add defined name to workbook.
     *
     * @param {DefineNameModel} definedName - Define named range.
     * @param {boolean} isValidate - Specify the boolean value.
     * @param {number} index - Define named index.
     * @param {boolean} isEventTrigger - Specify the boolean value.
     * @returns {boolean} - Used to add defined name to workbook.
     */
    WorkbookFormula.prototype.addDefinedName = function (definedName, isValidate, index, isEventTrigger) {
        if (index === undefined || index < -1) {
            index = this.parent.definedNames.length;
        }
        var isAdded = true;
        var sheetIdx;
        var name = definedName.name;
        if (definedName.refersTo.indexOf('!') < 0) {
            var sheetName = getSheetName(this.parent);
            sheetName = sheetName.indexOf(' ') !== -1 ? '\'' + sheetName + '\'' : sheetName;
            definedName.refersTo = sheetName + '!' + ((definedName.refersTo.indexOf('=') < 0) ?
                definedName.refersTo : definedName.refersTo.split('=')[1]);
        }
        var visibleRefersTo = definedName.refersTo;
        var refersTo = this.parseSheetRef(definedName.refersTo);
        if (definedName.scope) {
            sheetIdx = getSheetIndex(this.parent, definedName.scope);
            if (sheetIdx > -1) {
                name = getSheetName(this.parent, sheetIdx) + '!' + name;
            }
        }
        else {
            definedName.scope = '';
        }
        if (!definedName.comment) {
            definedName.comment = '';
        }
        //need to extend once internal sheet value changes done.
        if (!isValidate && this.checkIsNameExist(definedName.name, definedName.scope)) {
            isAdded = false;
        }
        else {
            this.calculateInstance.addNamedRange(name, refersTo[0] === '=' ? refersTo.substr(1) : refersTo);
            if (refersTo[0] !== '=') {
                definedName.refersTo = '=' + visibleRefersTo;
            }
            if (this.parent.definedNames.indexOf(definedName) < 0) {
                this.parent.definedNames.splice(index, 0, definedName);
            }
        }
        var eventArgs = { name: definedName.name, scope: definedName.scope, comment: definedName.comment,
            refersTo: definedName.refersTo, cancel: false };
        if (!isEventTrigger) {
            this.parent.notify('actionComplete', { eventArgs: eventArgs, action: 'addDefinedName' });
        }
        return isAdded;
    };
    /**
     * @hidden
     * Used to remove defined name from workbook.
     *
     * @param {string} name - Specifies the defined name.
     * @param {string} scope - Specifies the scope of the define name.
     * @param {boolean} isEventTrigger - Specify the boolean value.
     * @returns {boolean} - To Return the bool value.
     */
    WorkbookFormula.prototype.removeDefinedName = function (name, scope, isEventTrigger) {
        var isRemoved = false;
        var index = this.getIndexFromNameColl(name, scope);
        if (index > -1) {
            var calcName = name;
            if (scope) {
                var sheetIdx = getSheetIndex(this.parent, scope);
                if (sheetIdx) {
                    calcName = getSheetName(this.parent, sheetIdx) + '!' + name;
                }
            }
            this.calculateInstance.removeNamedRange(calcName);
            this.parent.definedNames.splice(index, 1);
            if (!isEventTrigger) {
                var eventArgs = { name: name, scope: scope, cancel: false };
                this.parent.notify('actionComplete', { eventArgs: eventArgs, action: 'removeDefinedName' });
            }
            isRemoved = true;
        }
        return isRemoved;
    };
    WorkbookFormula.prototype.checkIsNameExist = function (name, sheetName) {
        var isExist = this.parent.definedNames.some(function (key) {
            return key.name === name && (sheetName ? key.scope === sheetName : key.scope === '');
        });
        return isExist;
    };
    WorkbookFormula.prototype.getIndexFromNameColl = function (definedName, scope) {
        if (scope === void 0) { scope = ''; }
        var index = -1;
        this.parent.definedNames.filter(function (name, idx) {
            if (name.name === definedName && name.scope === scope) {
                index = idx;
            }
        });
        return index;
    };
    WorkbookFormula.prototype.toFixed = function (value) {
        var num = Number(value);
        if (Math.round(num) !== num) {
            value = num.toFixed(2);
        }
        return value;
    };
    WorkbookFormula.prototype.aggregateComputation = function (args) {
        var sheet = this.parent.getActiveSheet();
        var range = getSingleSelectedRange(sheet);
        var indexes = getRangeIndexes(range.split(':')[1]);
        var i;
        var calcValue;
        var formulaVal = ['SUM', 'AVERAGE', 'MIN', 'MAX'];
        var formatedValues = [];
        if (indexes[0] + 1 === sheet.rowCount && indexes[1] + 1 === sheet.colCount) {
            range = "A1:" + getCellAddress(sheet.usedRange.rowIndex, sheet.usedRange.colIndex);
        }
        var actCell = getRangeIndexes(sheet.activeCell);
        var actCellModel = sheet.rows[actCell[0]] ? sheet.rows[actCell[0]].cells ?
            sheet.rows[actCell[0]].cells[actCell[1]] : {} : {};
        var actCellfrmt = (actCellModel) ? actCellModel.format : '';
        var cellValue;
        var cellCol = this.calculateInstance.getCellCollection(range);
        for (i = 0; i < cellCol.length; i++) {
            cellValue = this.calculateInstance.getValueFromArg(cellCol[i]);
            if (isNumber(cellValue)) {
                args.countOnly = false;
                break;
            }
        }
        args.Count = this.calculateInstance.getFunction('COUNTA')(range);
        if (!args.Count || args.countOnly) {
            return;
        }
        for (i = 0; i < 4; i++) {
            calcValue = this.toFixed(this.calculateInstance.getFunction(formulaVal[i])(range));
            var eventArgs = {
                formattedText: calcValue,
                value: calcValue,
                format: actCellfrmt,
                onLoad: true
            };
            if (actCellfrmt) {
                this.parent.notify(getFormattedCellObject, eventArgs);
                calcValue = eventArgs.formattedText;
            }
            formatedValues.push(calcValue);
        }
        args.Sum = formatedValues[0];
        args.Avg = formatedValues[1];
        args.Min = formatedValues[2];
        args.Max = formatedValues[3];
    };
    WorkbookFormula.prototype.refreshInsertDelete = function (args) {
        var _this = this;
        var formulaDependentCells = this.calculateInstance.getDependentFormulaCells();
        var sheetIndex = getSheetIndexFromId(this.parent, args.sheet.id);
        var cell;
        this.parent.sheets.forEach(function (sheet, index) {
            for (var i = 0, rowLen = sheet.usedRange.rowIndex; i <= rowLen; i++) {
                for (var j = 0, colLen = sheet.usedRange.colIndex; j <= colLen; j++) {
                    cell = getCell(i, j, sheet, false, true);
                    if (cell.formula && checkIsFormula(cell.formula)) {
                        if (index === sheetIndex) {
                            _this.updateFormula(args, cell);
                        }
                        else if (cell.formula.includes(args.sheet.name)) {
                            _this.updateFormula(args, cell);
                        }
                    }
                }
            }
        });
        formulaDependentCells.clear();
        this.calculateInstance.getDependentCells().clear();
        this.calculateInstance.getFormulaInfoTable().clear();
        this.refreshNamedRange(args);
    };
    WorkbookFormula.prototype.updateFormula = function (args, cell) {
        var ref;
        var pVal;
        var index;
        var updated;
        var splitFormula = this.parseFormula(cell.formula, true);
        for (var i = 0; i < splitFormula.length; i++) {
            ref = splitFormula[i].trim().replace(/[$]/g, '');
            if (this.calculateInstance.isCellReference(ref)) {
                pVal = i && splitFormula[i - 1].trim();
                if (pVal && pVal[pVal.length - 1] === '!') {
                    pVal = pVal.replace(/['!]/g, '');
                    if (pVal !== args.sheet.name) {
                        continue;
                    }
                }
                index = getRangeIndexes(ref);
                updated = this.parent.updateRangeOnInsertDelete(args, index);
                if (updated) {
                    splitFormula[i] = index[3] < index[1] ? this.calculateInstance.getErrorStrings()[CommonErrors.ref] :
                        this.getAddress(index);
                }
            }
        }
        var newFormula = '=' + splitFormula.join('');
        if (cell.formula !== newFormula) {
            cell.formula = newFormula;
            cell.value = null;
        }
    };
    WorkbookFormula.prototype.parseFormula = function (formula, rangeRef) {
        var temp;
        var str;
        var i = 0;
        var arr = [];
        var formulaVal = [];
        formulaVal = this.markSpecialChar(formula.replace('=', ''), rangeRef);
        formulaVal = rangeRef ? formulaVal.split(/\(|\)|=|\^|>|<|,|\+|-|\*|\/|%|&/g) :
            formulaVal.split(/\(|\)|=|\^|>|<|,|:|\+|-|\*|\/|%|&/g);
        var len = formulaVal.length;
        while (i < len) {
            temp = formulaVal[i];
            if (!temp) {
                i++;
                continue;
            }
            if (temp.length === 1) {
                arr.push(this.isUniqueChar(temp) ? this.getUniqueCharVal(temp) : temp);
            }
            else {
                str = temp[0];
                if (temp.indexOf('!') > 0) {
                    if (this.isUniqueChar(str)) {
                        arr.push(this.getUniqueCharVal(str));
                        temp = temp.substr(1);
                    }
                    str = temp.indexOf('!') + 1;
                    arr.push(temp.substr(0, str));
                    arr.push(temp.substr(str));
                }
                else if (this.isUniqueChar(str)) {
                    arr.push(this.getUniqueCharVal(str));
                    arr.push(temp.substr(1));
                }
                else {
                    arr.push(temp);
                }
            }
            i++;
        }
        return arr;
    };
    WorkbookFormula.prototype.getUniqueCharVal = function (formula) {
        switch (formula) {
            case this.uniqueOBracket:
                return '(';
            case this.uniqueCBracket:
                return ')';
            case this.uniqueCSeparator:
                return ',';
            case this.uniqueCOperator:
                return ':';
            case this.uniquePOperator:
                return '+';
            case this.uniqueSOperator:
                return '-';
            case this.uniqueMOperator:
                return '*';
            case this.uniqueDOperator:
                return '/';
            case this.uniqueModOperator:
                return '%';
            case this.uniqueConcateOperator:
                return '&';
            case this.uniqueEqualOperator:
                return '=';
            case this.uniqueExpOperator:
                return '^';
            case this.uniqueGTOperator:
                return '>';
            case this.uniqueLTOperator:
                return '<';
        }
        return '';
    };
    WorkbookFormula.prototype.isUniqueChar = function (formula) {
        var code = formula.charCodeAt(formula);
        return code >= 129 && code <= 142;
    };
    WorkbookFormula.prototype.markSpecialChar = function (formula, rangeRef) {
        formula = formula.replace(/\(/g, '(' + this.uniqueOBracket).replace(/\)/g, ')' + this.uniqueCBracket);
        if (rangeRef) {
            formula = formula.replace(/,/g, ',' + this.uniqueCSeparator);
        }
        else {
            formula = formula.replace(/,/g, ',' + this.uniqueCSeparator).replace(/:/g, ':' + this.uniqueCOperator);
        }
        formula = formula.replace(/\+/g, '+' + this.uniquePOperator).replace(/-/g, '-' + this.uniqueSOperator);
        formula = formula.replace(/\*/g, '*' + this.uniqueMOperator).replace(/\//g, '/' + this.uniqueDOperator);
        formula = formula.replace(/&/g, '&' + this.uniqueConcateOperator);
        formula = formula.replace(/=/g, '=' + this.uniqueEqualOperator);
        formula = formula.replace(/\^/g, '^' + this.uniqueExpOperator);
        formula = formula.replace(/>/g, '>' + this.uniqueGTOperator).replace(/</g, '<' + this.uniqueLTOperator);
        return formula.replace(/%/g, '%' + this.uniqueModOperator);
    };
    WorkbookFormula.prototype.getAddress = function (index) {
        return (index[0] === index[2] && index[1] === index[3] ? getCellAddress(index[0], index[1]) : getRangeAddress(index));
    };
    WorkbookFormula.prototype.refreshNamedRange = function (args) {
        var _this = this;
        if (args.definedNames && args.definedNames.length) {
            args.definedNames.forEach(function (definedName) {
                _this.parent.removeDefinedName(definedName.name, definedName.scope);
                _this.parent.addDefinedName(definedName);
            });
            return;
        }
        var len = this.parent.definedNames.length;
        if (!len) {
            return;
        }
        var definedNames = Object.assign({}, this.parent.definedNames);
        var range;
        var sheetName;
        var splitedRef;
        var definedName;
        var updated;
        for (var i = 0; i < len; i++) {
            definedName = definedNames[i];
            splitedRef = definedName.refersTo.split('!');
            sheetName = splitedRef[0].split('=')[1];
            if (sheetName !== args.sheet.name) {
                continue;
            }
            range = getRangeIndexes(splitedRef[1]);
            updated = this.parent.updateRangeOnInsertDelete(args, range);
            if (args.isInsert) {
                this.updateDefinedNames(definedName, sheetName, range, updated);
            }
            else {
                if (args.modelType === 'Row') {
                    this.updateDefinedNames(definedName, sheetName, range, updated, [range[0], range[2]], args);
                }
                else if (args.modelType === 'Column') {
                    this.updateDefinedNames(definedName, sheetName, range, updated, [range[1], range[3]], args);
                }
            }
        }
    };
    WorkbookFormula.prototype.updateDefinedNames = function (definedName, sheetName, range, changed, idx, args) {
        if (!changed) {
            return;
        }
        var index = this.parent.definedNames.indexOf(definedName);
        var eventArgs = {
            action: 'removeDefinedName',
            isRemoved: false,
            definedName: definedName.name,
            scope: definedName.scope,
            isEventTrigger: true
        };
        this.parent.notify(workbookFormulaOperation, eventArgs);
        if (idx) {
            var oldDefinedName = { name: definedName.name, comment: definedName.comment, refersTo: definedName.refersTo,
                scope: definedName.scope };
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            oldDefinedName = new DefineName(this.parent, 'definedNames', oldDefinedName, true);
            if (args.definedNames) {
                args.definedNames.push(oldDefinedName);
            }
            else {
                args.definedNames = [oldDefinedName];
            }
            if (idx[1] < idx[0]) {
                return;
            }
        }
        definedName.refersTo = sheetName + '!' + getRangeAddress(range);
        this.parent.notify(workbookFormulaOperation, { action: 'addDefinedName', definedName: definedName, isAdded: false, index: index, isEventTrigger: true });
        var refreshArgs = { name: definedName.name, scope: definedName.scope, comment: definedName.comment,
            refersTo: definedName.refersTo, cancel: false };
        this.parent.notify('actionComplete', { eventArgs: refreshArgs, action: 'refreshNamedRange' });
    };
    return WorkbookFormula;
}());

/**
 * The `WorkbookSort` module is used to handle sort action in Spreadsheet.
 */
var WorkbookSort = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for WorkbookSort module.
     *
     * @param {Workbook} parent - Specifies the workbook.
     */
    function WorkbookSort(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the sort module.
     *
     * @returns {void} - To destroy the sort module.
     */
    WorkbookSort.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookSort.prototype.addEventListener = function () {
        this.parent.on(initiateSort, this.initiateSortHandler, this);
    };
    WorkbookSort.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(initiateSort, this.initiateSortHandler);
        }
    };
    /**
     * Sorts range of cells in the sheet.
     *
     * @param {{ args: BeforeSortEventArgs, promise: Promise<SortEventArgs> }} eventArgs - Specify the arguments.
     * @param {BeforeSortEventArgs} eventArgs.args - arguments for sorting.
     * @param {Promise<SortEventArgs>} eventArgs.promise - Specify the promise.
     * @param {SortCollectionModel} eventArgs.previousSort - Specify the previous sort model.
     * @returns {void} - Sorts range of cells in the sheet.
     */
    WorkbookSort.prototype.initiateSortHandler = function (eventArgs) {
        var _this = this;
        var args = eventArgs.args;
        var deferred = new Deferred();
        var sheet = this.parent.getActiveSheet();
        var range = getSwapRange(getIndexesFromAddress(args.range));
        var sortOptions = args.sortOptions || { sortDescriptors: {}, containsHeader: true };
        var isSingleCell = false;
        eventArgs.promise = deferred.promise;
        if (range[0] > sheet.usedRange.rowIndex || range[1] > sheet.usedRange.colIndex) {
            deferred.reject(this.parent.serviceLocator.getService(workbookLocale).getConstant('SortOutOfRangeError'));
            return;
        }
        var containsHeader = sortOptions.containsHeader;
        var checkForHeader = args.checkForHeader;
        if (range[0] === range[2] || checkForHeader) { //if selected range is a single cell
            if (!checkForHeader) {
                range = getDataRange(range[0], range[1], sheet);
            }
            isSingleCell = true;
            if (isNullOrUndefined(sortOptions.containsHeader)) {
                if (typeof getCell(range[0], range[1], sheet, null, true).value ===
                    typeof getCell(range[0] + 1, range[1], sheet, null, true).value) {
                    containsHeader = this.isSameStyle(getCell(range[0], range[1], sheet, null, true).style, getCell(range[0] + 1, range[1], sheet, null, true).style) ? false : true;
                }
                else {
                    containsHeader = true;
                }
            }
        }
        if ((isNullOrUndefined(args.sortOptions) || isNullOrUndefined(args.sortOptions.containsHeader)) && !isSingleCell) {
            var firstCell = getCell(range[0], range[1], sheet);
            var secondCell = getCell(range[0] + 1, range[1], sheet);
            if (firstCell && secondCell) {
                if (typeof firstCell.value === typeof secondCell.value) {
                    containsHeader = !this.isSameStyle(firstCell.style, secondCell.style);
                }
                else {
                    containsHeader = true;
                }
            }
        }
        var sRIdx = range[0] = containsHeader ? range[0] + 1 : range[0];
        var sCIdx;
        var eCIdx;
        var cell = getCellIndexes(sheet.activeCell);
        var header = getColumnHeaderText(cell[1] + 1);
        var sortDescriptors = sortOptions.sortDescriptors;
        var address = getRangeAddress(range);
        getData(this.parent, sheet.name + "!" + address, true, null, null, null, null, null, undefined, null, cell[1]).then(function (jsonData) {
            var dataManager = new DataManager(jsonData);
            var query = new Query();
            if (Array.isArray(sortDescriptors)) { //multi-column sorting.
                if (!sortDescriptors || sortDescriptors.length === 0) {
                    sortDescriptors = [{ field: header }];
                }
                for (var length_1 = sortDescriptors.length, i = length_1 - 1; i > -1; i--) {
                    if (!sortDescriptors[length_1 - 1].field) {
                        sortDescriptors[length_1 - 1].field = header;
                    }
                    if (!sortDescriptors[i].field) {
                        continue;
                    }
                    var comparerFn = sortDescriptors[i].sortComparer
                        || _this.sortComparer.bind(_this, sortDescriptors[i], sortOptions.caseSensitive);
                    query.sortBy(sortDescriptors[i].field, comparerFn);
                }
            }
            else { //single column sorting.
                if (!sortDescriptors) {
                    sortDescriptors = { field: header };
                }
                if (!sortDescriptors.field) {
                    sortDescriptors.field = header;
                }
                var comparerFn = sortDescriptors.sortComparer
                    || _this.sortComparer.bind(_this, sortDescriptors, sortOptions.caseSensitive);
                query.sortBy(sortDescriptors.field, comparerFn);
            }
            dataManager.executeQuery(query).then(function (e) {
                var colName;
                var cell = {};
                var rowKey = '__rowIndex';
                Array.prototype.forEach.call(e.result, function (data, index) {
                    if (!data) {
                        return;
                    }
                    sCIdx = range[1];
                    eCIdx = range[3];
                    sRIdx = parseInt(jsonData[index][rowKey], 10) - 1;
                    for (sCIdx; sCIdx <= eCIdx; sCIdx++) {
                        colName = getColumnHeaderText(sCIdx + 1);
                        cell = data[colName];
                        if (cell && cell.formula) {
                            cell.formula =
                                getUpdatedFormula([sRIdx, sCIdx], [parseInt(data[rowKey], 10) - 1, sCIdx], sheet, cell);
                        }
                        setCell(sRIdx, sCIdx, sheet, cell);
                    }
                });
                var sortArgs = { range: sheet.name + "!" + address, sortOptions: args.sortOptions };
                if (eventArgs.previousSort) {
                    sortArgs.previousSort = eventArgs.previousSort;
                }
                deferred.resolve(sortArgs);
            });
        });
    };
    WorkbookSort.prototype.isSameStyle = function (firstCellStyle, secondCellStyle) {
        if (!firstCellStyle) {
            firstCellStyle = {};
        }
        if (!secondCellStyle) {
            secondCellStyle = {};
        }
        var sameStyle = true;
        var keys = Object.keys(firstCellStyle);
        for (var i = 0; i < keys.length; i++) {
            if (firstCellStyle[keys[i]] === secondCellStyle[keys[i]] || this.parent.cellStyle[keys[i]] === firstCellStyle[keys[i]]) {
                sameStyle = true;
            }
            else {
                sameStyle = false;
                break;
            }
        }
        return sameStyle;
    };
    /**
     * Compares the two cells for sorting.
     *
     * @param {SortDescriptor} sortDescriptor - protocol for sorting.
     * @param {boolean} caseSensitive - value for case sensitive.
     * @param {CellModel} x - first cell
     * @param {CellModel} y - second cell
     * @returns {number} - Compares the two cells for sorting.
     */
    WorkbookSort.prototype.sortComparer = function (sortDescriptor, caseSensitive, x, y) {
        var direction = sortDescriptor.order || '';
        var comparer = DataUtil.fnSort(direction);
        var isYStringVal = false;
        var caseOptions = { sensitivity: caseSensitive ? 'case' : 'base' };
        if (x && y && (typeof x.value === 'string' || typeof y.value === 'string') && (x.value !== '' && y.value !== '')) {
            if (isNumber(x.value)) { // Imported number values are of string type, need to handle this case in server side
                x.value = parseIntValue(x.value);
                
            }
            if (isNumber(y.value)) {
                y.value = parseIntValue(y.value);
                isYStringVal = true;
            }
            if (!isYStringVal && !isYStringVal) {
                var collator = new Intl.Collator(this.parent.locale, caseOptions);
                if (!direction || direction.toLowerCase() === 'ascending') {
                    return collator.compare(x.value, y.value);
                }
                else {
                    return collator.compare(x.value, y.value) * -1;
                }
            }
        }
        if ((x === null || x && (isNullOrUndefined(x.value) || x.value === '')) && (y === null || y && (isNullOrUndefined(y.value) || y.value === ''))) {
            return -1;
        }
        if (x === null || x && (isNullOrUndefined(x.value) || x.value === '')) {
            return 1;
        }
        if (y === null || y && (isNullOrUndefined(y.value) || y.value === '')) {
            return -1;
        }
        return comparer(x ? x.value : x, y ? y.value : y);
    };
    /**
     * Gets the module name.
     *
     * @returns {string} - Get the module name.
     */
    WorkbookSort.prototype.getModuleName = function () {
        return 'workbookSort';
    };
    return WorkbookSort;
}());

/**
 * The `WorkbookFilter` module is used to handle filter action in Spreadsheet.
 */
var WorkbookFilter = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for WorkbookFilter module.
     *
     * @param {Workbook} parent - Constructor for WorkbookFilter module.
     */
    function WorkbookFilter(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the filter module.
     *
     * @returns {void} - To destroy the filter module.
     */
    WorkbookFilter.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookFilter.prototype.addEventListener = function () {
        this.parent.on(initiateFilter, this.initiateFilterHandler, this);
    };
    WorkbookFilter.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(initiateFilter, this.initiateFilterHandler);
        }
    };
    /**
     * Filters a range of cells in the sheet.
     *
     * @param { {args: BeforeFilterEventArgs, promise: Promise<FilterEventArgs>}} eventArgs - Specify the event args.
     * @param {BeforeFilterEventArgs} eventArgs.args - arguments for filtering..
     * @param {Promise<FilterEventArgs>} eventArgs.promise - Specify the promise.
     * @param {boolean} refresh - Specify the refresh.
     * @returns {void} - Filters a range of cells in the sheet.
     */
    WorkbookFilter.prototype.initiateFilterHandler = function (eventArgs) {
        var _this = this;
        var args = eventArgs.args;
        var deferred = new Deferred();
        var sheet = this.parent.getActiveSheet();
        var filterOptions = args.filterOptions || {};
        eventArgs.promise = deferred.promise;
        if (filterOptions.datasource) {
            this.setFilter(filterOptions.datasource, filterOptions.predicates, args.range, eventArgs.refresh);
            var filterEventArgs = { range: args.range, filterOptions: filterOptions };
            deferred.resolve(filterEventArgs);
        }
        else {
            var range = getSwapRange(getIndexesFromAddress(args.range));
            if (range[0] > sheet.usedRange.rowIndex || range[1] > sheet.usedRange.colIndex) {
                deferred.reject('Select a cell or range inside the used range and try again.');
                return;
            }
            if (range[0] === range[2] && (range[2] - range[0]) === 0) { //if selected range is a single cell
                range[0] = 0;
                range[1] = 0;
                range[3] = sheet.usedRange.colIndex;
            }
            range[2] = sheet.usedRange.rowIndex; //filter range should be till used range.
            range[0] = range[0] + 1; //ignore first row
            var address_1 = getRangeAddress(range);
            getData(this.parent, sheet.name + "!" + address_1, true, true, null, null, null, null, false).then(function (jsonData) {
                var dataManager = new DataManager(jsonData);
                _this.setFilter(dataManager, filterOptions.predicates, args.range, eventArgs.refresh);
                var filterEventArgs = { range: address_1, filterOptions: filterOptions };
                deferred.resolve(filterEventArgs);
            });
        }
    };
    /**
     * Hides or unhides the rows based on the filter predicates.
     *
     * @param {DataManager} dataManager - Specify the dataManager.
     * @param {Predicate[]} predicates - Specify the predicates.
     * @param {string} range - Specify the range.
     * @param {boolean} refresh - Specify the refresh.
     * @returns {void} - Hides or unhides the rows based on the filter predicates.
     */
    WorkbookFilter.prototype.setFilter = function (dataManager, predicates, range, refresh) {
        var _this = this;
        if (dataManager && predicates) {
            var jsonData = dataManager.dataSource.json;
            var query = new Query();
            if (predicates.length) {
                query.where(Predicate.and(predicates));
            }
            var result_1 = dataManager.executeLocal(query);
            var rowKey_1 = '__rowIndex';
            var sheet_1;
            var sheetIdx = void 0;
            if (range.indexOf('!') > -1) {
                sheetIdx = getSheetIndex(this.parent, range.split('!')[0]);
                sheet_1 = this.parent.sheets[sheetIdx];
            }
            else {
                sheet_1 = this.parent.getActiveSheet();
                sheetIdx = getSheetIndex(this.parent, sheet_1.name);
            }
            if (this.parent.getModuleName() === 'spreadsheet') {
                /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                var parent_1 = this.parent;
                if ((parent_1.scrollSettings.enableVirtualization && (jsonData.length > parent_1.viewport.rowCount +
                    (parent_1.getThreshold('row') * 2))) || refresh || !!sheet_1.frozenColumns || !!sheet_1.frozenRows) {
                    var hide_1;
                    jsonData.forEach(function (data) {
                        hide_1 = result_1.indexOf(data) < 0;
                        setRow(sheet_1, Number(data[rowKey_1]) - 1, { hidden: hide_1, isFiltered: hide_1 });
                    });
                    if (sheetIdx !== parent_1.activeSheetIndex) {
                        return;
                    }
                    parent_1.renderModule.refreshSheet(false, true, true);
                }
                else {
                    var aboveViewport_1;
                    jsonData.forEach(function (data) {
                        var eventArgs = {
                            startIndex: Number(data[rowKey_1]) - 1, hide: result_1.indexOf(data) < 0, isFiltering: true, aboveViewport: false
                        };
                        eventArgs.endIndex = eventArgs.startIndex;
                        _this.parent.notify(hideShow, eventArgs);
                        if (!aboveViewport_1) {
                            aboveViewport_1 = eventArgs.aboveViewport;
                        }
                    });
                    if (aboveViewport_1 && range) {
                        var index = getRangeIndexes(range);
                        this.parent.goTo(getCellAddress(index[0], index[1]));
                    }
                }
            }
            else {
                var hide_2;
                jsonData.forEach(function (data) {
                    hide_2 = result_1.indexOf(data) < 0;
                    setRow(sheet_1, Number(data[rowKey_1]) - 1, { hidden: hide_2, isFiltered: hide_2 });
                });
            }
        }
    };
    /**
     * Gets the module name.
     *
     * @returns {string} - Get the module name.
     */
    WorkbookFilter.prototype.getModuleName = function () {
        return 'workbookFilter';
    };
    return WorkbookFilter;
}());

/**
 * Specifies image.
 */
var WorkbookImage = /** @__PURE__ @class */ (function () {
    function WorkbookImage(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    WorkbookImage.prototype.setImage = function (args) {
        var imgRange = args.range ? (args.range.indexOf('!') > 0) ? args.range.split('!')[1] : args.range.split('!')[0]
            : this.parent.getActiveSheet().selectedRange;
        var sheetIdx = (args.range && args.range.indexOf('!') > 0) ?
            getSheetIndex(this.parent, args.range.split('!')[0]) : this.parent.activeSheetIndex;
        var indexes = getRangeIndexes(imgRange);
        var sheet = sheetIdx ? this.parent.sheets[sheetIdx] : this.parent.getActiveSheet();
        var cell = getCell(indexes[0], indexes[1], sheet);
        var oldImgData;
        var imgData = args.options;
        if (cell && cell.image) {
            oldImgData = cell.image;
            for (var i = 0; i < imgData.length; i++) {
                oldImgData.push(imgData[i]);
            }
        }
        setCell(indexes[0], indexes[1], sheet, { image: (cell && cell.image) ? oldImgData : imgData }, true);
    };
    /**
     * Adding event listener for number format.
     *
     * @returns {void} - Adding event listener for number format.
     */
    WorkbookImage.prototype.addEventListener = function () {
        this.parent.on(setImage, this.setImage, this);
    };
    /**
     * Removing event listener for number format.
     *
     * @returns {void}
     */
    WorkbookImage.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(setImage, this.setImage);
        }
    };
    /**
     * To Remove the event listeners.
     *
     * @returns {void} - To Remove the event listeners.
     */
    WorkbookImage.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * Get the workbook number format module name.
     *
     * @returns {string} - Get the module name.
     */
    WorkbookImage.prototype.getModuleName = function () {
        return 'workbookImage';
    };
    return WorkbookImage;
}());

/**
 * The `WorkbookChart` module is used to handle chart action in Spreadsheet.
 */
var WorkbookChart = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for WorkbookChart module.
     *
     * @param {Workbook} parent - Constructor for WorkbookChart module.
     */
    function WorkbookChart(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    WorkbookChart.prototype.addEventListener = function () {
        this.parent.on(setChart, this.setChartHandler, this);
        this.parent.on(refreshChart, this.refreshChartData, this);
        this.parent.on(deleteChartColl, this.deleteChartColl, this);
        this.parent.on(refreshChartSize, this.refreshChartSize, this);
        this.parent.on(focusChartBorder, this.focusChartBorder, this);
    };
    WorkbookChart.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(setChart, this.setChartHandler);
            this.parent.off(refreshChart, this.refreshChartData);
            this.parent.off(deleteChartColl, this.deleteChartColl);
            this.parent.off(refreshChartSize, this.refreshChartSize);
            this.parent.off(focusChartBorder, this.focusChartBorder);
        }
    };
    WorkbookChart.prototype.setChartHandler = function (args) {
        var i = 0;
        args.isInitCell = isNullOrUndefined(args.isInitCell) ? false : args.isInitCell;
        args.isUndoRedo = isNullOrUndefined(args.isUndoRedo) ? true : args.isUndoRedo;
        args.isPaste = isNullOrUndefined(args.isPaste) ? false : args.isPaste;
        var chart = args.chart;
        if (chart.length > 0) {
            while (i < chart.length) {
                if (args.isCut === false) {
                    if (document.getElementById(args.chart[i].id)) {
                        chart[i] = {
                            range: chart[i].range, id: 'e_spreadsheet_chart_' + this.parent.chartCount,
                            isSeriesInRows: chart[i].isSeriesInRows, theme: chart[i].theme, type: chart[i].type
                        };
                        chart[i].id = 'e_spreadsheet_chart_' + this.parent.chartCount;
                        args.isIdAvailabe = false;
                    }
                }
                if (document.getElementById(args.chart[i].id)) {
                    return;
                }
                var idAvailable = isNullOrUndefined(args.isIdAvailabe) ? true : args.isIdAvailabe;
                chart[i].theme = chart[i].theme || 'Material';
                chart[i].type = chart[i].type || 'Line';
                chart[i].isSeriesInRows = chart[i].isSeriesInRows || false;
                chart[i].range = chart[i].range || this.parent.getActiveSheet().selectedRange;
                if (chart[i].range.indexOf('!') < 0) {
                    chart[i].range = this.parent.getActiveSheet().name + '!' + chart[i].range;
                }
                if (isNullOrUndefined(chart[i].id)) {
                    chart[i].id = 'e_spreadsheet_chart_' + this.parent.chartCount;
                    idAvailable = false;
                }
                chart[i].height = chart[i].height || 290;
                chart[i].width = chart[i].width || 480;
                this.parent.notify(initiateChart, {
                    option: chart[i], chartCount: this.parent.chartCount, isInitCell: args.isInitCell, isUndoRedo: args.isUndoRedo,
                    dataSheetIdx: args.dataSheetIdx, range: args.range, isPaste: args.isPaste
                });
                this.parent.chartColl.push(chart[i]);
                if (!idAvailable) {
                    this.parent.chartCount++;
                }
                if (!args.isInitCell || args.isPaste) {
                    var sheetIdx = (chart[i].range && chart[i].range.indexOf('!') > 0) ?
                        getSheetIndex(this.parent, chart[i].range.split('!')[0]) : this.parent.activeSheetIndex;
                    var indexes = args.isPaste ? getRangeIndexes(args.range) : getRangeIndexes(chart[i].range);
                    var sheet = sheetIdx ? this.parent.sheets[sheetIdx] : this.parent.getActiveSheet();
                    var cell = getCell(indexes[0], indexes[1], sheet);
                    if (cell && cell.chart) {
                        cell.chart.push(chart[i]);
                    }
                    else {
                        setCell(indexes[0], indexes[1], sheet, { chart: [chart[i]] }, true);
                    }
                }
                i++;
            }
        }
    };
    WorkbookChart.prototype.refreshChartData = function (args) {
        var i;
        var j = 1;
        var cnt = this.parent.sheets.length + 1;
        while (j < cnt) {
            var charts = this.parent.chartColl;
            i = charts ? charts.length : 0;
            if (i) {
                while (i--) {
                    var chart = this.parent.chartColl[i];
                    var isRange = isNullOrUndefined(args.showHide) ? inRange(getRangeIndexes(chart.range), args.rIdx, args.cIdx)
                        : this.inRowColumnRange(getRangeIndexes(chart.range), args.rIdx, args.showHide);
                    var rangeSheetIdx = chart.range.indexOf('!') > -1 ?
                        getSheetIndex(this.parent, getSheetNameFromAddress(chart.range)) : this.parent.activeSheetIndex;
                    if (isRange && rangeSheetIdx === this.parent.activeSheetIndex) {
                        this.parent.notify(updateChart, { chart: chart });
                    }
                }
            }
            j++;
        }
    };
    WorkbookChart.prototype.inRowColumnRange = function (range, index, showHide) {
        return showHide === 'rows' ? index >= range[0] && index <= range[2] : index >= range[1] && index <= range[3];
    };
    WorkbookChart.prototype.refreshChartSize = function (args) {
        var chartCnt;
        var j = 1;
        var sheetCnt = this.parent.sheets.length + 1;
        while (j < sheetCnt) {
            var charts = this.parent.chartColl;
            chartCnt = charts ? charts.length : 0;
            if (chartCnt) {
                while (chartCnt--) {
                    var chart = this.parent.chartColl[chartCnt];
                    if (!isNullOrUndefined(args.overlayEle.querySelector('#' + chart.id))) {
                        var chartObj = this.parent.element.querySelector('.' + chart.id);
                        var excelFilter = getComponent(chartObj, 'chart');
                        if (excelFilter) {
                            excelFilter.height = args.height;
                            excelFilter.width = args.width;
                        }
                    }
                }
            }
            j++;
        }
    };
    WorkbookChart.prototype.focusChartBorder = function (args) {
        for (var idx = 0; idx < this.parent.chartColl.length; idx++) {
            var overlayEle = document.getElementById(args.id);
            var chartEle = document.getElementById(this.parent.chartColl[idx].id);
            if (overlayEle && chartEle && closest(chartEle, '.' + overlayEle.classList[1]) === overlayEle) {
                this.parent.notify(initiateChart, {
                    option: this.parent.chartColl[idx], chartCount: this.parent.chartCount, isRefresh: true
                });
            }
        }
    };
    WorkbookChart.prototype.deleteChartColl = function (args) {
        for (var idx = 0; idx < this.parent.chartColl.length; idx++) {
            var chartElement = document.getElementById(this.parent.chartColl[idx].id);
            var overlayElement = document.getElementById(args.id);
            if (overlayElement && chartElement && closest(chartElement, '.' + overlayElement.classList[1]) === overlayElement) {
                this.parent.chartColl.splice(idx, 1);
            }
        }
    };
    /**
     * To Remove the event listeners.
     *
     * @returns {void} - To Remove the event listeners.
     */
    WorkbookChart.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * Get the workbook chart module name.
     *
     * @returns {string} - Get the workbook chart module name.
     */
    WorkbookChart.prototype.getModuleName = function () {
        return 'workbookChart';
    };
    return WorkbookChart;
}());

/**
 * Export Spreadsheet library modules
 */

/**
 * Workbook Cell format.
 */
var WorkbookCellFormat = /** @__PURE__ @class */ (function () {
    function WorkbookCellFormat(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    WorkbookCellFormat.prototype.format = function (args) {
        var _this = this;
        var sheet;
        var rng = args.range;
        if (rng && typeof rng === 'string' && rng.indexOf('!') > -1) {
            rng = rng.split('!')[1];
            sheet = this.parent.sheets[getSheetIndex(this.parent, args.range.split('!')[0])];
        }
        else {
            sheet = this.parent.getActiveSheet();
        }
        if (rng === undefined) {
            rng = sheet.selectedRange;
        }
        var triggerEvt = typeof (rng) !== 'object' && args.onActionUpdate;
        var eventArgs = {
            range: rng, style: Object.assign({}, args.style), requestType: 'CellFormat'
        };
        if (args.borderType) {
            eventArgs.borderType = args.borderType;
        }
        var style = {};
        Object.assign(style, eventArgs.style, null, true);
        if (triggerEvt) {
            this.parent.trigger('beforeCellFormat', eventArgs);
            this.parent.notify('actionBegin', { eventArgs: eventArgs, action: 'format' });
            if (eventArgs.cancel) {
                args.cancel = true;
                return;
            }
        }
        var indexes = typeof (eventArgs.range) === 'object' ? eventArgs.range :
            getSwapRange(getRangeIndexes(eventArgs.range));
        if (args.borderType) {
            this.setTypedBorder(sheet, args.style.border, indexes, args.borderType, args.onActionUpdate);
            delete args.style.border;
            delete eventArgs.style.border;
        }
        var i;
        var j;
        var props = { cell: null, rowIdx: 0, colIdx: 0, eventOnly: true, preventEvt: !triggerEvt };
        var triggerBeforeEvent = function (cellStyle) {
            props.cell = { style: cellStyle };
            props.rowIdx = i;
            props.colIdx = j;
            return updateCell(_this.parent, sheet, props);
        };
        if (eventArgs.style.borderTop !== undefined) {
            for (j = indexes[1]; j <= indexes[3]; j++) {
                i = indexes[0];
                if (!triggerBeforeEvent({ borderTop: eventArgs.style.borderTop })) {
                    this.checkAdjustantBorder(sheet, 'borderBottom', i - 1, j);
                    this.checkFullBorder(sheet, 'borderBottom', i - 1, j);
                    this.checkFullBorder(sheet, 'borderTop', i, j);
                    this.setCellBorder(sheet, props.cell.style, i, j, args.onActionUpdate, j === indexes[3]);
                }
            }
            delete eventArgs.style.borderTop;
        }
        if (eventArgs.style.borderBottom !== undefined) {
            var firstCell = void 0;
            var lastCell = void 0;
            for (j = indexes[1]; j <= indexes[3]; j++) {
                i = indexes[0];
                firstCell = getCell(i, j, sheet, false, true);
                if (firstCell.rowSpan > 0) {
                    lastCell = getCell(indexes[2], indexes[1], sheet, false, true);
                }
                else {
                    lastCell = getCell(indexes[2], indexes[3], sheet, false, true);
                }
                if (!(firstCell.rowSpan > 1 && lastCell.rowSpan < 0)) {
                    i = indexes[2];
                }
                if (!triggerBeforeEvent({ borderBottom: eventArgs.style.borderBottom })) {
                    this.checkAdjustantBorder(sheet, 'borderTop', indexes[2] + 1, j);
                    this.checkFullBorder(sheet, 'borderTop', indexes[2] + 1, j);
                    this.checkFullBorder(sheet, 'borderBottom', indexes[2], j);
                    this.setCellBorder(sheet, props.cell.style, i, j, args.onActionUpdate, j === indexes[3]);
                    this.setBottomBorderPriority(sheet, indexes[2], j);
                }
            }
            delete eventArgs.style.borderBottom;
        }
        if (eventArgs.style.borderLeft !== undefined) {
            for (var i_1 = indexes[0]; i_1 <= indexes[2]; i_1++) {
                j = indexes[1];
                if (!triggerBeforeEvent({ borderLeft: eventArgs.style.borderLeft })) {
                    this.checkAdjustantBorder(sheet, 'borderRight', i_1, j - 1);
                    this.checkFullBorder(sheet, 'borderRight', i_1, j - 1);
                    this.checkFullBorder(sheet, 'borderLeft', i_1, j);
                    this.setCellBorder(sheet, props.cell.style, i_1, j, args.onActionUpdate);
                }
            }
            delete eventArgs.style.borderLeft;
        }
        if (eventArgs.style.borderRight !== undefined) {
            for (var i_2 = indexes[0]; i_2 <= indexes[2]; i_2++) {
                j = indexes[3];
                if (!triggerBeforeEvent({ borderRight: eventArgs.style.borderRight })) {
                    this.checkAdjustantBorder(sheet, 'borderLeft', i_2, j + 1);
                    this.checkFullBorder(sheet, 'borderLeft', i_2, j + 1);
                    this.checkFullBorder(sheet, 'borderRight', i_2, j);
                    this.setCellBorder(sheet, props.cell.style, i_2, j, args.onActionUpdate);
                }
            }
            delete eventArgs.style.borderRight;
        }
        var border;
        var isFullBorder;
        var cell;
        if (Object.keys(eventArgs.style).length) {
            var parent_1 = this.parent;
            var activeSheet = parent_1.viewport && this.parent.getActiveSheet().id === sheet.id;
            var frozenRow = this.parent.frozenRowCount(sheet);
            var frozenCol = this.parent.frozenColCount(sheet);
            var viewport = [frozenRow + parent_1.viewport.topIndex, frozenCol + parent_1.viewport.leftIndex,
                parent_1.viewport.bottomIndex, parent_1.viewport.rightIndex];
            var uiRefresh = void 0;
            for (i = indexes[0]; i <= indexes[2]; i++) {
                if ((getRow(sheet, i) || {}).isFiltered) {
                    continue;
                }
                uiRefresh = activeSheet && ((i >= viewport[0] && i <= viewport[2]) || i < frozenRow);
                for (j = indexes[1]; j <= indexes[3]; j++) {
                    if (triggerBeforeEvent(eventArgs.style)) {
                        continue;
                    }
                    if (isFullBorder === undefined) {
                        if (eventArgs.style.border !== undefined) {
                            border = eventArgs.style.border;
                            delete eventArgs.style.border;
                            isFullBorder = true;
                        }
                        else {
                            isFullBorder = false;
                        }
                    }
                    cell = getCell(i, j, sheet, false, true);
                    if (cell.rowSpan > 1 || cell.colSpan > 1) {
                        for (var k = i, rowSpanLen = cell.rowSpan > 1 ? i + (cell.rowSpan - 1) : i; k <= rowSpanLen; k++) {
                            for (var l = j, colSpanLen = cell.colSpan > 1 ? j + (cell.colSpan - 1) : j; l <= colSpanLen; l++) {
                                if (isFullBorder) {
                                    this.setFullBorder(sheet, border, indexes, k, l, args.onActionUpdate, true);
                                }
                                this.setCellStyle(sheet, k, l, eventArgs.style);
                            }
                        }
                    }
                    if (isFullBorder) {
                        this.setFullBorder(sheet, border, indexes, i, j, args.onActionUpdate);
                    }
                    this.setCellStyle(sheet, i, j, eventArgs.style);
                    if (uiRefresh && ((j >= viewport[1] && j <= viewport[3]) || j < frozenCol)) {
                        this.parent.notify(applyCellFormat, { style: eventArgs.style, rowIdx: i, colIdx: j,
                            lastCell: j === indexes[3], isHeightCheckNeeded: true, manualUpdate: true, onActionUpdate: args.onActionUpdate
                        });
                    }
                }
            }
        }
        if (isFullBorder) {
            eventArgs.style.border = border;
        }
        this.parent.setUsedRange(indexes[2], indexes[3]);
        if (args.refreshRibbon) {
            this.parent.notify(activeCellChanged, null);
        }
        if (triggerEvt) {
            eventArgs.style = style;
            eventArgs.range = sheet.name + "!" + rng;
            this.parent.notify('actionComplete', { eventArgs: eventArgs, action: 'format' });
        }
    };
    WorkbookCellFormat.prototype.setBottomBorderPriority = function (sheet, rowIdx, colIdx) {
        if (isHiddenRow(sheet, rowIdx + 1)) {
            var pIdx = this.skipHiddenRows(sheet, rowIdx + 1);
            var pCellStyle = this.parent.getCellStyleValue(['borderTop'], [pIdx, colIdx]).borderTop;
            if (pCellStyle !== '') {
                sheet.rows[rowIdx].cells[colIdx].style.bottomPriority = true;
            }
        }
    };
    WorkbookCellFormat.prototype.setFullBorder = function (sheet, border, indexes, i, j, actionUpdate, modelUpdate) {
        var style = {};
        if (i === indexes[0]) {
            this.checkAdjustantBorder(sheet, 'borderBottom', i - 1, j);
            this.checkFullBorder(sheet, 'borderBottom', i - 1, j);
        }
        if (j === indexes[1]) {
            this.checkAdjustantBorder(sheet, 'borderRight', i, j - 1);
            this.checkFullBorder(sheet, 'borderRight', i, j - 1);
        }
        if (j === indexes[3]) {
            this.checkAdjustantBorder(sheet, 'borderLeft', i, j + 1);
            this.checkFullBorder(sheet, 'borderLeft', i, j + 1);
        }
        else {
            this.checkAdjustantBorder(sheet, 'border', i, j + 1);
        }
        style.borderRight = border;
        style.borderTop = border;
        style.borderLeft = border;
        style.borderBottom = border;
        this.setCellBorder(sheet, style, i, j, actionUpdate, j === indexes[3], null, modelUpdate);
        if (i === indexes[2]) {
            this.checkAdjustantBorder(sheet, 'borderTop', i + 1, j);
            this.checkFullBorder(sheet, 'borderTop', i + 1, j);
            this.setBottomBorderPriority(sheet, i, j);
        }
        else {
            this.checkAdjustantBorder(sheet, 'border', i + 1, j);
        }
    };
    WorkbookCellFormat.prototype.checkAdjustantBorder = function (sheet, prop, rowIdx, colIdx) {
        var style = {};
        if (this.parent.getCellStyleValue([prop], [rowIdx, colIdx])[prop] !== '') {
            style[prop] = undefined;
            this.setCellStyle(sheet, rowIdx, colIdx, style);
        }
    };
    WorkbookCellFormat.prototype.checkFullBorder = function (sheet, prop, rowIdx, colIdx) {
        var border = this.parent.getCellStyleValue(['border'], [rowIdx, colIdx]).border;
        if (border !== '') {
            var style_1 = { border: undefined };
            ['borderBottom', 'borderTop', 'borderLeft', 'borderRight'].forEach(function (value) {
                if (value !== prop) {
                    style_1[value] = border;
                }
            });
            this.setCellStyle(sheet, rowIdx, colIdx, style_1);
        }
    };
    WorkbookCellFormat.prototype.textDecorationActionUpdate = function (args) {
        var sheet = this.parent.getActiveSheet();
        var eventArgs = { range: sheet.selectedRange, style: args.style, requestType: 'CellFormat' };
        this.parent.trigger('beforeCellFormat', eventArgs);
        this.parent.notify('actionBegin', { eventArgs: eventArgs, action: 'format' });
        if (eventArgs.cancel) {
            args.cancel = true;
            return;
        }
        var indexes = getSwapRange(getRangeIndexes(sheet.selectedRange));
        var value = args.style.textDecoration;
        var changedValue = value;
        var activeCellIndexes = getRangeIndexes(sheet.activeCell);
        var cellValue = this.parent.getCellStyleValue(['textDecoration'], activeCellIndexes).textDecoration;
        var changedStyle;
        var removeProp = false;
        if (cellValue === 'underline') {
            changedValue = value === 'underline' ? 'none' : 'underline line-through';
        }
        else if (cellValue === 'line-through') {
            changedValue = value === 'line-through' ? 'none' : 'underline line-through';
        }
        else if (cellValue === 'underline line-through') {
            changedValue = value === 'underline' ? 'line-through' : 'underline';
            removeProp = true;
        }
        if (changedValue === 'none') {
            removeProp = true;
        }
        this.format({
            style: { textDecoration: changedValue }, range: activeCellIndexes, refreshRibbon: args.refreshRibbon,
            onActionUpdate: true
        });
        for (var i = indexes[0]; i <= indexes[2]; i++) {
            for (var j = indexes[1]; j <= indexes[3]; j++) {
                if (i === activeCellIndexes[0] && j === activeCellIndexes[1]) {
                    continue;
                }
                changedStyle = {};
                cellValue = this.parent.getCellStyleValue(['textDecoration'], [i, j]).textDecoration;
                if (cellValue === 'none') {
                    if (removeProp) {
                        continue;
                    }
                    changedStyle.textDecoration = value;
                }
                else if (cellValue === 'underline' || cellValue === 'line-through') {
                    if (removeProp) {
                        if (value === cellValue) {
                            changedStyle.textDecoration = 'none';
                        }
                        else {
                            continue;
                        }
                    }
                    else {
                        changedStyle.textDecoration = value !== cellValue ? 'underline line-through' : value;
                    }
                }
                else if (cellValue === 'underline line-through') {
                    if (removeProp) {
                        changedStyle.textDecoration = value === 'underline' ? 'line-through' : 'underline';
                    }
                    else {
                        continue;
                    }
                }
                this.format({
                    style: changedStyle, range: [i, j, i, j], refreshRibbon: args.refreshRibbon,
                    onActionUpdate: true
                });
            }
        }
        eventArgs.range = sheet.name + '!' + eventArgs.range;
        this.parent.notify('actionComplete', { eventArgs: eventArgs, action: 'format' });
    };
    WorkbookCellFormat.prototype.setTypedBorder = function (sheet, border, range, type, actionUpdate) {
        var prevBorder;
        if (type === 'Outer') {
            for (var colIdx = range[1]; colIdx <= range[3]; colIdx++) {
                this.checkAdjustantBorder(sheet, 'borderBottom', range[0] - 1, colIdx);
                this.checkFullBorder(sheet, 'borderBottom', range[0] - 1, colIdx);
                this.setCellBorder(sheet, { borderTop: border }, range[0], colIdx, actionUpdate, colIdx === range[3]);
                this.checkAdjustantBorder(sheet, 'borderTop', range[2] + 1, colIdx);
                this.checkFullBorder(sheet, 'borderTop', range[2] + 1, colIdx);
                this.setCellBorder(sheet, { borderBottom: border }, range[2], colIdx, actionUpdate, colIdx === range[3], type);
                this.setBottomBorderPriority(sheet, range[2], colIdx);
            }
            for (var rowIdx = range[0]; rowIdx <= range[2]; rowIdx++) {
                this.checkAdjustantBorder(sheet, 'borderRight', rowIdx, range[1] - 1);
                this.checkFullBorder(sheet, 'borderRight', rowIdx, range[1] - 1);
                this.setCellBorder(sheet, { borderLeft: border }, rowIdx, range[1], actionUpdate);
                this.checkAdjustantBorder(sheet, 'borderLeft', rowIdx, range[3] + 1);
                this.checkFullBorder(sheet, 'borderLeft', rowIdx, range[3] + 1);
                this.setCellBorder(sheet, { borderRight: border }, rowIdx, range[3], actionUpdate, null, type);
            }
        }
        else if (type === 'Inner') {
            for (var i = range[0]; i <= range[2]; i++) {
                for (var j = range[1]; j <= range[3]; j++) {
                    var style = {};
                    prevBorder = this.parent.getCellStyleValue(['border'], [i, j]).border;
                    if (prevBorder !== '') {
                        style.border = undefined;
                        if (j === range[3] || j === range[1] || i === range[0] || i === range[2]) {
                            if (i === range[0]) {
                                style.borderTop = prevBorder;
                            }
                            if (i === range[2]) {
                                style.borderBottom = prevBorder;
                            }
                            if (j === range[3]) {
                                style.borderRight = prevBorder;
                            }
                            if (j === range[1]) {
                                style.borderLeft = prevBorder;
                            }
                        }
                    }
                    if (j !== range[3]) {
                        style.borderRight = border;
                    }
                    if (i !== range[0]) {
                        style.borderTop = border;
                    }
                    if (i !== range[2]) {
                        style.borderBottom = border;
                    }
                    if (j !== range[1]) {
                        style.borderLeft = border;
                    }
                    this.setCellBorder(sheet, style, i, j, actionUpdate, j === range[3]);
                }
            }
        }
        else if (type === 'Vertical') {
            for (var i = range[0]; i <= range[2]; i++) {
                for (var j = range[1]; j <= range[3]; j++) {
                    var style = { borderRight: border, borderLeft: border };
                    if (j === range[1]) {
                        this.checkAdjustantBorder(sheet, 'borderRight', i, j - 1);
                        this.checkFullBorder(sheet, 'borderRight', i, j - 1);
                    }
                    if (j === range[3]) {
                        this.checkAdjustantBorder(sheet, 'borderLeft', i, j + 1);
                        this.checkFullBorder(sheet, 'borderLeft', i, j + 1);
                    }
                    this.setCellBorder(sheet, style, i, j, actionUpdate);
                }
            }
        }
        else {
            for (var i = range[0]; i <= range[2]; i++) {
                for (var j = range[1]; j <= range[3]; j++) {
                    var style = { borderTop: border, borderBottom: border };
                    if (i === range[0]) {
                        this.checkAdjustantBorder(sheet, 'borderBottom', i - 1, j);
                        this.checkFullBorder(sheet, 'borderBottom', i - 1, j);
                    }
                    this.setCellBorder(sheet, style, i, j, actionUpdate, j === range[3]);
                    if (i === range[2]) {
                        this.checkAdjustantBorder(sheet, 'borderTop', i + 1, j);
                        this.checkFullBorder(sheet, 'borderTop', i + 1, j);
                        this.setBottomBorderPriority(sheet, i, j);
                    }
                }
            }
        }
    };
    WorkbookCellFormat.prototype.setCellBorder = function (sheet, style, rowIdx, colIdx, actionUpdate, lastCell, type, modelUpdate) {
        this.setCellStyle(sheet, rowIdx, colIdx, style);
        if (!modelUpdate && this.parent.getActiveSheet().id === sheet.id) {
            if (type === 'Outer' && (style.borderBottom || style.borderRight)) {
                var mergeArgs = { range: [rowIdx, colIdx, rowIdx, colIdx] };
                this.parent.notify(activeCellMergedRange, mergeArgs);
                rowIdx = mergeArgs.range[0];
                colIdx = mergeArgs.range[1];
            }
            this.parent.notify(applyCellFormat, {
                style: style, rowIdx: rowIdx, colIdx: colIdx, onActionUpdate: actionUpdate, first: '', lastCell: lastCell,
                isHeightCheckNeeded: true, manualUpdate: true
            });
        }
    };
    WorkbookCellFormat.prototype.setCellStyle = function (sheet, rowIdx, colIdx, style) {
        if (!sheet.rows[rowIdx]) {
            sheet.rows[rowIdx] = { cells: [] };
        }
        else if (!sheet.rows[rowIdx].cells) {
            sheet.rows[rowIdx].cells = [];
        }
        if (!sheet.rows[rowIdx].cells[colIdx]) {
            sheet.rows[rowIdx].cells[colIdx] = {};
        }
        if (!sheet.rows[rowIdx].cells[colIdx].style) {
            sheet.rows[rowIdx].cells[colIdx].style = {};
        }
        Object.assign(sheet.rows[rowIdx].cells[colIdx].style, style, null, true);
    };
    WorkbookCellFormat.prototype.skipHiddenRows = function (sheet, startIdx) {
        startIdx++;
        if (isHiddenRow(sheet, startIdx)) {
            startIdx = this.skipHiddenRows(sheet, startIdx);
        }
        return startIdx;
    };
    WorkbookCellFormat.prototype.addEventListener = function () {
        this.parent.on(setCellFormat, this.format, this);
        this.parent.on(textDecorationUpdate, this.textDecorationActionUpdate, this);
        this.parent.on(clear, this.clearCellObj, this);
    };
    WorkbookCellFormat.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(setCellFormat, this.format);
            this.parent.off(textDecorationUpdate, this.textDecorationActionUpdate);
            this.parent.off(clear, this.clearCellObj);
        }
    };
    WorkbookCellFormat.prototype.clearCellObj = function (options) {
        var clrRange = options.range ? (options.range.indexOf('!') > 0) ? options.range.split('!')[1] : options.range.split('!')[0]
            : this.parent.getActiveSheet().selectedRange;
        var sheetIdx = (options.range && options.range.indexOf('!') > 0) ?
            getSheetIndex(this.parent, options.range.split('!')[0]) : this.parent.activeSheetIndex;
        var sheet = getSheet(this.parent, sheetIdx);
        var range = getIndexesFromAddress(clrRange);
        var sRowIdx = range[0];
        var eRowIdx = range[2];
        var sColIdx;
        var eColIdx;
        for (sRowIdx; sRowIdx <= eRowIdx; sRowIdx++) {
            sColIdx = range[1];
            eColIdx = range[3];
            for (sColIdx; sColIdx <= eColIdx; sColIdx++) {
                var cell = getCell(sRowIdx, sColIdx, sheet);
                if (cell) {
                    switch (options.type) {
                        case 'Clear Formats':
                            delete cell.format;
                            delete cell.rowSpan;
                            delete cell.style;
                            delete cell.wrap;
                            delete cell.colSpan;
                            break;
                        case 'Clear Contents':
                            if (cell.hyperlink) {
                                this.parent.notify(deleteHyperlink, { sheet: sheet, rowIdx: sRowIdx, colIdx: sColIdx, preventRefresh: true });
                            }
                            delete cell.value;
                            delete cell.formula;
                            this.parent.notify(checkConditionalFormat, { rowIdx: sRowIdx, colIdx: sColIdx, cell: cell, isAction: true });
                            break;
                        case 'Clear Hyperlinks':
                            delete cell.hyperlink;
                            break;
                        case 'Clear All':
                            setCell(sRowIdx, sColIdx, sheet, {}, false);
                            break;
                    }
                }
            }
        }
    };
    /**
     * To destroy workbook cell format.
     *
     * @returns {void} - To destroy workbook cell format.
     */
    WorkbookCellFormat.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * Get the workbook cell format module name.
     *
     *  @returns {void}
     */
    WorkbookCellFormat.prototype.getModuleName = function () {
        return 'workbookcellformat';
    };
    return WorkbookCellFormat;
}());

/**
 * The `WorkbookEdit` module is used to handle the editing functionalities in Workbook.
 */
var WorkbookEdit = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for edit module in Workbook.
     *
     * @private
     * @param {Workbook} workbook - Specifies the workbook.
     */
    function WorkbookEdit(workbook) {
        this.parent = workbook;
        this.localeObj = getNumericObject(this.parent.locale);
        /* eslint-disable @typescript-eslint/no-explicit-any */
        this.decimalSep = this.localeObj.decimal;
        this.addEventListener();
    }
    /**
     * To destroy the edit module.
     *
     * @returns {void} - destroy the edit module
     * @hidden
     */
    WorkbookEdit.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookEdit.prototype.addEventListener = function () {
        this.parent.on(workbookEditOperation, this.performEditOperation, this);
    };
    WorkbookEdit.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(workbookEditOperation, this.performEditOperation);
        }
    };
    /**
     * Get the module name.
     *
     * @returns {string} - string
     * @private
     */
    WorkbookEdit.prototype.getModuleName = function () {
        return 'workbookEdit';
    };
    WorkbookEdit.prototype.performEditOperation = function (args) {
        var action = args.action;
        switch (action) {
            case 'updateCellValue':
                this.updateCellValue(args.address, args.value, args.sheetIndex, args.isValueOnly, args.formula);
                break;
        }
    };
    WorkbookEdit.prototype.checkDecimalPoint = function (value, formula) {
        if (Number(value)) {
            var decIndex = value.toString().indexOf(this.decimalSep) + 1;
            var checkDec = value.toString().substr(decIndex).length <= 6;
            if (checkDec) {
                if (!formula || formula.includes('RANDBETWEEN')) {
                    value = decIndex < 7 ? value : (parseFloat(value)).toFixed(0);
                }
                else {
                    value = value.toString().length < 11 ? value : (decIndex < 11 ? parseFloat(value).toFixed(9 - decIndex + 2) :
                        parseFloat(value).toFixed(0));
                }
            }
            else {
                value = decIndex > 7 ? (parseFloat(value)).toFixed(0) : (parseFloat(value)).toFixed(6 - decIndex + 2);
            }
        }
        return value;
    };
    WorkbookEdit.prototype.updateCellValue = function (address, value, sheetIdx, isValueOnly, formula) {
        if (sheetIdx === undefined) {
            sheetIdx = this.parent.activeSheetIndex;
        }
        var range;
        if (typeof address === 'string') {
            range = getRangeIndexes(address);
        }
        else {
            range = address;
        }
        var sheet = getSheet(this.parent, sheetIdx);
        var cell = getCell(range[0], range[1], sheet, true);
        if (!cell) {
            cell = sheet.rows[range[0]].cells[range[1]] = {};
        }
        if (!isValueOnly) {
            var isFormula = checkIsFormula(value);
            isFormula = value === '#SPILL!' ? true : isFormula;
            var skipFormula = false; // for unique formula
            if (cell.formula && cell.formula.indexOf('UNIQUE') > -1 && value === '') {
                skipFormula = true;
            }
            if (!isFormula && !skipFormula) {
                if (cell.formula) {
                    cell.formula = '';
                }
                cell.value = parseIntValue(value);
            }
            var eventArgs = {
                action: 'refreshCalculate',
                value: value,
                rowIndex: range[0],
                colIndex: range[1],
                sheetIndex: sheetIdx,
                isFormula: isFormula
            };
            if (getTypeFromFormat(cell.format) !== 'Text') {
                var dateEventArgs = {
                    value: value,
                    rowIndex: range[0],
                    colIndex: range[1],
                    sheetIndex: sheetIdx,
                    updatedVal: ''
                };
                this.parent.notify(checkDateFormat, dateEventArgs);
                if (!isNullOrUndefined(dateEventArgs.updatedVal) && dateEventArgs.updatedVal.length > 0) {
                    cell.value = dateEventArgs.updatedVal;
                }
            }
            if (value === '#SPILL!') {
                cell.value = value;
            }
            else {
                var args = { cellIdx: range, isUnique: false };
                this.parent.notify(checkUniqueRange, args);
                if (!skipFormula && (!args.isUnique || value && value.toString().indexOf('UNIQUE') > -1)) {
                    this.parent.notify(workbookFormulaOperation, eventArgs);
                }
                else {
                    value = cell.value;
                }
                if (isFormula) {
                    cell.formula = eventArgs.value;
                    value = cell.value;
                }
                else if (cell.value && typeof cell.value === 'string' && (cell.value.indexOf('www.') === 0 ||
                    cell.value.indexOf('https://') === 0 || cell.value.indexOf('http://') === 0 || cell.value.indexOf('ftp://') === 0)) {
                    this.parent.notify(setLinkModel, { hyperlink: cell.value, cell: sheet.name + "!" + getCellAddress(range[0], range[1]) });
                }
            }
        }
        else {
            if (value && value.toString().indexOf(this.decimalSep) > -1) {
                value = this.checkDecimalPoint(value, formula);
            }
            cell.value = value;
        }
        this.parent.setUsedRange(range[0], range[1], sheet);
        if (this.parent.chartColl.length) {
            this.parent.notify(refreshChart, { cell: cell, rIdx: range[0], cIdx: range[1], sheetIdx: sheetIdx });
        }
        if (sheet.conditionalFormats && sheet.conditionalFormats.length) {
            this.parent.notify(checkConditionalFormat, { rowIdx: range[0], colIdx: range[1], cell: cell, isAction: true,
                preventIfSheetNotRendered: true });
        }
    };
    return WorkbookEdit;
}());

/**
 * The `WorkbookHyperlink` module is used to handle Hyperlink action in Spreadsheet.
 */
var WorkbookHyperlink = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for WorkbookSort module.
     *
     * @param {Workbook} parent - Specifies the workbook.
     */
    function WorkbookHyperlink(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the sort module.
     *
     * @returns {void} - To destroy the sort module.
     */
    WorkbookHyperlink.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookHyperlink.prototype.addEventListener = function () {
        this.parent.on(setLinkModel, this.setLinkHandler, this);
    };
    WorkbookHyperlink.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(setLinkModel, this.setLinkHandler);
        }
    };
    WorkbookHyperlink.prototype.setLinkHandler = function (args) {
        var hyperlink = args.hyperlink;
        var cellAddr = args.cell;
        var range;
        var sheetIdx;
        var sheet = this.parent.getActiveSheet();
        var address;
        if (cellAddr && cellAddr.indexOf('!') !== -1) {
            range = cellAddr.split('!');
            var sheets = this.parent.sheets;
            for (var idx = 0; idx < sheets.length; idx++) {
                if (sheets[idx].name === range[0]) {
                    sheetIdx = idx;
                }
            }
            sheet = this.parent.sheets[sheetIdx];
            cellAddr = range[1];
        }
        cellAddr = cellAddr ? cellAddr : this.parent.getActiveSheet().activeCell;
        var cellIdx = getRangeIndexes(cellAddr);
        var rowIdx = cellIdx[0];
        var colIdx = cellIdx[1];
        if (!sheet) {
            return;
        }
        var cell = {};
        if (typeof (hyperlink) === 'string') {
            if (hyperlink.indexOf('http://') !== 0 && hyperlink.indexOf('https://') !== 0 && hyperlink.indexOf('ftp://') !== 0) {
                hyperlink = hyperlink.toLowerCase().indexOf('www.') === 0 ? 'http://' + hyperlink : hyperlink;
                address = hyperlink;
            }
            cell.hyperlink = hyperlink;
        }
        else {
            address = hyperlink.address;
            if (address.indexOf('http://') !== 0 && address.indexOf('https://') !== 0 && address.indexOf('ftp://') !== 0) {
                address = address.toLowerCase().indexOf('www.') === 0 ? 'http://' + address : address;
            }
            cell.hyperlink = {
                address: address
            };
        }
        if (!updateCell(this.parent, sheet, { cell: cell, rowIdx: rowIdx, colIdx: colIdx, preventEvt: !args.triggerEvt })) {
            if (!sheet.rows[rowIdx].cells[colIdx].style) {
                sheet.rows[rowIdx].cells[colIdx].style = {};
            }
            sheet.rows[rowIdx].cells[colIdx].style.textDecoration = 'underline';
            sheet.rows[rowIdx].cells[colIdx].style.color = '#00e';
        }
    };
    /**
     * Gets the module name.
     *
     *@returns {string} - returns the module name.
     */
    WorkbookHyperlink.prototype.getModuleName = function () {
        return 'workbookHyperlink';
    };
    return WorkbookHyperlink;
}());

/**
 * The `WorkbookInsert` module is used to insert cells, rows, columns and sheets in to workbook.
 */
var WorkbookInsert = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for the workbook insert module.
     *
     * @param {Workbook} parent - Specifies the workbook.
     * @private
     */
    function WorkbookInsert(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    // tslint:disable-next-line
    WorkbookInsert.prototype.insertModel = function (args) {
        var _this = this;
        var _a, _b, _c;
        if (args.modelType === 'Column') {
            if (typeof (args.start) === 'number') {
                for (var i = 0; i <= this.parent.getActiveSheet().usedRange.rowIndex + 1; i++) {
                    var uniqueArgs = { cellIdx: [i, args.start], isUnique: false };
                    this.parent.notify(checkUniqueRange, uniqueArgs);
                    if (uniqueArgs.isUnique) {
                        return;
                    }
                }
            }
        }
        else if (args.modelType === 'Row') {
            if (typeof (args.start) === 'number') {
                for (var j = 0; j <= this.parent.getActiveSheet().usedRange.colIndex + 1; j++) {
                    var uniqueArgs = { cellIdx: [args.start, j], isUnique: false };
                    this.parent.notify(checkUniqueRange, uniqueArgs);
                    if (uniqueArgs.isUnique) {
                        return;
                    }
                }
            }
        }
        if (!args.model) {
            return;
        }
        var index;
        var model = [];
        var mergeCollection;
        var isModel;
        if (typeof (args.start) === 'number') {
            index = args.start;
            args.end = args.end || index;
            if (index > args.end) {
                index = args.end;
                args.end = args.start;
            }
            for (var i = index; i <= args.end; i++) {
                model.push({});
            }
        }
        else {
            if (args.start) {
                index = args.start[0].index || 0;
                model = args.start;
                isModel = true;
            }
            else {
                index = 0;
                model.push({});
            }
        }
        var freezePane;
        var insertArgs = { startIndex: index, endIndex: index + model.length - 1, modelType: args.modelType, sheet: args.model, isInsert: true };
        if (args.modelType === 'Row') {
            if (args.checkCount !== undefined && args.model.rows && args.checkCount === args.model.rows.length) {
                return;
            }
            this.parent.notify(refreshInsertDelete, insertArgs);
            args.model = args.model;
            if (!args.model.rows) {
                args.model.rows = [];
            }
            if (isModel && args.model.usedRange.rowIndex > -1 && index > args.model.usedRange.rowIndex) {
                for (var i = args.model.usedRange.rowIndex; i < index - 1; i++) {
                    model.splice(0, 0, {});
                }
            }
            var frozenRow = this.parent.frozenRowCount(args.model);
            if (index < frozenRow) {
                this.parent.setSheetPropertyOnMute(args.model, 'frozenRows', args.model.frozenRows + model.length);
                freezePane = true;
            }
            (_a = args.model.rows).splice.apply(_a, [index, 0].concat(model));
            //this.setInsertInfo(args.model, index, model.length, 'count');
            this.setRowColCount(insertArgs.startIndex, insertArgs.endIndex, args.model, 'row');
            if (index > args.model.usedRange.rowIndex) {
                this.parent.setUsedRange(index + (model.length - 1), args.model.usedRange.colIndex, args.model, true);
            }
            else {
                this.parent.setUsedRange(args.model.usedRange.rowIndex + model.length, args.model.usedRange.colIndex, args.model, true);
            }
            var curIdx = index + model.length;
            var style_1;
            var cell = void 0;
            var _loop_1 = function (i) {
                if (args.model.rows[curIdx] && args.model.rows[curIdx].cells && args.model.rows[curIdx].cells[i]) {
                    cell = args.model.rows[curIdx].cells[i];
                    if (cell.rowSpan !== undefined && cell.rowSpan < 0 && cell.colSpan === undefined) {
                        this_1.parent.notify(insertMerge, {
                            range: [curIdx, i, curIdx, i], insertCount: model.length, insertModel: 'Row'
                        });
                    }
                    if (cell.style && getCell(index - 1, i, args.model, false, true).style) {
                        style_1 = this_1.checkBorder(cell.style, args.model.rows[index - 1].cells[i].style);
                        if (style_1 !== {}) {
                            model.forEach(function (row) {
                                if (!row.cells) {
                                    row.cells = [];
                                }
                                if (!row.cells[i]) {
                                    row.cells[i] = {};
                                }
                                if (!row.cells[i].style) {
                                    row.cells[i].style = {};
                                }
                                Object.assign(row.cells[i].style, style_1);
                            });
                        }
                    }
                }
            };
            var this_1 = this;
            for (var i = 0; i <= args.model.usedRange.colIndex; i++) {
                _loop_1(i);
            }
        }
        else if (args.modelType === 'Column') {
            if (args.checkCount !== undefined && args.model.columns && args.checkCount === args.model.columns.length) {
                return;
            }
            this.parent.notify(refreshInsertDelete, insertArgs);
            args.model = args.model;
            if (!args.model.columns) {
                args.model.columns = [];
            }
            if (index && !args.model.columns[index - 1]) {
                args.model.columns[index - 1] = {};
            }
            (_b = args.model.columns).splice.apply(_b, [index, 0].concat(model));
            var frozenCol = this.parent.frozenColCount(args.model);
            if (index < frozenCol) {
                this.parent.setSheetPropertyOnMute(args.model, 'frozenColumns', args.model.frozenColumns + model.length);
                freezePane = true;
            }
            //this.setInsertInfo(args.model, index, model.length, 'fldLen', 'Column');
            this.setRowColCount(insertArgs.startIndex, insertArgs.endIndex, args.model, 'col');
            if (index > args.model.usedRange.colIndex) {
                this.parent.setUsedRange(args.model.usedRange.rowIndex, index + (model.length - 1), args.model, true);
            }
            else {
                this.parent.setUsedRange(args.model.usedRange.rowIndex, args.model.usedRange.colIndex + model.length, args.model, true);
            }
            if (!args.model.rows) {
                args.model.rows = [];
            }
            var cellModel = [];
            if (!args.columnCellsModel) {
                args.columnCellsModel = [];
            }
            for (var i = 0; i < model.length; i++) {
                cellModel.push(null);
            }
            mergeCollection = [];
            var cell = void 0;
            var style = void 0;
            for (var i = 0; i <= args.model.usedRange.rowIndex; i++) {
                if (!args.model.rows[i]) {
                    args.model.rows[i] = { cells: [] };
                }
                else if (!args.model.rows[i].cells) {
                    args.model.rows[i].cells = [];
                }
                if (index && !args.model.rows[i].cells[index - 1]) {
                    args.model.rows[i].cells[index - 1] = {};
                }
                (_c = args.model.rows[i].cells).splice.apply(_c, [index, 0].concat((args.columnCellsModel[i] && args.columnCellsModel[i].cells ?
                    args.columnCellsModel[i].cells : cellModel)));
                var curIdx = index + model.length;
                if (args.model.rows[i].cells[curIdx]) {
                    cell = args.model.rows[i].cells[curIdx];
                    if (cell.colSpan !== undefined && cell.colSpan < 0 && cell.rowSpan === undefined) {
                        mergeCollection.push({
                            range: [i, curIdx, i, curIdx], insertCount: cellModel.length, insertModel: 'Column'
                        });
                    }
                    if (cell.style && getCell(i, index - 1, args.model, false, true).style) {
                        style = this.checkBorder(cell.style, args.model.rows[i].cells[index - 1].style);
                        if (style !== {}) {
                            for (var j = index; j < curIdx; j++) {
                                if (!args.model.rows[i].cells[j]) {
                                    args.model.rows[i].cells[j] = {};
                                }
                                if (!args.model.rows[i].cells[j].style) {
                                    args.model.rows[i].cells[j].style = {};
                                }
                                Object.assign(args.model.rows[i].cells[j].style, style);
                            }
                        }
                    }
                }
            }
            mergeCollection.forEach(function (mergeArgs) { _this.parent.notify(insertMerge, mergeArgs); });
        }
        else {
            if (args.checkCount !== undefined && args.checkCount === this.parent.sheets.length) {
                return;
            }
            var sheetModel = model;
            for (var i = 0; i < sheetModel.length; i++) {
                if (sheetModel[i].name) {
                    for (var j = 0; j < this.parent.sheets.length; j++) {
                        if (sheetModel[i].name === this.parent.sheets[j].name) {
                            sheetModel.splice(i, 1);
                            i--;
                            break;
                        }
                    }
                }
            }
            if (!sheetModel.length) {
                return;
            }
            delete model[0].index;
            this.parent.createSheet(index, model);
            var id_1;
            if (args.activeSheetIndex) {
                this.parent.setProperties({ activeSheetIndex: args.activeSheetIndex }, true);
            }
            else if (!args.isAction && args.start < this.parent.activeSheetIndex) {
                this.parent.setProperties({ activeSheetIndex: this.parent.skipHiddenSheets(this.parent.activeSheetIndex) }, true);
            }
            model.forEach(function (sheet) {
                if (isModel) {
                    _this.updateRangeModel(sheet.ranges);
                }
                id_1 = sheet.id;
                _this.parent.notify(workbookFormulaOperation, {
                    action: 'addSheet', visibleName: sheet.name, sheetName: 'Sheet' + id_1, sheetId: id_1
                });
            });
        }
        if (args.modelType !== 'Sheet') {
            this.parent.notify(refreshClipboard, { start: index, end: index + model.length - 1, modelType: args.modelType, model: args.model, isInsert: true });
            if (args.model.name !== this.parent.getActiveSheet().name) {
                return;
            }
            this.parent.notify(insert, { model: model, index: index, modelType: args.modelType, isAction: args.isAction, activeSheetIndex: getSheetIndex(this.parent, args.model.name), sheetCount: args.modelType === 'Row' ? args.model.rows.length :
                    args.model.columns.length, insertType: args.insertType, freezePane: freezePane, isUndoRedo: args.isUndoRedo });
        }
        else {
            this.parent.notify(insert, { model: model, index: index, modelType: args.modelType, isAction: args.isAction, activeSheetIndex: args.activeSheetIndex, sheetCount: this.parent.sheets.length, insertType: args.insertType, freezePane: freezePane,
                isUndoRedo: args.isUndoRedo });
        }
    };
    WorkbookInsert.prototype.setRowColCount = function (startIdx, endIdx, sheet, layout) {
        var prop = layout + 'Count';
        this.parent.setSheetPropertyOnMute(sheet, prop, sheet[prop] + ((endIdx - startIdx) + 1));
        if (sheet.id === this.parent.getActiveSheet().id) {
            this.parent.notify(updateRowColCount, { index: sheet[prop] - 1, update: layout, isInsert: true, start: startIdx, end: endIdx });
        }
    };
    WorkbookInsert.prototype.updateRangeModel = function (ranges) {
        ranges.forEach(function (range) {
            if (range.dataSource) {
                range.startCell = range.startCell || 'A1';
                range.showFieldAsHeader = range.showFieldAsHeader === undefined || range.showFieldAsHeader;
                range.template = range.template || '';
                range.address = range.address || 'A1';
            }
        });
    };
    WorkbookInsert.prototype.checkBorder = function (style, adjStyle) {
        var matchedStyle = {};
        if (style.borderLeft && style.borderLeft === adjStyle.borderLeft) {
            matchedStyle.borderLeft = style.borderLeft;
        }
        if (style.borderRight && style.borderRight === adjStyle.borderRight) {
            matchedStyle.borderRight = style.borderRight;
        }
        if (style.borderTop && style.borderTop === adjStyle.borderTop) {
            matchedStyle.borderTop = style.borderTop;
        }
        if (style.borderBottom && style.borderBottom === adjStyle.borderBottom) {
            matchedStyle.borderBottom = style.borderBottom;
        }
        return matchedStyle;
    };
    WorkbookInsert.prototype.setInsertInfo = function (sheet, startIndex, count, totalKey, modelType) {
        if (modelType === void 0) { modelType = 'Row'; }
        var endIndex = count = startIndex + (count - 1);
        sheet.ranges.forEach(function (range) {
            if (range.info && startIndex < range.info[totalKey]) {
                if (!range.info["insert" + modelType + "Range"]) {
                    range.info["insert" + modelType + "Range"] = [[startIndex, endIndex]];
                }
                else {
                    range.info["insert" + modelType + "Range"].push([startIndex, endIndex]);
                }
                range.info[totalKey] += ((endIndex - startIndex) + 1);
            }
        });
    };
    WorkbookInsert.prototype.addEventListener = function () {
        this.parent.on(insertModel, this.insertModel, this);
    };
    /**
     * Destroy workbook insert module.
     *
     * @returns {void} - destroy the workbook insert module.
     */
    WorkbookInsert.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookInsert.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(insertModel, this.insertModel);
        }
    };
    /**
     * Get the workbook insert module name.
     *
     * @returns {string} - Return the string.
     */
    WorkbookInsert.prototype.getModuleName = function () {
        return 'workbookinsert';
    };
    return WorkbookInsert;
}());

/**
 * The `WorkbookDelete` module is used to delete cells, rows, columns and sheets from workbook.
 */
var WorkbookDelete = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for the workbook delete module.
     *
     * @param {Workbook} parent - Specify the workbook
     * @private
     */
    function WorkbookDelete(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    // tslint:disable-next-line
    WorkbookDelete.prototype.deleteModel = function (args) {
        var _this = this;
        var sheetLength = this.parent.sheets.length;
        if (args.modelType === 'Sheet' && sheetLength === 1) {
            return;
        }
        if (args.modelType === 'Column') {
            if (typeof (args.start) === 'number') {
                for (var j = 0; j <= this.parent.getActiveSheet().usedRange.rowIndex + 1; j++) {
                    var uniqueArgs = { cellIdx: [j, args.start], isUnique: false };
                    this.parent.notify(checkUniqueRange, uniqueArgs);
                    if (uniqueArgs.isUnique) {
                        return;
                    }
                }
            }
        }
        else if (args.modelType === 'Row') {
            if (typeof (args.start) === 'number') {
                for (var i = 0; i <= this.parent.getActiveSheet().usedRange.colIndex + 1; i++) {
                    var uniqueArgs = { cellIdx: [args.start, i], isUnique: false };
                    this.parent.notify(checkUniqueRange, uniqueArgs);
                    if (uniqueArgs.isUnique) {
                        return;
                    }
                }
            }
        }
        var modelName = args.modelType.toLowerCase() + "s";
        args.start = args.start;
        if (args.start > args.end) {
            var temp = args.start;
            args.start = args.end;
            args.end = temp;
        }
        var deletedCells;
        var mergeArgsCollection = [];
        var count = (args.end - args.start) + 1;
        var prevCell;
        var freezePane;
        var insertArgs = { startIndex: args.start, endIndex: args.end, modelType: args.modelType, sheet: args.model };
        if (args.modelType === 'Row') {
            if (args.checkCount !== undefined && args.checkCount === args.model.usedRange.rowIndex) {
                return;
            }
            this.parent.notify(refreshInsertDelete, insertArgs);
            args.model = args.model;
            if (args.start > args.model.usedRange.rowIndex) {
                return;
            }
            this.setRowColCount(args.start, args.end, args.model, 'row');
            if (args.end > args.model.usedRange.rowIndex) {
                args.end -= (args.end - args.model.usedRange.rowIndex);
            }
            args.model.usedRange.rowIndex -= ((args.end - args.start) + 1);
            if (args.model.usedRange.rowIndex < 0) {
                args.model.usedRange.rowIndex = 0;
            }
            var frozenRow = this.parent.frozenRowCount(args.model);
            if (args.start < frozenRow) {
                frozenRow = args.end < frozenRow ? (args.end - args.start) + 1 : frozenRow - args.start;
                frozenRow = args.model.frozenRows - frozenRow;
                this.parent.setSheetPropertyOnMute(args.model, 'frozenRows', frozenRow);
                freezePane = true;
            }
            var curIdx = args.end + 1;
            var cell = void 0;
            var mergeArgs = void 0;
            if (args.model.rows[args.start] && args.model.rows[args.start].cells) {
                for (var i = 0; i <= args.model.usedRange.colIndex; i++) {
                    if (args.model.rows[args.start].cells[i] && args.model.rows[args.start].cells[i].rowSpan !== undefined &&
                        args.model.rows[args.start].cells[i].rowSpan < 0 && args.model.rows[args.start].cells[i].colSpan === undefined) {
                        mergeArgs = { range: [args.start, i, args.start, i] };
                        this.parent.notify(activeCellMergedRange, mergeArgs);
                        mergeArgs.range = mergeArgs.range;
                        if (mergeArgs.range[2] <= args.end) {
                            prevCell = getCell(mergeArgs.range[0], i, args.model);
                            if (prevCell && prevCell.rowSpan > 1) {
                                if (prevCell.rowSpan - ((mergeArgs.range[2] - args.start) + 1) > 1) {
                                    setCell(mergeArgs.range[0], i, args.model, { colSpan: prevCell.rowSpan - ((mergeArgs.range[2] - args.start) + 1) }, true);
                                }
                                else {
                                    delete args.model.rows[mergeArgs.range[0]].cells[i].rowSpan;
                                }
                            }
                            mergeArgs = null;
                        }
                    }
                    if (args.model.rows[curIdx] && args.model.rows[curIdx].cells && args.model.rows[curIdx].cells[i] &&
                        args.model.rows[curIdx].cells[i].rowSpan !== undefined &&
                        args.model.rows[curIdx].cells[i].rowSpan < 0 && args.model.rows[curIdx].cells[i].colSpan === undefined) {
                        if (!mergeArgs) {
                            mergeArgs = { range: [curIdx, i, curIdx, i] };
                            this.parent.notify(activeCellMergedRange, mergeArgs);
                        }
                        cell = new Object();
                        mergeArgs.range = mergeArgs.range;
                        Object.assign(cell, getCell(mergeArgs.range[0], mergeArgs.range[1], args.model));
                        if (cell && cell.rowSpan && (cell.rowSpan > 1 || cell.colSpan > 1)) {
                            var indexes = [];
                            indexes[1] = i;
                            indexes[3] = cell.colSpan > 1 ? i + (cell.colSpan - 1) : i;
                            mergeArgs.range = mergeArgs.range;
                            if (mergeArgs.range[0] < args.start) {
                                indexes[0] = indexes[2] = mergeArgs.range[0];
                                if (cell.rowSpan - count > 1) {
                                    indexes[2] += (cell.rowSpan - count - 1);
                                }
                            }
                            else {
                                indexes[0] = indexes[2] = args.start;
                                if (cell.rowSpan - ((args.end - mergeArgs.range[0]) + 1) > 1) {
                                    indexes[2] += ((cell.rowSpan - ((args.end - mergeArgs.range[0]) + 1)) - 1);
                                }
                            }
                            mergeArgsCollection.push({
                                range: indexes, isAction: false, preventRefresh: true, merge: true,
                                type: 'All', skipChecking: true
                            });
                        }
                    }
                    mergeArgs = null;
                }
            }
        }
        else if (args.modelType === 'Column') {
            if (args.checkCount !== undefined && args.checkCount === args.model.usedRange.colIndex) {
                return;
            }
            this.parent.notify(refreshInsertDelete, insertArgs);
            args.model = args.model;
            if (args.start > args.model.usedRange.colIndex) {
                return;
            }
            this.setRowColCount(args.start, args.end, args.model, 'col');
            if (args.end > args.model.usedRange.colIndex) {
                args.end -= (args.end - args.model.usedRange.colIndex);
            }
            args.model.usedRange.colIndex -= count;
            if (args.model.usedRange.colIndex < 0) {
                args.model.usedRange.colIndex = 0;
            }
            //this.setDeleteInfo(args.start, args.end, 'fldLen', 'Column');
            var frozenCol = this.parent.frozenColCount(args.model);
            if (args.start < frozenCol) {
                frozenCol = args.end < frozenCol ? (args.end - args.start) + 1 : frozenCol - args.start;
                frozenCol = args.model.frozenColumns - frozenCol;
                this.parent.setSheetPropertyOnMute(args.model, 'frozenColumns', frozenCol);
                this.parent.updateTopLeftCell();
                freezePane = true;
            }
            deletedCells = [];
            var curIdx = args.end + 1;
            var cell = void 0;
            var mergeArgs = void 0;
            for (var i = 0; i <= args.model.usedRange.rowIndex; i++) {
                deletedCells.push({});
                if (args.model.rows[i] && args.model.rows[i].cells) {
                    if (args.model.rows[i].cells[args.start] && args.model.rows[i].cells[args.start].colSpan !== undefined &&
                        args.model.rows[i].cells[args.start].colSpan < 0 && args.model.rows[i].cells[args.start].rowSpan === undefined) {
                        mergeArgs = { range: [i, args.start, i, args.start] };
                        this.parent.notify(activeCellMergedRange, mergeArgs);
                        mergeArgs.range = mergeArgs.range;
                        if (mergeArgs.range[3] <= args.end) {
                            var prevCell_1 = getCell(i, mergeArgs.range[1], args.model);
                            if (prevCell_1 && prevCell_1.colSpan > 1) {
                                if (prevCell_1.colSpan - ((mergeArgs.range[3] - args.start) + 1) > 1) {
                                    setCell(i, mergeArgs.range[1], args.model, { colSpan: prevCell_1.colSpan - ((mergeArgs.range[3] - args.start) + 1) }, true);
                                }
                                else {
                                    delete args.model.rows[i].cells[mergeArgs.range[1]].colSpan;
                                }
                            }
                            mergeArgs = null;
                        }
                    }
                    if (args.model.rows[i].cells[curIdx] && args.model.rows[i].cells[curIdx].colSpan !== undefined &&
                        args.model.rows[i].cells[curIdx].colSpan < 0 && args.model.rows[i].cells[curIdx].rowSpan === undefined) {
                        if (!mergeArgs) {
                            mergeArgs = { range: [i, curIdx, i, curIdx] };
                            this.parent.notify(activeCellMergedRange, mergeArgs);
                        }
                        cell = new Object();
                        mergeArgs.range = mergeArgs.range;
                        Object.assign(cell, getCell(mergeArgs.range[0], mergeArgs.range[1], args.model));
                        if (cell && cell.colSpan && (cell.colSpan > 1 || cell.rowSpan > 1)) {
                            var indexes = [];
                            indexes[0] = i;
                            indexes[2] = cell.rowSpan > 1 ? i + (cell.rowSpan - 1) : i;
                            mergeArgs.range = mergeArgs.range;
                            if (mergeArgs.range[1] < args.start) {
                                indexes[1] = indexes[3] = mergeArgs.range[1];
                                if (cell.colSpan - count > 1) {
                                    indexes[3] += (cell.colSpan - count - 1);
                                }
                            }
                            else {
                                indexes[1] = indexes[3] = args.start;
                                if (cell.colSpan - ((args.end - mergeArgs.range[1]) + 1) > 1) {
                                    indexes[3] += ((cell.colSpan - ((args.end - mergeArgs.range[1]) + 1)) - 1);
                                }
                            }
                            mergeArgsCollection.push({
                                range: indexes, isAction: false, preventRefresh: true, merge: true,
                                type: 'All', skipChecking: true
                            });
                        }
                    }
                    deletedCells[i].cells = args.model.rows[i].cells.splice(args.start, count);
                    mergeArgs = null;
                }
            }
        }
        else {
            if ((args.end - args.start === this.parent.sheets.length - 1) || (args.checkCount !== undefined && args.checkCount ===
                this.parent.sheets.length)) {
                return;
            }
        }
        var deletedModel = [];
        for (var i = args.start; i <= args.end; i++) {
            if (args.modelType === 'Sheet' && args.model[modelName][i]) {
                this.parent.notify(workbookFormulaOperation, { action: 'deleteSheetTab', sheetId: args.model[modelName][i].id });
            }
            if (args.model[modelName][args.start] || args.start < args.model[modelName].length) {
                deletedModel.push(args.model[modelName][args.start] || {});
                args.model[modelName].splice(args.start, 1);
            }
            else {
                deletedModel.push({});
            }
            if (i === args.start) {
                deletedModel[0].index = args.start;
            }
        }
        mergeArgsCollection.forEach(function (merge$$1) { _this.parent.notify(setMerge, merge$$1); });
        this.parent.notify(beforeDelete, args);
        if (args.modelType !== 'Sheet') {
            this.parent.notify(refreshClipboard, args);
            if (args.model.name !== this.parent.getActiveSheet().name) {
                return;
            }
            this.parent.notify(deleteAction, { startIndex: args.start, endIndex: args.end, modelType: args.modelType, refreshSheet: args.refreshSheet,
                definedNames: insertArgs.definedNames, isAction: args.isAction, deletedModel: deletedModel, deletedCellsModel: deletedCells, sheetCount: args.modelType === 'Row' ? args.model.usedRange.rowIndex : args.model.usedRange.colIndex,
                activeSheetIndex: getSheetIndex(this.parent, args.model.name), freezePane: freezePane, isUndoRedo: args.isUndoRedo });
        }
        else {
            this.parent.notify(deleteAction, {
                startIndex: args.start, endIndex: args.end, modelType: args.modelType, definedNames: insertArgs.definedNames,
                isAction: args.isAction, deletedModel: deletedModel, deletedCellsModel: deletedCells, sheetCount: this.parent.sheets.length,
                activeSheetIndex: this.parent.activeSheetIndex, freezePane: freezePane, isUndoRedo: args.isUndoRedo
            });
        }
    };
    WorkbookDelete.prototype.setRowColCount = function (startIdx, endIdx, sheet, layout) {
        var prop = layout + 'Count';
        if (endIdx >= sheet[prop]) {
            endIdx = sheet[prop] - 1;
        }
        if (endIdx < startIdx) {
            return;
        }
        this.parent.setSheetPropertyOnMute(sheet, prop, sheet[prop] - ((endIdx - startIdx) + 1));
        if (sheet.id === this.parent.getActiveSheet().id) {
            this.parent.notify(updateRowColCount, { index: sheet[prop] - 1, update: layout, isDelete: true, start: startIdx, end: endIdx });
        }
    };
    WorkbookDelete.prototype.setDeleteInfo = function (startIndex, endIndex, totalKey, modelType) {
        if (modelType === void 0) { modelType = 'Row'; }
        var total = (endIndex - startIndex) + 1;
        var newRange = [];
        this.parent.getActiveSheet().ranges.forEach(function (range) {
            if (range.info && startIndex < range.info[totalKey]) {
                if (range.info["delete" + modelType + "Range"]) {
                    range.info["delete" + modelType + "Range"].push([startIndex, endIndex]);
                }
                else {
                    range.info["delete" + modelType + "Range"] = [[startIndex, endIndex]];
                }
                range.info[totalKey] -= total;
                if (range.info["insert" + modelType + "Range"]) {
                    range.info["insert" + modelType + "Range"] = newRange;
                }
            }
        });
    };
    WorkbookDelete.prototype.addEventListener = function () {
        this.parent.on(deleteModel, this.deleteModel, this);
    };
    /**
     * Destroy workbook delete module.
     *
     * @returns {void}
     */
    WorkbookDelete.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookDelete.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(deleteModel, this.deleteModel);
        }
    };
    /**
     * Get the workbook delete module name.
     *
     * @returns {string} - returns the module name.
     */
    WorkbookDelete.prototype.getModuleName = function () {
        return 'workbookdelete';
    };
    return WorkbookDelete;
}());

/**
 * The `WorkbookHyperlink` module is used to handle Hyperlink action in Spreadsheet.
 */
var WorkbookDataValidation = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for WorkbookSort module.
     *
     * @param {Workbook} parent - Specifies the parent element.
     */
    function WorkbookDataValidation(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the sort module.
     *
     * @returns {void}
     */
    WorkbookDataValidation.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookDataValidation.prototype.addEventListener = function () {
        this.parent.on(cellValidation, this.ValidationHandler, this);
        this.parent.on(addHighlight, this.addHighlightHandler, this);
        this.parent.on(removeHighlight, this.removeHighlightHandler, this);
    };
    WorkbookDataValidation.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(cellValidation, this.ValidationHandler);
            this.parent.off(addHighlight, this.addHighlightHandler);
            this.parent.off(removeHighlight, this.removeHighlightHandler);
        }
    };
    WorkbookDataValidation.prototype.ValidationHandler = function (args) {
        var onlyRange = args.range;
        var sheetName = '';
        var column;
        if (args.range.indexOf('!') > -1) {
            onlyRange = args.range.split('!')[1];
            sheetName = args.range.split('!')[0];
        }
        var sheet = getSheet(this.parent, this.parent.getAddressInfo(sheetName + 'A1:A1').sheetIndex);
        var isfullCol = false;
        var maxRowCount = sheet.rowCount;
        var rangeArr = onlyRange.split(':');
        if (onlyRange.match(/\D/g) && !onlyRange.match(/[0-9]/g)) {
            rangeArr[0] += 1;
            rangeArr[1] += maxRowCount;
            onlyRange = rangeArr[0] + ':' + rangeArr[1];
            isfullCol = true;
        }
        else if (!onlyRange.match(/\D/g) && onlyRange.match(/[0-9]/g)) {
            rangeArr[0] = 'A' + rangeArr[0];
            rangeArr[1] = getCellAddress(0, sheet.colCount - 1).replace(/[0-9]/g, '') + rangeArr[1];
            onlyRange = rangeArr[0] + ':' + rangeArr[1];
        }
        if (!isNullOrUndefined(sheetName)) {
            args.range = sheetName + '!' + onlyRange;
        }
        args.range = args.range || sheet.selectedRange;
        var indexes = getRangeIndexes(args.range);
        if (isfullCol) {
            for (var colIdx = indexes[1]; colIdx <= indexes[3]; colIdx++) {
                column = getColumn(sheet, colIdx);
                isfullCol = isfullCol && args.isRemoveValidation && column && !column.validation ? false : true;
            }
        }
        if (isfullCol) {
            for (var colIdx = indexes[1]; colIdx <= indexes[3]; colIdx++) {
                column = getColumn(sheet, colIdx);
                if (args.isRemoveValidation && column && column.validation) {
                    delete (sheet.columns[colIdx].validation);
                }
                else {
                    if (!args.isRemoveValidation) {
                        if (isNullOrUndefined(column)) {
                            sheet.columns[colIdx] = getColumn(sheet, colIdx);
                        }
                        sheet.columns[colIdx].validation = {
                            operator: args.rules.operator,
                            type: args.rules.type,
                            value1: args.rules.value1,
                            value2: args.rules.value2,
                            inCellDropDown: args.rules.inCellDropDown,
                            ignoreBlank: args.rules.ignoreBlank
                        };
                    }
                }
            }
        }
        else {
            var cell = void 0;
            for (var rowIdx = indexes[0]; rowIdx <= indexes[2]; rowIdx++) {
                for (var colIdx = indexes[1]; colIdx <= indexes[3]; colIdx++) {
                    if (args.isRemoveValidation) {
                        cell = getCell(rowIdx, colIdx, sheet);
                        if (cell && cell.validation &&
                            !updateCell(this.parent, sheet, { cell: { validation: {} }, rowIdx: rowIdx, colIdx: colIdx })) {
                            delete (cell.validation);
                            this.parent.notify(applyCellFormat, { rowIdx: rowIdx, colIdx: colIdx, style: this.parent.getCellStyleValue(['backgroundColor', 'color'], [rowIdx, colIdx]) });
                        }
                    }
                    else {
                        cell = { validation: Object.assign({}, args.rules) };
                        updateCell(this.parent, sheet, { cell: cell, rowIdx: rowIdx, colIdx: colIdx });
                    }
                }
            }
        }
    };
    WorkbookDataValidation.prototype.addHighlightHandler = function (args) {
        this.InvalidDataHandler(args.range, false, args.td, args.isclearFormat);
    };
    WorkbookDataValidation.prototype.removeHighlightHandler = function (args) {
        this.InvalidDataHandler(args.range, true);
    };
    WorkbookDataValidation.prototype.getRange = function (range) {
        var indexes = getRangeIndexes(range);
        var sheet = this.parent.getActiveSheet();
        var maxColCount = sheet.colCount;
        var maxRowCount = sheet.rowCount;
        if (indexes[2] === maxRowCount - 1 && indexes[0] === 0) {
            range = range.replace(/[0-9]/g, '');
        }
        else if (indexes[3] === maxColCount - 1 && indexes[2] === 0) {
            range = range.replace(/\D/g, '');
        }
        return range;
    };
    WorkbookDataValidation.prototype.InvalidDataHandler = function (range, isRemoveHighlightedData, td, isclearFormat) {
        var isCell = false;
        var cell;
        var value;
        var sheet = this.parent.getActiveSheet();
        range = range || sheet.selectedRange;
        var indexes = range ? getRangeIndexes(range) : [];
        range = this.getRange(range);
        var isfullCol = false;
        if (range.match(/\D/g) && !range.match(/[0-9]/g)) {
            isfullCol = true;
        }
        var rowIdx = range ? indexes[0] : 0;
        var lastRowIdx = range ? indexes[2] : sheet.rows.length;
        for (rowIdx; rowIdx <= lastRowIdx; rowIdx++) {
            if (sheet.rows[rowIdx]) {
                var colIdx = range ? indexes[1] : 0;
                var lastColIdx = range ? indexes[3] : sheet.rows[rowIdx].cells.length;
                for (colIdx; colIdx <= lastColIdx; colIdx++) {
                    var validation = void 0;
                    if (sheet.rows[rowIdx].cells[colIdx]) {
                        var column = getColumn(sheet, colIdx);
                        cell = sheet.rows[rowIdx].cells[colIdx];
                        if (cell && cell.validation) {
                            validation = cell.validation;
                            if (isclearFormat && !validation.isHighlighted) {
                                return;
                            }
                            if (isRemoveHighlightedData) {
                                if (validation.isHighlighted) {
                                    cell.validation.isHighlighted = false;
                                }
                            }
                            else {
                                cell.validation.isHighlighted = true;
                            }
                        }
                        else if (column && column.validation) {
                            validation = column.validation;
                            if (isclearFormat && !validation.isHighlighted) {
                                return;
                            }
                            if (isRemoveHighlightedData && isfullCol) {
                                if (validation.isHighlighted) {
                                    column.validation.isHighlighted = false;
                                }
                            }
                            else if (isfullCol) {
                                column.validation.isHighlighted = true;
                            }
                        }
                        value = cell.value ? cell.value : '';
                        var range_1 = [rowIdx, colIdx];
                        var sheetIdx = this.parent.activeSheetIndex;
                        if (validation && this.parent.allowDataValidation) {
                            this.parent.notify(isValidation, { value: value, range: range_1, sheetIdx: sheetIdx, isCell: isCell });
                            var isValid = this.parent.allowDataValidation;
                            this.parent.allowDataValidation = true;
                            if (!isValid) {
                                if (!isHiddenRow(sheet, rowIdx)) {
                                    this.parent.notify(validationHighlight, {
                                        isRemoveHighlightedData: isRemoveHighlightedData, rowIdx: rowIdx, colIdx: colIdx, td: td
                                    });
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    /**
     * Gets the module name.
     *
     * @returns {string} string
     */
    WorkbookDataValidation.prototype.getModuleName = function () {
        return 'workbookDataValidation';
    };
    return WorkbookDataValidation;
}());

/**
 * `WorkbookFindAndReplace` module is used to handle the search action in Spreadsheet.
 */
var WorkbookFindAndReplace = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for WorkbookFindAndReplace module.
     *
     * @param {Workbook} parent - Specifies the workbook.
     */
    function WorkbookFindAndReplace(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the FindAndReplace module.
     *
     * @returns {void} - To destroy the FindAndReplace module.
     */
    WorkbookFindAndReplace.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookFindAndReplace.prototype.addEventListener = function () {
        this.parent.on(findNext, this.findNext, this);
        this.parent.on(findPrevious, this.findPrevious, this);
        this.parent.on(replaceHandler, this.replace, this);
        this.parent.on(replaceAllHandler, this.replaceAll, this);
        this.parent.on(count, this.totalCount, this);
        this.parent.on(findAllValues, this.findAllValues, this);
    };
    WorkbookFindAndReplace.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(findNext, this.findNext);
            this.parent.off(findPrevious, this.findPrevious);
            this.parent.off(replaceHandler, this.replace);
            this.parent.off(replaceAllHandler, this.replaceAll);
            this.parent.off(count, this.totalCount);
            this.parent.off(findAllValues, this.findAllValues);
        }
    };
    WorkbookFindAndReplace.prototype.findNext = function (args) {
        var sheets = this.parent.sheets;
        var val;
        var sheet = sheets[this.parent.activeSheetIndex];
        var activecell = getCellIndexes(sheet.activeCell);
        var usedRange = sheet.usedRange;
        var endColumn = usedRange.colIndex;
        var stringValue = args.value.toString();
        var cidx;
        var ridx;
        var count = 0;
        var endRow = usedRange.rowIndex;
        var loopCount = 0;
        var cellFormat;
        var valueOfCell;
        cidx = activecell[1];
        ridx = activecell[0];
        var startColumn = cidx;
        var startRow = ridx;
        if (sheet.rows[ridx]) {
            if (sheet.rows[ridx].cells && sheet.rows[ridx].cells[cidx]) {
                cellFormat = sheet.rows[ridx].cells[cidx].format;
                if (cellFormat) {
                    var dispTxt = this.parent.getDisplayText(sheet.rows[ridx].cells[cidx]);
                    valueOfCell = dispTxt.toString();
                }
                else {
                    if (sheet.rows[ridx].cells[cidx].value) {
                        valueOfCell = sheet.rows[ridx].cells[cidx].value.toString();
                    }
                }
            }
        }
        if (valueOfCell) {
            var lcValueOfCell = valueOfCell.toLowerCase();
            var ivalueOfCell = valueOfCell.indexOf(args.value) > -1;
            var lowerCaseIndex = lcValueOfCell.indexOf(args.value.toString().toLowerCase()) > -1;
            if ((stringValue === valueOfCell) || (stringValue === lcValueOfCell) || (ivalueOfCell) || (lowerCaseIndex)) {
                if (args.searchBy === 'By Column') {
                    ridx++;
                }
                else {
                    cidx++;
                }
                count++;
            }
        }
        if (activecell[0] > sheet.usedRange.rowIndex || activecell[1] > sheet.usedRange.colIndex) {
            if (activecell[0] > sheet.usedRange.rowIndex && activecell[1] <= sheet.usedRange.colIndex) {
                ridx = 0;
                cidx = activecell[1];
            }
            else if (activecell[0] <= sheet.usedRange.rowIndex && activecell[1] > sheet.usedRange.colIndex) {
                ridx = activecell[0];
                cidx = 0;
            }
            else {
                ridx = 0;
                cidx = 0;
            }
        }
        var findNextArgs = {
            rowIndex: ridx, colIndex: cidx, usedRange: usedRange, endRow: endRow, endColumn: endColumn, startRow: startRow,
            mode: args.mode, loopCount: loopCount, count: count, args: args, val: val, stringValue: stringValue,
            sheetIndex: this.parent.activeSheetIndex, startColumn: startColumn, sheets: sheets
        };
        if (args.searchBy === 'By Row') {
            this.findNxtRow(findNextArgs);
        }
        if (args.searchBy === 'By Column') {
            this.findNxtCol(findNextArgs);
        }
    };
    WorkbookFindAndReplace.prototype.findNxtRow = function (findNextArgs) {
        var usedRange;
        var sheet = findNextArgs.sheets[findNextArgs.sheetIndex];
        var sheetsLen = this.parent.sheets.length;
        usedRange = sheet.usedRange;
        var activecell = getCellIndexes(sheet.activeCell);
        if (findNextArgs.colIndex >= findNextArgs.usedRange.colIndex + 1) {
            findNextArgs.colIndex = 0;
            findNextArgs.rowIndex++;
        }
        for (findNextArgs.rowIndex; findNextArgs.rowIndex <= findNextArgs.endRow + 1; findNextArgs.rowIndex++) {
            if (findNextArgs.rowIndex > findNextArgs.endRow) {
                if (findNextArgs.mode === 'Workbook') {
                    var noCellfound = this.parent.activeSheetIndex;
                    findNextArgs.sheetIndex++;
                    if (sheetsLen === findNextArgs.sheetIndex) {
                        findNextArgs.sheetIndex = 0;
                    }
                    if (noCellfound === findNextArgs.sheetIndex) {
                        if (findNextArgs.count === 0) {
                            this.parent.notify(showDialog, null);
                            return;
                        }
                    }
                    sheet = findNextArgs.sheets[findNextArgs.sheetIndex];
                    usedRange = sheet.usedRange;
                    activecell = getCellIndexes(sheet.activeCell);
                    findNextArgs.rowIndex = 0;
                    findNextArgs.colIndex = 0;
                    findNextArgs.endColumn = usedRange.colIndex;
                    findNextArgs.endRow = usedRange.rowIndex;
                }
                if (findNextArgs.colIndex === 0 && findNextArgs.rowIndex > findNextArgs.endRow) {
                    if ((activecell[0] === 0 && activecell[1] === 0)) {
                        if (findNextArgs.count === 0) {
                            this.parent.notify(showDialog, null);
                            return;
                        }
                    }
                    else if ((activecell[0] !== 0 && activecell[1] !== 0) || (activecell[0] !== 0 || activecell[1] !== 0)) {
                        findNextArgs.startColumn = 0;
                        findNextArgs.startRow = 0;
                        findNextArgs.endColumn = usedRange.colIndex;
                        findNextArgs.endRow = activecell[0];
                        findNextArgs.rowIndex = findNextArgs.startRow;
                        findNextArgs.colIndex = findNextArgs.startColumn;
                        findNextArgs.loopCount++;
                    }
                }
            }
            if (findNextArgs.count > 0) {
                if (usedRange.rowIndex < findNextArgs.rowIndex) {
                    findNextArgs.rowIndex = 0;
                    if (findNextArgs.rowIndex === 0) {
                        findNextArgs.colIndex = 0;
                    }
                }
            }
            if (sheet.rows[findNextArgs.rowIndex]) {
                var row = sheet.rows[findNextArgs.rowIndex];
                for (findNextArgs.colIndex; findNextArgs.colIndex <= findNextArgs.endColumn; findNextArgs.colIndex++) {
                    if (row) {
                        if (row.cells && row.cells[findNextArgs.colIndex]) {
                            var checkTrue = this.nextCommon(findNextArgs);
                            if (checkTrue) {
                                return;
                            }
                        }
                    }
                }
                if (findNextArgs.colIndex > findNextArgs.endColumn) {
                    findNextArgs.colIndex = 0;
                }
                if (findNextArgs.loopCount > 0) {
                    if (activecell[0] === findNextArgs.rowIndex) {
                        this.parent.notify(showDialog, null);
                        return;
                    }
                }
            }
        }
        if (findNextArgs.count === 0) {
            this.parent.notify(showDialog, null);
            return;
        }
    };
    WorkbookFindAndReplace.prototype.findNxtCol = function (findNextArgs) {
        var sheet = findNextArgs.sheets[findNextArgs.sheetIndex];
        var noFound;
        var activecell = getCellIndexes(sheet.activeCell);
        var sheetsLen = this.parent.sheets.length;
        if (findNextArgs.rowIndex >= findNextArgs.usedRange.rowIndex) {
            findNextArgs.rowIndex = 0;
            findNextArgs.colIndex++;
        }
        for (findNextArgs.colIndex; findNextArgs.colIndex <= findNextArgs.usedRange.colIndex + 1; findNextArgs.colIndex++) {
            if (findNextArgs.colIndex >= findNextArgs.endColumn + 1) {
                if (findNextArgs.mode === 'Workbook') {
                    noFound = this.parent.activeSheetIndex;
                    findNextArgs.sheetIndex++;
                    if (sheetsLen === findNextArgs.sheetIndex) {
                        findNextArgs.sheetIndex = 0;
                    }
                    if (noFound === findNextArgs.sheetIndex) {
                        if (findNextArgs.count === 0) {
                            this.parent.notify(showDialog, null);
                            return;
                        }
                    }
                    sheet = findNextArgs.sheets[findNextArgs.sheetIndex];
                    findNextArgs.usedRange = sheet.usedRange;
                    activecell = getCellIndexes(sheet.activeCell);
                    findNextArgs.colIndex = 0;
                    findNextArgs.rowIndex = 0;
                    findNextArgs.endColumn = findNextArgs.usedRange.colIndex;
                    findNextArgs.endRow = findNextArgs.usedRange.rowIndex;
                }
            }
            if (findNextArgs.colIndex >= findNextArgs.endColumn + 1) {
                findNextArgs.colIndex = 0;
            }
            if (findNextArgs.rowIndex > findNextArgs.endRow && findNextArgs.colIndex === 0) {
                if ((activecell[0] === 0 && activecell[1] === 0) ||
                    (activecell[1] > sheet.usedRange.rowIndex || activecell[0] > sheet.usedRange.colIndex)) {
                    if (findNextArgs.count === 0) {
                        this.parent.notify(showDialog, null);
                        return;
                    }
                }
                else if ((activecell[1] !== 0 || activecell[0] !== 0) || (activecell[1] !== 0 && activecell[0] !== 0)) {
                    findNextArgs.startRow = 0;
                    findNextArgs.startColumn = 0;
                    findNextArgs.endRow = activecell[0];
                    findNextArgs.endColumn = findNextArgs.usedRange.colIndex;
                    findNextArgs.colIndex = findNextArgs.startColumn;
                    findNextArgs.rowIndex = findNextArgs.startRow;
                    findNextArgs.loopCount++;
                }
            }
            if (findNextArgs.count > 0) {
                if (findNextArgs.usedRange.colIndex + 1 < findNextArgs.colIndex) {
                    findNextArgs.colIndex = 0;
                    findNextArgs.rowIndex = 0;
                }
            }
            if (findNextArgs.rowIndex >= findNextArgs.endRow) {
                findNextArgs.rowIndex = 0;
            }
            if (findNextArgs.colIndex <= findNextArgs.usedRange.colIndex) {
                for (findNextArgs.rowIndex; findNextArgs.rowIndex <= findNextArgs.usedRange.rowIndex; findNextArgs.rowIndex++) {
                    if (sheet.rows[findNextArgs.rowIndex]) {
                        if (sheet.rows[findNextArgs.rowIndex].cells && sheet.rows[findNextArgs.rowIndex].cells[findNextArgs.colIndex]) {
                            var checkTrue = this.nextCommon(findNextArgs);
                            if (checkTrue) {
                                return;
                            }
                        }
                    }
                }
                if (findNextArgs.loopCount > 0) {
                    if (activecell[1] === findNextArgs.colIndex) {
                        this.parent.notify(showDialog, null);
                        return;
                    }
                }
            }
        }
        if (findNextArgs.count === 0) {
            this.parent.notify(showDialog, null);
            return;
        }
    };
    WorkbookFindAndReplace.prototype.nextCommon = function (findNextArgs) {
        var sheet = findNextArgs.sheets[findNextArgs.sheetIndex];
        if (sheet.rows[findNextArgs.rowIndex]) {
            var rowCol = sheet.rows[findNextArgs.rowIndex].cells[findNextArgs.colIndex];
            if (rowCol && rowCol.value) {
                var cellType = sheet.rows[findNextArgs.rowIndex].cells[findNextArgs.colIndex];
                if (cellType) {
                    var cellval = void 0;
                    if (cellType.format) {
                        var displayTxt = this.parent.getDisplayText(sheet.rows[findNextArgs.rowIndex].
                            cells[findNextArgs.colIndex]);
                        cellval = displayTxt;
                    }
                    else {
                        cellval = sheet.rows[findNextArgs.rowIndex].cells[findNextArgs.colIndex].value.toString();
                    }
                    if (findNextArgs.args.isCSen && findNextArgs.args.isEMatch) {
                        if (cellval === findNextArgs.stringValue) {
                            var address = sheet.name + '!' + getCellAddress(findNextArgs.rowIndex, findNextArgs.colIndex);
                            this.parent.notify(goto, { address: address });
                            findNextArgs.count++;
                            return true;
                        }
                    }
                    else if (findNextArgs.args.isCSen && !findNextArgs.args.isEMatch) {
                        var index = cellval.indexOf(findNextArgs.args.value) > -1;
                        if ((cellval === findNextArgs.stringValue) || (index)) {
                            var address = sheet.name + '!' + getCellAddress(findNextArgs.rowIndex, findNextArgs.colIndex);
                            this.parent.notify(goto, { address: address });
                            findNextArgs.count++;
                            return true;
                        }
                    }
                    else if (!findNextArgs.args.isCSen && findNextArgs.args.isEMatch) {
                        findNextArgs.val = cellval.toString().toLowerCase();
                        if (findNextArgs.val === findNextArgs.stringValue) {
                            var address = sheet.name + '!' + getCellAddress(findNextArgs.rowIndex, findNextArgs.colIndex);
                            this.parent.notify(goto, { address: address });
                            findNextArgs.count++;
                            return true;
                        }
                    }
                    else if (!findNextArgs.args.isCSen && !findNextArgs.args.isEMatch) {
                        findNextArgs.val = cellval.toString().toLowerCase();
                        var index = findNextArgs.val.indexOf(findNextArgs.args.value.toString().toLowerCase()) > -1;
                        var lowerCaseIndex = findNextArgs.val.indexOf(findNextArgs.args.value) > -1;
                        if ((findNextArgs.val === findNextArgs.stringValue) || ((cellval === findNextArgs.stringValue) || (index)) ||
                            (cellval === findNextArgs.stringValue) || (lowerCaseIndex)) {
                            var address = sheet.name + '!' + getCellAddress(findNextArgs.rowIndex, findNextArgs.colIndex);
                            this.parent.notify(goto, { address: address });
                            findNextArgs.count++;
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    };
    WorkbookFindAndReplace.prototype.findPrevious = function (args) {
        var sheets = this.parent.sheets;
        var sheetIndex = args.sheetIndex;
        var sheet = sheets[sheetIndex];
        var valueOfCell;
        var cellFormat;
        var val;
        var activecell = getCellIndexes(sheet.activeCell);
        var loopCount = 0;
        var count = 0;
        var endRow = sheet.usedRange.rowIndex;
        var endColumn = sheet.usedRange.colIndex;
        var stringValue = args.value.toString();
        var cidx = activecell[1];
        var ridx = activecell[0];
        var startColumn = cidx;
        var startRow = ridx;
        if (sheet.rows[ridx]) {
            if (sheet.rows[ridx].cells[cidx]) {
                cellFormat = sheet.rows[ridx].cells[cidx].format;
                if (cellFormat) {
                    var displayTxt = this.parent.getDisplayText(sheet.rows[ridx].cells[cidx]);
                    valueOfCell = displayTxt.toString();
                }
                else {
                    if (sheet.rows[ridx].cells[cidx].value) {
                        valueOfCell = sheet.rows[ridx].cells[cidx].value.toString();
                    }
                }
            }
        }
        if (valueOfCell) {
            var lcValue = valueOfCell.toLowerCase();
            var ivalue = valueOfCell.indexOf(args.value) > -1;
            var lowerCaseIndex = lcValue.indexOf(args.value.toString().toLowerCase()) > -1;
            if ((stringValue === valueOfCell) || (stringValue === lcValue) || (ivalue) || (lowerCaseIndex)) {
                if (args.searchBy === 'By Row') {
                    cidx--;
                }
                if (args.searchBy === 'By Column') {
                    ridx--;
                }
                count++;
            }
        }
        if (activecell[0] > sheet.usedRange.rowIndex || activecell[1] > sheet.usedRange.colIndex) {
            if (activecell[0] > sheet.usedRange.rowIndex && activecell[1] <= sheet.usedRange.colIndex) {
                ridx = sheet.usedRange.rowIndex;
                cidx = activecell[1];
            }
            else if (activecell[0] <= sheet.usedRange.rowIndex && activecell[1] > sheet.usedRange.colIndex) {
                ridx = activecell[0];
                cidx = sheet.usedRange.colIndex;
            }
            else {
                ridx = sheet.usedRange.rowIndex;
                cidx = sheet.usedRange.colIndex;
            }
        }
        var findPrevArgs = {
            rowIndex: ridx, colIndex: cidx, endRow: endRow, endColumn: endColumn, startRow: startRow,
            loopCount: loopCount, count: count, args: args, val: val, stringValue: stringValue,
            sheets: sheets, sheetIndex: sheetIndex, startColumn: startColumn
        };
        if (args.searchBy === 'By Row') {
            this.findPreRow(findPrevArgs);
        }
        if (args.searchBy === 'By Column') {
            this.findPreCol(findPrevArgs);
        }
    };
    WorkbookFindAndReplace.prototype.findPreRow = function (findPrevArgs) {
        var usedRan;
        var sheet = findPrevArgs.sheets[findPrevArgs.sheetIndex];
        var sheetsLength = this.parent.sheets.length;
        var noValueBoolean = false;
        var activecell = getCellIndexes(sheet.activeCell);
        if (findPrevArgs.colIndex === -1) {
            findPrevArgs.colIndex = findPrevArgs.endColumn;
            findPrevArgs.rowIndex--;
        }
        for (findPrevArgs.rowIndex; findPrevArgs.rowIndex >= -1; findPrevArgs.rowIndex--) {
            if (findPrevArgs.rowIndex < 0 && findPrevArgs.colIndex <= 0) {
                if (findPrevArgs.args.mode === 'Workbook') {
                    var noCellfound = this.parent.activeSheetIndex;
                    findPrevArgs.sheetIndex--;
                    if (findPrevArgs.sheetIndex === -1) {
                        findPrevArgs.sheetIndex = sheetsLength - 1;
                    }
                    if (noCellfound === findPrevArgs.sheetIndex) {
                        if (findPrevArgs.count === 0) {
                            this.parent.notify(showDialog, null);
                            return;
                        }
                    }
                    sheet = findPrevArgs.sheets[findPrevArgs.sheetIndex];
                    usedRan = sheet.usedRange;
                    activecell = getCellIndexes(sheet.activeCell);
                    findPrevArgs.rowIndex = usedRan.rowIndex;
                    findPrevArgs.colIndex = usedRan.colIndex;
                    findPrevArgs.endColumn = 0;
                    findPrevArgs.endRow = 0;
                }
                noValueBoolean = this.commonCondition(findPrevArgs, activecell);
            }
            if (!noValueBoolean) {
                if (findPrevArgs.args.mode !== 'Workbook') {
                    if (findPrevArgs.count > 0) {
                        if (findPrevArgs.rowIndex === -1) {
                            findPrevArgs.rowIndex = findPrevArgs.endRow;
                        }
                    }
                }
                if (findPrevArgs.rowIndex === -1) {
                    findPrevArgs.rowIndex = sheet.usedRange.rowIndex;
                    findPrevArgs.colIndex = sheet.usedRange.colIndex;
                }
                var row = sheet.rows[findPrevArgs.rowIndex];
                if (row) {
                    if (findPrevArgs.colIndex === -1) {
                        findPrevArgs.colIndex = sheet.usedRange.colIndex;
                    }
                    for (findPrevArgs.colIndex; findPrevArgs.colIndex >= 0; findPrevArgs.colIndex--) {
                        if (row) {
                            if (row.cells && row.cells[findPrevArgs.colIndex]) {
                                var checkTrue = this.prevCommon(findPrevArgs);
                                if (checkTrue) {
                                    return;
                                }
                            }
                        }
                    }
                    if (findPrevArgs.loopCount > 0) {
                        if (activecell[0] === findPrevArgs.rowIndex) {
                            this.parent.notify(showDialog, null);
                            return;
                        }
                    }
                }
            }
        }
        if (!noValueBoolean) {
            if (findPrevArgs.count === 0) {
                this.parent.notify(showDialog, null);
                return;
            }
        }
    };
    WorkbookFindAndReplace.prototype.findPreCol = function (findPrevArgs) {
        var usedRange;
        var sheet = findPrevArgs.sheets[findPrevArgs.sheetIndex];
        var sheetsLen = this.parent.sheets.length;
        var noValueBoolean = false;
        var activecell = getCellIndexes(sheet.activeCell);
        for (findPrevArgs.colIndex; findPrevArgs.colIndex >= -1; findPrevArgs.colIndex--) {
            if (findPrevArgs.rowIndex < 0 && findPrevArgs.colIndex <= 0) {
                if (findPrevArgs.args.mode === 'Workbook') {
                    var noCellfound = this.parent.activeSheetIndex;
                    findPrevArgs.sheetIndex--;
                    if (findPrevArgs.sheetIndex === -1) {
                        findPrevArgs.sheetIndex = sheetsLen - 1;
                    }
                    if (noCellfound === findPrevArgs.sheetIndex) {
                        if (findPrevArgs.count === 0) {
                            this.parent.notify(showDialog, null);
                            return;
                        }
                    }
                    sheet = findPrevArgs.sheets[findPrevArgs.sheetIndex];
                    usedRange = sheet.usedRange;
                    activecell = getCellIndexes(sheet.activeCell);
                    findPrevArgs.rowIndex = usedRange.rowIndex;
                    findPrevArgs.colIndex = usedRange.colIndex;
                    findPrevArgs.endColumn = 0;
                    findPrevArgs.endRow = 0;
                }
                noValueBoolean = this.commonCondition(findPrevArgs, activecell);
            }
            if (!noValueBoolean) {
                if (findPrevArgs.count > 0) {
                    if (findPrevArgs.colIndex < 0) {
                        findPrevArgs.colIndex = findPrevArgs.endColumn;
                    }
                }
                if (findPrevArgs.rowIndex < 0) {
                    findPrevArgs.rowIndex = sheet.usedRange.rowIndex;
                }
                if (findPrevArgs.colIndex < -1) {
                    findPrevArgs.colIndex = sheet.usedRange.colIndex;
                    findPrevArgs.rowIndex--;
                }
                var row = sheet.rows[findPrevArgs.rowIndex];
                if (row) {
                    if (sheet.rows[findPrevArgs.rowIndex].cells[findPrevArgs.colIndex]) {
                        if (findPrevArgs.rowIndex === -1) {
                            findPrevArgs.rowIndex = sheet.usedRange.rowIndex;
                        }
                    }
                }
                for (findPrevArgs.rowIndex; findPrevArgs.rowIndex >= 0; findPrevArgs.rowIndex--) {
                    if (row) {
                        if (row.cells && row.cells[findPrevArgs.colIndex]) {
                            var check = this.prevCommon(findPrevArgs);
                            if (check) {
                                return;
                            }
                        }
                    }
                    if (findPrevArgs.loopCount > 0) {
                        if (activecell[1] === findPrevArgs.colIndex) {
                            this.parent.notify(showDialog, null);
                            return;
                        }
                    }
                }
            }
        }
        if (!noValueBoolean) {
            if (findPrevArgs.count === 0) {
                this.parent.notify(showDialog, null);
                return;
            }
        }
    };
    WorkbookFindAndReplace.prototype.commonCondition = function (findPrevArgs, activecell) {
        var sheet = findPrevArgs.sheets[findPrevArgs.sheetIndex];
        var isTrue;
        if ((activecell[0] !== findPrevArgs.endRow && activecell[1] !== findPrevArgs.endColumn) ||
            (activecell[0] !== findPrevArgs.endRow || activecell[1] !== findPrevArgs.endColumn)) {
            findPrevArgs.startColumn = sheet.usedRange.colIndex;
            findPrevArgs.startRow = sheet.usedRange.rowIndex;
            findPrevArgs.endColumn = 0;
            findPrevArgs.endRow = activecell[0];
            findPrevArgs.rowIndex = findPrevArgs.startRow;
            findPrevArgs.colIndex = findPrevArgs.startColumn;
            findPrevArgs.loopCount++;
            isTrue = false;
        }
        else if (((activecell[0] === sheet.usedRange.rowIndex && activecell[1] === sheet.usedRange.colIndex) ||
            (activecell[0] > sheet.usedRange.rowIndex || activecell[1] > sheet.usedRange.colIndex)) &&
            (activecell[0] !== 0 && activecell[1] !== 0)) {
            this.parent.notify(showDialog, null);
            isTrue = true;
        }
        return isTrue;
    };
    WorkbookFindAndReplace.prototype.prevCommon = function (findPrevArgs) {
        var sheet = findPrevArgs.sheets[findPrevArgs.sheetIndex];
        if (sheet.rows[findPrevArgs.rowIndex]) {
            var rowCol = sheet.rows[findPrevArgs.rowIndex].cells[findPrevArgs.colIndex];
            if (rowCol && rowCol.value) {
                var cellType = sheet.rows[findPrevArgs.rowIndex].cells[findPrevArgs.colIndex];
                if (cellType) {
                    var cellvalue = void 0;
                    if (cellType.format) {
                        var displayTxt = this.parent.getDisplayText(sheet.rows[findPrevArgs.rowIndex]
                            .cells[findPrevArgs.colIndex]);
                        cellvalue = displayTxt;
                    }
                    else {
                        cellvalue = sheet.rows[findPrevArgs.rowIndex].cells[findPrevArgs.colIndex].value.toString();
                    }
                    if (findPrevArgs.args.isCSen && findPrevArgs.args.isEMatch) {
                        if (cellvalue === findPrevArgs.stringValue) {
                            var address = sheet.name + '!' + getCellAddress(findPrevArgs.rowIndex, findPrevArgs.colIndex);
                            this.parent.notify(goto, { address: address });
                            findPrevArgs.count++;
                            return true;
                        }
                    }
                    else if (findPrevArgs.args.isCSen && !findPrevArgs.args.isEMatch) {
                        var index = cellvalue.indexOf(findPrevArgs.args.value) > -1;
                        if ((cellvalue === findPrevArgs.stringValue) || (index)) {
                            var address = sheet.name + '!' + getCellAddress(findPrevArgs.rowIndex, findPrevArgs.colIndex);
                            this.parent.notify(goto, { address: address });
                            findPrevArgs.count++;
                            return true;
                        }
                    }
                    else if (!findPrevArgs.args.isCSen && findPrevArgs.args.isEMatch) {
                        findPrevArgs.val = cellvalue.toString().toLowerCase();
                        if (findPrevArgs.val === findPrevArgs.stringValue) {
                            var address = sheet.name + '!' + getCellAddress(findPrevArgs.rowIndex, findPrevArgs.colIndex);
                            this.parent.notify(goto, { address: address });
                            findPrevArgs.count++;
                            return true;
                        }
                    }
                    else if (!findPrevArgs.args.isCSen && !findPrevArgs.args.isEMatch) {
                        findPrevArgs.val = cellvalue.toString().toLowerCase();
                        var index = findPrevArgs.val.indexOf(findPrevArgs.args.value.toString().toLowerCase()) > -1;
                        var lowerCaseIndex = findPrevArgs.val.indexOf(findPrevArgs.args.value) > -1;
                        if ((cellvalue === findPrevArgs.stringValue) || ((cellvalue === findPrevArgs.stringValue) ||
                            (index)) || (findPrevArgs.val === findPrevArgs.stringValue) || (lowerCaseIndex)) {
                            var address = sheet.name + '!' + getCellAddress(findPrevArgs.rowIndex, findPrevArgs.colIndex);
                            this.parent.notify(goto, { address: address });
                            findPrevArgs.count++;
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    };
    WorkbookFindAndReplace.prototype.replace = function (args) {
        var _this = this;
        if (this.parent.getActiveSheet().isProtected) {
            this.parent.notify(workBookeditAlert, null);
            return;
        }
        var sheet = this.parent.getActiveSheet();
        var activeCell = getCellIndexes(sheet.activeCell);
        var currentCell = sheet.rows[activeCell[0]].cells[activeCell[1]].value.toString();
        var index = currentCell.indexOf(args.value) > -1;
        var lowerCaseIndex = currentCell.toLowerCase().indexOf(args.value.toString().toLowerCase()) > -1;
        var val = currentCell.toString().toLowerCase();
        if ((currentCell !== args.value) && (!index) && (val !== args.value) && (!lowerCaseIndex)) {
            args.findOpt = 'next';
            this.findNext(args);
        }
        activeCell = getCellIndexes(sheet.activeCell);
        var compareVal = this.parent.getDisplayText(getCell(activeCell[0], activeCell[1], sheet)).toString();
        var replaceAddress = sheet.name + '!' + getCellAddress(activeCell[0], activeCell[1]);
        var eventArgs = { address: replaceAddress, compareValue: compareVal, replaceValue: args.replaceValue,
            cancel: false };
        this.parent.notify('actionBegin', { action: 'beforeReplace', eventArgs: eventArgs });
        if (eventArgs.cancel) {
            return;
        }
        compareVal = eventArgs.compareValue;
        activeCell = getCellIndexes(eventArgs.address.split('!')[1]);
        var updateAction = function (cell) {
            updateCell(_this.parent, sheet, { cell: cell, rowIdx: activeCell[0], colIdx: activeCell[1], uiRefresh: true, valChange: true });
            _this.parent.notify('actionComplete', { action: 'replace', eventArgs: { address: eventArgs.address, compareValue: compareVal, replaceValue: eventArgs.replaceValue } });
        };
        var lcValueOfCell = compareVal.toLowerCase();
        if ((args.value === compareVal) || (args.value === lcValueOfCell)) {
            updateAction({ value: eventArgs.replaceValue });
        }
        else if (compareVal.indexOf(args.value) > -1) {
            updateAction({ value: compareVal.replace(args.value, eventArgs.replaceValue) });
        }
        else if (lcValueOfCell.indexOf(args.value) > -1) {
            var regx = new RegExp(args.value.toString().replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'ig');
            updateAction({ value: compareVal.replace(regx, eventArgs.replaceValue) });
        }
    };
    WorkbookFindAndReplace.prototype.replaceAll = function (args) {
        var _this = this;
        var startSheet = args.mode === 'Sheet' ? args.sheetIndex : 0;
        var sheet = this.parent.sheets[startSheet];
        var endRow = sheet.usedRange.rowIndex;
        var startRow = 0;
        var endColumn = sheet.usedRange.colIndex;
        var startColumn = 0;
        var addressCollection = [];
        var eventArgs = { addressCollection: addressCollection, replaceValue: args.replaceValue, compareValue: args.value, cancel: false };
        var updateAsync = function (cellValue, index) {
            if (requestAnimationFrame) {
                requestAnimationFrame(function () {
                    if (!eventArgs.cancel && eventArgs.addressCollection[index]) {
                        var indexes = getCellIndexes(eventArgs.addressCollection[index].split('!')[1]);
                        updateCell(_this.parent, sheet, { cell: { value: cellValue }, rowIdx: indexes[0], colIdx: indexes[1], uiRefresh: true,
                            valChange: true });
                        if (index === eventArgs.addressCollection.length - 1) {
                            _this.parent.notify('actionComplete', { action: 'replaceAll', eventArgs: { replaceValue: eventArgs.
                                        replaceValue, addressCollection: eventArgs.addressCollection, compareValue: eventArgs.compareValue } });
                        }
                    }
                });
            }
            else {
                _this.parent.updateCell({ value: cellValue }, eventArgs.addressCollection[index]);
            }
        };
        var cellval;
        var row;
        var regX;
        for (startRow; startRow <= endRow + 1; startRow++) {
            if (startColumn > endColumn && startRow > endRow) {
                if (args.mode === 'Workbook') {
                    startSheet++;
                    sheet = this.parent.sheets[startSheet];
                    if (sheet) {
                        startColumn = 0;
                        startRow = 0;
                        endColumn = sheet.usedRange.colIndex;
                        endRow = sheet.usedRange.rowIndex;
                    }
                    else {
                        break;
                    }
                }
            }
            row = sheet.rows[startRow];
            if (row) {
                if (startColumn === endColumn + 1) {
                    startColumn = 0;
                }
                for (startColumn; startColumn <= endColumn; startColumn++) {
                    if (row) {
                        if (row.cells && row.cells[startColumn]) {
                            cellval = this.parent.getDisplayText(sheet.rows[startRow].cells[startColumn]).toString();
                            if (cellval) {
                                if (args.isCSen) {
                                    if (args.isEMatch) {
                                        if (cellval === args.value) {
                                            updateAsync(args.replaceValue, addressCollection.length);
                                            addressCollection.push(sheet.name + '!' + getCellAddress(startRow, startColumn));
                                        }
                                    }
                                    else {
                                        if (cellval.indexOf(args.value) > -1) {
                                            updateAsync(cellval.replace(args.value, args.replaceValue), addressCollection.length);
                                            addressCollection.push(sheet.name + '!' + getCellAddress(startRow, startColumn));
                                        }
                                    }
                                }
                                else {
                                    if (args.isEMatch) {
                                        if (cellval.toLowerCase() === args.value) {
                                            updateAsync(args.replaceValue, addressCollection.length);
                                            addressCollection.push(sheet.name + '!' + getCellAddress(startRow, startColumn));
                                        }
                                    }
                                    else {
                                        var val = cellval.toLowerCase();
                                        if ((cellval === args.value || val.indexOf(args.value.toString().toLowerCase()) > -1) || val ===
                                            args.value || cellval === args.value || val.indexOf(args.value) > -1) {
                                            regX = new RegExp(args.value.toString().replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'ig');
                                            updateAsync(cellval.replace(regX, args.replaceValue), addressCollection.length);
                                            addressCollection.push(sheet.name + '!' + getCellAddress(startRow, startColumn));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (addressCollection.length) {
            this.parent.notify('actionBegin', { action: 'beforeReplaceAll', eventArgs: eventArgs });
            if (!eventArgs.cancel) {
                this.parent.notify(replaceAllDialog, { count: eventArgs.addressCollection.length, replaceValue: eventArgs.replaceValue });
            }
        }
        else {
            this.parent.notify(replaceAllDialog, { count: eventArgs.addressCollection.length, replaceValue: eventArgs.replaceValue });
        }
    };
    WorkbookFindAndReplace.prototype.totalCount = function (args) {
        var sheet = this.parent.sheets[args.sheetIndex];
        var endRow = sheet.usedRange.rowIndex;
        var count = 0;
        var rowIndex = 0;
        var endColumn = sheet.usedRange.colIndex;
        var columnIndex = 0;
        for (rowIndex; rowIndex <= endRow; rowIndex++) {
            if (sheet.rows[rowIndex]) {
                var row = sheet.rows[rowIndex];
                if (columnIndex === endColumn + 1) {
                    columnIndex = 0;
                }
                for (columnIndex; columnIndex <= endColumn; columnIndex++) {
                    if (row) {
                        if (row.cells && row.cells[columnIndex] && row.cells[columnIndex].value) {
                            var cellType = sheet.rows[rowIndex].cells[columnIndex];
                            if (cellType) {
                                var cellFormat = cellType.format;
                                var cellvalue = void 0;
                                if (cellFormat) {
                                    var displayTxt = this.parent.getDisplayText(sheet.rows[rowIndex].
                                        cells[columnIndex]);
                                    cellvalue = displayTxt.toString();
                                }
                                else {
                                    cellvalue = cellType.value.toString();
                                }
                                if (args.isCSen && args.isEMatch) {
                                    if (cellvalue === args.value) {
                                        count++;
                                    }
                                }
                                else if (args.isCSen && !args.isEMatch) {
                                    var index = cellvalue.indexOf(args.value) > -1;
                                    if ((cellvalue === args.value) || (index)) {
                                        count++;
                                    }
                                }
                                else if (!args.isCSen && args.isEMatch) {
                                    var val = cellvalue.toString().toLowerCase();
                                    if (val === args.value) {
                                        count++;
                                    }
                                }
                                else if (!args.isCSen && !args.isEMatch) {
                                    var val = cellvalue.toString().toLowerCase();
                                    var index = val.indexOf(args.value.toString().toLowerCase()) > -1;
                                    var lowerCaseValue = val.indexOf(args.value) > -1;
                                    if ((val === args.value) || ((cellvalue === args.value) || (index)) || (cellvalue === args.value) ||
                                        (lowerCaseValue)) {
                                        count++;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        var totalCount = count;
        var requiredCount = this.requiredCount(args) - 1;
        count = totalCount - requiredCount;
        if (count > totalCount) {
            count = totalCount;
        }
        if (count !== 0) {
            var activecel = getCellIndexes(sheet.activeCell);
            var val = sheet.rows[activecel[0]] ?
                this.parent.getDisplayText(sheet.rows[activecel[0]].cells[activecel[1]]).toString().toLowerCase() : null;
            if (val && val.indexOf(args.value.toString().toLowerCase()) === -1) {
                count = count - 1;
            }
        }
        args.findCount = count + ' ' + 'of' + ' ' + totalCount;
        return;
    };
    WorkbookFindAndReplace.prototype.requiredCount = function (args) {
        var sheetIndex = this.parent.activeSheetIndex;
        var sheet = this.parent.sheets[sheetIndex];
        var activecel = getCellIndexes(sheet.activeCell);
        var endRow = sheet.usedRange.rowIndex;
        var requiredCount = 0;
        var startRow = activecel[0];
        var endColumn = sheet.usedRange.colIndex;
        var startColumn = activecel[1];
        for (startRow; startRow <= endRow; startRow++) {
            if (sheet.rows[startRow]) {
                var row = sheet.rows[startRow];
                if (startColumn === endColumn + 1) {
                    startColumn = 0;
                }
                for (startColumn; startColumn <= endColumn; startColumn++) {
                    if (row) {
                        if (row.cells && row.cells[startColumn] && row.cells[startColumn].value) {
                            if (sheet.rows[startRow].cells[startColumn]) {
                                var cellval = void 0;
                                if (sheet.rows[startRow].cells[startColumn].format) {
                                    var displayTxt = this.parent.getDisplayText(sheet.rows[startRow].
                                        cells[startColumn]);
                                    cellval = displayTxt.toString();
                                }
                                else {
                                    cellval = sheet.rows[startRow].cells[startColumn].value.toString();
                                }
                                if (args.isCSen && !args.isEMatch) {
                                    var index = cellval.indexOf(args.value) > -1;
                                    if ((cellval === args.value) || (index)) {
                                        requiredCount++;
                                    }
                                }
                                else if (args.isCSen && args.isEMatch) {
                                    if (cellval === args.value) {
                                        requiredCount++;
                                    }
                                }
                                else if (!args.isCSen && args.isEMatch) {
                                    var val = cellval.toString().toLowerCase();
                                    if (val === args.value) {
                                        requiredCount++;
                                    }
                                }
                                else if (!args.isCSen && !args.isEMatch) {
                                    var val = cellval.toString().toLowerCase();
                                    var argsVal = args.value.toString().toLowerCase();
                                    var index = val.indexOf(argsVal) > -1;
                                    var lowerCaseVal = val.indexOf(args.value) > -1;
                                    if ((cellval === args.value) || ((val === argsVal) || (index)) || (val === args.value) ||
                                        (lowerCaseVal)) {
                                        requiredCount++;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return requiredCount;
    };
    WorkbookFindAndReplace.prototype.findAllValues = function (findAllArguments) {
        var startSheet = findAllArguments.sheetIndex;
        var sheet = this.parent.sheets[startSheet];
        var endRow = sheet.usedRange.rowIndex;
        var rowIndex = 0;
        var count = 0;
        var address;
        var endColumn = sheet.usedRange.colIndex;
        var columnIndex = 0;
        var sheetLength = this.parent.sheets.length;
        var initialSheet = findAllArguments.sheetIndex;
        for (rowIndex; rowIndex <= endRow + 1; rowIndex++) {
            if ((initialSheet !== 1) && (findAllArguments.sheetIndex === sheetLength)) {
                startSheet = 1;
            }
            if (rowIndex > endRow && columnIndex > endColumn) {
                if (findAllArguments.mode === 'Workbook') {
                    startSheet++;
                    if (initialSheet === startSheet) {
                        if (count === 0) {
                            return;
                        }
                        return;
                    }
                    if (startSheet > sheetLength - 1) {
                        startSheet = 0;
                    }
                    sheet = this.parent.sheets[startSheet];
                    if (sheet) {
                        rowIndex = 0;
                        columnIndex = 0;
                        endColumn = sheet.usedRange.colIndex;
                        endRow = sheet.usedRange.rowIndex;
                    }
                }
            }
            if (!isNullOrUndefined(sheet)) {
                if (sheet.rows[rowIndex]) {
                    var row = sheet.rows[rowIndex];
                    if (columnIndex === endColumn + 2) {
                        columnIndex = 0;
                    }
                    for (columnIndex; columnIndex <= endColumn + 1; columnIndex++) {
                        if (row) {
                            if (row.cells && row.cells[columnIndex]) {
                                var cell = sheet.rows[rowIndex].cells[columnIndex];
                                if (cell) {
                                    var cellFormat = cell.format;
                                    var cellvalue = void 0;
                                    if (cellFormat) {
                                        var displayTxt = this.parent.getDisplayText(sheet.rows[rowIndex].
                                            cells[columnIndex]);
                                        cellvalue = displayTxt.toString();
                                    }
                                    else {
                                        cellvalue = cell.value.toString();
                                    }
                                    if (findAllArguments.isCSen && findAllArguments.isEMatch) {
                                        if (cellvalue === findAllArguments.value) {
                                            address = sheet.name + '!' + getCellAddress(rowIndex, columnIndex);
                                            findAllArguments.findCollection.push(address);
                                            count++;
                                        }
                                    }
                                    else if (findAllArguments.isCSen && !findAllArguments.isEMatch) {
                                        var index = cellvalue.indexOf(findAllArguments.value) > -1;
                                        if ((cellvalue === findAllArguments.value) || (index)) {
                                            address = sheet.name + '!' + getCellAddress(rowIndex, columnIndex);
                                            findAllArguments.findCollection.push(address);
                                            count++;
                                        }
                                    }
                                    else if (!findAllArguments.isCSen && findAllArguments.isEMatch) {
                                        var val = cellvalue.toString().toLowerCase();
                                        if (val === findAllArguments.value) {
                                            address = sheet.name + '!' + getCellAddress(rowIndex, columnIndex);
                                            findAllArguments.findCollection.push(address);
                                            count++;
                                        }
                                    }
                                    else if (!findAllArguments.isCSen && !findAllArguments.isEMatch) {
                                        var val = cellvalue.toString().toLowerCase();
                                        var index = val.indexOf(findAllArguments.value.toLowerCase()) > -1;
                                        if ((val === findAllArguments.value) || ((cellvalue === findAllArguments.value) || (index)) ||
                                            ((cellvalue === findAllArguments.value))) {
                                            address = sheet.name + '!' + getCellAddress(rowIndex, columnIndex);
                                            findAllArguments.findCollection.push(address);
                                            count++;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (count === 0) {
            return;
        }
        return;
    };
    /**
     * Gets the module name.
     *
     * @returns {string} - Return the string
     */
    WorkbookFindAndReplace.prototype.getModuleName = function () {
        return 'workbookfindAndReplace';
    };
    return WorkbookFindAndReplace;
}());

/**
 * The `WorkbookSpreadSheet` module is used to handle the Protecting functionalities in Workbook.
 */
var WorkbookProtectSheet = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for edit module in Workbook.
     *
     * @param {Workbook} workbook - Specifies the workbook.
     * @private
     */
    function WorkbookProtectSheet(workbook) {
        this.parent = workbook;
        this.addEventListener();
    }
    WorkbookProtectSheet.prototype.protectsheetHandler = function (args) {
        var sheet = this.parent.getActiveSheet();
        this.parent.setSheetPropertyOnMute(sheet, 'protectSettings', {
            selectCells: args.protectSettings.selectCells, formatCells: args.protectSettings.formatCells,
            formatColumns: args.protectSettings.formatColumns, formatRows: args.protectSettings.formatRows,
            insertLink: args.protectSettings.insertLink
        });
        this.parent.notify(protectSheetWorkBook, sheet.protectSettings);
        this.parent.notify(updateToggle, { props: 'Protect' });
        sheet.password = args.password ? args.password : '';
        sheet.columns.forEach(function (column) {
            if (column && isUndefined(column.isLocked)) {
                column.isLocked = true;
            }
        });
    };
    WorkbookProtectSheet.prototype.unprotectsheetHandler = function (args) {
        var sheet = this.parent.getActiveSheet();
        if (args.sheet) {
            sheet = this.parent.sheets[args.sheet];
        }
        sheet.protectSettings.formatCells = sheet.protectSettings.formatColumns = false;
        sheet.protectSettings.formatRows = sheet.protectSettings.selectCells = false;
        this.parent.setSheetPropertyOnMute(sheet, 'isProtected', false);
        this.parent.notify(protectSheetWorkBook, sheet.protectSettings);
        this.parent.notify(updateToggle, { props: 'Protect' });
    };
    /**
     * To destroy the edit module.
     *
     * @returns {void} - To destroy the edit module.
     * @hidden
     */
    WorkbookProtectSheet.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookProtectSheet.prototype.addEventListener = function () {
        this.parent.on(protectsheetHandler, this.protectsheetHandler, this);
        this.parent.on(unprotectsheetHandler, this.unprotectsheetHandler, this);
        this.parent.on(setLockCells, this.lockCells, this);
    };
    WorkbookProtectSheet.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(protectsheetHandler, this.protectsheetHandler);
            this.parent.off(setLockCells, this.lockCells);
            this.parent.off(protectsheetHandler, this.unprotectsheetHandler);
        }
    };
    WorkbookProtectSheet.prototype.lockCells = function (args) {
        var sheet = this.parent.getActiveSheet();
        var range;
        if (args) {
            range = args.range;
        }
        else {
            range = sheet.selectedRange;
        }
        var indexes = typeof (range) === 'object' ? range :
            getSwapRange(getRangeIndexes(range));
        if (indexes[0] === 0 && indexes[2] === sheet.rowCount - 1) {
            for (var i = indexes[1]; i <= indexes[3]; i++) {
                setColumn(sheet, i, { isLocked: args.isLocked });
            }
        }
        for (var i = indexes[0]; i <= indexes[2]; i++) {
            for (var j = indexes[1]; j <= indexes[3]; j++) {
                if (this.parent.getActiveSheet().id === sheet.id) {
                    this.parent.notify(applyLockCells, { rowIdx: i, colIdx: j, isLocked: args.isLocked
                    });
                }
            }
        }
    };
    /**
     * Get the module name.
     *
     * @returns {string} - Return the string.
     * @private
     */
    WorkbookProtectSheet.prototype.getModuleName = function () {
        return 'workbookProtectSheet';
    };
    return WorkbookProtectSheet;
}());

/**
 * The `WorkbookMerge` module is used to merge the range of cells.
 */
var WorkbookMerge = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for the workbook merge module.
     *
     * @param {Workbook} parent - Specifies the workbook.
     * @private
     */
    function WorkbookMerge(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    WorkbookMerge.prototype.merge = function (args) {
        if (args.isAction) {
            this.parent.notify('actionBegin', { eventArgs: args, action: 'merge' });
            if (!args.model) {
                args.model = [];
            }
        }
        if (typeof (args.range) === 'string') {
            args.range = getRangeIndexes(args.range);
        }
        args.range = getSwapRange(args.range);
        if (!args.skipChecking) {
            this.mergedRange(args);
        }
        if (!args.merge || args.type === 'All') {
            this.mergeAll(args);
            if (args.refreshRibbon) {
                this.parent.notify(activeCellChanged, null);
            }
        }
        else if (args.type === 'Horizontally') {
            this.mergeHorizontally(args);
        }
        else if (args.type === 'Vertically') {
            this.mergeVertically(args);
        }
        this.parent.setUsedRange(args.range[2], args.range[3]);
        if (args.isAction) {
            this.parent.notify('actionComplete', { eventArgs: args, action: 'merge' });
        }
        var sheet = args.sheet || this.parent.getActiveSheet();
        if (this.parent.sheets.indexOf(sheet) === this.parent.activeSheetIndex) {
            this.parent.notify('selectRange', { address: sheet.selectedRange, skipChecking: true });
        }
    };
    WorkbookMerge.prototype.mergeAll = function (args) {
        var rowSpan = 0;
        var cell;
        args.range = args.range;
        var colSpan;
        var value;
        var sheet = args.sheet || this.parent.getActiveSheet();
        var curCell;
        for (var i = args.range[0]; i <= args.range[2]; i++) {
            colSpan = 0;
            if (args.isAction) {
                args.model.push({ cells: [] });
            }
            for (var j = args.range[1]; j <= args.range[3]; j++) {
                cell = getCell(i, j, sheet);
                if (cell && (cell.value || cell.formula) && !value) {
                    value = cell.formula || cell.value;
                }
                if (args.isAction && args.merge) {
                    args.model[i - args.range[0]].cells[j - args.range[1]] = {};
                    extend(args.model[i - args.range[0]].cells[j - args.range[1]], cell, null, true);
                }
                if (sheet.rows[i] && sheet.rows[i].cells && sheet.rows[i].cells[j]) {
                    delete sheet.rows[i].cells[j].rowSpan;
                    delete sheet.rows[i].cells[j].colSpan;
                    if (!args.merge && !args.isAction && args.model && args.model[i - args.range[0]] && args.model[i - args.range[0]].
                        cells[j - args.range[1]] && args.model[i - args.range[0]].cells[j - args.range[1]] !== {}) {
                        setCell(i, j, sheet, args.model[i - args.range[0]].cells[j - args.range[1]]);
                    }
                }
                if (args.merge) {
                    cell = new Object();
                    if (i === args.range[0] && j === args.range[1]) {
                        if (args.range[3] - args.range[1] > 0) {
                            cell.colSpan = (args.range[3] - args.range[1]) + 1;
                        }
                        if (args.range[2] - args.range[0] > 0) {
                            cell.rowSpan = (args.range[2] - args.range[0]) + 1;
                        }
                        setCell(args.range[0], args.range[1], sheet, cell, true);
                        continue;
                    }
                    else {
                        if (i !== args.range[0]) {
                            cell.rowSpan = -rowSpan;
                        }
                        if (j !== args.range[1]) {
                            colSpan++;
                            cell.colSpan = -colSpan;
                        }
                        if (sheet.rows[i] && sheet.rows[i].cells && sheet.rows[i].cells[j]) {
                            delete sheet.rows[i].cells[j].value;
                            delete sheet.rows[i].cells[j].formula;
                        }
                        curCell = getCell(i, j, sheet) || {};
                        setCell(i, j, sheet, Object.assign(cell, curCell));
                    }
                }
                if (!args.preventRefresh) {
                    this.parent.notify(applyMerge, { rowIdx: i, colIdx: j });
                }
            }
            rowSpan++;
        }
        if (args.merge) {
            cell = this.getCellValue(args.range[0], args.range[1], value, sheet);
            setCell(args.range[0], args.range[1], sheet, cell, true);
            if (!args.preventRefresh) {
                this.parent.notify(applyMerge, { rowIdx: args.range[0], colIdx: args.range[1] });
            }
        }
    };
    WorkbookMerge.prototype.mergeHorizontally = function (args) {
        var mergeCount;
        args.range = args.range;
        var cell;
        var sheet = args.sheet || this.parent.getActiveSheet();
        var newValue;
        var rowIdx;
        var curCell;
        for (var i = args.range[0]; i <= args.range[2]; i++) {
            mergeCount = 0;
            if (args.isAction) {
                args.model.push({ cells: [] });
            }
            for (var j = args.range[1]; j <= args.range[3]; j++) {
                curCell = getCell(i, j, sheet);
                cell = new Object();
                if (args.isAction) {
                    args.model[i - args.range[0]].cells[j - args.range[1]] = {};
                    Object.assign(args.model[i - args.range[0]].cells[j - args.range[1]], curCell);
                }
                if (j === args.range[1]) {
                    if (i === args.range[0]) {
                        continue;
                    }
                    rowIdx = i - 1;
                    if (sheet.rows[rowIdx] && sheet.rows[rowIdx].cells && sheet.rows[rowIdx].cells[j]) {
                        delete sheet.rows[rowIdx].cells[j].rowSpan;
                    }
                    cell = this.getCellValue(rowIdx, j, newValue, sheet);
                    if (args.range[3] - args.range[1] > 0) {
                        cell.colSpan = (args.range[3] - args.range[1]) + 1;
                    }
                    newValue = null;
                    setCell(rowIdx, j, sheet, cell, true);
                }
                else {
                    if (curCell && (curCell.value || curCell.formula) && !newValue) {
                        newValue = curCell.formula || curCell.value;
                    }
                    rowIdx = i;
                    if (sheet.rows[rowIdx] && sheet.rows[rowIdx].cells && sheet.rows[rowIdx].cells[j]) {
                        delete sheet.rows[rowIdx].cells[j].rowSpan;
                        delete sheet.rows[rowIdx].cells[j].value;
                        delete sheet.rows[rowIdx].cells[j].formula;
                    }
                    mergeCount++;
                    cell.colSpan = -mergeCount;
                    setCell(rowIdx, j, sheet, cell, true);
                }
                this.parent.notify(applyMerge, { rowIdx: rowIdx, colIdx: j });
            }
        }
        if (sheet.rows[args.range[2]] && sheet.rows[args.range[2]].cells && sheet.rows[args.range[2]].cells[args.range[1]]) {
            delete sheet.rows[args.range[2]].cells[args.range[1]].rowSpan;
        }
        cell = this.getCellValue(args.range[2], args.range[1], newValue, sheet);
        if (args.range[3] - args.range[1] > 0) {
            cell.colSpan = (args.range[3] - args.range[1]) + 1;
        }
        setCell(args.range[2], args.range[1], sheet, cell, true);
        this.parent.notify(applyMerge, { rowIdx: args.range[2], colIdx: args.range[1] });
    };
    WorkbookMerge.prototype.getCellValue = function (rowIdx, colIdx, value, sheet) {
        var cell = new Object();
        var curCell = getCell(rowIdx, colIdx, sheet);
        if (value && (!curCell || (!curCell.value && !curCell.formula))) {
            if (checkIsFormula(value)) {
                cell.formula = value;
            }
            else {
                cell.value = value;
            }
        }
        return cell;
    };
    WorkbookMerge.prototype.mergeVertically = function (args) {
        var rowSpan = 0;
        args.range = args.range;
        var sheet = args.sheet || this.parent.getActiveSheet();
        var cell;
        var newValue;
        var colIdx;
        var curCell;
        for (var i = args.range[1]; i <= args.range[3]; i++) {
            for (var j = args.range[0]; j <= args.range[2]; j++) {
                curCell = getCell(j, i, sheet);
                if (args.isAction) {
                    if (args.model[j - args.range[0]] === undefined) {
                        args.model[j - args.range[0]] = { cells: [] };
                    }
                    args.model[j - args.range[0]].cells[i - args.range[1]] = {};
                    Object.assign(args.model[j - args.range[0]].cells[i - args.range[1]], curCell);
                }
                if (j === args.range[0]) {
                    rowSpan = 0;
                    if (i === args.range[1]) {
                        continue;
                    }
                    colIdx = i - 1;
                    if (sheet.rows[j] && sheet.rows[j].cells && sheet.rows[j].cells[colIdx]) {
                        delete sheet.rows[j].cells[colIdx].colSpan;
                    }
                    cell = this.getCellValue(j, colIdx, newValue, sheet);
                    if (args.range[2] - args.range[0] > 0) {
                        cell.rowSpan = (args.range[2] - args.range[0]) + 1;
                    }
                    newValue = null;
                    setCell(j, colIdx, sheet, cell, true);
                }
                else {
                    cell = new Object();
                    if (curCell && (curCell.value || curCell.formula) && !newValue) {
                        newValue = curCell.formula || curCell.value;
                    }
                    rowSpan++;
                    colIdx = i;
                    if (sheet.rows[j] && sheet.rows[j].cells && sheet.rows[j].cells[colIdx]) {
                        delete sheet.rows[j].cells[colIdx].colSpan;
                        delete sheet.rows[j].cells[colIdx].value;
                        delete sheet.rows[j].cells[colIdx].formula;
                    }
                    cell.rowSpan = -rowSpan;
                    setCell(j, colIdx, sheet, cell, true);
                }
                this.parent.notify(applyMerge, { rowIdx: j, colIdx: colIdx });
            }
        }
        if (sheet.rows[args.range[0]] && sheet.rows[args.range[0]].cells && sheet.rows[args.range[0]].cells[args.range[3]]) {
            delete sheet.rows[args.range[0]].cells[args.range[3]].colSpan;
        }
        cell = this.getCellValue(args.range[0], args.range[1], newValue, sheet);
        if (args.range[2] - args.range[0] > 0) {
            cell.rowSpan = (args.range[2] - args.range[0]) + 1;
        }
        setCell(args.range[0], args.range[3], sheet, cell, true);
        this.parent.notify(applyMerge, { rowIdx: args.range[0], colIdx: args.range[3] });
    };
    WorkbookMerge.prototype.activeCellRange = function (args) {
        args.range = args.range;
        var sheet = this.parent.getActiveSheet();
        var cell = getCell(args.range[0], args.range[1], sheet);
        if (cell) {
            if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                args.range[0] += cell.rowSpan;
                if (args.insertCount) {
                    args.range[0] -= args.insertCount;
                }
            }
            if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                args.range[1] += cell.colSpan;
                if (args.insertCount) {
                    args.range[1] -= args.insertCount;
                }
            }
            cell = getCell(args.range[0], args.range[1], sheet);
            if (cell) {
                if (cell.rowSpan > 1 && (args.range[0] + (cell.rowSpan - 1) >= args.range[2] || args.insertCount)) {
                    args.range[2] = args.range[0] + (cell.rowSpan - 1);
                }
                if (cell.colSpan > 1 && (args.range[1] + (cell.colSpan - 1) >= args.range[3] || args.insertCount)) {
                    args.range[3] = args.range[1] + (cell.colSpan - 1);
                }
            }
        }
    };
    WorkbookMerge.prototype.mergedRange = function (args) {
        if (typeof (args.range) === 'string') {
            args.range = getRangeIndexes(args.range);
        }
        if (args.range[0] <= args.range[2] && args.range[1] <= args.range[3]) {
            this.forward(args);
        }
        else if (args.range[0] >= args.range[2] && args.range[1] >= args.range[3]) {
            this.reverse(args);
        }
        else if (args.range[0] < args.range[2] && args.range[1] > args.range[3]) {
            this.forwardReverse(args);
        }
        else if (args.range[0] > args.range[2] && args.range[1] < args.range[3]) {
            this.reverseForward(args);
        }
    };
    WorkbookMerge.prototype.forward = function (args) {
        args.range = args.range;
        var sheet = args.sheet || this.parent.getActiveSheet();
        var cell = getCell(args.range[0], args.range[1], sheet);
        var endRowIdx;
        var endColIdx;
        var rowIdx = endRowIdx = args.range[0];
        var colIdx = endColIdx = args.range[1];
        if (cell) {
            if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                rowIdx = endRowIdx = args.range[0] + cell.rowSpan;
            }
            if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                colIdx = endColIdx = args.range[1] + cell.colSpan;
            }
            cell = getCell(rowIdx, colIdx, sheet);
            if (cell) {
                if (cell.rowSpan > 1) {
                    endRowIdx += (cell.rowSpan - 1);
                    if (rowIdx + (cell.rowSpan - 1) >= args.range[2]) {
                        args.range[2] = args.range[0];
                        args.range[2] = rowIdx + (cell.rowSpan - 1);
                    }
                }
                if (cell.colSpan > 1) {
                    endColIdx += (cell.colSpan - 1);
                    if (colIdx + (cell.colSpan - 1) >= args.range[3]) {
                        args.range[3] = args.range[1];
                        args.range[3] = colIdx + (cell.colSpan - 1);
                    }
                }
            }
        }
        args.range[0] = rowIdx;
        args.range[1] = colIdx;
        if (args.range[0] === rowIdx && args.range[1] === colIdx && args.range[2] === endRowIdx && args.range[3] === endColIdx) {
            args.isActiveCell = true;
        }
        if (args.skipChecking) {
            return;
        }
        for (var i = args.range[1]; i <= args.range[3]; i++) {
            cell = getCell(args.range[2], i, sheet);
            if (cell) {
                rowIdx = args.range[2];
                colIdx = i;
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    colIdx += cell.colSpan;
                    if (colIdx < args.range[1]) {
                        args.range[1] = colIdx;
                    }
                }
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    rowIdx += cell.rowSpan;
                    if (rowIdx < args.range[0]) {
                        args.range[0] = rowIdx;
                    }
                }
                cell = getCell(rowIdx, colIdx, sheet);
                if (cell) {
                    if (cell.colSpan > 1 && colIdx + (cell.colSpan - 1) > args.range[3]) {
                        args.range[3] = colIdx;
                        args.range[3] = colIdx + (cell.colSpan - 1);
                    }
                    if (cell.rowSpan > 1 && rowIdx + (cell.rowSpan - 1) > args.range[2]) {
                        args.range[2] = rowIdx;
                        args.range[2] = rowIdx + (cell.rowSpan - 1);
                    }
                }
            }
        }
        var startRowIdx;
        var startColIdx;
        for (var i = args.range[1]; i <= args.range[3]; i++) {
            cell = getCell(args.range[0], i, sheet);
            if (cell) {
                startColIdx = i;
                startRowIdx = args.range[0];
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    startColIdx += cell.colSpan;
                    if (startColIdx < args.range[1]) {
                        args.range[1] = startColIdx;
                    }
                }
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    startRowIdx += cell.rowSpan;
                    if (startRowIdx < args.range[0]) {
                        args.range[0] = startRowIdx;
                    }
                }
            }
        }
        for (var i = args.range[0]; i <= args.range[2]; i++) {
            cell = getCell(i, args.range[3], sheet);
            if (cell) {
                rowIdx = i;
                colIdx = args.range[3];
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    rowIdx += cell.rowSpan;
                    if (rowIdx < args.range[0]) {
                        args.range[0] = rowIdx;
                    }
                }
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    colIdx += cell.colSpan;
                    if (colIdx < args.range[1]) {
                        args.range[1] = colIdx;
                    }
                }
                cell = getCell(rowIdx, colIdx, sheet);
                if (cell) {
                    if (cell.rowSpan > 1 && rowIdx + (cell.rowSpan - 1) > args.range[2]) {
                        args.range[2] = rowIdx;
                        args.range[2] = rowIdx + (cell.rowSpan - 1);
                    }
                    if (cell.colSpan > 1 && colIdx + (cell.colSpan - 1) > args.range[3]) {
                        args.range[3] = colIdx;
                        args.range[3] = colIdx + (cell.colSpan - 1);
                    }
                }
            }
        }
    };
    WorkbookMerge.prototype.forwardReverse = function (args) {
        var sheet = this.parent.getActiveSheet();
        args.range = args.range;
        var colIndex = args.range[1];
        var cell = getCell(args.range[0], args.range[1], sheet);
        var rowIndex = args.range[0];
        if (cell) {
            if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                colIndex += cell.colSpan;
                if (args.range[3] >= colIndex) {
                    args.range[3] = colIndex;
                }
            }
            if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                rowIndex += cell.rowSpan;
                if (rowIndex < args.range[0]) {
                    args.range[0] = rowIndex;
                }
            }
            cell = getCell(rowIndex, colIndex, sheet);
            if (cell) {
                if (cell.rowSpan > 1 && rowIndex + (cell.rowSpan - 1) >= args.range[2]) {
                    args.range[2] = rowIndex + (cell.rowSpan - 1);
                }
                if (cell.colSpan > 1 && colIndex + (cell.colSpan - 1) >= args.range[1]) {
                    args.range[1] = colIndex + (cell.colSpan - 1);
                }
            }
        }
        args.range[0] = rowIndex;
        if (args.skipChecking) {
            return;
        }
        var rowIdx;
        var cellIdx;
        for (var i = args.range[3]; i <= args.range[1]; i++) {
            cell = getCell(args.range[2], i, sheet);
            if (cell) {
                cellIdx = i;
                rowIdx = args.range[2];
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    rowIdx += cell.rowSpan;
                    if (rowIdx < args.range[0]) {
                        args.range[0] = rowIdx;
                    }
                }
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    cellIdx += cell.colSpan;
                    if (cellIdx < args.range[3]) {
                        args.range[3] = cellIdx;
                    }
                }
                cell = getCell(rowIdx, cellIdx, sheet);
                if (cell) {
                    if (cell.rowSpan > 1 && rowIdx + (cell.rowSpan - 1) > args.range[2]) {
                        args.range[2] = rowIdx + (cell.rowSpan - 1);
                    }
                    if (cell.colSpan > 1 && cellIdx + (cell.colSpan - 1) > args.range[1]) {
                        args.range[1] = cellIdx + (cell.colSpan - 1);
                    }
                }
            }
        }
        var startRowIndex;
        for (var i = args.range[3]; i <= args.range[1]; i++) {
            cell = getCell(args.range[0], i, sheet);
            if (cell) {
                cellIdx = i;
                startRowIndex = args.range[0];
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    startRowIndex += cell.rowSpan;
                    if (startRowIndex < args.range[0]) {
                        args.range[0] = startRowIndex;
                    }
                }
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    cellIdx += cell.colSpan;
                }
                cell = getCell(startRowIndex, cellIdx, sheet);
                if (cell) {
                    if (cell.rowSpan > 1 && startRowIndex + (cell.rowSpan - 1) > args.range[2]) {
                        args.range[2] = startRowIndex + (cell.rowSpan - 1);
                    }
                    if (cell.colSpan > 1 && cellIdx + (cell.colSpan - 1) > args.range[1]) {
                        args.range[1] = cellIdx;
                        args.range[1] = cellIdx + (cell.colSpan - 1);
                    }
                }
            }
        }
        var colIdx;
        for (var i = args.range[0]; i <= args.range[2]; i++) {
            cell = getCell(i, args.range[3], sheet);
            if (cell) {
                startRowIndex = i;
                colIdx = args.range[3];
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    startRowIndex += cell.rowSpan;
                    if (startRowIndex < args.range[0]) {
                        args.range[0] = startRowIndex;
                    }
                }
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    colIdx += cell.colSpan;
                    if (colIdx < args.range[3]) {
                        args.range[3] = colIdx;
                    }
                }
                cell = getCell(startRowIndex, colIdx, sheet);
                if (cell) {
                    if (cell.rowSpan > 1 && startRowIndex + (cell.rowSpan - 1) > args.range[2]) {
                        args.range[2] = startRowIndex;
                        args.range[2] = startRowIndex + (cell.rowSpan - 1);
                    }
                    if (cell.colSpan > 1 && colIdx + (cell.colSpan - 1) > args.range[1]) {
                        args.range[1] = colIdx;
                        args.range[1] = colIdx + (cell.colSpan - 1);
                    }
                }
            }
        }
    };
    WorkbookMerge.prototype.reverse = function (args) {
        args.range = args.range;
        var colnIdx = args.range[1];
        var sheet = args.sheet || this.parent.getActiveSheet();
        var cell = getCell(args.range[0], args.range[1], sheet);
        var rowIdx = args.range[0];
        if (cell) {
            if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                colnIdx += cell.colSpan;
            }
            if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                rowIdx += cell.rowSpan;
            }
            if (args.range[2] >= rowIdx) {
                args.range[2] = rowIdx;
                args.isActiveCell = true;
            }
            if (args.range[3] >= colnIdx) {
                args.range[3] = colnIdx;
                if (args.range[2] === rowIdx) {
                    args.isActiveCell = true;
                }
            }
            else if (args.isActiveCell) {
                args.isActiveCell = false;
            }
            cell = getCell(rowIdx, colnIdx, sheet);
            if (cell) {
                if (cell.rowSpan > 1 && rowIdx + (cell.rowSpan - 1) >= args.range[0]) {
                    args.range[0] = rowIdx;
                    args.range[0] = rowIdx + (cell.rowSpan - 1);
                }
                if (cell.colSpan > 1 && colnIdx + (cell.colSpan - 1) >= args.range[1]) {
                    args.range[1] = colnIdx;
                    args.range[1] = colnIdx + (cell.colSpan - 1);
                }
            }
        }
        var colIdx = args.range[3];
        if (args.skipChecking) {
            return;
        }
        for (var i = args.range[3]; i <= args.range[1]; i++) {
            cell = getCell(args.range[2], i, sheet);
            if (cell) {
                colIdx = i;
                rowIdx = args.range[2];
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    rowIdx += cell.rowSpan;
                    if (rowIdx < args.range[2]) {
                        args.range[2] = rowIdx;
                    }
                }
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    colIdx += cell.colSpan;
                    if (colIdx < args.range[3]) {
                        args.range[3] = colIdx;
                    }
                }
                cell = getCell(rowIdx, colIdx, sheet);
                if (cell) {
                    if (cell.rowSpan > 1 && rowIdx + (cell.rowSpan - 1) > args.range[0]) {
                        args.range[0] = rowIdx;
                        args.range[0] = rowIdx + (cell.rowSpan - 1);
                    }
                    if (cell.colSpan > 1 && colIdx + (cell.colSpan - 1) > args.range[1]) {
                        args.range[1] = colIdx;
                        args.range[1] = colIdx + (cell.colSpan - 1);
                    }
                }
            }
        }
        colIdx = args.range[3];
        for (var i = args.range[3]; i <= args.range[1]; i++) {
            cell = getCell(args.range[0], i, sheet);
            if (cell) {
                colIdx = i;
                rowIdx = args.range[0];
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    colIdx += cell.colSpan;
                }
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    rowIdx += cell.rowSpan;
                }
                cell = getCell(rowIdx, colIdx, sheet);
                if (cell) {
                    if (cell.colSpan > 1 && colIdx + (cell.colSpan - 1) > args.range[1]) {
                        args.range[1] = colIdx;
                        args.range[1] = colIdx + (cell.colSpan - 1);
                    }
                    if (cell.rowSpan > 1 && rowIdx + (cell.rowSpan - 1) > args.range[0]) {
                        args.range[0] = rowIdx;
                        args.range[0] = rowIdx + (cell.rowSpan - 1);
                    }
                }
            }
        }
        var cellIndex;
        var rIdx;
        for (var i = args.range[2]; i <= args.range[0]; i++) {
            cell = getCell(i, args.range[3], sheet);
            if (cell) {
                rIdx = i;
                cellIndex = args.range[3];
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    rIdx += cell.rowSpan;
                    if (rIdx < args.range[2]) {
                        args.range[2] = rIdx;
                    }
                }
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    cellIndex += cell.colSpan;
                    if (cellIndex < args.range[3]) {
                        args.range[3] = cellIndex;
                    }
                }
                cell = getCell(rIdx, cellIndex, sheet);
                if (cell) {
                    if (cell.rowSpan > 1 && rIdx + (cell.rowSpan - 1) > args.range[0]) {
                        args.range[0] = rIdx;
                        args.range[0] = rIdx + (cell.rowSpan - 1);
                    }
                    if (cell.colSpan > 1 && cellIndex + (cell.colSpan - 1) > args.range[1]) {
                        args.range[1] = cellIndex;
                        args.range[1] = cellIndex + (cell.colSpan - 1);
                    }
                }
            }
        }
    };
    WorkbookMerge.prototype.reverseForward = function (args) {
        args.range = args.range;
        var sheet = args.sheet || this.parent.getActiveSheet();
        var rIdx = args.range[0];
        var cIdx = args.range[1];
        var cell = getCell(args.range[0], args.range[1], sheet);
        if (cell) {
            if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                rIdx += cell.rowSpan;
                if (args.range[2] >= rIdx) {
                    args.range[2] = rIdx;
                }
            }
            if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                cIdx += cell.colSpan;
            }
            cell = getCell(rIdx, cIdx, sheet);
            if (cell) {
                if (cell.rowSpan > 1 && rIdx + (cell.rowSpan - 1) >= args.range[0]) {
                    args.range[0] = rIdx;
                    args.range[0] = rIdx + (cell.rowSpan - 1);
                }
                if (cell.colSpan > 1 && cIdx + (cell.colSpan - 1) >= args.range[3]) {
                    args.range[3] = args.range[1];
                    args.range[3] = cIdx + (cell.colSpan - 1);
                }
            }
        }
        if (args.skipChecking) {
            return;
        }
        var cIndex = args.range[3];
        var rIndex;
        for (var i = args.range[1]; i <= args.range[3]; i++) {
            cell = getCell(args.range[2], i, sheet);
            if (cell) {
                rIndex = args.range[2];
                cIndex = i;
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    rIndex += cell.rowSpan;
                    if (rIndex < args.range[2]) {
                        args.range[2] = rIndex;
                    }
                }
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    cIndex += cell.colSpan;
                    if (cIndex < args.range[1]) {
                        args.range[1] = cIndex;
                    }
                }
                cell = getCell(rIndex, cIndex, sheet);
                if (cell) {
                    if (cell.colSpan > 1 && cIndex + (cell.colSpan - 1) > args.range[3]) {
                        args.range[3] = cIndex + (cell.colSpan - 1);
                    }
                    if (cell.rowSpan > 1 && (cell.rowSpan - 1) + rIndex > args.range[0]) {
                        args.range[0] = (cell.rowSpan - 1) + rIndex;
                    }
                }
            }
        }
        var sRowIdx;
        var sColIdx;
        for (var i = args.range[1]; i <= args.range[3]; i++) {
            cell = getCell(args.range[0], i, sheet);
            if (cell) {
                sColIdx = i;
                sRowIdx = args.range[0];
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    sColIdx += cell.colSpan;
                    if (sColIdx < args.range[1]) {
                        args.range[1] = sColIdx;
                    }
                }
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    sRowIdx += cell.rowSpan;
                }
                cell = getCell(sRowIdx, sColIdx, sheet);
                if (cell) {
                    if (cell.rowSpan > 1 && sRowIdx + (cell.rowSpan - 1) > args.range[0]) {
                        args.range[0] = sRowIdx + (cell.rowSpan - 1);
                    }
                }
            }
        }
        var cellIndex;
        for (var i = args.range[2]; i <= args.range[0]; i++) {
            cell = getCell(i, args.range[3], sheet);
            if (cell) {
                rIndex = i;
                cellIndex = args.range[3];
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    rIndex += cell.rowSpan;
                    if (rIndex < args.range[2]) {
                        args.range[2] = rIndex;
                    }
                }
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    cellIndex += cell.colSpan;
                    if (cellIndex < args.range[1]) {
                        args.range[1] = cellIndex;
                    }
                }
                cell = getCell(rIndex, cellIndex, sheet);
                if (cell) {
                    if (cell.rowSpan > 1 && (cell.rowSpan - 1) + rIndex > args.range[0]) {
                        args.range[0] = (cell.rowSpan - 1) + rIndex;
                    }
                    if (cell.colSpan > 1 && (cell.colSpan - 1) + cellIndex > args.range[3]) {
                        args.range[3] = cellIndex;
                        args.range[3] = (cell.colSpan - 1) + cellIndex;
                    }
                }
            }
        }
    };
    WorkbookMerge.prototype.insertHandler = function (args) {
        this.activeCellRange(args);
        args.range = args.range;
        if (args.insertModel === 'Row') {
            args.range[2] += args.insertCount;
        }
        else {
            args.range[3] += args.insertCount;
        }
        args.preventRefresh = true;
        args.merge = true;
        this.mergeAll(args);
    };
    WorkbookMerge.prototype.pasteHandler = function (args) {
        var sheet = this.parent.getActiveSheet();
        var cell;
        var nextCell;
        var prevCell;
        var activeCell = getCellIndexes(sheet.activeCell);
        for (var i = args.range[0], l = 0; i <= args.range[2]; i++, l++) {
            for (var j = args.range[1], k = 0; j <= args.range[3]; j++, k++) {
                cell = getCell(i, j, args.prevSheet) || {};
                if (cell.rowSpan > 1) {
                    prevCell = getCell(activeCell[0] + (cell.rowSpan - 1), activeCell[1], sheet) || {};
                    nextCell = getCell(activeCell[0] + 1, activeCell[1], sheet) || {};
                    if ((prevCell.colSpan !== undefined && prevCell.colSpan < 0) || (nextCell.colSpan !== undefined &&
                        nextCell.colSpan < 0)) {
                        args.cancel = true;
                        this.parent.notify(applyMerge, { showDialog: true });
                        return;
                    }
                }
                if (cell.colSpan > 1) {
                    prevCell = getCell(activeCell[0], activeCell[1] + (cell.colSpan - 1), sheet) || {};
                    nextCell = getCell(activeCell[0], activeCell[1] + 1, sheet) || {};
                    if ((prevCell.rowSpan !== undefined && prevCell.rowSpan < 0) || (nextCell.rowSpan !== undefined &&
                        nextCell.rowSpan < 0)) {
                        args.cancel = true;
                        this.parent.notify(applyMerge, { showDialog: true });
                        return;
                    }
                }
            }
        }
    };
    WorkbookMerge.prototype.addEventListener = function () {
        this.parent.on(setMerge, this.merge, this);
        this.parent.on(mergedRange, this.mergedRange, this);
        this.parent.on(activeCellMergedRange, this.activeCellRange, this);
        this.parent.on(insertMerge, this.insertHandler, this);
        this.parent.on(pasteMerge, this.pasteHandler, this);
    };
    /**
     * Destroy workbook merge module.
     *
     * @returns {void} - destroy the workbook merge module.
     */
    WorkbookMerge.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookMerge.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(setMerge, this.merge);
            this.parent.off(mergedRange, this.mergedRange);
            this.parent.off(activeCellMergedRange, this.activeCellRange);
            this.parent.off(insertMerge, this.insertHandler);
            this.parent.off(pasteMerge, this.pasteHandler);
        }
    };
    /**
     * Get the workbook merge module name.
     *
     * @returns {string} - Return the string.
     */
    WorkbookMerge.prototype.getModuleName = function () {
        return 'workbookmerge';
    };
    return WorkbookMerge;
}());

/**
 * The `WorkbookConditionalFormat` module is used to handle conditional formatting action in Spreadsheet.
 */
var WorkbookConditionalFormat = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for WorkbookConditionalFormat module.
     *
     * @param {Workbook} parent - Specifies the parent element.
     */
    function WorkbookConditionalFormat(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the conditional format module.
     *
     * @returns {void}
     */
    WorkbookConditionalFormat.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookConditionalFormat.prototype.addEventListener = function () {
        this.parent.on(setCFRule, this.setCFrulHandler, this);
        this.parent.on(clearCFRule, this.clearRules, this);
        this.parent.on(cFUndo, this.cFUndoHandler, this);
    };
    WorkbookConditionalFormat.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(setCFRule, this.setCFrulHandler);
            this.parent.off(clearCFRule, this.clearRules);
            this.parent.off(cFUndo, this.cFUndoHandler);
        }
    };
    WorkbookConditionalFormat.prototype.setCFrulHandler = function (args) {
        var conditionalFormat = args.conditionalFormat;
        var range = conditionalFormat.range;
        var sheetIndex = args.isUndoRedo ? args.sheetIdx : this.parent.getAddressInfo(range).sheetIndex;
        var sheet = getSheet(this.parent, sheetIndex);
        range = range || sheet.selectedRange;
        var indexes = getSwapRange(getRangeIndexes(range));
        conditionalFormat.range = getRangeAddress(indexes);
        if (!sheet.conditionalFormats) {
            this.parent.setSheetPropertyOnMute(sheet, 'conditionalFormats', []);
        }
        var cfrCount = sheet.conditionalFormats.length;
        sheet.conditionalFormats[cfrCount] = conditionalFormat;
        if (args.isUndoRedo && sheetIndex !== this.parent.activeSheetIndex) {
            this.parent.notify(goto, { address: sheet.name + '!' + conditionalFormat.range });
            return;
        }
        for (var rIdx = indexes[0]; rIdx <= indexes[2]; rIdx++) {
            if (!sheet.rows[rIdx]) {
                setRow(sheet, rIdx, {});
            }
            for (var cIdx = indexes[1]; cIdx <= indexes[3]; cIdx++) {
                if (!sheet.rows[rIdx].cells || !sheet.rows[rIdx].cells[cIdx]) {
                    setCell(rIdx, cIdx, sheet, {});
                }
                if (sheetIndex === this.parent.activeSheetIndex) {
                    var cell = sheet.rows[rIdx].cells[cIdx];
                    this.parent.notify(cFInitialCheck, { rowIdx: rIdx, colIdx: cIdx, cell: cell, conditionalFormat: conditionalFormat, isAction: args.isAction });
                }
            }
        }
    };
    WorkbookConditionalFormat.prototype.clearRule = function (rangeIndexes) {
        for (var rIdx = rangeIndexes[0]; rIdx <= rangeIndexes[2]; rIdx++) {
            for (var cIdx = rangeIndexes[1]; cIdx <= rangeIndexes[3]; cIdx++) {
                this.parent.notify(clearCF, { rIdx: rIdx, cIdx: cIdx });
            }
        }
    };
    WorkbookConditionalFormat.prototype.clearRules = function (args) {
        var isPublic = isNullOrUndefined(args.isPublic) ? true : false;
        var cFormats = [];
        var oldRange = [];
        var isFirst = true;
        var top;
        var bottom;
        var left;
        var right;
        var frontColIdx;
        var backColIdx;
        var topRowIdx;
        var bottomRowIdx;
        var range = args.range;
        var sheetIndex = args.isUndoRedo ? args.sheetIdx : this.parent.getAddressInfo(range).sheetIndex;
        var sheet = getSheet(this.parent, sheetIndex);
        var cFRules = sheet.conditionalFormats;
        var rangeIndexes = getRangeIndexes(range);
        if (sheetIndex === this.parent.activeSheetIndex) {
            if (cFRules && rangeIndexes[2] === sheet.rowCount - 1 && rangeIndexes[3] === sheet.colCount - 1 &&
                rangeIndexes[0] === 0 && rangeIndexes[1] === 0) {
                for (var i = 0; i < cFRules.length; i++) {
                    var rangeIndexes_1 = getRangeIndexes(cFRules[i].range);
                    this.clearRule(rangeIndexes_1);
                }
            }
            else {
                this.clearRule(rangeIndexes);
            }
        }
        if (!cFRules) {
            return;
        }
        for (var cFRulesIdx = cFRules.length - 1; cFRulesIdx >= 0; cFRulesIdx--) {
            var isPresent = false;
            var result = '';
            var cFRule = cFRules[cFRulesIdx];
            var cFRanges = cFRule.range.split(',');
            if (sheetIndex === this.parent.activeSheetIndex && (args.isClearCF || !args.isUndoRedo)) {
                for (var cFRangeIdx = 0; cFRangeIdx < cFRanges.length; cFRangeIdx++) {
                    var isFull = false;
                    var cFRange = cFRanges[cFRangeIdx];
                    var cFRangeIndexes = getRangeIndexes(cFRange);
                    topRowIdx = cFRangeIndexes[0];
                    bottomRowIdx = cFRangeIndexes[0];
                    frontColIdx = cFRangeIndexes[1];
                    backColIdx = cFRangeIndexes[1];
                    if (cFRangeIndexes[0] >= rangeIndexes[0] && cFRangeIndexes[2] <= rangeIndexes[2] &&
                        cFRangeIndexes[1] >= rangeIndexes[1] && cFRangeIndexes[3] <= rangeIndexes[3]) {
                        isFull = true;
                    }
                    for (var cFRRowIdx = cFRangeIndexes[0]; cFRRowIdx <= cFRangeIndexes[2]; cFRRowIdx++) {
                        var isTrue = 0;
                        for (var cFRColIdx = cFRangeIndexes[1]; cFRColIdx <= cFRangeIndexes[3]; cFRColIdx++) {
                            for (var rRowIdx = rangeIndexes[0]; rRowIdx <= rangeIndexes[2]; rRowIdx++) {
                                for (var rColIdx = rangeIndexes[1]; rColIdx <= rangeIndexes[3]; rColIdx++) {
                                    if (rRowIdx === cFRRowIdx && rColIdx === cFRColIdx) {
                                        var style = this.parent.getCellStyleValue(['backgroundColor', 'color'], [rRowIdx, rColIdx]);
                                        this.parent.notify(applyCellFormat, {
                                            style: style, rowIdx: rRowIdx, colIdx: rColIdx,
                                            lastCell: true, isHeightCheckNeeded: true, manualUpdate: true
                                        });
                                        isTrue = isTrue + 1;
                                        isPresent = true;
                                        if (rRowIdx === cFRangeIndexes[0]) {
                                            if (rColIdx === cFRangeIndexes[3]) {
                                                if (frontColIdx === cFRangeIndexes[1]) {
                                                    if (backColIdx === rColIdx) {
                                                        backColIdx = rColIdx;
                                                    }
                                                    else {
                                                        frontColIdx = rColIdx - 1;
                                                    }
                                                }
                                                else if (frontColIdx !== cFRangeIndexes[1] && backColIdx + 1 === rColIdx) {
                                                    backColIdx = cFRangeIndexes[1];
                                                    frontColIdx = frontColIdx - 1;
                                                }
                                                else if (frontColIdx !== cFRangeIndexes[1] && backColIdx === cFRangeIndexes[1]) {
                                                    frontColIdx = rangeIndexes[1] - 1;
                                                }
                                            }
                                            else if (rColIdx === cFRangeIndexes[1]) {
                                                if (backColIdx === cFRangeIndexes[1]) {
                                                    backColIdx = rColIdx + 1;
                                                }
                                            }
                                            else {
                                                if (frontColIdx === cFRangeIndexes[1] && backColIdx === cFRangeIndexes[1]) {
                                                    frontColIdx = rColIdx;
                                                    backColIdx = rColIdx;
                                                }
                                                else if (frontColIdx === cFRangeIndexes[1] && backColIdx !== cFRangeIndexes[1]) {
                                                    backColIdx = rColIdx + 1;
                                                }
                                                else {
                                                    backColIdx = rColIdx;
                                                }
                                            }
                                        }
                                        else {
                                            if (rColIdx === cFRangeIndexes[1]) {
                                                if (backColIdx === cFRangeIndexes[1] && cFRangeIndexes[1] !== cFRangeIndexes[3]) {
                                                    backColIdx = rColIdx + 1;
                                                }
                                            }
                                            else if (rColIdx === cFRangeIndexes[3]) {
                                                if (frontColIdx === cFRangeIndexes[1]) {
                                                    if (backColIdx === rColIdx) {
                                                        backColIdx = rColIdx;
                                                    }
                                                    else {
                                                        frontColIdx = rColIdx - 1;
                                                    }
                                                }
                                                else if (frontColIdx !== cFRangeIndexes[1] && backColIdx === cFRangeIndexes[1]) {
                                                    frontColIdx = rangeIndexes[1] - 1;
                                                }
                                                else if (frontColIdx !== cFRangeIndexes[1] && backColIdx + 1 === rColIdx) {
                                                    backColIdx = cFRangeIndexes[1];
                                                    frontColIdx = rangeIndexes[1] - 1;
                                                }
                                                else {
                                                    bottomRowIdx = rRowIdx;
                                                }
                                            }
                                            else {
                                                if (frontColIdx === cFRangeIndexes[1] && backColIdx === cFRangeIndexes[1]) {
                                                    frontColIdx = rColIdx;
                                                    backColIdx = rColIdx;
                                                }
                                                else if (backColIdx !== cFRangeIndexes[1] && frontColIdx !== cFRangeIndexes[1]) {
                                                    backColIdx = rColIdx;
                                                }
                                                else if (frontColIdx !== cFRangeIndexes[1] && backColIdx === cFRangeIndexes[1]) {
                                                    frontColIdx = rColIdx;
                                                }
                                                else {
                                                    backColIdx = rColIdx + 1;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (isTrue > 0 && !isFull) {
                            if (isFirst) {
                                top = topRowIdx;
                                bottom = bottomRowIdx;
                                left = frontColIdx;
                                right = backColIdx;
                            }
                            if (frontColIdx === cFRangeIndexes[1] && backColIdx !== cFRangeIndexes[1]) {
                                if (backColIdx === cFRangeIndexes[3]) {
                                    if (topRowIdx !== cFRRowIdx) {
                                        result = result + ' ' + getRangeAddress([topRowIdx, left, bottom, cFRangeIndexes[3]]);
                                    }
                                    if (frontColIdx === cFRangeIndexes[1] && backColIdx === cFRangeIndexes[3]) {
                                        if (cFRRowIdx === cFRangeIndexes[2]) {
                                            if (cFRangeIndexes[1] === rangeIndexes[3]) {
                                                result = result + ' ' + getRangeAddress([cFRRowIdx, backColIdx, cFRRowIdx, cFRangeIndexes[3]]);
                                            }
                                        }
                                        else {
                                            if (rangeIndexes[2] === cFRangeIndexes[0] && backColIdx !== cFRangeIndexes[3]) {
                                                result = result + ' ' + getRangeAddress([cFRRowIdx, backColIdx, cFRRowIdx, cFRangeIndexes[3]]);
                                            }
                                            topRowIdx = cFRRowIdx + 1;
                                            bottomRowIdx = cFRRowIdx + 1;
                                            backColIdx = cFRangeIndexes[1];
                                        }
                                    }
                                }
                                else if (right !== backColIdx) {
                                    result = result + ' ' + getRangeAddress([topRowIdx, right, cFRRowIdx - 1, cFRangeIndexes[3]]);
                                    if (backColIdx === cFRangeIndexes[3] && frontColIdx === cFRangeIndexes[1]) {
                                        topRowIdx = cFRRowIdx + 1;
                                        bottomRowIdx = cFRRowIdx + 1;
                                        backColIdx = cFRangeIndexes[1];
                                    }
                                    else {
                                        topRowIdx = cFRRowIdx;
                                        bottomRowIdx = cFRRowIdx;
                                    }
                                    if (backColIdx === cFRangeIndexes[3] && frontColIdx !== cFRangeIndexes[1]) {
                                        frontColIdx = cFRangeIndexes[1];
                                    }
                                }
                                else if (left !== frontColIdx) {
                                    result = result + ' ' + getRangeAddress([topRowIdx, cFRangeIndexes[1], cFRRowIdx - 1, left]);
                                    topRowIdx = cFRRowIdx + 1;
                                    bottomRowIdx = cFRRowIdx + 1;
                                    frontColIdx = cFRangeIndexes[1];
                                    backColIdx = cFRangeIndexes[1];
                                }
                                else if (cFRRowIdx === cFRangeIndexes[2]) {
                                    result = result + ' ' + getRangeAddress([topRowIdx, backColIdx, cFRRowIdx, cFRangeIndexes[3]]);
                                }
                                else {
                                    if (bottomRowIdx < cFRRowIdx || (frontColIdx === cFRangeIndexes[1] && backColIdx === cFRangeIndexes[3])) {
                                        bottomRowIdx = cFRRowIdx;
                                    }
                                }
                            }
                            else if (backColIdx === cFRangeIndexes[1] && frontColIdx !== cFRangeIndexes[1]) {
                                if (right !== backColIdx) {
                                    result = result + ' ' + getRangeAddress([topRowIdx, right, cFRRowIdx - 1, cFRangeIndexes[3]]);
                                    topRowIdx = cFRRowIdx;
                                    bottomRowIdx = cFRRowIdx;
                                }
                                if (left !== frontColIdx) {
                                    result = result + ' ' + getRangeAddress([topRowIdx, left, cFRRowIdx - 1, cFRangeIndexes[3]]);
                                    topRowIdx = cFRRowIdx;
                                    bottomRowIdx = cFRRowIdx;
                                }
                                if (cFRRowIdx === cFRangeIndexes[2]) {
                                    result = result + ' ' + getRangeAddress([topRowIdx, backColIdx, cFRRowIdx, frontColIdx]);
                                }
                                else {
                                    bottomRowIdx = cFRRowIdx;
                                }
                            }
                            else if (backColIdx !== cFRangeIndexes[1] && frontColIdx !== cFRangeIndexes[1]) {
                                if (cFRRowIdx === cFRangeIndexes[2] && cFRangeIndexes[2] === rangeIndexes[0]) {
                                    if (cFRangeIndexes[0] === cFRangeIndexes[2]) {
                                        result = result + ' ' + getRangeAddress([topRowIdx, cFRangeIndexes[1], bottomRowIdx, frontColIdx - 1]);
                                        result = result + ' ' +
                                            getRangeAddress([topRowIdx, backColIdx + 1, bottomRowIdx, cFRangeIndexes[3]]);
                                    }
                                    else {
                                        result =
                                            result + ' ' + getRangeAddress([topRowIdx, cFRangeIndexes[1], bottomRowIdx, cFRangeIndexes[3]]);
                                        result = result + ' ' +
                                            getRangeAddress([cFRangeIndexes[2], cFRangeIndexes[1], cFRangeIndexes[2], frontColIdx - 1]);
                                        result = result + ' ' +
                                            getRangeAddress([cFRangeIndexes[2], backColIdx + 1, cFRangeIndexes[2], cFRangeIndexes[3]]);
                                    }
                                }
                                else if (cFRRowIdx === cFRangeIndexes[2]) {
                                    result = result + ' ' + getRangeAddress([topRowIdx, cFRangeIndexes[1], cFRRowIdx, frontColIdx - 1]);
                                    result = result + ' ' + getRangeAddress([topRowIdx, backColIdx + 1, cFRRowIdx, cFRangeIndexes[3]]);
                                }
                                else {
                                    if (left === cFRangeIndexes[1] && right === cFRangeIndexes[1]) {
                                        result = result + ' ' + getRangeAddress([topRowIdx, left, bottomRowIdx, cFRangeIndexes[3]]);
                                        topRowIdx = cFRRowIdx;
                                    }
                                    bottomRowIdx = cFRRowIdx;
                                }
                            }
                            else if (frontColIdx === cFRangeIndexes[1] && backColIdx === cFRangeIndexes[1]) {
                                if (rangeIndexes[2] !== cFRangeIndexes[0]) {
                                    if (cFRangeIndexes[2] >= rangeIndexes[2] && cFRRowIdx > rangeIndexes[2]) {
                                        result = result + ' ' + getRangeAddress([topRowIdx, frontColIdx, bottomRowIdx, cFRangeIndexes[3]]);
                                    }
                                    if (cFRangeIndexes[1] === cFRangeIndexes[3] &&
                                        cFRRowIdx <= cFRangeIndexes[2] && top !== cFRangeIndexes[2] && cFRRowIdx !== top) {
                                        result = result + ' ' + getRangeAddress([topRowIdx, frontColIdx, bottomRowIdx, cFRangeIndexes[3]]);
                                    }
                                    if (cFRangeIndexes[1] === cFRangeIndexes[3]) {
                                        topRowIdx = cFRRowIdx + 1;
                                        bottomRowIdx = cFRRowIdx + 1;
                                    }
                                }
                                else {
                                    if (cFRRowIdx === cFRangeIndexes[2] || cFRRowIdx === cFRangeIndexes[0] &&
                                        cFRangeIndexes[1] !== cFRangeIndexes[3]) {
                                        result = result + ' ' + getRangeAddress([topRowIdx, frontColIdx, bottomRowIdx, backColIdx]);
                                    }
                                    topRowIdx = cFRRowIdx + 1;
                                    bottomRowIdx = cFRRowIdx + 1;
                                }
                                if (cFRRowIdx === cFRangeIndexes[2] && cFRangeIndexes[0] !== cFRangeIndexes[2] &&
                                    cFRangeIndexes[1] !== cFRangeIndexes[3]) {
                                    result = result + ' ' + getRangeAddress([cFRRowIdx, frontColIdx, cFRRowIdx, backColIdx]);
                                }
                            }
                            if (!isFirst) {
                                top = topRowIdx;
                                bottom = bottomRowIdx <= cFRangeIndexes[2] ? bottomRowIdx : cFRangeIndexes[2];
                                left = frontColIdx;
                                right = backColIdx <= cFRangeIndexes[3] ? backColIdx : cFRangeIndexes[3];
                            }
                            isFirst = false;
                        }
                        else if (!isFull) {
                            if (isFirst) {
                                top = topRowIdx;
                                bottom = bottomRowIdx;
                                left = frontColIdx;
                                right = backColIdx;
                            }
                            if (frontColIdx === cFRangeIndexes[1] && backColIdx === cFRangeIndexes[1]) {
                                if (cFRRowIdx === cFRangeIndexes[2]) {
                                    result = result + ' ' + getRangeAddress([topRowIdx, frontColIdx, cFRRowIdx, cFRangeIndexes[3]]);
                                }
                                bottomRowIdx = cFRRowIdx;
                            }
                            if (backColIdx !== cFRangeIndexes[1] && frontColIdx !== cFRangeIndexes[1]) {
                                result = result + ' ' + getRangeAddress([topRowIdx, cFRangeIndexes[1], (cFRRowIdx - 1), frontColIdx - 1]);
                                result = result + ' ' + getRangeAddress([topRowIdx, backColIdx + 1, (cFRRowIdx - 1), cFRangeIndexes[3]]);
                                topRowIdx = cFRRowIdx;
                                bottomRowIdx = cFRRowIdx;
                                frontColIdx = cFRangeIndexes[1];
                                backColIdx = cFRangeIndexes[1];
                            }
                            if (backColIdx !== cFRangeIndexes[1] && frontColIdx === cFRangeIndexes[1]) {
                                result = result + ' ' + getRangeAddress([topRowIdx, backColIdx, (cFRRowIdx - 1), cFRangeIndexes[3]]);
                                topRowIdx = cFRRowIdx;
                                bottomRowIdx = cFRRowIdx;
                                frontColIdx = cFRangeIndexes[1];
                                backColIdx = cFRangeIndexes[1];
                            }
                            if (frontColIdx !== cFRangeIndexes[1] && backColIdx === cFRangeIndexes[1]) {
                                result = result + ' ' + getRangeAddress([topRowIdx, backColIdx, (cFRRowIdx - 1), frontColIdx]);
                                topRowIdx = cFRRowIdx;
                                bottomRowIdx = cFRRowIdx;
                                frontColIdx = cFRangeIndexes[1];
                                backColIdx = cFRangeIndexes[1];
                            }
                            if (!isFirst) {
                                top = topRowIdx;
                                bottom = bottomRowIdx <= cFRangeIndexes[2] ? bottomRowIdx : cFRangeIndexes[2];
                                left = frontColIdx;
                                right = backColIdx <= cFRangeIndexes[3] ? backColIdx : cFRangeIndexes[3];
                            }
                            isFirst = false;
                        }
                    }
                }
            }
            if (result === '') {
                oldRange.push(sheet.conditionalFormats[cFRulesIdx].range);
                sheet.conditionalFormats.splice(cFRulesIdx, 1);
            }
            else {
                oldRange.push(sheet.conditionalFormats[cFRulesIdx].range);
                sheet.conditionalFormats[cFRulesIdx].range = result.trim().replace(' ', ',');
            }
            if (isPresent && !isPublic) {
                cFRule.range = result.trim().replace(' ', ',');
                cFormats.push(cFRule);
            }
            if (args.isUndoRedo) {
                if (this.parent.activeSheetIndex !== args.sheetIdx) {
                    this.parent.notify(goto, { address: sheet.name + '!' + args.range });
                }
                break;
            }
        }
        if (!isPublic) {
            var eventArgs = { cFormats: cFormats, oldRange: oldRange, selectedRange: range, sheetIdx: sheetIndex };
            this.parent.notify(completeAction, { eventArgs: eventArgs, action: 'clearCF' });
        }
        if (!args.isclearFormat) {
            this.parent.notify(addHighlight, { range: range, isclearFormat: true });
        }
    };
    WorkbookConditionalFormat.prototype.cFUndoHandler = function (args) {
        if (args.sheetIdx === this.parent.activeSheetIndex) {
            var cFRule = args.conditionalFormat;
            var cFRanges = cFRule.range.split(',');
            var sheet = getSheet(this.parent, args.sheetIdx);
            for (var cFRangeIdx = 0; cFRangeIdx < cFRanges.length; cFRangeIdx++) {
                var cFRange = cFRanges[cFRangeIdx];
                var cFRangeIndexes = getRangeIndexes(cFRange);
                for (var cFRRowIdx = cFRangeIndexes[0]; cFRRowIdx <= cFRangeIndexes[2]; cFRRowIdx++) {
                    for (var cFRColIdx = cFRangeIndexes[1]; cFRColIdx <= cFRangeIndexes[3]; cFRColIdx++) {
                        var cell = sheet.rows[cFRRowIdx].cells[cFRColIdx];
                        this.parent.notify(cFInitialCheck, {
                            rowIdx: cFRRowIdx, colIdx: cFRColIdx, cell: cell, conditionalFormat: cFRule, isAction: true
                        });
                    }
                }
            }
        }
    };
    /**
     * Gets the module name.
     *
     * @returns {void} string
     */
    WorkbookConditionalFormat.prototype.getModuleName = function () {
        return 'workbookConditionalFormatting';
    };
    return WorkbookConditionalFormat;
}());

/**
 * WorkbookAutoFill module allows to perform auto fill functionalities.
 */
var WorkbookAutoFill = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for the workbook AutoFill module.
     *
     * @param {Workbook} parent - Specifies the workbook.
     * @private
     */
    function WorkbookAutoFill(parent) {
        this.uniqueOBracket = String.fromCharCode(129);
        this.uniqueCBracket = String.fromCharCode(130);
        this.uniqueDOperator = String.fromCharCode(136);
        this.uniqueModOperator = String.fromCharCode(137);
        this.uniqueCSeparator = String.fromCharCode(131);
        this.uniqueCOperator = String.fromCharCode(132);
        this.uniqueExpOperator = String.fromCharCode(140);
        this.uniqueGTOperator = String.fromCharCode(141);
        this.uniqueConcateOperator = String.fromCharCode(138);
        this.uniqueEqualOperator = String.fromCharCode(139);
        this.uniqueLTOperator = String.fromCharCode(142);
        this.uniqueMOperator = String.fromCharCode(135);
        this.uniquePOperator = String.fromCharCode(133);
        this.uniqueSOperator = String.fromCharCode(134);
        this.parent = parent;
        this.addEventListener();
    }
    WorkbookAutoFill.prototype.getFillInfo = function (options) {
        var val = '';
        var isStringType = true;
        var fillType = 'CopyCells';
        var disableItems = [];
        var isVFill = ['Down', 'Up'].indexOf(options.direction) > -1;
        var data = this.getRangeData({ range: options.dataRange, sheetIdx: this.parent.activeSheetIndex });
        var len = data.join().replace(/,/g, '').length;
        var i = this.isRange(options.dataRange) && len ? data.length : 1;
        while (i--) {
            val = data[i] && !isNullOrUndefined(data[i].value) ? data[i].value : '';
            if (isNumber(val) || checkIsFormula(val) || isNumber(val[val.length - 1])) {
                isStringType = false;
                fillType = this.parent.autoFillSettings.fillType;
                break;
            }
        }
        if (!len || isStringType) {
            disableItems.push('Fill Series');
            fillType = (options.fillType === 'FillSeries') ? fillType : options.fillType;
        }
        if (!isVFill || (isVFill && options.dataRange[1] !== options.dataRange[3])) {
            disableItems.push('Flash Fill'); // for flash fill option
        }
        return { fillType: fillType, disableItems: disableItems };
    };
    WorkbookAutoFill.prototype.isRange = function (range) {
        return range && (range[0] !== range[2] || range[1] !== range[3]);
    };
    WorkbookAutoFill.prototype.autoFill = function (options) {
        if (!options.dataRange || !options.fillRange || !options.direction || !this.parent.allowEditing ||
            (this.parent.getActiveSheet().isProtected && options.isLockedCell)) {
            return;
        }
        var autoFillOptions = {
            dataRange: null, fillRange: null, fillType: null, direction: null
        };
        var dataRangeIndices = getSwapRange(getRangeIndexes(options.dataRange));
        var fillRangeIndices = getSwapRange(getRangeIndexes(options.fillRange));
        this.fillInfo = this.getFillInfo({ dataRange: dataRangeIndices, fillRange: fillRangeIndices, fillType: options.fillType,
            direction: options.direction });
        autoFillOptions.dataRange = dataRangeIndices;
        autoFillOptions.fillRange = fillRangeIndices;
        autoFillOptions.direction = options.direction;
        autoFillOptions.fillType = options.fillType || this.fillInfo.fillType;
        this.fillInfo.fillType = options.isFillOptClick ? options.fillType : this.fillInfo.fillType;
        switch (options.fillType) {
            case 'FillSeries':
            case 'FillWithoutFormatting':
                this.fillSeries(autoFillOptions);
                break;
            case 'CopyCells':
            case 'FillFormattingOnly':
                this.copyCells(autoFillOptions);
                break;
        }
    };
    WorkbookAutoFill.prototype.fillSeries = function (options) {
        var val;
        var plen;
        var patterns;
        var patrn;
        var pRanges;
        var patrnRange;
        var fillRange;
        var data;
        var temp;
        var dlen;
        var j;
        var k;
        var l;
        var tlen;
        var tot;
        var hasRef;
        var cells;
        var clen;
        var cellIdx;
        var cellProps = {};
        var i = 0;
        var prevCellData;
        var sheet = this.parent.getActiveSheet();
        var dminr = options.dataRange[0];
        var dminc = options.dataRange[1];
        var dmaxr = options.dataRange[2];
        var dmaxc = options.dataRange[3];
        var fminr = options.fillRange[0];
        var fminc = options.fillRange[1];
        var fmaxr = options.fillRange[2];
        var fmaxc = options.fillRange[3];
        var isVFill = ['Down', 'Up'].indexOf(options.direction) > -1;
        var isRFill = ['Up', 'Left'].indexOf(options.direction) > -1;
        var len = isVFill ? dmaxc - dminc : dmaxr - dminr;
        var withFrmt = options.fillType === 'FillSeries';
        while (i <= len) {
            pRanges = this.updateFillValues(isVFill, dminr, dminc, dmaxr, dmaxc, fminr, fminc, fmaxr, fmaxc, i);
            patrnRange = pRanges.patternRange;
            fillRange = pRanges.fillRange;
            patterns = this.getPattern(patrnRange, { isRFill: isRFill, isVFill: isVFill });
            data = this.getRangeData({ range: patrnRange, sheetIdx: this.parent.activeSheetIndex });
            dlen = data.length;
            if (!patterns) {
                return;
            }
            plen = patterns.length;
            cells = this.getSelectedRange(sheet, { rowIndex: fillRange[0], colIndex: fillRange[1] }, { rowIndex: fillRange[2],
                colIndex: fillRange[3] });
            clen = cells.length;
            if (isRFill) {
                cells = cells.reverse();
                patterns = patterns.reverse();
                patterns = this.ensurePattern(patterns);
                data = data.reverse();
            }
            j = 0;
            while (j < clen) {
                cellIdx = cells[j];
                patrn = patterns[j % plen];
                if (isNumber(patrn)) {
                    patrn = patterns[patrn];
                }
                l = j % dlen;
                switch (patrn['type']) {
                    case 'number':
                        val = (this.round(patrn['regVal'].a + (patrn['regVal'].b * patrn['i']), 5)).toString();
                        patrn = patrn;
                        if (patrn.dataVal) {
                            if (patrn.copy === undefined) {
                                patrn.copy = patrn.val.length > 2;
                                if (patrn.copy) {
                                    for (var m = 2; m < patrn.val.length; m++) {
                                        patrn.copy = Math.abs(this.round(patrn['regVal'].a + (patrn['regVal'].b * m), 5)) !== patrn.val[m];
                                        if (patrn.copy) {
                                            break;
                                        }
                                    }
                                }
                            }
                            val = patrn.copy ? (data[l] && !isNullOrUndefined(data[l].value) ? data[l].value : '') :
                                (patrn.start ? Math.abs(Number(val)) + patrn.dataVal : patrn.dataVal + Math.abs(Number(val)));
                        }
                        if (isRFill) {
                            patrn['i']--;
                        }
                        else {
                            patrn['i']++;
                        }
                        break;
                    case 'string':
                        // eslint-disable-next-line no-case-declarations
                        var newVal = patrn['i'] % patrn['val'].length;
                        val = patrn['val'][newVal];
                        patrn['i']++;
                        break;
                    case 'formula':
                        hasRef = false;
                        val = '=';
                        k = 0;
                        tlen = patrn['val'].length;
                        while (k < tlen) {
                            temp = patrn['val'][k];
                            if (typeof temp === 'object') {
                                hasRef = true;
                                tot = this.round(temp['a'] + (temp['b'] * patrn['i']), 5);
                                if (tot < 1) {
                                    val += '#REF!';
                                }
                                else {
                                    val += isVFill ? temp['c'] + (temp['b'] ? tot : '$' + tot) : (temp['b'] ? getColumnHeaderText(tot) : '$' + getColumnHeaderText(tot)) + temp['c'];
                                }
                            }
                            else {
                                val += temp;
                            }
                            k++;
                        }
                        if (hasRef && isRFill) {
                            patrn['i']--;
                        }
                        else {
                            patrn['i']++;
                        }
                        break;
                    case 'time':
                        val = (patrn['regVal'].a + (patrn['regVal'].b * patrn['i'])).toString();
                        if (isRFill) {
                            patrn['i']--;
                        }
                        else {
                            patrn['i']++;
                        }
                        break;
                }
                prevCellData = getCell(cellIdx.rowIndex, cellIdx.colIndex, sheet, false, true);
                if (withFrmt) {
                    Object.assign(cellProps, data[l], null, true);
                }
                else {
                    cellProps.style = prevCellData.style;
                    cellProps.format = prevCellData.format;
                    cellProps.wrap = prevCellData.wrap;
                    cellProps.rowSpan = prevCellData.rowSpan;
                    cellProps.colSpan = prevCellData.colSpan;
                }
                cellProps.value = val;
                if (checkIsFormula(val)) {
                    cellProps.formula = val;
                }
                updateCell(this.parent, sheet, { cell: cellProps, rowIdx: cellIdx.rowIndex, colIdx: cellIdx.colIndex, valChange: true,
                    uiRefresh: true, pvtExtend: true });
                cellProps = {};
                j++;
            }
            i++;
        }
    };
    WorkbookAutoFill.prototype.copyCells = function (options) {
        var i = 0;
        var j;
        var k;
        var patrnRange;
        var fillRange;
        var pRanges;
        var data;
        var dlen;
        var cells;
        var clen;
        var cellProperty = {};
        var cellIdx;
        var dMinR = options.dataRange[0];
        var dMinC = options.dataRange[1];
        var dMaxR = options.dataRange[2];
        var dMaxC = options.dataRange[3];
        var fMinR = options.fillRange[0];
        var fMinC = options.fillRange[1];
        var fMaxR = options.fillRange[2];
        var fMaxC = options.fillRange[3];
        var isVFill = ['Down', 'Up'].indexOf(options.direction) > -1;
        var isRFill = ['Up', 'Left'].indexOf(options.direction) > -1;
        var len = isVFill ? dMaxC - dMinC : dMaxR - dMinR;
        var sheet = this.parent.getActiveSheet();
        var formatOnly = options.fillType === 'FillFormattingOnly';
        var prevCellData;
        while (i <= len) {
            pRanges = this.updateFillValues(isVFill, dMinR, dMinC, dMaxR, dMaxC, fMinR, fMinC, fMaxR, fMaxC, i);
            patrnRange = pRanges.patternRange;
            fillRange = pRanges.fillRange;
            data = this.getRangeData({ range: patrnRange, sheetIdx: this.parent.activeSheetIndex });
            dlen = data.length;
            cells = this.getSelectedRange(sheet, { rowIndex: fillRange[0], colIndex: fillRange[1] }, { rowIndex: fillRange[2], colIndex: fillRange[3] });
            clen = cells.length;
            j = 0;
            if (isRFill) {
                cells = cells.reverse();
            }
            if (formatOnly) {
                while (j < clen) {
                    k = j % dlen;
                    cellIdx = cells[j];
                    prevCellData = getCell(cellIdx.rowIndex, cellIdx.colIndex, sheet);
                    Object.assign(cellProperty, data[k], null, true);
                    cellProperty.value = prevCellData.value;
                    cellProperty.formula = prevCellData.formula;
                    updateCell(this.parent, sheet, { cell: cellProperty, rowIdx: cellIdx.rowIndex, colIdx: cellIdx.colIndex, valChange: true,
                        uiRefresh: true, pvtExtend: true });
                    cellProperty = {};
                    j++;
                }
            }
            else {
                while (j < clen) {
                    k = j % dlen;
                    cellIdx = cells[j];
                    Object.assign(cellProperty, data[k], null, true);
                    updateCell(this.parent, sheet, { cell: cellProperty, rowIdx: cellIdx.rowIndex, colIdx: cellIdx.colIndex, valChange: true,
                        uiRefresh: true, pvtExtend: true });
                    cellProperty = {};
                    j++;
                }
            }
            i++;
        }
    };
    WorkbookAutoFill.prototype.updateFillValues = function (isVFill, dminr, dminc, dmaxr, dmaxc, fminr, fminc, fmaxr, fmaxc, i) {
        var pStart;
        var pEnd;
        var fStart;
        var fEnd;
        if (isVFill) {
            pStart = { rowIndex: dminr, colIndex: dminc + i };
            pEnd = { rowIndex: dmaxr, colIndex: dminc + i };
            fStart = { rowIndex: fminr, colIndex: fminc + i };
            fEnd = { rowIndex: fmaxr, colIndex: fminc + i };
        }
        else {
            pStart = { rowIndex: dminr + i, colIndex: dminc };
            pEnd = { rowIndex: dminr + i, colIndex: dmaxc };
            fStart = { rowIndex: fminr + i, colIndex: fminc };
            fEnd = { rowIndex: fminr + i, colIndex: fmaxc };
        }
        var patternRange = [pStart.rowIndex, pStart.colIndex, pEnd.rowIndex, pEnd.colIndex];
        var fillRange = [fStart.rowIndex, fStart.colIndex, fEnd.rowIndex, fEnd.colIndex];
        return { patternRange: patternRange, fillRange: fillRange };
    };
    WorkbookAutoFill.prototype.getType = function (val, isTime) {
        var type;
        if (isTime) {
            type = 'time';
        }
        else if (checkIsFormula(val)) {
            type = 'formula';
        }
        else if (isNumber(val)) {
            type = 'number';
        }
        return type || 'string';
    };
    WorkbookAutoFill.prototype.getDataPattern = function (range) {
        var val;
        var type;
        var i = 0;
        var obj = { val: null, type: null };
        var patrn = [];
        var data = this.getRangeData({ range: range, sheetIdx: this.parent.activeSheetIndex });
        var dlen = data.length;
        var isStartNum;
        if (dlen) {
            var count = void 0;
            var dataVal = void 0;
            var minusOperator = function (data) {
                return !isStartNum && data && data[data.length - 1] === '-' ? data.slice(0, data.length - 1) : data;
            };
            while (i < dlen) {
                val = data[i] ? (data[i].formula ? data[i].formula : (isNullOrUndefined(data[i].value) ? '' : data[i].value)) : '';
                type = this.getType(val, data[i] && data[i].format === 'h:mm:ss AM/PM');
                dataVal = '';
                if (type === 'string') {
                    isStartNum = false;
                    if (isNumber(val[0])) {
                        count = 0;
                        do {
                            count++;
                        } while (isNumber(val[count]));
                        if (val[count] === ' ') {
                            isStartNum = true;
                            type = 'number';
                            dataVal = val.slice(count, val.length);
                            val = Number(val.slice(0, count));
                        }
                    }
                    val = val;
                    if (!isStartNum && isNumber(val[val.length - 1])) {
                        count = 1;
                        do {
                            count++;
                        } while (isNumber(val[val.length - count]));
                        type = 'number';
                        count -= 1;
                        dataVal = val.slice(0, val.length - count);
                        val = Number(val.slice(val.length - count, val.length));
                        if (obj.dataVal && obj.dataVal !== dataVal && obj.dataVal === minusOperator(dataVal)) {
                            dataVal = obj.dataVal;
                        }
                    }
                }
                if (i === 0) {
                    obj = { val: [val], type: type };
                    if (dataVal) {
                        obj.dataVal = dataVal;
                        obj.start = isStartNum;
                    }
                }
                else if (type === obj.type && (!obj.dataVal || minusOperator(obj.dataVal) === minusOperator(dataVal))) {
                    obj.val.push(val);
                }
                else {
                    patrn.push(obj);
                    obj = { val: [val], type: type };
                    if (dataVal) {
                        obj.dataVal = dataVal;
                        obj.start = isStartNum;
                    }
                }
                i++;
            }
            patrn.push(obj);
            return patrn;
        }
        else {
            return [{ val: null, type: null }];
        }
    };
    WorkbookAutoFill.prototype.getPredictionValue = function (args, isTime) {
        var i = 0;
        var sumx = 0;
        var sumy = 0;
        var sumxy = 0;
        var sumxx = 0;
        var a = 0;
        var b = 0;
        var n = args.length;
        while (i < n) {
            sumx = sumx + i;
            sumy = sumy + Number(args[i]);
            sumxy = sumxy + (i * Number(args[i]));
            sumxx = sumxx + (i * i);
            i++;
        }
        if (!isTime) {
            a = this.round(((sumy * sumxx) - (sumx * sumxy)) / ((n * sumxx) - (sumx * sumx)), 5);
            b = this.round(((n * sumxy) - (sumx * sumy)) / ((n * sumxx) - (sumx * sumx)), 5);
        }
        else {
            a = ((sumy * sumxx) - (sumx * sumxy)) / ((n * sumxx) - (sumx * sumx));
            b = ((n * sumxy) - (sumx * sumy)) / ((n * sumxx) - (sumx * sumx));
        }
        return { a: a, b: b };
    };
    WorkbookAutoFill.prototype.getPattern = function (range, options) {
        var j;
        var idx;
        var temp;
        var regVal;
        var diff;
        var len;
        var i = 0;
        var pattern = [];
        var patrns = this.getDataPattern(range);
        var plen = patrns.length;
        var patrn;
        if (patrns) {
            while (i < plen) {
                patrn = patrns[i];
                switch (patrn.type) {
                    case 'number':
                        idx = pattern.length;
                        len = patrn.val.length;
                        diff = options.isRFill ? -1 : len;
                        if (len === 1) {
                            var newVal = parseFloat(patrn.val[0]) + 1;
                            patrn.val.push(newVal);
                        }
                        regVal = this.getPredictionValue(patrn.dataVal ? patrn.val.slice(0, 2) : patrn.val);
                        temp = { regVal: regVal, type: patrn.type, i: diff };
                        if (patrn.dataVal) {
                            temp.dataVal = patrn.dataVal;
                            temp.val = patrn.val;
                            temp.start = patrn.start;
                        }
                        pattern.push(temp);
                        j = 1;
                        while (j < len) {
                            pattern.push(idx);
                            j++;
                        }
                        break;
                    case 'string':
                        idx = pattern.length;
                        temp = { val: patrn.val, type: patrn.type, i: 0 };
                        pattern.push(temp);
                        j = 1;
                        len = patrn.val.length;
                        while (j < len) {
                            pattern.push(idx);
                            j++;
                        }
                        break;
                    case 'formula':
                        len = patrn.val.length;
                        patrn = this.getFormulaPattern(patrn.val, options);
                        diff = options.isRFill ? -1 : len;
                        if (patrn.isInPattern) {
                            idx = pattern.length;
                            temp = { val: patrn.val, type: 'formula', i: diff };
                            pattern.push(temp);
                            j = 1;
                            while (j < len) {
                                pattern.push(idx);
                                j++;
                            }
                        }
                        else {
                            j = 0;
                            diff = options.isRFill ? -1 : 1;
                            while (j < len) {
                                pattern.push({ val: patrn.val[j], type: 'formula', i: diff });
                                j++;
                            }
                        }
                        break;
                    case 'time':
                        idx = pattern.length;
                        len = patrn.val.length;
                        diff = options.isRFill ? -1 : 1;
                        if (len === 1) {
                            var oldTimeVal = intToDate(patrn.val[0]);
                            var newTimeVal = dateToInt(new Date(oldTimeVal.getTime() + 60 * 60000), true);
                            patrn.val.push(newTimeVal);
                        }
                        regVal = this.getPredictionValue(patrn.val, true);
                        temp = { regVal: regVal, type: patrn.type, i: diff };
                        pattern.push(temp);
                        j = 1;
                        while (j < len) {
                            pattern.push(idx);
                            j++;
                        }
                        break;
                    default:
                        break;
                }
                i++;
            }
            return pattern;
        }
        else {
            return [{ regVal: null }];
        }
    };
    WorkbookAutoFill.prototype.isCellReference = function (text) {
        return /^[a-z]{1,3}\d{1,7}$/gi.test(text) ? 'relative' : (/^\$[a-z]{1,3}\$\d{1,7}$/gi.test(text) ? 'absolute' : (/^((\$[a-z]{1,3})\d{1,7}|[a-z]{1,3}(\$\d{1,7}))$/gi.test(text) ? 'mixed' : false));
    };
    WorkbookAutoFill.prototype.round = function (value, round) {
        return Number(Math.round(parseFloat(value + 'e' + round)) + 'e-' + round);
    };
    WorkbookAutoFill.prototype.getRangeData = function (options) {
        var arr = [];
        var sheet = this.parent.getActiveSheet();
        var minR = options.range[0];
        var minC = options.range[1];
        var maxR = options.range[2];
        var maxC = options.range[3];
        var minCol = minC;
        var cell;
        while (minR <= maxR) {
            if (isHiddenRow(sheet, minR)) {
                minR++;
                continue;
            }
            minC = minCol;
            while (minC <= maxC) {
                if (isHiddenCol(sheet, minC)) {
                    minC++;
                    continue;
                }
                cell = getCell(minR, minC, sheet);
                arr.push(cell);
                minC++;
            }
            minR++;
        }
        return arr;
    };
    WorkbookAutoFill.prototype.getFormulaPattern = function (data, options) {
        var j;
        var temp;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var patrn;
        var patrns = [];
        var i = 0;
        var len = data.length;
        var cRfrType;
        while (i < len) {
            patrns.push(this.parseFormula(data[i]));
            i++;
        }
        var isInPatrn = this.isInPattern(patrns, options.isVFill);
        if (isInPatrn) {
            patrn = patrns[0];
            i = patrn.length;
            while (i--) {
                temp = patrn[i];
                cRfrType = this.isCellReference(temp);
                if (cRfrType && (cRfrType !== 'absolute')) {
                    patrn[i] = this.getCellRefPrediction(temp, options, null, cRfrType);
                }
            }
            return { isInPattern: isInPatrn, val: patrn };
        }
        else {
            i = 0;
            while (i < len) {
                patrn = patrns[i];
                j = patrn.length;
                while (j--) {
                    temp = patrn[j];
                    cRfrType = this.isCellReference(temp);
                    if (cRfrType && (cRfrType !== 'absolute')) {
                        patrns[i][j] = this.getCellRefPrediction(temp, options, len, cRfrType);
                    }
                }
                i++;
            }
            return { isInPattern: isInPatrn, val: patrns };
        }
    };
    WorkbookAutoFill.prototype.generateColCount = function (text) {
        var colCount = 0;
        var newText = text.split('').reverse().join('');
        for (var i = newText.length - 1; i >= 0; i--) {
            colCount += (text[i].charCodeAt(parseInt(newText[i], 10)) - 64) * (Math.pow(26, i));
        }
        return colCount;
    };
    WorkbookAutoFill.prototype.getCellRefPrediction = function (text, options, length, rfrType) {
        text = text.toUpperCase();
        var eStr = '';
        var aRegx = new RegExp('[a-z$]', 'gi');
        var nRegx = new RegExp('[0-9$]', 'g');
        var str = options.isVFill ? text.replace(nRegx, eStr) : text.replace(aRegx, eStr);
        var temp = options.isVFill ? Number(text.replace(aRegx, eStr)) :
            this.generateColCount(text.replace(nRegx, eStr));
        var arr = [temp];
        var isColAbslt = text[0] === '$';
        if (length && length !== 1) {
            arr.push(temp + length);
        }
        else {
            arr.push(temp + 1);
        }
        temp = this.getPredictionValue(arr);
        if (rfrType && (rfrType === 'mixed')) {
            if (isColAbslt === options.isVFill) {
                str = '$' + str;
            }
            else {
                temp['b'] = 0;
            }
        }
        temp['c'] = str;
        return temp;
    };
    WorkbookAutoFill.prototype.isInPattern = function (patrn, isVFill) {
        var oldPatrn;
        var olen;
        var newPatrn;
        var nlen;
        var oldStr;
        var newStr;
        var oldInt;
        var newInt;
        var eStr = '';
        var i = 0;
        var j = 1;
        var plen = patrn.length;
        var nregx = new RegExp('[0-9$]', 'g');
        var aregx = new RegExp('[a-z$]', 'gi');
        if (plen === 1) {
            return false;
        }
        while (j < plen) {
            oldPatrn = patrn[i];
            newPatrn = patrn[j];
            olen = oldPatrn.length;
            nlen = newPatrn.length;
            if (olen !== nlen) {
                return false;
            }
            else {
                while (olen--) {
                    oldStr = oldPatrn[olen];
                    newStr = newPatrn[olen];
                    if (this.isCellReference(oldStr) === this.isCellReference(newStr)) {
                        if (isVFill) {
                            oldInt = Number(oldStr.replace(aregx, eStr));
                            newInt = Number(newStr.replace(aregx, eStr));
                        }
                        else {
                            oldInt = this.generateColCount(oldStr.replace(nregx, eStr));
                            newInt = this.generateColCount(newStr.replace(nregx, eStr));
                        }
                        if (oldInt !== newInt - 1) {
                            return false;
                        }
                    }
                    else if (oldStr !== newStr) {
                        return false;
                    }
                }
            }
            i++;
            j++;
        }
        return true;
    };
    WorkbookAutoFill.prototype.parseFormula = function (formula) {
        // eslint-disable-next-line @typescript-eslint/tslint/config
        var temp;
        var str;
        var i = 0;
        var arrValues = [];
        formula = this.markSpecialChar(formula.replace('=', ''));
        formula = formula.split(/\(|\)|=|\^|>|<|,|:|\+|-|\*|\/|%|&/g);
        var len = formula.length;
        while (i < len) {
            temp = formula[i];
            if (!temp) {
                i++;
                continue;
            }
            if (temp.length === 1) {
                arrValues.push(this.isUniqueChar(temp) ? this.getUniqueCharVal(temp) : temp);
            }
            else {
                str = temp[0];
                if (temp.indexOf('!') > 0) {
                    if (this.isUniqueChar(str)) {
                        arrValues.push(this.getUniqueCharVal(str));
                        temp = temp.substr(1);
                    }
                    str = temp.indexOf('!') + 1;
                    arrValues.push(temp.substr(0, str));
                    arrValues.push(temp.substr(str));
                }
                else if (this.isUniqueChar(str)) {
                    arrValues.push(this.getUniqueCharVal(str));
                    arrValues.push(temp.substr(1));
                }
                else {
                    arrValues.push(temp);
                }
            }
            i++;
        }
        return arrValues;
    };
    WorkbookAutoFill.prototype.getUniqueCharVal = function (str) {
        switch (str) {
            case this.uniqueSOperator:
                return '-';
            case this.uniqueOBracket:
                return '(';
            case this.uniqueCOperator:
                return ':';
            case this.uniqueCBracket:
                return ')';
            case this.uniqueCSeparator:
                return ',';
            case this.uniqueGTOperator:
                return '>';
            case this.uniqueLTOperator:
                return '<';
            case this.uniqueMOperator:
                return '*';
            case this.uniqueDOperator:
                return '/';
            case this.uniqueConcateOperator:
                return '&';
            case this.uniqueEqualOperator:
                return '=';
            case this.uniqueExpOperator:
                return '^';
            case this.uniqueModOperator:
                return '%';
            case this.uniquePOperator:
                return '+';
        }
        return '';
    };
    WorkbookAutoFill.prototype.isUniqueChar = function (str) {
        var code = str.charCodeAt(parseInt(str, 10));
        return code >= 129 && code <= 142;
    };
    WorkbookAutoFill.prototype.markSpecialChar = function (formulaValue) {
        formulaValue = formulaValue.replace(/\(/g, '(' + this.uniqueOBracket).replace(/\)/g, ')' + this.uniqueCBracket);
        formulaValue = formulaValue.replace(/,/g, ',' + this.uniqueCSeparator).replace(/:/g, ':' + this.uniqueCOperator);
        formulaValue = formulaValue.replace(/\+/g, '+' + this.uniquePOperator).replace(/-/g, '-' + this.uniqueSOperator);
        formulaValue = formulaValue.replace(/\*/g, '*' + this.uniqueMOperator).replace(/\//g, '/' + this.uniqueDOperator);
        formulaValue = formulaValue.replace(/&/g, '&' + this.uniqueConcateOperator);
        formulaValue = formulaValue.replace(/=/g, '=' + this.uniqueEqualOperator);
        formulaValue = formulaValue.replace(/\^/g, '^' + this.uniqueExpOperator);
        formulaValue = formulaValue.replace(/>/g, '>' + this.uniqueGTOperator).replace(/</g, '<' + this.uniqueLTOperator);
        return formulaValue.replace(/%/g, '%' + this.uniqueModOperator);
    };
    WorkbookAutoFill.prototype.ensurePattern = function (patterns) {
        var patrn;
        var idx = -1;
        var i = patterns.length;
        while (i--) {
            patrn = patterns[i];
            if (typeof (patrn) === 'object') {
                idx = i;
                if (patrn.type === 'string') {
                    patrn.val = patrn.val.reverse();
                }
            }
            else {
                patterns[i] = idx;
            }
        }
        return patterns;
    };
    WorkbookAutoFill.prototype.getSelectedRange = function (sheet, startcell, endcell) {
        var i;
        var k;
        var l;
        var arr = [];
        var range = getSwapRange([startcell.rowIndex, startcell.colIndex, endcell.rowIndex, endcell.colIndex]);
        i = range[0];
        var j = range[2];
        while (i <= j) {
            if ((getRow(sheet, i) || {}).isFiltered) {
                i++;
                continue;
            }
            k = range[1];
            l = range[3];
            while (k <= l) {
                arr.push({ rowIndex: i, colIndex: k });
                k++;
            }
            i++;
        }
        return arr;
    };
    WorkbookAutoFill.prototype.getFillType = function (args) {
        args.fillType = this.fillInfo.fillType;
        args.disableItems = this.fillInfo.disableItems;
        return args;
    };
    WorkbookAutoFill.prototype.addEventListener = function () {
        this.parent.on(setAutoFill, this.autoFill, this);
        this.parent.on(getFillInfo, this.getFillType, this);
    };
    /**
     * Destroy workbook AutoFill module.
     *
     * @returns {void} - destroy the workbook AutoFill module.
     */
    WorkbookAutoFill.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookAutoFill.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(setAutoFill, this.autoFill);
            this.parent.off(getFillInfo, this.getFillType);
        }
    };
    /**
     * Get the workbook AutoFill module name.
     *
     * @returns {string} - Return the string.
     */
    WorkbookAutoFill.prototype.getModuleName = function () {
        return 'workbookautofill';
    };
    return WorkbookAutoFill;
}());

/**
 * Export Workbook action modules
 */

/**
 * Workbook basic module.
 *
 * @private
 */
var WorkbookBasicModule = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for Workbook basic module.
     *
     * @private
     */
    function WorkbookBasicModule() {
        Workbook.Inject(DataBind, WorkbookSave, WorkbookOpen, WorkbookNumberFormat, WorkbookCellFormat, WorkbookEdit, WorkbookFormula, WorkbookSort, WorkbookHyperlink, WorkbookFilter, WorkbookInsert, WorkbookDelete, WorkbookFindAndReplace, WorkbookProtectSheet, WorkbookDataValidation, WorkbookMerge, WorkbookConditionalFormat, WorkbookImage, WorkbookChart, WorkbookAutoFill);
    }
    /**
     * For internal use only - Get the module name.
     *
     * @private
     * @returns {string} - Get the module name.
     */
    WorkbookBasicModule.prototype.getModuleName = function () {
        return 'workbookBasic';
    };
    /**
     * Destroys the Workbook basic module.
     *
     * @returns {void} - Destroys the Workbook basic module.
     */
    WorkbookBasicModule.prototype.destroy = function () {
        /* code snippet */
    };
    return WorkbookBasicModule;
}());

/**
 * Workbook all module.
 *
 * @private
 */
var WorkbookAllModule = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for Workbook all module.
     *
     * @private
     */
    function WorkbookAllModule() {
        Workbook.Inject(DataBind, WorkbookSave, WorkbookNumberFormat, WorkbookCellFormat, WorkbookEdit, WorkbookFormula, WorkbookOpen, WorkbookSort, WorkbookHyperlink, WorkbookFilter, WorkbookInsert, WorkbookDelete, WorkbookFindAndReplace, WorkbookProtectSheet, WorkbookDataValidation, WorkbookMerge, WorkbookConditionalFormat, WorkbookImage, WorkbookChart, WorkbookAutoFill);
    }
    /**
     * For internal use only - Get the module name.
     *
     * @private
     * @returns {string} - Get the module name.
     */
    WorkbookAllModule.prototype.getModuleName = function () {
        return 'workbook-all';
    };
    /**
     * Destroys the Workbook all module.
     *
     * @returns {void} - Destroys the Workbook all module.
     */
    WorkbookAllModule.prototype.destroy = function () {
        /* code snippet */
    };
    return WorkbookAllModule;
}());

/**
 * To get Workbook required modules.
 *
 * @hidden
 * @param {Workbook} context - Specifies the context.
 * @param {ModuleDeclaration[]} modules - Specifies the modules.
 * @returns {ModuleDeclaration[]} - To get Workbook required modules.
 */
function getWorkbookRequiredModules(context, modules) {
    if (modules === void 0) { modules = []; }
    modules.push({ member: 'workbookBasic', args: [] });
    modules.push({ member: 'workbookAll', args: [] });
    modules.push({
        member: 'dataBind',
        args: [context]
    });
    modules.push({
        member: 'workbookProtectSheet',
        args: [context]
    });
    if (context.allowSave) {
        modules.push({
            member: 'workbookSave',
            args: [context]
        });
    }
    if (context.allowOpen) {
        modules.push({
            member: 'workbookOpen',
            args: [context]
        });
    }
    if (context.allowEditing) {
        modules.push({
            member: 'workbookEdit',
            args: [context]
        });
        modules.push({
            member: 'workbookFormula',
            args: [context]
        });
    }
    if (context.allowNumberFormatting) {
        modules.push({
            member: 'workbookNumberFormat',
            args: [context]
        });
    }
    if (context.allowCellFormatting) {
        modules.push({
            member: 'workbookcellformat',
            args: [context]
        });
    }
    if (context.allowSorting) {
        modules.push({ member: 'workbookSort', args: [context] });
    }
    if (context.allowHyperlink) {
        modules.push({ member: 'workbookHyperlink', args: [context] });
    }
    if (context.allowFiltering) {
        modules.push({ member: 'workbookFilter', args: [context] });
    }
    if (context.allowFindAndReplace) {
        modules.push({ member: 'workbookfindAndReplace', args: [context] });
    }
    if (context.allowInsert) {
        modules.push({ member: 'workbookinsert', args: [context] });
    }
    if (context.allowDelete) {
        modules.push({ member: 'workbookdelete', args: [context] });
    }
    if (context.allowDataValidation) {
        modules.push({ member: 'workbookDataValidation', args: [context] });
    }
    if (context.allowMerge) {
        modules.push({ member: 'workbookmerge', args: [context] });
    }
    if (context.allowCellFormatting) {
        modules.push({ member: 'workbookConditionalFormatting', args: [context] });
    }
    if (context.allowImage) {
        modules.push({ member: 'workbookImage', args: [context] });
    }
    if (context.allowChart) {
        modules.push({ member: 'workbookChart', args: [context] });
    }
    if (context.allowAutoFill) {
        modules.push({ member: 'workbookautofill', args: [context] });
    }
    return modules;
}

var __extends$4 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Represents the cell style.
 */
var CellStyle = /** @__PURE__ @class */ (function (_super) {
    __extends$4(CellStyle, _super);
    function CellStyle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$3([
        Property('Calibri')
    ], CellStyle.prototype, "fontFamily", void 0);
    __decorate$3([
        Property('bottom')
    ], CellStyle.prototype, "verticalAlign", void 0);
    __decorate$3([
        Property('left')
    ], CellStyle.prototype, "textAlign", void 0);
    __decorate$3([
        Property('0pt')
    ], CellStyle.prototype, "textIndent", void 0);
    __decorate$3([
        Property('#000000')
    ], CellStyle.prototype, "color", void 0);
    __decorate$3([
        Property('#ffffff')
    ], CellStyle.prototype, "backgroundColor", void 0);
    __decorate$3([
        Property('normal')
    ], CellStyle.prototype, "fontWeight", void 0);
    __decorate$3([
        Property('normal')
    ], CellStyle.prototype, "fontStyle", void 0);
    __decorate$3([
        Property('11pt')
    ], CellStyle.prototype, "fontSize", void 0);
    __decorate$3([
        Property('none')
    ], CellStyle.prototype, "textDecoration", void 0);
    __decorate$3([
        Property('')
    ], CellStyle.prototype, "border", void 0);
    __decorate$3([
        Property('')
    ], CellStyle.prototype, "borderTop", void 0);
    __decorate$3([
        Property('')
    ], CellStyle.prototype, "borderBottom", void 0);
    __decorate$3([
        Property('')
    ], CellStyle.prototype, "borderLeft", void 0);
    __decorate$3([
        Property('')
    ], CellStyle.prototype, "borderRight", void 0);
    return CellStyle;
}(ChildProperty));
/**
 * Represents the Filter Collection.
 *
 */
var FilterCollection = /** @__PURE__ @class */ (function (_super) {
    __extends$4(FilterCollection, _super);
    function FilterCollection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$3([
        Property()
    ], FilterCollection.prototype, "sheetIndex", void 0);
    __decorate$3([
        Property()
    ], FilterCollection.prototype, "filterRange", void 0);
    __decorate$3([
        Property(false)
    ], FilterCollection.prototype, "hasFilter", void 0);
    __decorate$3([
        Property()
    ], FilterCollection.prototype, "column", void 0);
    __decorate$3([
        Property()
    ], FilterCollection.prototype, "criteria", void 0);
    __decorate$3([
        Property()
    ], FilterCollection.prototype, "value", void 0);
    __decorate$3([
        Property()
    ], FilterCollection.prototype, "dataType", void 0);
    __decorate$3([
        Property()
    ], FilterCollection.prototype, "predicates", void 0);
    return FilterCollection;
}(ChildProperty));
/**
 * Represents the sort Collection.
 *
 */
var SortCollection = /** @__PURE__ @class */ (function (_super) {
    __extends$4(SortCollection, _super);
    function SortCollection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$3([
        Property()
    ], SortCollection.prototype, "sortRange", void 0);
    __decorate$3([
        Property()
    ], SortCollection.prototype, "columnIndex", void 0);
    __decorate$3([
        Property()
    ], SortCollection.prototype, "order", void 0);
    __decorate$3([
        Property()
    ], SortCollection.prototype, "sheetIndex", void 0);
    return SortCollection;
}(ChildProperty));
/**
 * Represents the DefineName.
 */
var DefineName = /** @__PURE__ @class */ (function (_super) {
    __extends$4(DefineName, _super);
    function DefineName() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$3([
        Property('')
    ], DefineName.prototype, "name", void 0);
    __decorate$3([
        Property('')
    ], DefineName.prototype, "scope", void 0);
    __decorate$3([
        Property('')
    ], DefineName.prototype, "comment", void 0);
    __decorate$3([
        Property('')
    ], DefineName.prototype, "refersTo", void 0);
    return DefineName;
}(ChildProperty));
/**
 * Configures the Protect behavior for the spreadsheet.
 *
 */
var ProtectSettings = /** @__PURE__ @class */ (function (_super) {
    __extends$4(ProtectSettings, _super);
    function ProtectSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$3([
        Property(false)
    ], ProtectSettings.prototype, "selectCells", void 0);
    __decorate$3([
        Property(false)
    ], ProtectSettings.prototype, "formatCells", void 0);
    __decorate$3([
        Property(false)
    ], ProtectSettings.prototype, "formatRows", void 0);
    __decorate$3([
        Property(false)
    ], ProtectSettings.prototype, "formatColumns", void 0);
    __decorate$3([
        Property(false)
    ], ProtectSettings.prototype, "insertLink", void 0);
    return ProtectSettings;
}(ChildProperty));
/**
 * Represents the Hyperlink.
 *
 */
var Hyperlink = /** @__PURE__ @class */ (function (_super) {
    __extends$4(Hyperlink, _super);
    function Hyperlink() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$3([
        Property('')
    ], Hyperlink.prototype, "address", void 0);
    return Hyperlink;
}(ChildProperty));
/**
 * Represents the DataValidation.
 */
var Validation = /** @__PURE__ @class */ (function (_super) {
    __extends$4(Validation, _super);
    function Validation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$3([
        Property('WholeNumber')
    ], Validation.prototype, "type", void 0);
    __decorate$3([
        Property('Between')
    ], Validation.prototype, "operator", void 0);
    __decorate$3([
        Property('0')
    ], Validation.prototype, "value1", void 0);
    __decorate$3([
        Property('0')
    ], Validation.prototype, "value2", void 0);
    __decorate$3([
        Property(true)
    ], Validation.prototype, "ignoreBlank", void 0);
    __decorate$3([
        Property(true)
    ], Validation.prototype, "inCellDropDown", void 0);
    __decorate$3([
        Property(false)
    ], Validation.prototype, "isHighlighted", void 0);
    return Validation;
}(ChildProperty));
/**
 * Represents the Format.
 */
var Format = /** @__PURE__ @class */ (function (_super) {
    __extends$4(Format, _super);
    function Format() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$3([
        Property('General')
    ], Format.prototype, "format", void 0);
    __decorate$3([
        Complex({}, CellStyle)
    ], Format.prototype, "style", void 0);
    __decorate$3([
        Property(true)
    ], Format.prototype, "isLocked", void 0);
    return Format;
}(ChildProperty));
/**
 * Represents the Conditional Formatting.
 *
 */
var ConditionalFormat = /** @__PURE__ @class */ (function (_super) {
    __extends$4(ConditionalFormat, _super);
    function ConditionalFormat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$3([
        Property('GreaterThan')
    ], ConditionalFormat.prototype, "type", void 0);
    __decorate$3([
        Complex({}, Format)
    ], ConditionalFormat.prototype, "format", void 0);
    __decorate$3([
        Property('RedFT')
    ], ConditionalFormat.prototype, "cFColor", void 0);
    __decorate$3([
        Property('')
    ], ConditionalFormat.prototype, "value", void 0);
    __decorate$3([
        Property('')
    ], ConditionalFormat.prototype, "range", void 0);
    return ConditionalFormat;
}(ChildProperty));
/**
 * Represents the Legend.
 *
 */
var LegendSettings = /** @__PURE__ @class */ (function (_super) {
    __extends$4(LegendSettings, _super);
    function LegendSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$3([
        Property(true)
    ], LegendSettings.prototype, "visible", void 0);
    __decorate$3([
        Property('Auto')
    ], LegendSettings.prototype, "position", void 0);
    return LegendSettings;
}(ChildProperty));
/**
 * Represents the DataLabelSettings.
 *
 */
var DataLabelSettings = /** @__PURE__ @class */ (function (_super) {
    __extends$4(DataLabelSettings, _super);
    function DataLabelSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$3([
        Property(false)
    ], DataLabelSettings.prototype, "visible", void 0);
    __decorate$3([
        Property('Auto')
    ], DataLabelSettings.prototype, "position", void 0);
    return DataLabelSettings;
}(ChildProperty));
/**
 * Specifies the major grid lines in the `axis`.
 *
 */
var MajorGridLines = /** @__PURE__ @class */ (function (_super) {
    __extends$4(MajorGridLines, _super);
    function MajorGridLines() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$3([
        Property(0)
    ], MajorGridLines.prototype, "width", void 0);
    return MajorGridLines;
}(ChildProperty));
/**
 * Specifies the minor grid lines in the `axis`.
 *
 */
var MinorGridLines = /** @__PURE__ @class */ (function (_super) {
    __extends$4(MinorGridLines, _super);
    function MinorGridLines() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$3([
        Property(0)
    ], MinorGridLines.prototype, "width", void 0);
    return MinorGridLines;
}(ChildProperty));
/**
 * Represents the axis.
 *
 */
var Axis = /** @__PURE__ @class */ (function (_super) {
    __extends$4(Axis, _super);
    function Axis() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$3([
        Property('')
    ], Axis.prototype, "title", void 0);
    __decorate$3([
        Complex({}, MajorGridLines)
    ], Axis.prototype, "majorGridLines", void 0);
    __decorate$3([
        Complex({}, MinorGridLines)
    ], Axis.prototype, "minorGridLines", void 0);
    __decorate$3([
        Property(true)
    ], Axis.prototype, "visible", void 0);
    return Axis;
}(ChildProperty));
/**
 * Represents the Chart.
 */
var Chart$1 = /** @__PURE__ @class */ (function (_super) {
    __extends$4(Chart$$1, _super);
    function Chart$$1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$3([
        Property('Line')
    ], Chart$$1.prototype, "type", void 0);
    __decorate$3([
        Property('Material')
    ], Chart$$1.prototype, "theme", void 0);
    __decorate$3([
        Property(false)
    ], Chart$$1.prototype, "isSeriesInRows", void 0);
    __decorate$3([
        Property('')
    ], Chart$$1.prototype, "range", void 0);
    __decorate$3([
        Property('')
    ], Chart$$1.prototype, "id", void 0);
    __decorate$3([
        Property('')
    ], Chart$$1.prototype, "title", void 0);
    __decorate$3([
        Property(290)
    ], Chart$$1.prototype, "height", void 0);
    __decorate$3([
        Property(480)
    ], Chart$$1.prototype, "width", void 0);
    __decorate$3([
        Property(0)
    ], Chart$$1.prototype, "top", void 0);
    __decorate$3([
        Property(0)
    ], Chart$$1.prototype, "left", void 0);
    __decorate$3([
        Complex({}, LegendSettings)
    ], Chart$$1.prototype, "legendSettings", void 0);
    __decorate$3([
        Complex({}, Axis)
    ], Chart$$1.prototype, "primaryXAxis", void 0);
    __decorate$3([
        Complex({}, Axis)
    ], Chart$$1.prototype, "primaryYAxis", void 0);
    __decorate$3([
        Complex({}, DataLabelSettings)
    ], Chart$$1.prototype, "dataLabelSettings", void 0);
    return Chart$$1;
}(ChildProperty));
/**
 * Represents the Image.
 */
var Image = /** @__PURE__ @class */ (function (_super) {
    __extends$4(Image, _super);
    function Image() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$3([
        Property('')
    ], Image.prototype, "src", void 0);
    __decorate$3([
        Property('')
    ], Image.prototype, "id", void 0);
    __decorate$3([
        Property(300)
    ], Image.prototype, "height", void 0);
    __decorate$3([
        Property(400)
    ], Image.prototype, "width", void 0);
    __decorate$3([
        Property(0)
    ], Image.prototype, "top", void 0);
    __decorate$3([
        Property(0)
    ], Image.prototype, "left", void 0);
    return Image;
}(ChildProperty));
/**
 * Represents the AutoFillSettings.
 */
var AutoFillSettings = /** @__PURE__ @class */ (function (_super) {
    __extends$4(AutoFillSettings, _super);
    function AutoFillSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$3([
        Property('FillSeries')
    ], AutoFillSettings.prototype, "fillType", void 0);
    __decorate$3([
        Property(true)
    ], AutoFillSettings.prototype, "showFillOptions", void 0);
    return AutoFillSettings;
}(ChildProperty));

/**
 * Check whether the text is formula or not.
 *
 * @param {string} text - Specify the text.
 * @param {boolean} isEditing - Specify the isEditing.
 * @returns {boolean} - Check whether the text is formula or not.
 */
function checkIsFormula(text, isEditing) {
    return text && text[0] === '=' && (text.length > 1 || isEditing);
}
/**
 * Check whether the value is cell reference or not.
 *
 * @param {string} value - Specify the value to check.
 * @returns {boolean} - Returns boolean value
 */
function isCellReference(value) {
    var range = value;
    range = range.split('$').join('');
    if (range.indexOf(':') > -1) {
        var rangeSplit = range.split(':');
        if (isValidCellReference(rangeSplit[0]) && isValidCellReference(rangeSplit[1])) {
            return true;
        }
    }
    else if (range.indexOf(':') < 0) {
        if (isValidCellReference(range)) {
            return true;
        }
    }
    return false;
}
/**
 * Check whether the value is character or not.
 *
 * @param {string} value - Specify the value to check.
 * @returns {boolean} - Returns boolean value
 */
function isChar(value) {
    if ((value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90) || (value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122)) {
        return true;
    }
    return false;
}
/**
 * Check whether the range selection is on complete row.
 *
 * @param {SheetModel} sheet - Specify the sheet.
 * @param {number[]} range - Specify the range index.
 * @returns {boolean} - Returns boolean value
 * @hidden
 */
function isRowSelected(sheet, range) {
    return range[1] === 0 && range[3] === sheet.colCount - 1;
}
/**
 * Check whether the range selection is on complete column.
 *
 * @param {SheetModel} sheet - Specify the sheet.
 * @param {number[]} range - Specify the range index.
 * @returns {boolean} - Returns boolean value
 * @hidden
 */
function isColumnSelected(sheet, range) {
    return range[0] === 0 && range[2] === sheet.rowCount - 1;
}
/**
 * @param {number[]} range - Specify the range
 * @param {number} rowIdx - Specify the row index
 * @param {number} colIdx - Specify the col index
 * @returns {boolean} - Returns boolean value
 */
function inRange(range, rowIdx, colIdx) {
    return range && (rowIdx >= range[0] && rowIdx <= range[2] && colIdx >= range[1] && colIdx <= range[3]);
}
/** @hidden
 * @param {number[]} range - Specify the range
 * @param {number[]} testRange - Specify the test range
 * @param {boolean} isModify - Specify the boolean value
 * @returns {boolean} - Returns boolean value
 */
function isInRange(range, testRange, isModify) {
    var inRange = range[0] <= testRange[0] && range[2] >= testRange[2] && range[1] <= testRange[1] && range[3] >= testRange[3];
    if (inRange) {
        return true;
    }
    if (isModify) {
        if (testRange[0] < range[0] && testRange[2] < range[0] || testRange[0] > range[2] && testRange[2] > range[2]) {
            return false;
        }
        else {
            if (testRange[0] < range[0] && testRange[2] > range[0]) {
                testRange[0] = range[0];
                inRange = true;
            }
            if (testRange[2] > range[2]) {
                testRange[2] = range[2];
                inRange = true;
            }
        }
        if (testRange[1] < range[1] && testRange[3] < range[1] || testRange[1] > range[3] && testRange[3] > range[3]) {
            return false;
        }
        else {
            if (testRange[1] < range[1] && testRange[3] > range[1]) {
                testRange[1] = range[1];
                inRange = true;
            }
            if (testRange[3] > range[3]) {
                testRange[3] = range[3];
                inRange = true;
            }
        }
    }
    return inRange;
}
/**
 * Check whether the cell is locked or not
 *
 * @param {CellModel} cell - Specify the cell.
 * @param {ColumnModel} column - Specify the column.
 * @returns {boolean} - Returns boolean value
 * @hidden
 */
function isLocked(cell, column) {
    if (!cell) {
        cell = {};
    }
    if (cell.isLocked) {
        return true;
    }
    else if (cell.isLocked === false) {
        return false;
    }
    else if (column && column.isLocked) {
        return true;
    }
    else if (!cell.isLocked && (column && column.isLocked !== false)) {
        return true;
    }
    return false;
}
/**
 * Check whether the value is cell reference or not.
 *
 * @param {string} value - Specify the value to check.
 * @returns {boolean} - Returns boolean value
 * @hidden
 */
function isValidCellReference(value) {
    var text = value;
    var startNum = 0;
    var endNum = 0;
    var j = 0;
    var numArr = [89, 71, 69];
    // XFD is the last column, for that we are using ascii values of Z, G, E (89, 71, 69) to restrict the flow.
    var cellText = '';
    var textLength = text.length;
    for (var i = 0; i < textLength; i++) {
        if (isChar(text[i])) {
            endNum++;
        }
    }
    cellText = text.substring(startNum, endNum);
    var cellTextLength = cellText.length;
    if (cellTextLength !== textLength) {
        if (cellTextLength < 4) {
            if (textLength !== 1 && (isNaN(parseInt(text, 10)))) {
                while (j < cellTextLength) {
                    if ((cellText[j]) && cellText[j].charCodeAt(0) < numArr[j]) {
                        j++;
                        continue;
                    }
                    else if (!(cellText[j]) && j > 0) {
                        break;
                    }
                    else {
                        return false;
                    }
                }
                var cellNumber = parseFloat(text.substring(endNum, textLength));
                if (cellNumber > 0 && cellNumber < 1048577) { // 1048576 - Maximum number of rows in excel.
                    return true;
                }
            }
        }
    }
    return false;
}
/**
 * @param {number[]} currIndexes - current indexes in which formula get updated
 * @param {number[]} prevIndexes - copied indexes
 * @param {SheetModel} sheet - sheet model
 * @param {CellModel} prevCell - copied or prev cell
 * @returns {string} - retruns updated formula
 * @hidden
 */
function getUpdatedFormula(currIndexes, prevIndexes, sheet, prevCell) {
    var cIdxValue;
    var cell;
    if (prevIndexes) {
        cell = prevCell || getCell(prevIndexes[0], prevIndexes[1], sheet, false, true);
        cIdxValue = cell.formula ? cell.formula.toUpperCase() : '';
    }
    if (cIdxValue) {
        if (cIdxValue.indexOf('=') === 0) {
            cIdxValue = cIdxValue.slice(1);
        }
        cIdxValue = cIdxValue.split('(').join(',').split(')').join(',');
        var formulaOperators = ['+', '-', '*', '/', '>=', '<=', '<>', '>', '<', '=', '%'];
        var splitArray = void 0;
        var value = cIdxValue;
        for (var i = 0; i < formulaOperators.length; i++) {
            splitArray = value.split(formulaOperators[i]);
            value = splitArray.join(',');
        }
        splitArray = value.split(',');
        var newAddress = [];
        var newRef = void 0;
        var refObj = void 0;
        for (var j = 0; j < splitArray.length; j++) {
            if (isCellReference(splitArray[j])) {
                var range = getRangeIndexes(splitArray[j]);
                var newRange = [currIndexes[0] - (prevIndexes[0] - range[0]), currIndexes[1] - (prevIndexes[1] - range[1]),
                    currIndexes[0] - (prevIndexes[0] - range[2]), currIndexes[1] - (prevIndexes[1] - range[3])];
                if (newRange[0] < 0 || newRange[1] < 0 || newRange[2] < 0 || newRange[3] < 0) {
                    newRef = '#REF!';
                }
                else {
                    newRef = getCellAddress(newRange[0], newRange[1]);
                    if (splitArray[j].includes(':')) {
                        newRef += (':' + getCellAddress(newRange[2], newRange[3]));
                    }
                    newRef = isCellReference(newRef) ? newRef : '#REF!';
                }
                refObj = {};
                refObj[splitArray[j]] = newRef;
                if (splitArray[j].includes(':')) {
                    newAddress.splice(0, 0, refObj);
                }
                else {
                    newAddress.push(refObj);
                }
            }
        }
        var objKey = void 0;
        cIdxValue = cell.formula;
        for (var j = 0; j < newAddress.length; j++) {
            objKey = Object.keys(newAddress[j])[0];
            cIdxValue = cIdxValue.replace(new RegExp(objKey, 'gi'), newAddress[j][objKey].toUpperCase());
        }
        return cIdxValue;
    }
    else {
        return null;
    }
}
/**@hidden */
function updateCell(context, sheet, prop) {
    var args = { cell: prop.cell, rowIndex: prop.rowIdx, colIndex: prop.colIdx, cancel: false, sheetId: sheet.id };
    if (!prop.preventEvt) {
        context.trigger(beforeCellUpdate, args);
    }
    if (!prop.eventOnly && !args.cancel) {
        if (prop.valChange) {
            var prevCellVal = context.getDisplayText(getCell(args.rowIndex, args.colIndex, sheet));
            setCell(args.rowIndex, args.colIndex, sheet, args.cell, !prop.pvtExtend);
            var sheetIdx = getSheetIndex(context, sheet.name);
            var cell = getCell(args.rowIndex, args.colIndex, sheet, false, true);
            context.notify(workbookEditOperation, { action: 'updateCellValue', address: [args.rowIndex, args.colIndex], sheetIndex: sheetIdx, value: cell.formula === undefined ? (cell.value || (cell.value === 0 ? '0' : '')) : cell.formula });
            var cellValue = getCell(args.rowIndex, args.colIndex, sheet, false, true).value;
            cellValue = cellValue || (cellValue === 0 ? '0' : '');
            if (prop.uiRefresh) {
                context.serviceLocator.getService('cell').refresh(args.rowIndex, args.colIndex, prop.lastCell, prop.td, prop.checkCf, prop.checkWrap);
            }
            if (cellValue !== prevCellVal) {
                context.trigger('cellSave', { value: cellValue, oldValue: prevCellVal, displayText: context.getDisplayText(cell), address: sheet.name + "!" + getCellAddress(args.rowIndex, args.colIndex), formula: cell.formula || '' });
            }
        }
        else {
            setCell(args.rowIndex, args.colIndex, sheet, args.cell, !prop.pvtExtend);
        }
    }
    return args.cancel;
}
/**
 * @param {number} rowIdx - row index
 * @param {number} colIdx - column index
 * @param {SheetModel} sheet - sheet model
 * @returns {number[]} - retruns data range
 * @hidden
 */
function getDataRange(rowIdx, colIdx, sheet) {
    var i = 0;
    var j = 0;
    var loopLength = 0;
    var length = sheet.usedRange.rowIndex + sheet.usedRange.colIndex;
    var startCell = { rowIndex: rowIdx, colIndex: colIdx };
    var endCell = { rowIndex: rowIdx, colIndex: colIdx };
    for (i = 1; i < length + 1; i++) {
        for (j = -loopLength; j < loopLength + 1; j++) { // start from right
            if (getCell(rowIdx + j, colIdx + i, sheet, null, true).value) {
                endCell.rowIndex = endCell.rowIndex > rowIdx + j ? endCell.rowIndex : rowIdx + j;
                endCell.colIndex = endCell.colIndex > colIdx + i ? endCell.colIndex : colIdx + i;
            }
        }
        if (getCell(rowIdx + i, colIdx + i, sheet, null, true).value) {
            endCell.rowIndex = endCell.rowIndex > rowIdx + i ? endCell.rowIndex : rowIdx + i;
            endCell.colIndex = endCell.colIndex > colIdx + i ? endCell.colIndex : colIdx + i;
        }
        for (j = -loopLength; j < loopLength + 1; j++) {
            if (getCell(rowIdx + i, colIdx + j, sheet, null, true).value) {
                endCell.rowIndex = endCell.rowIndex > rowIdx + i ? endCell.rowIndex : rowIdx + i;
                endCell.colIndex = endCell.colIndex > colIdx + j ? endCell.colIndex : colIdx + j;
            }
        }
        if (getCell(rowIdx + i, colIdx - i, sheet, null, true).value) {
            endCell.rowIndex = endCell.rowIndex > rowIdx + i ? endCell.rowIndex : rowIdx + i;
            startCell.colIndex = startCell.colIndex < colIdx - i ? startCell.colIndex : colIdx - i;
        }
        for (j = -loopLength; j < loopLength + 1; j++) {
            if (getCell(rowIdx + j, colIdx - i, sheet, null, true).value) {
                startCell.rowIndex = startCell.rowIndex < rowIdx + j ? startCell.rowIndex : rowIdx + j;
                startCell.colIndex = startCell.colIndex < colIdx - i ? startCell.colIndex : colIdx - i;
                endCell.rowIndex = endCell.rowIndex > rowIdx + j ? endCell.rowIndex : rowIdx + j;
            }
        }
        if (getCell(rowIdx - i, colIdx - i, sheet, null, true).value) {
            startCell.rowIndex = startCell.rowIndex < rowIdx - i ? startCell.rowIndex : rowIdx - i;
            startCell.colIndex = startCell.colIndex < colIdx - i ? startCell.colIndex : colIdx - i;
        }
        for (j = -loopLength; j < loopLength + 1; j++) {
            if (getCell(rowIdx - i, colIdx + j, sheet, null, true).value) {
                startCell.rowIndex = startCell.rowIndex < rowIdx - i ? startCell.rowIndex : rowIdx - i;
                startCell.colIndex = startCell.colIndex < colIdx + j ? startCell.colIndex : colIdx + j;
                endCell.colIndex = endCell.colIndex > colIdx + j ? endCell.colIndex : colIdx + j;
            }
        }
        if (getCell(rowIdx - i, colIdx + i, sheet, null, true).value) {
            startCell.rowIndex = startCell.rowIndex < rowIdx - i ? startCell.rowIndex : rowIdx - i;
            endCell.colIndex = endCell.colIndex > colIdx + i ? endCell.colIndex : colIdx + i;
        }
        loopLength++;
    }
    return [startCell.rowIndex, startCell.colIndex, endCell.rowIndex, endCell.colIndex];
}

/** @hidden */
var workbookLocale = 'spreadsheetLocale';
/**
 * Workbook locale text
 *
 * @hidden
 */
var localeData = {
    SortOutOfRangeError: 'Select a cell or range inside the used range and try again.'
};

/**
 * Common tasks.
 */

/**
 * Update data source to Sheet and returns Sheet
 *
 * @param {Workbook} context - Specifies the context.
 * @param {string} address - Specifies the address.
 * @param {boolean} columnWiseData - Specifies the bool value.
 * @param {boolean} valueOnly - Specifies the valueOnly.
 * @param {number[]} frozenIndexes - Specifies the freeze row and column start indexes, if it is scrolled.
 * @param {boolean} filterDialog - Specifies the bool value.
 * @param {string} formulaCellRef - Specifies the formulaCellRef.
 * @param {number} idx - Specifies the idx.
 * @param {boolean} skipHiddenRows - Specifies the skipHiddenRows.
 * @param {string} commonAddr - Specifies the common address for the address parameter specified with list of range separated by ','.
 * @param {number} dateValueForSpecificColIdx - Specify the dateValueForSpecificColIdx.
 * @returns {Promise<Map<string, CellModel> | Object[]>} - To get the data
 * @hidden
 */
function getData(context, address, columnWiseData, valueOnly, frozenIndexes, filterDialog, formulaCellRef, idx, skipHiddenRows, commonAddr, dateValueForSpecificColIdx) {
    if (skipHiddenRows === void 0) { skipHiddenRows = true; }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    return new Promise(function (resolve, reject) {
        resolve((function () {
            var i;
            var row;
            var data = new Map();
            var sheetIdx;
            if (address.indexOf('!') > -1) {
                sheetIdx = getSheetIndex(context, getSheetNameFromAddress(address));
                address = address.slice(address.indexOf('!') + 1, address.length);
            }
            else {
                sheetIdx = context.activeSheetIndex;
            }
            var sheet = getSheet(context, sheetIdx);
            var indexes = getIndexesFromAddress(commonAddr || address);
            var sRow = indexes[0];
            /* eslint-disable */
            var args = { sheet: sheet, indexes: indexes, formulaCellRef: formulaCellRef, sheetIndex: idx, isFinite: context.scrollSettings && context.scrollSettings.isFinite,
                promise: new Promise(function (resolve, reject) { resolve((function () { })()); })
            };
            /* eslint-enable */
            context.notify(updateSheetFromDataSource, args);
            return args.promise.then(function () {
                var frozenRow = context.frozenRowCount(sheet);
                var frozenCol = context.frozenColCount(sheet);
                if (columnWiseData) {
                    if (data instanceof Map) {
                        data = [];
                    }
                    var index_1;
                    address.split(',').forEach(function (addr) {
                        indexes = getRangeIndexes(addr);
                        index_1 = 0;
                        sRow = indexes[0];
                        while (sRow <= indexes[2]) {
                            var cells = data[index_1.toString()] || {};
                            row = getRow(sheet, sRow);
                            i = indexes[1];
                            while (i <= indexes[3]) {
                                if (skipHiddenRows && isHiddenRow(sheet, sRow) && !filterDialog) {
                                    sRow++;
                                    continue;
                                }
                                var key = getColumnHeaderText(i + 1);
                                var rowKey = '__rowIndex';
                                if (valueOnly) {
                                    cells[key] = row ? getValueFromFormat(context, sRow, i, sheetIdx, sheet) : '';
                                    if (typeof cells[key] === 'string' && !!Number(cells[key])) {
                                        cells[key] = Number(cells[key]);
                                    }
                                }
                                else {
                                    var cell = row ? getCell(sRow, i, sheet) : null;
                                    if ((cell && (cell.formula || !isNullOrUndefined(cell.value))) || Object.keys(cells).length) {
                                        if (i === dateValueForSpecificColIdx) {
                                            cells[key] = extend({}, cell, { value: getValueFromFormat(context, sRow, i, sheetIdx, sheet, true) });
                                            if (typeof cells[key].value === 'string' && !!Number(cells[key].value)) {
                                                /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                                                cells[key].value = Number(cells[key].value);
                                            }
                                        }
                                        else {
                                            cells[key] = cell;
                                        }
                                    }
                                }
                                if (indexes[3] < i + 1 && Object.keys(cells).length) {
                                    cells[rowKey] = (sRow + 1).toString();
                                }
                                data[index_1.toString()] = cells;
                                i++;
                            }
                            sRow++;
                            if (Object.keys(cells).length) {
                                index_1++;
                            }
                            else {
                                data.pop();
                            }
                        }
                    });
                }
                else {
                    while (sRow <= indexes[2]) {
                        row = getRow(sheet, sRow);
                        i = indexes[1];
                        while (i <= indexes[3]) {
                            var eventArgs = { cell: getCell(sRow, i, sheet), address: getCellAddress(sRow, i),
                                rowIndex: sRow, colIndex: i };
                            context.trigger(queryCellInfo, eventArgs);
                            var cellObj = getCell(sRow, i, sheet, false, true);
                            if (cellObj.colSpan > 1 && cellObj.rowSpan > 1) {
                                var cell = void 0;
                                for (var j = sRow, len = sRow + cellObj.rowSpan; j < len; j++) {
                                    for (var k = i, len_1 = i + cellObj.colSpan; k < len_1; k++) {
                                        if (j === sRow && k === i) {
                                            continue;
                                        }
                                        cell = new Object();
                                        if (j !== sRow) {
                                            cell.rowSpan = sRow - j;
                                        }
                                        if (k !== i) {
                                            cell.colSpan = i - k;
                                        }
                                        if (sheet.rows[j] && sheet.rows[j].cells && sheet.rows[j].cells[k]) {
                                            delete sheet.rows[j].cells[k].value;
                                            delete sheet.rows[j].cells[k].formula;
                                        }
                                        setCell(j, k, sheet, cell, true);
                                    }
                                }
                            }
                            else if (cellObj.colSpan > 1) {
                                for (var j = i + 1, len = i + cellObj.colSpan; j < len; j++) {
                                    setCell(sRow, j, sheet, { colSpan: i - j }, true);
                                    if (sheet.rows[sRow] && sheet.rows[sRow].cells && sheet.rows[sRow].cells[j]) {
                                        delete sheet.rows[sRow].cells[j].value;
                                        delete sheet.rows[sRow].cells[j].formula;
                                    }
                                }
                            }
                            else if (cellObj.rowSpan > 1) {
                                for (var j = sRow + 1, len = sRow + cellObj.rowSpan; j < len; j++) {
                                    setCell(j, i, sheet, { rowSpan: sRow - j }, true);
                                    if (sheet.rows[j] && sheet.rows[j].cells && sheet.rows[j].cells[i]) {
                                        delete sheet.rows[j].cells[i].value;
                                        delete sheet.rows[j].cells[i].formula;
                                    }
                                }
                            }
                            if (!valueOnly && isHiddenRow(sheet, sRow)) {
                                sRow++;
                                continue;
                            }
                            if (!valueOnly && isHiddenCol(sheet, i)) {
                                i++;
                                continue;
                            }
                            if (!valueOnly && frozenIndexes && frozenIndexes.length) {
                                if (sRow >= frozenRow && sRow < frozenIndexes[0]) {
                                    sRow++;
                                    continue;
                                }
                                if (i >= frozenCol && i < frozenIndexes[1]) {
                                    i++;
                                    continue;
                                }
                            }
                            if (cellObj.style) {
                                var style = {};
                                Object.assign(style, cellObj.style);
                                cellObj.style = style;
                            }
                            data.set(eventArgs.address, cellObj);
                            i++;
                        }
                        sRow++;
                    }
                }
                return data;
            });
        })());
    });
}
/**
 * @hidden
 * @param {Workbook} context - Specifies the context.
 * @param {number} rowIndex - Specifies the rowIndex.
 * @param {number} colIndex - Specifies the colIndex.
 * @param {number} sheetIdx - Specifies the sheetIdx.
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {boolean} getIntValueFromDate - Specify the getIntValueFromDate.
 * @returns {string | Date} - To get the value format.
 */
function getValueFromFormat(context, rowIndex, colIndex, sheetIdx, sheet, getIntValueFromDate) {
    var cell = getCell(rowIndex, colIndex, sheet);
    if (cell) {
        if (cell.format) {
            var args = {
                value: context.getDisplayText(cell), rowIndex: rowIndex, colIndex: colIndex,
                sheetIndex: sheetIdx, dateObj: '', isDate: false, isTime: false
            };
            context.notify(checkDateFormat, args);
            if (args.isDate) {
                if (getIntValueFromDate) {
                    return args.updatedVal;
                }
                return args.dateObj;
            }
            else {
                return cell.value;
            }
        }
        else {
            return cell.value;
        }
    }
    else {
        return '';
    }
}
/**
 * @hidden
 * @param {SheetModel | RowModel | CellModel} model - Specifies the sheet model.
 * @param {number} idx - Specifies the index value.
 * @returns {SheetModel | RowModel | CellModel} - To process the index
 */
function getModel(model, idx) {
    var diff;
    var j;
    var prevIdx;
    if (isUndefined(model[idx]) || !(model[idx] && model[idx].index === idx)) {
        for (var i = 0; i <= idx; i++) {
            if (model && model[i]) {
                diff = model[i].index - i;
                if (diff > 0) {
                    model.forEach(function (value, index) {
                        if (value && value.index) {
                            prevIdx = value.index;
                            j = 1;
                        }
                        if (value && !value.index && index !== 0) {
                            value.index = prevIdx + j;
                        }
                        j++;
                    });
                    while (diff--) {
                        model.splice(i, 0, null);
                    }
                    i += diff;
                }
            }
            else if (model) {
                model[i] = null;
            }
            else {
                model = [];
            }
        }
    }
    return model[idx];
}
/**
 * @hidden
 * @param {SheetModel | RowModel | CellModel} model - Specifies the sheet model.
 * @param {boolean} isSheet - Specifies the bool value.
 * @param {Workbook} context - Specifies the Workbook.
 * @returns {void} - To process the index
 */
function processIdx(model, isSheet, context) {
    var j;
    var diff = 0;
    var cnt;
    var len = model.length;
    var _loop_1 = function (i) {
        if (!isNullOrUndefined(model[i]) && !isUndefined(model[i].index)) {
            cnt = diff = model[i].index - i;
            delete model[i].index;
        }
        if (diff > 0) {
            j = 0;
            while (diff--) {
                if (isSheet) {
                    context.createSheet(i + j);
                    j++;
                }
                else {
                    model.splice(i, 0, null);
                }
            }
            i += cnt;
            len += cnt;
        }
        if (isSheet) {
            if (model[i].id < 1) {
                model[i].id = getMaxSheetId(context.sheets);
                if (model[i].properties) {
                    model[i].properties.id = model[i].id;
                }
            }
            if (!model[i].name) {
                context.setSheetPropertyOnMute(model[i], 'name', 'Sheet' + getSheetNameCount(context));
            }
            var cellCnt_1 = 0;
            model[i].rows.forEach(function (row) {
                cellCnt_1 = Math.max(cellCnt_1, (row && row.cells && row.cells.length - 1) || 0);
            });
            context.setSheetPropertyOnMute(model[i], 'usedRange', { rowIndex: model[i].rows.length ? model[i].rows.length - 1 : 0, colIndex: cellCnt_1 });
        }
        out_i_1 = i;
    };
    var out_i_1;
    for (var i = 0; i < len; i++) {
        _loop_1(i);
        i = out_i_1;
    }
}

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Configures the range processing for the spreadsheet.
 *  ```html
 * <div id='Spreadsheet'></div>
 * ```
 * ```typescript
 * let spreadsheet: Spreadsheet = new Spreadsheet({
 *      sheets: [{
 *                  name: 'First Sheet',
 *                  ranges: [{ dataSource: defaultData }],
 *                  rows: [{
 *                          index: 30,
 *                          cells: [{ index: 4, value: 'Total Amount:' },
 *                                  { formula: '=SUM(F2:F30)', style: { fontWeight: 'bold' } }]
 *                  }]
 * ...
 * });
 * spreadsheet.appendTo('#Spreadsheet');
 * ```
 */
var Range = /** @__PURE__ @class */ (function (_super) {
    __extends$1(Range, _super);
    function Range() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Range.prototype.setProperties = function (prop, muteOnChange) {
        var _this = this;
        var name = 'name';
        var instance = 'instance';
        var parentObj = 'parentObj';
        var currRangeIdx = 'currRangeIdx';
        var controlParent = 'controlParent';
        if (this[parentObj].isComplexArraySetter && this[controlParent] && this[controlParent].isAngular) {
            if (Object.keys(prop).length) {
                if (this[parentObj][currRangeIdx] === undefined) {
                    this[parentObj][currRangeIdx] = 0;
                }
                else {
                    this[parentObj][currRangeIdx] += 1;
                }
                var range = this[parentObj].ranges[this[parentObj][currRangeIdx]];
                if (range && range.info) {
                    this.info = range.info;
                }
                setTimeout(function () {
                    if (_this[parentObj][currRangeIdx] !== undefined) {
                        delete _this[parentObj][currRangeIdx];
                    }
                });
            }
            else if (this[controlParent].tagObjects[0].instance && this[controlParent].tagObjects[0].instance.hasChanges
                && !this[controlParent].tagObjects[0].instance.isInitChanges) {
                var sheetIdx = this[controlParent].sheets.indexOf(this[parentObj]);
                if (this[parentObj].changedRangeIdx === undefined) {
                    var rangeIdx_1;
                    var tagObjects = this[controlParent].tagObjects[0].instance.list[sheetIdx].tagObjects;
                    for (var i = 0; i < tagObjects.length; i++) {
                        if (tagObjects[i][name] === 'ranges') {
                            tagObjects[i][instance].list
                                .forEach(function (range, idx) {
                                if (range.hasChanges) {
                                    rangeIdx_1 = idx;
                                }
                            });
                            break;
                        }
                    }
                    this[parentObj].changedRangeIdx = rangeIdx_1;
                }
            }
        }
        _super.prototype.setProperties.call(this, prop, muteOnChange);
    };
    __decorate$1([
        Property(null)
    ], Range.prototype, "dataSource", void 0);
    __decorate$1([
        Property('A1')
    ], Range.prototype, "startCell", void 0);
    __decorate$1([
        Property(null)
    ], Range.prototype, "query", void 0);
    __decorate$1([
        Property(true)
    ], Range.prototype, "showFieldAsHeader", void 0);
    __decorate$1([
        Property('')
    ], Range.prototype, "template", void 0);
    __decorate$1([
        Property('A1')
    ], Range.prototype, "address", void 0);
    return Range;
}(ChildProperty));
/**
 * Used range which contains end row index and end column index of the last used cell in sheet .
 */
var UsedRange = /** @__PURE__ @class */ (function (_super) {
    __extends$1(UsedRange, _super);
    function UsedRange() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$1([
        Property(0)
    ], UsedRange.prototype, "rowIndex", void 0);
    __decorate$1([
        Property(0)
    ], UsedRange.prototype, "colIndex", void 0);
    return UsedRange;
}(ChildProperty));
/**
 * Configures the sheet behavior for the spreadsheet.
 */
var Sheet = /** @__PURE__ @class */ (function (_super) {
    __extends$1(Sheet, _super);
    function Sheet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$1([
        Property(null)
    ], Sheet.prototype, "rows", void 0);
    __decorate$1([
        Property(null)
    ], Sheet.prototype, "columns", void 0);
    __decorate$1([
        Complex({}, ProtectSettings)
    ], Sheet.prototype, "protectSettings", void 0);
    __decorate$1([
        Collection([], Range)
    ], Sheet.prototype, "ranges", void 0);
    __decorate$1([
        Collection([], ConditionalFormat)
    ], Sheet.prototype, "conditionalFormats", void 0);
    __decorate$1([
        Property(0)
    ], Sheet.prototype, "index", void 0);
    __decorate$1([
        Property('')
    ], Sheet.prototype, "name", void 0);
    __decorate$1([
        Property(100)
    ], Sheet.prototype, "rowCount", void 0);
    __decorate$1([
        Property(100)
    ], Sheet.prototype, "colCount", void 0);
    __decorate$1([
        Property('A1:A1')
    ], Sheet.prototype, "selectedRange", void 0);
    __decorate$1([
        Property('A1')
    ], Sheet.prototype, "activeCell", void 0);
    __decorate$1([
        Property({})
    ], Sheet.prototype, "usedRange", void 0);
    __decorate$1([
        Property('A1')
    ], Sheet.prototype, "topLeftCell", void 0);
    __decorate$1([
        Property(true)
    ], Sheet.prototype, "showHeaders", void 0);
    __decorate$1([
        Property(true)
    ], Sheet.prototype, "showGridLines", void 0);
    __decorate$1([
        Property(false)
    ], Sheet.prototype, "isProtected", void 0);
    __decorate$1([
        Property('Visible')
    ], Sheet.prototype, "state", void 0);
    __decorate$1([
        Property(0)
    ], Sheet.prototype, "frozenRows", void 0);
    __decorate$1([
        Property(0)
    ], Sheet.prototype, "frozenColumns", void 0);
    __decorate$1([
        Property('A1')
    ], Sheet.prototype, "paneTopLeftCell", void 0);
    __decorate$1([
        Property('')
    ], Sheet.prototype, "password", void 0);
    return Sheet;
}(ChildProperty));
/**
 * To get sheet index from address.
 *
 * @hidden
 * @param {Workbook} context - Specifies the context.
 * @param {string} name - Specifies the name.
 * @returns {number} - To gget sheet index from address.
 */
function getSheetIndex(context, name) {
    var idx;
    for (var i = 0; i < context.sheets.length; i++) {
        if (context.sheets[i].name.toLowerCase() === name.toLowerCase()) {
            idx = i;
            break;
        }
    }
    return idx;
}
/**
 * To get sheet index from sheet id.
 *
 * @hidden
 * @param {Workbook} context - Specifies the context.
 * @param {number} id - Specifies the id.
 * @returns {number} - To get the sheet index from id.
 */
function getSheetIndexFromId(context, id) {
    var idx;
    for (var i = 0; i < context.sheets.length; i++) {
        if (context.sheets[i].id === id) {
            idx = i;
            break;
        }
    }
    return idx;
}
/**
 * To get sheet name from address.
 *
 * @hidden
 * @param {string} address - Specifies the address.
 * @returns {address} - To get Sheet Name From Address.
 */
function getSheetNameFromAddress(address) {
    // eslint-disable-next-line no-useless-escape
    return address.split('!')[0].replace(/\'/gi, '');
}
/**
 * To get sheet index from sheet name.
 *
 * @hidden
 * @param {Workbook} context - Specifies the context.
 * @param {string} name - Specifies the name.
 * @param {SheetModel} info - Specifies the sheet info.
 * @returns {number} - To get the sheet index by name.
 */
function getSheetIndexByName(context, name, info) {
    var len = info.length;
    for (var i = 0; i < len; i++) {
        if (info[i].sheet.toUpperCase() === name.toUpperCase()) {
            return info[i].index;
        }
    }
    return -1;
}
/**
 * update selected range
 *
 * @hidden
 * @param {Workbook} context - Specifies the context.
 * @param {string} range - Specifies the range.
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {boolean} isMultiRange - Specifies the boolean value.
 * @returns {void} - Update the selected range.
 */
function updateSelectedRange(context, range, sheet, isMultiRange) {
    if (sheet === void 0) { sheet = {}; }
    context.setSheetPropertyOnMute(sheet, 'selectedRange', isMultiRange ? sheet.selectedRange + ' ' + range : range);
}
/**
 * get selected range
 *
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @returns {string} - Get selected range.
 */
function getSelectedRange(sheet) {
    return sheet && sheet.selectedRange || 'A1';
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @returns {string} - To get single selected range.
 */
function getSingleSelectedRange(sheet) {
    return sheet.selectedRange.split(' ')[0];
}
/**
 * @hidden
 * @param {Workbook} context - Specifies the context.
 * @param {number} idx - Specifies the idx.
 * @returns {SheetModel} - To get sheet.
 */
function getSheet(context, idx) {
    return context.sheets[idx];
}
/**
 * @hidden
 * @param {Workbook} context - Specifies the context.
 * @returns {number} - To get sheet name count.
 */
function getSheetNameCount(context) {
    var name = [];
    context.sheets.forEach(function (sheet) {
        name.push(sheet.name.toLowerCase());
    });
    for (var i = 0; i < name.length; i++) {
        if (name.indexOf('sheet' + context.sheetNameCount) > -1) {
            context.sheetNameCount++;
        }
        else {
            return context.sheetNameCount++;
        }
    }
    return context.sheetNameCount++;
}
/**
 * @hidden
 * @param {SheetModel[]} sheets - Specifies the sheets.
 * @returns {number} - To get sheet id.
 */
function getMaxSheetId(sheets) {
    var cnt = 0;
    sheets.forEach(function (sheet) {
        cnt = Math.max(sheet.id, cnt);
    });
    return cnt + 1;
}
/**
 * @hidden
 * @param {Workbook} context - Specifies the context.
 * @param {SheetModel[]} sheet - Specifies the sheet.
 * @returns {void} - To initiate sheet.
 */
function initSheet(context, sheet) {
    var sheets = sheet ? sheet : context.sheets;
    sheets.forEach(function (sheet) {
        sheet.id = sheet.id || 0;
        sheet.name = sheet.name || '';
        sheet.rowCount = isUndefined(sheet.rowCount) ? 100 : sheet.rowCount;
        sheet.colCount = isUndefined(sheet.colCount) ? 100 : sheet.colCount;
        sheet.topLeftCell = sheet.topLeftCell || 'A1';
        sheet.activeCell = sheet.activeCell || 'A1';
        sheet.selectedRange = sheet.selectedRange || 'A1:A1';
        sheet.usedRange = sheet.usedRange || { rowIndex: 0, colIndex: 0 };
        context.setSheetPropertyOnMute(sheet, 'ranges', sheet.ranges ? sheet.ranges : []);
        context.setSheetPropertyOnMute(sheet, 'rows', (sheet.rows && extend([], sheet.rows, null, true)) || []);
        context.setSheetPropertyOnMute(sheet, 'columns', sheet.columns || []);
        sheet.showHeaders = isUndefined(sheet.showHeaders) ? true : sheet.showHeaders;
        sheet.showGridLines = isUndefined(sheet.showGridLines) ? true : sheet.showGridLines;
        sheet.state = sheet.state || 'Visible';
        sheet.maxHgts = [];
        sheet.protectSettings = sheet.protectSettings || { selectCells: false, formatCells: false, formatRows: false, formatColumns: false,
            insertLink: false };
        sheet.isProtected = sheet.isProtected || false;
        if (!sheet.paneTopLeftCell || sheet.paneTopLeftCell === 'A1') {
            sheet.frozenRows = sheet.frozenRows ? sheet.frozenRows : 0;
            sheet.frozenColumns = sheet.frozenColumns ? sheet.frozenColumns : 0;
            var indexes = getCellIndexes(sheet.topLeftCell);
            context.setSheetPropertyOnMute(sheet, 'paneTopLeftCell', getCellAddress(sheet.frozenRows ? indexes[0] + sheet.frozenRows : indexes[0], sheet.frozenColumns ? indexes[1] + sheet.frozenColumns : indexes[1]));
        }
        processIdx(sheet.columns);
        initRow(sheet.rows);
    });
    processIdx(sheets, true, context);
}
// function initRangeSettings(ranges: RangeModel[]): RangeModel[] {
//     ranges.forEach((range: RangeModel) => {
//         range.startCell = range.startCell || 'A1';
//         range.address = range.address || 'A1';
//         range.template = range.template || '';
//         range.showFieldAsHeader = isUndefined(range.showFieldAsHeader) ? true : range.showFieldAsHeader;
//     });
//     return ranges;
// }
/**
 * @param {RowModel[]} rows - Specifies the rows.
 * @returns {void} - Specifies the row.
 */
function initRow(rows) {
    rows.forEach(function (row) {
        if (row && row.cells) {
            processIdx(row.cells);
        }
    });
    processIdx(rows);
}
/**
 * get sheet name
 *
 * @param {Workbook} context - Specifies the context.
 * @param {number} idx - Specifies the idx.
 * @returns {string} - To get sheet name.
 * @hidden
 */
function getSheetName(context, idx) {
    if (idx === void 0) { idx = context.activeSheetIndex; }
    return getSheet(context, idx).name;
}
/**
 * @param {Workbook} context - Specifies context
 * @param {number} position - position to move a sheet in the list of sheets
 * @param {number[]} sheetIndexes - Specifies the sheet indexes of the sheets which is to be moved
 * @param {boolean} action - Specifies to trigger events
 * @returns {void}
 * @hidden
 */
function moveSheet(context, position, sheetIndexes, action) {
    var needRefresh = !!sheetIndexes;
    sheetIndexes = sheetIndexes || [context.activeSheetIndex];
    position = getNextPrevVisibleSheetIndex(context.sheets, position, context.activeSheetIndex > position);
    var args = {
        action: 'moveSheet', position: position,
        sheetIndexes: sheetIndexes, cancel: false
    };
    if (action) {
        context.trigger('actionBegin', args);
    }
    if (!args.cancel) {
        sheetIndexes.forEach(function (sIdx, idx) {
            context.sheets.splice(position + idx, 0, context.sheets.splice(sIdx + (position > sIdx ? -1 * idx : 0), 1)[0]);
        });
        context.setProperties({ activeSheetIndex: position > sheetIndexes[0] ? position - (sheetIndexes.length - 1) : position }, true);
        context.notify(moveOrDuplicateSheet, { refresh: needRefresh });
        if (action) {
            delete args.cancel;
            context.trigger('actionComplete', args);
        }
    }
}
/**
 * @param {Workbook} context - Specifies context
 * @param {number} sheetIndex - Specifies sheetIndex to be duplicated
 * @param {boolean} action - Specifies to trigger events
 * @returns {void}
 * @hidden
 */
function duplicateSheet(context, sheetIndex, action) {
    sheetIndex = isUndefined(sheetIndex) ? context.activeSheetIndex : sheetIndex;
    var args = {
        action: 'duplicateSheet', sheetIndex: sheetIndex, cancel: false
    };
    if (action) {
        context.trigger('actionBegin', args);
    }
    if (!args.cancel) {
        var originalSheet = getSheet(context, sheetIndex);
        var sheet = extend({}, originalSheet.properties ?
            originalSheet.properties : originalSheet, true);
        sheet.id = getMaxSheetId(context.sheets);
        var name_1 = sheet.name;
        if (/^\(\d+\)$/.test('(' + name_1.split(' (')[1])) {
            name_1 = name_1.split(' (')[0];
        }
        var sheetNames_1 = [];
        context.sheets.forEach(function (sheet) {
            sheetNames_1.push(sheet.name);
        });
        for (var i = 2;; i++) {
            if (sheetNames_1.indexOf(name_1 + ' (' + i + ')') === -1) {
                sheet.name = name_1 + ' (' + i + ')';
                break;
            }
        }
        context.createSheet(sheetIndex + 1, [sheet]);
        context.notify(workbookFormulaOperation, { action: 'addSheet', sheetName: 'Sheet' + sheet.id, visibleName: sheet.name, sheetId: sheet.id });
        context.setProperties({ activeSheetIndex: sheetIndex + 1 }, true);
        context.notify(moveOrDuplicateSheet, { refresh: true, isDuplicate: true });
        if (action) {
            delete args.cancel;
            context.trigger('actionComplete', args);
        }
    }
}
/**
 * @param {SheetModel[]} sheets - sheets of spreadsheet
 * @param {number} startIndex - index of the sheet to search from
 * @param {boolean} isPrevious - if set to `true`, its find the previous visible sheet index
 * @returns {number} - return next visible sheet
 */
function getNextPrevVisibleSheetIndex(sheets, startIndex, isPrevious) {
    for (var i = startIndex; isPrevious ? i >= 0 : i < sheets.length; isPrevious ? i-- : i++) {
        if (!(sheets[i].state === 'Hidden' || sheets[i].state === 'VeryHidden')) {
            startIndex = i;
            break;
        }
    }
    return startIndex;
}

var __extends$5 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Represents the cell.
 */
var Cell = /** @__PURE__ @class */ (function (_super) {
    __extends$5(Cell, _super);
    function Cell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$4([
        Collection([], Image)
    ], Cell.prototype, "image", void 0);
    __decorate$4([
        Collection([], Chart$1)
    ], Cell.prototype, "chart", void 0);
    __decorate$4([
        Property('')
    ], Cell.prototype, "value", void 0);
    __decorate$4([
        Property('')
    ], Cell.prototype, "formula", void 0);
    __decorate$4([
        Property(0)
    ], Cell.prototype, "index", void 0);
    __decorate$4([
        Property('General')
    ], Cell.prototype, "format", void 0);
    __decorate$4([
        Complex({}, CellStyle)
    ], Cell.prototype, "style", void 0);
    __decorate$4([
        Property('')
    ], Cell.prototype, "hyperlink", void 0);
    __decorate$4([
        Property(false)
    ], Cell.prototype, "wrap", void 0);
    __decorate$4([
        Property(true)
    ], Cell.prototype, "isLocked", void 0);
    __decorate$4([
        Property('')
    ], Cell.prototype, "validation", void 0);
    __decorate$4([
        Property(1)
    ], Cell.prototype, "colSpan", void 0);
    __decorate$4([
        Property(1)
    ], Cell.prototype, "rowSpan", void 0);
    return Cell;
}(ChildProperty));
/**
 * @hidden
 * @param {number} rowIndex - Specifies the rowIndex.
 * @param {number} colIndex - Specifies the colIndex.
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {boolean} isInitRow - Specifies the isInitRow.
 * @param {boolean} returnEmptyObjIfNull - Specifies the bool value.
 * @returns {CellModel} - get the cell.
 */
function getCell(rowIndex, colIndex, sheet, isInitRow, returnEmptyObjIfNull) {
    var row = getRow(sheet, rowIndex);
    if (!row || !row.cells) {
        if (isInitRow) {
            if (!row) {
                sheet.rows[rowIndex] = { cells: [] };
            }
            else {
                sheet.rows[rowIndex].cells = [];
            }
        }
        else {
            return returnEmptyObjIfNull ? {} : null;
        }
    }
    return sheet.rows[rowIndex].cells[colIndex] || (returnEmptyObjIfNull ? {} : null);
}
/**
 * @hidden
 * @param {number} rowIndex - Specifies the rowIndex.
 * @param {number} colIndex - Specifies the colIndex.
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {CellModel} cell - Specifies the cell.
 * @param {boolean} isExtend - Specifies the bool value.
 * @returns {void} - set the cell.
 */
function setCell(rowIndex, colIndex, sheet, cell, isExtend) {
    if (!sheet.rows[rowIndex]) {
        sheet.rows[rowIndex] = { cells: [] };
    }
    else if (!sheet.rows[rowIndex].cells) {
        sheet.rows[rowIndex].cells = [];
    }
    if (isExtend && sheet.rows[rowIndex].cells[colIndex]) {
        extend(sheet.rows[rowIndex].cells[colIndex], cell, null, true);
    }
    else {
        sheet.rows[rowIndex].cells[colIndex] = cell;
    }
}
/**
 * @hidden
 * @param {CellStyleModel} style - Specifies the style.
 * @param {boolean} defaultKey - Specifies the defaultKey.
 * @returns {CellStyleModel} - Specifies the CellStyleModel.
 */
function skipDefaultValue(style, defaultKey) {
    var defaultProps = { fontFamily: 'Calibri', verticalAlign: 'bottom', textIndent: '0pt', backgroundColor: '#ffffff',
        color: '#000000', textAlign: 'left', fontSize: '11pt', fontWeight: 'normal', fontStyle: 'normal', textDecoration: 'none',
        border: '', borderLeft: '', borderTop: '', borderRight: '', borderBottom: '' };
    var changedProps = {};
    Object.keys(defaultKey ? defaultProps : style).forEach(function (propName) {
        if (style[propName] !== defaultProps[propName]) {
            changedProps[propName] = style[propName];
        }
    });
    return changedProps;
}
/**
 * @hidden
 * @param {string} address - Specifies the address.
 * @param {boolean} wrap - Specifies the wrap.
 * @param {Workbook} context - Specifies the context.
 * @param {Workbook} preventEvt - Preventing the before cell update event.
 * @returns {void} - Specifies the wrap.
 */
function wrap(address, wrap, context, preventEvt) {
    if (wrap === void 0) { wrap = true; }
    var addressInfo = context.getAddressInfo(address);
    var rng = addressInfo.indices;
    var sheet = getSheet(context, addressInfo.sheetIndex);
    var uiRefresh = addressInfo.sheetIndex === context.activeSheetIndex;
    var cancel = !preventEvt;
    for (var i = rng[0]; i <= rng[2]; i++) {
        for (var j = rng[1]; j <= rng[3]; j++) {
            cancel = updateCell(context, sheet, { cell: { wrap: wrap }, rowIdx: i, colIdx: j, preventEvt: preventEvt });
            if (!cancel && uiRefresh) {
                context.notify(wrapEvent, { range: rng, wrap: wrap, sheet: sheet });
            }
        }
    }
    context.setProperties({ sheets: context.sheets }, true);
}
/**
 * @hidden
 * @param {string} format - Specifies the cell format.
 * @returns {string} - Specifies the supported color code.
 */
function getColorCode(format) {
    var customColors = getCustomColors();
    var code;
    if (format.indexOf('[') > -1) {
        var colorValue = format.split('[')[1].split(']')[0];
        if (customColors.indexOf(colorValue) > -1) {
            code = colorValue;
        }
    }
    return code;
}
/**
 * @hidden
 * @returns {string[]} - Returns the custom format colors
 */
function getCustomColors() {
    return ['Black', 'Blue', 'Cyan', 'Green', 'Magenta', 'Red', 'White', 'Yellow'];
}

/**
 * ServiceLocator
 *
 * @hidden
 */
var ServiceLocator = /** @__PURE__ @class */ (function () {
    function ServiceLocator() {
        this.services = {};
    }
    ServiceLocator.prototype.getService = function (name) {
        if (isNullOrUndefined(this.services[name])) {
            // eslint-disable-next-line no-throw-literal
            throw "The service " + name + " is not registered";
        }
        return this.services[name];
    };
    ServiceLocator.prototype.register = function (name, type) {
        if (isNullOrUndefined(this.services[name])) {
            this.services[name] = type;
        }
    };
    return ServiceLocator;
}());

/**
 * Export Workbook Services
 */

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Represents the Workbook.
 */
var Workbook = /** @__PURE__ @class */ (function (_super) {
    __extends(Workbook, _super);
    /**
     * Constructor for initializing the library.
     *
     * @param {WorkbookModel} options - Configures Workbook model.
     */
    function Workbook(options) {
        var _this = _super.call(this, options) || this;
        /** @hidden */
        _this.isEdit = false;
        /**
         * To generate sheet name based on sheet count.
         *
         * @hidden
         */
        _this.sheetNameCount = 1;
        /**
         * @hidden
         */
        _this.isOpen = false;
        /**
         * @hidden
         */
        _this.chartColl = [];
        /**
         * @hidden
         */
        _this.chartCount = 1;
        Workbook_1.Inject(DataBind, WorkbookSave, WorkbookOpen, WorkbookNumberFormat, WorkbookCellFormat, WorkbookEdit, WorkbookFormula, WorkbookSort, WorkbookHyperlink, WorkbookFilter, WorkbookInsert, WorkbookFindAndReplace, WorkbookDataValidation, WorkbookProtectSheet, WorkbookMerge, WorkbookConditionalFormat, WorkbookImage, WorkbookChart, WorkbookAutoFill);
        _this.commonCellStyle = {};
        if (options && options.cellStyle) {
            _this.commonCellStyle = options.cellStyle;
        }
        if (_this.getModuleName() === 'workbook') {
            _this.serviceLocator = new ServiceLocator;
            _this.initWorkbookServices();
            _this.dataBind();
            _this.initEmptySheet();
        }
        return _this;
    }
    Workbook_1 = Workbook;
    /**
     * For internal use only.
     *
     * @returns {void} - For internal use only.
     * @hidden
     */
    Workbook.prototype.preRender = function () {
        if (!Object.keys(this.commonCellStyle).length) {
            this.commonCellStyle = skipDefaultValue(this.cellStyle, true);
        }
        if (this.getModuleName() === 'spreadsheet' && !this.refreshing) {
            this.initEmptySheet();
        }
    };
    Workbook.prototype.initWorkbookServices = function () {
        this.serviceLocator.register(workbookLocale, new L10n(this.getModuleName(), localeData, this.locale));
    };
    /**
     * For internal use only.
     *
     * @returns {void} - For internal use only.
     * @hidden
     */
    Workbook.prototype.render = function () {
        /** code snippets */
    };
    /**
     * To provide the array of modules needed for workbook.
     *
     * @returns {ModuleDeclaration[]} - To provide the array of modules needed for workbook.
     * @hidden
     */
    Workbook.prototype.requiredModules = function () {
        return getWorkbookRequiredModules(this);
    };
    /**
     * Get the properties to be maintained in the persisted state.
     *
     * @returns {string} - Get the properties to be maintained in the persisted state.
     * @hidden
     */
    Workbook.prototype.getPersistData = function () {
        return this.addOnPersist([]);
    };
    /**
     * Applies the style (font family, font weight, background color, etc...) to the specified range of cells.
     *
     * {% codeBlock src='spreadsheet/cellFormat/index.md' %}{% endcodeBlock %}
     *
     * @param {CellStyleModel} style - Specifies the cell style.
     * @param {string} range - Specifies the address for the range of cells.
     * @returns {void} - Applies the style (font family, font weight, background color, etc...) to the specified range of cells.
     */
    Workbook.prototype.cellFormat = function (style, range) {
        var sheet = this.getActiveSheet();
        range = range || sheet.selectedRange;
        this.notify(setCellFormat, { style: style, range: range, refreshRibbon: range.indexOf(sheet.activeCell) > -1 ? true : false });
    };
    /**
     * Applies cell lock to the specified range of cells.
     *
     * {% codeBlock src='spreadsheet/lockCells/index.md' %}{% endcodeBlock %}
     *
     * @param {string} range - Specifies the address for the range of cells.
     * @param {boolean} isLocked -Specifies the cell is locked or not.
     * @returns {void} - To Applies cell lock to the specified range of cells.
     */
    Workbook.prototype.lockCells = function (range, isLocked) {
        var sheet = this.getActiveSheet();
        range = range || sheet.selectedRange;
        this.notify(setLockCells, { range: range, isLocked: isLocked });
    };
    /**
     * @hidden
     * @param {Workbook} cssProps - Specifies the cssProps.
     * @param {number[]} indexes - Specifies the indexes.
     * @returns {CellStyleModel} - To get Cell Style Value.
     */
    Workbook.prototype.getCellStyleValue = function (cssProps, indexes) {
        var _this = this;
        var cell = getCell(indexes[0], indexes[1], this.getActiveSheet());
        var style = {};
        cssProps.forEach(function (cssProp) {
            style[cssProp] = _this.cellStyle[cssProp];
            if (cell && cell.style && cell.style[cssProp]) {
                style[cssProp] = cell.style[cssProp];
            }
        });
        return style;
    };
    /**
     * Applies the number format (number, currency, percentage, short date, etc...) to the specified range of cells.
     *
     * {% codeBlock src='spreadsheet/numberFormat/index.md' %}{% endcodeBlock %}
     *
     * @param {string} format - Specifies the number format code.
     * @param {string} range - Specifies the address for the range of cells.
     * @returns {void} - Applies the number format (number, currency, percentage, short date, etc...) to the specified range of cells.
     */
    Workbook.prototype.numberFormat = function (format, range) {
        this.notify(applyNumberFormatting, { format: format, range: range });
    };
    /**
     * Used to create new sheet.
     *
     * @hidden
     * @param {number} index - Specifies the index.
     * @param {SheetModel[]} sheets - Specifies the sheets.
     * @returns {void} - To create new sheet.
     */
    Workbook.prototype.createSheet = function (index, sheets) {
        if (index === void 0) { index = this.sheets.length; }
        if (sheets === void 0) { sheets = [{}]; }
        var _a;
        (_a = this.sheets).splice.apply(_a, [index, 0].concat(sheets));
        initSheet(this, sheets);
        this.notify(sheetCreated, { sheetIndex: index || 0, sheets: sheets });
        this.notify(workbookFormulaOperation, {
            action: 'registerSheet', sheetIndex: index || 0, sheetCount: index + sheets.length
        });
    };
    /**
     * Used to remove sheet.
     *
     * @hidden
     * @param  {number} idx - Specifies the index.
     * @returns {void} - To remove sheet
     */
    Workbook.prototype.removeSheet = function (idx) {
        this.sheets.splice(idx, 1);
    };
    /**
     * Destroys the Workbook library.
     *
     * @returns {void} - To destroy sheet
     */
    Workbook.prototype.destroy = function () {
        this.notify(workbookDestroyed, null);
        _super.prototype.destroy.call(this);
    };
    /**
     * Called internally if any of the property value changed.
     *
     * @param {WorkbookModel} newProp - To set the properties
     * @param {WorkbookModel} oldProp - To get the properties
     * @returns {void} - property value changed
     * @hidden
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    Workbook.prototype.onPropertyChanged = function (newProp, oldProp) {
        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
            var prop = _a[_i];
            switch (prop) {
                case 'cellStyle':
                    merge(this.commonCellStyle, newProp.cellStyle);
                    break;
                case 'sheets':
                    if (newProp.sheets === this.sheets) {
                        this.notify(workbookFormulaOperation, { action: 'unRegisterSheet', propertyChange: true });
                        this.sheetNameCount = 1;
                        this.notify(sheetsDestroyed, {});
                        initSheet(this);
                        this.notify(sheetCreated, null);
                        this.notify(workbookFormulaOperation, { action: 'registerSheet' });
                    }
                    else {
                        initSheet(this);
                    }
                    break;
            }
        }
    };
    /**
     * Not applicable for workbook.
     *
     * @hidden
     * @param {string | HTMLElement} selector - Specifies the selector.
     * @returns {void} - To append the element.
     */
    Workbook.prototype.appendTo = function (selector) {
        _super.prototype.appendTo.call(this, selector);
    };
    /**
     * Used to hide/show the rows in spreadsheet.
     *
     * @param {number} startIndex - Specifies the start row index.
     * @param {number} endIndex - Specifies the end row index.
     * @param {boolean} hide - To hide/show the rows in specified range.
     * @returns {void} - To hide/show the rows in spreadsheet.
     */
    Workbook.prototype.hideRow = function (startIndex, endIndex, hide) {
        if (endIndex === void 0) { endIndex = startIndex; }
        if (hide === void 0) { hide = true; }
        var sheet = this.getActiveSheet();
        if (hide && (sheet.frozenRows || sheet.frozenColumns)) {
            return;
        }
        for (var i = startIndex; i <= endIndex; i++) {
            setRow(sheet, i, { hidden: hide });
        }
    };
    /**
     * Used to hide/show the columns in spreadsheet.
     *
     * @param {number} startIndex - Specifies the start column index.
     * @param {number} endIndex - Specifies the end column index.
     * @param {boolean} hide - Set `true` / `false` to hide / show the columns.
     * @returns {void} - To hide/show the columns in spreadsheet.
     */
    Workbook.prototype.hideColumn = function (startIndex, endIndex, hide) {
        if (endIndex === void 0) { endIndex = startIndex; }
        if (hide === void 0) { hide = true; }
        var sheet = this.getActiveSheet();
        if (sheet.frozenRows || sheet.frozenColumns) {
            return;
        }
        for (var i = startIndex; i <= endIndex; i++) {
            setColumn(sheet, i, { hidden: hide });
        }
    };
    /**
     * Sets the border to specified range of cells.
     *
     * {% codeBlock src='spreadsheet/setBorder/index.md' %}{% endcodeBlock %}
     *
     * @param {CellStyleModel} style - Specifies the style property which contains border value.
     * @param {string} range - Specifies the range of cell reference. If not specified, it will considered the active cell reference.
     * @param {BorderType} type - Specifies the range of cell reference. If not specified, it will considered the active cell reference.
     * @returns {void} - To Sets the border to specified range of cells.
     */
    Workbook.prototype.setBorder = function (style, range, type) {
        this.notify(setCellFormat, {
            style: style, borderType: type, range: range || this.getActiveSheet().selectedRange
        });
    };
    /**
     * Used to insert rows in to the spreadsheet.
     *
     * {% codeBlock src='spreadsheet/insertRow/index.md' %}{% endcodeBlock %}
     *
     * @param {number | RowModel[]} startRow - Specifies the start row index / row model which needs to be inserted.
     * @param {number} endRow - Specifies the end row index.
     * @param {number | string} sheet - Specifies the sheet name or index in which the insert operation will perform. By default,
     * active sheet will be considered.
     * @returns {void} - To insert rows in to the spreadsheet.
     */
    Workbook.prototype.insertRow = function (startRow, endRow, sheet) {
        this.notify(insertModel, { model: this.getSheetModel(sheet), start: startRow, end: endRow,
            modelType: 'Row', insertType: 'below' });
    };
    /**
     * Used to insert columns in to the spreadsheet.
     *
     * {% codeBlock src='spreadsheet/insertColumn/index.md' %}{% endcodeBlock %}
     *
     * @param {number | ColumnModel[]} startColumn - Specifies the start column index / column model which needs to be inserted.
     * @param {number} endColumn - Specifies the end column index.
     * @param {number | string} sheet - Specifies the sheet name or index in which the insert operation will perform. By default,
     * active sheet will be considered.
     * @returns {void} - To insert columns in to the spreadsheet.
     */
    Workbook.prototype.insertColumn = function (startColumn, endColumn, sheet) {
        this.notify(insertModel, { model: this.getSheetModel(sheet), start: startColumn, end: endColumn,
            modelType: 'Column', insertType: 'after' });
    };
    /**
     * Used to insert sheets in to the spreadsheet.
     *
     * {% codeBlock src='spreadsheet/insertSheet/index.md' %}{% endcodeBlock %}
     *
     * @param {number | SheetModel[]} startSheet - Specifies the start sheet index / sheet model which needs to be inserted.
     * @param {number} endSheet - Specifies the end sheet index.
     * @returns {void} - To insert sheets in to the spreadsheet.
     */
    Workbook.prototype.insertSheet = function (startSheet, endSheet) {
        this.notify(insertModel, { model: this, start: startSheet, end: endSheet, modelType: 'Sheet' });
    };
    /**
     * Used to delete rows, columns and sheets from the spreadsheet.
     *
     * {% codeBlock src='spreadsheet/delete/index.md' %}{% endcodeBlock %}
     *
     * @param {number} startIndex - Specifies the start sheet / row / column index.
     * @param {number} endIndex - Specifies the end sheet / row / column index.
     * @param {ModelType} model - Specifies the delete model type. By default, the model is considered as `Sheet`. The possible values are,
     * - Row: To delete rows.
     * - Column: To delete columns.
     * - Sheet: To delete sheets.
     * @param {number | string} sheet - Specifies the sheet name or index in which the delete operation will perform. By default,
     * active sheet will be considered. It is applicable only for model type Row and Column.
     * @returns {void} - To delete rows, columns and sheets from the spreadsheet.
     */
    Workbook.prototype.delete = function (startIndex, endIndex, model, sheet) {
        startIndex = startIndex || 0;
        var sheetModel;
        if (!model || model === 'Sheet') {
            sheetModel = this;
        }
        else {
            sheetModel = this.getSheetModel(sheet);
            if (!sheetModel) {
                return;
            }
        }
        this.notify(deleteModel, {
            model: sheetModel, start: startIndex, end: isNullOrUndefined(endIndex) ? startIndex : endIndex, modelType: model || 'Sheet'
        });
    };
    /**
     * Used to move the sheets to the specified position in the list of sheets.
     *
     * {% codeBlock src='spreadsheet/moveSheet/index.md' %}{% endcodeBlock %}
     *
     * @param {number} position - Specifies the position to move a sheet in the list of sheets.
     * @param {number[]} sheetIndexes - Specifies the indexes of the sheet to be moved. By default, the active sheet will be moved.
     * @returns {void} - Used to move the sheets to the specified position in the list of sheets.
     */
    Workbook.prototype.moveSheet = function (position, sheetIndexes) {
        moveSheet(this, position, sheetIndexes);
    };
    /**
     * Used to make a duplicate/copy of the sheet in the spreadsheet.
     *
     * {% codeBlock src='spreadsheet/duplicateSheet/index.md' %}{% endcodeBlock %}
     *
     * @param {number} sheetIndex - Specifies the index of the sheet to be duplicated. By default, the active sheet will be duplicated.
     * @returns {void} - Used to make a duplicate/copy of the sheet in the spreadsheet.
     */
    Workbook.prototype.duplicateSheet = function (sheetIndex) {
        duplicateSheet(this, sheetIndex);
    };
    Workbook.prototype.getSheetModel = function (sheet) {
        if (isNullOrUndefined(sheet)) {
            return this.getActiveSheet();
        }
        else {
            var index = typeof sheet === 'string' ? getSheetIndex(this, sheet) : sheet;
            if (isNullOrUndefined(index) || index >= this.sheets.length) {
                return null;
            }
            return this.sheets[index];
        }
    };
    /**
     * Used to merge the range of cells.
     *
     * {% codeBlock src='spreadsheet/merge/index.md' %}{% endcodeBlock %}
     *
     * @param {string} range - Specifies the range of cells as address.
     * @param {MergeType} type - Specifies the merge type. The possible values are,
     * - All: Merge all the cells between provided range.
     * - Horizontally: Merge the cells row-wise.
     * - Vertically: Merge the cells column-wise.
     * @returns {void} - To merge the range of cells.
     */
    Workbook.prototype.merge = function (range, type) {
        var sheetIdx;
        var sheet;
        if (range) {
            sheetIdx = this.getAddressInfo(range).sheetIndex;
            sheet = getSheet(this, sheetIdx);
        }
        else {
            sheet = this.getActiveSheet();
            range = sheet.selectedRange;
        }
        this.notify(setMerge, { merge: true, range: range, type: type || 'All', sheet: sheet, refreshRibbon: range.indexOf(sheet.activeCell) > -1 ? true : false, preventRefresh: this.activeSheetIndex !== sheetIdx });
    };
    /** Used to compute the specified expression/formula.
     *
     * {% codeBlock src='spreadsheet/computeExpression/index.md' %}{% endcodeBlock %}
     *
     * @param {string} formula - Specifies the formula(=SUM(A1:A3)) or expression(2+3).
     * @returns {string | number} - to compute the specified expression/formula.
     */
    Workbook.prototype.computeExpression = function (formula) {
        var args = {
            action: 'computeExpression', formula: formula
        };
        this.notify(workbookFormulaOperation, args);
        return args.calcValue;
    };
    Workbook.prototype.initEmptySheet = function () {
        if (!this.sheets.length) {
            this.createSheet();
        }
        else {
            initSheet(this);
        }
    };
    /** @hidden
     * @returns {SheetModel} - To get Active Sheet.
     */
    Workbook.prototype.getActiveSheet = function () {
        return this.sheets[this.activeSheetIndex];
    };
    /** @hidden
     * @param {number} index - Specifies the index.
     * @param {number} initIdx - Specifies the initIdx.
     * @param {number} hiddenCount - Specifies the initIdx.
     * @returns {number} - To skip Hidden Sheets.
     */
    Workbook.prototype.skipHiddenSheets = function (index, initIdx, hiddenCount) {
        if (hiddenCount === void 0) { hiddenCount = 0; }
        if (this.sheets[index] && this.sheets[index].state !== 'Visible') {
            if (initIdx === undefined) {
                initIdx = index;
            }
            if (index && index + 1 === this.sheets.length) {
                index = initIdx - 1;
            }
            else {
                index = index < initIdx ? --index : ++index;
            }
            index = this.skipHiddenSheets(index, initIdx, ++hiddenCount);
        }
        if (hiddenCount === this.sheets.length) {
            this.setSheetPropertyOnMute(this.sheets[0], 'state', 'Visible');
            return 0;
        }
        return index;
    };
    /**
     * Used for setting the used range row and column index.
     *
     * @hidden
     * @param {number} rowIdx - Specifies the rowIndex.
     * @param {number} colIdx - Specifies the colIndex.
     * @param {SheetModel} sheet - Specifies the active sheet.
     * @param {boolean} preventRowColUpdate - To prevent updating row and column count.
     * @returns {void} - To setting the used range row and column index.
     */
    Workbook.prototype.setUsedRange = function (rowIdx, colIdx, sheet, preventRowColUpdate) {
        if (sheet === void 0) { sheet = this.getActiveSheet(); }
        if (rowIdx > sheet.usedRange.rowIndex) {
            sheet.usedRange.rowIndex = rowIdx;
            if (sheet === this.getActiveSheet() && !preventRowColUpdate) {
                this.notify(updateRowColCount, { index: rowIdx, update: 'row' });
            }
        }
        if (colIdx > sheet.usedRange.colIndex) {
            sheet.usedRange.colIndex = colIdx;
            if (sheet === this.getActiveSheet() && !preventRowColUpdate) {
                this.notify(updateRowColCount, { index: colIdx, update: 'col' });
            }
        }
    };
    /**
     * Gets the range of data as JSON from the specified address.
     *
     * {% codeBlock src='spreadsheet/getData/index.md' %}{% endcodeBlock %}
     *
     * @param {string} address - Specifies the address for range of cells.
     * @returns {Promise<Map<string, CellModel>>} - Gets the range of data as JSON from the specified address.
     */
    Workbook.prototype.getData = function (address) {
        return getData(this, address);
    };
    /**
     * Get component name.
     *
     * @returns {string} - Gets the module name.
     * @hidden
     */
    Workbook.prototype.getModuleName = function () {
        return 'workbook';
    };
    /** @hidden
     * @param {string} address - Specifies the sheet id.
     * @returns {void} - To set the value for row and col.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    Workbook.prototype.goTo = function (address) {
        /** */
    };
    /** @hidden
     * @param {number} sheetId - Specifies the sheet id.
     * @param {number} rowIndex - Specifies the rowIndex.
     * @param {number} colIndex - Specifies the colIndex.
     * @param {string} formulaCellReference - Specifies the formulaCellReference.
     * @param {boolean} refresh - Specifies the refresh.
     * @returns {string | number} - To set the value for row and col.
     */
    Workbook.prototype.getValueRowCol = function (sheetId, rowIndex, colIndex, formulaCellReference, refresh) {
        var args = {
            action: 'getSheetInfo', sheetInfo: []
        };
        this.notify(workbookFormulaOperation, args);
        if (getSheetIndexByName(this, 'Sheet' + sheetId, args.sheetInfo) === -1) {
            var errArgs = { action: 'getReferenceError', refError: '' };
            this.notify(workbookFormulaOperation, errArgs);
            return errArgs.refError;
        }
        var sheetIndex = getSheetIndexFromId(this, sheetId);
        var sheet = getSheet(this, sheetIndex);
        var cell = getCell(rowIndex - 1, colIndex - 1, sheet);
        if (formulaCellReference && formulaCellReference.includes('!') && !cell && sheet.ranges && sheet.ranges.length) {
            var isNotLoaded_1;
            if (this.formulaRefCell && this.formulaRefCell === formulaCellReference) {
                return cell && cell.value;
            }
            sheet.ranges.forEach(function (range) {
                if (!range.info || !range.info.loadedRange || !range.info.loadedRange.length) {
                    isNotLoaded_1 = true;
                    return;
                }
            });
            if (isNotLoaded_1) {
                this.formulaRefCell = formulaCellReference;
                sheetIndex = getSheetIndexFromId(this, Number(formulaCellReference.substring(formulaCellReference.lastIndexOf(',') + 1, formulaCellReference.length)));
                if (isNullOrUndefined(sheetIndex)) {
                    return cell && cell.value;
                }
                formulaCellReference = formulaCellReference.substring(formulaCellReference.lastIndexOf('!') + 1, formulaCellReference.lastIndexOf(','));
                getData(this, sheet.name + "!A1:" + getCellAddress(rowIndex - 1, colIndex - 1), null, null, null, null, formulaCellReference, sheetIndex);
            }
        }
        else if (cell && cell.formula && (refresh || isNullOrUndefined(cell.value)) && cell.formula.indexOf('UNIQUE') === -1) {
            this.notify('calculateFormula', { cell: cell, rowIdx: rowIndex - 1, colIdx: colIndex - 1, sheetIndex: sheetIndex });
        }
        return cell && cell.value;
    };
    /** @hidden
     * @param {number} sheetId - Specifies the sheet id.
     * @param {string | number} value - Specifies the value.
     * @param {number} rowIndex - Specifies the rowIndex.
     * @param {number} colIndex - Specifies the colIndex.
     * @param {string} formula - Specifies the colIndex.
     * @returns {void} - To set the value for row and col.
     */
    Workbook.prototype.setValueRowCol = function (sheetId, value, rowIndex, colIndex, formula) {
        this.notify(workbookEditOperation, {
            action: 'updateCellValue', address: [rowIndex - 1, colIndex - 1], value: value,
            sheetIndex: getSheetIndexFromId(this, sheetId), isValueOnly: true, formula: formula
        });
    };
    /**
     * Opens the specified excel file or stream.
     *
     * @param {OpenOptions} options - Options for opening the excel file.
     * @returns {void} - Opens the specified excel file or stream.
     */
    Workbook.prototype.open = function (options) {
        this.notify(workbookOpen, options);
    };
    /**
     * Opens the specified JSON object.
     *
     * {% codeBlock src='spreadsheet/openFromJson/index.md' %}{% endcodeBlock %}
     *
     * The available arguments in options are:
     * * file: Specifies the spreadsheet model as object or string. And the object contains the jsonObject,
     * which is saved from spreadsheet using saveAsJson method.
     *
     * @param {Object} options - Options for opening the JSON object.
     * @param {string | object} options.file - Options for opening the JSON object.
     * @returns {void} - Opens the specified JSON object.
     */
    Workbook.prototype.openFromJson = function (options) {
        this.isOpen = true;
        var jsonObject = typeof options.file === 'object' ? JSON.stringify(options.file) : options.file;
        this.notify(workbookOpen, { jsonObject: jsonObject });
    };
    /**
     * Saves the Spreadsheet data to Excel file.
     *
     * {% codeBlock src='spreadsheet/save/index.md' %}{% endcodeBlock %}
     *
     * The available arguments in saveOptions are:
     * * url: Specifies the save URL.
     * * fileName: Specifies the file name.
     * * saveType: Specifies the file type need to be saved.
     *
     * @param {SaveOptions} saveOptions - Options for saving the excel file.
     * @returns {void} - To Saves the Spreadsheet data to Excel file.
     */
    Workbook.prototype.save = function (saveOptions) {
        if (saveOptions === void 0) { saveOptions = {}; }
        if (this.allowSave) {
            var defaultProps = {
                url: this.saveUrl,
                fileName: saveOptions.fileName || 'Sample',
                saveType: 'Xlsx'
                //passWord: args.passWord
            };
            var eventArgs = __assign({}, defaultProps, saveOptions, { customParams: {}, isFullPost: true, needBlobData: false, cancel: false, pdfLayoutSettings: { fitSheetOnOnePage: false } });
            this.trigger('beforeSave', eventArgs);
            this.notify(beginAction, { eventArgs: eventArgs, action: 'beforeSave' });
            if (!eventArgs.cancel) {
                this.notify(beginSave, {
                    saveSettings: eventArgs, isFullPost: eventArgs.isFullPost,
                    needBlobData: eventArgs.needBlobData, customParams: eventArgs.customParams, pdfLayoutSettings: eventArgs.pdfLayoutSettings
                });
            }
        }
    };
    /**
     * Saves the Spreadsheet data as JSON object.
     *
     * {% codeBlock src='spreadsheet/saveAsJson/index.md' %}{% endcodeBlock %}
     *
     * @returns {Promise<object>} - To Saves the Spreadsheet data as JSON object.
     */
    Workbook.prototype.saveAsJson = function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.on(onSave, function (args) {
                args.cancel = true;
                _this.off(onSave);
                resolve({ jsonObject: { Workbook: args.jsonObject } });
                _this.notify(saveCompleted, args);
            });
            _this.save();
        });
    };
    Workbook.prototype.addHyperlink = function (hyperlink, cellAddress) {
        var args = { hyperlink: hyperlink, cell: cellAddress };
        this.notify(setLinkModel, args);
    };
    /**
     * To find the specified cell value.
     *
     * @hidden
     * @param {FindOptions} args - options for find.
     * {% codeBlock src='spreadsheet/findHandler/index.md' %}{% endcodeBlock %}
     * @returns {void} - To find the specified cell value.
     */
    Workbook.prototype.findHandler = function (args) {
        if (args.findOpt === 'next') {
            this.notify(findNext, args);
        }
        else if (args.findOpt === 'prev') {
            this.notify(findPrevious, args);
        }
    };
    /**
     * @hidden
     * @param {FindOptions} args - Specifies the FindOptions.
     * @returns {void} - To replace the value.
     */
    Workbook.prototype.replaceHandler = function (args) {
        if (args.replaceBy === 'replace') {
            this.notify(replaceHandler, args);
        }
        else {
            this.notify(replaceAllHandler, args);
        }
    };
    /**
     * Protect the active sheet based on the protect sheetings.
     *
     * @param {number} sheet - Specifies the sheet to protect.
     * @param {ProtectSettingsModel} protectSettings - Specifies the protect settings of the sheet.
     * @param {string} password - Specifies the password to protect
     * @returns {void} - protect the active sheet.
     */
    Workbook.prototype.protectSheet = function (sheet, protectSettings, password) {
        this.notify(protectsheetHandler, { protectSettings: protectSettings, password: password });
    };
    /**
     * Unprotect the active sheet.
     *
     * @param {number} sheet - Specifies the sheet to Unprotect.
     * @returns {void} - Unprotect the active sheet.
     */
    Workbook.prototype.unprotectSheet = function (sheet) {
        var args = { sheet: sheet };
        this.notify(unprotectsheetHandler, args);
    };
    /**
     * Sorts the range of cells in the active Spreadsheet.
     *
     * @param {SortOptions} sortOptions - options for sorting.
     * @param {string} range - address of the data range.
     * @returns {Promise<SortEventArgs>} - Sorts the range of cells in the active Spreadsheet.
     */
    Workbook.prototype.sort = function (sortOptions, range) {
        if (!this.allowSorting) {
            return Promise.reject();
        }
        var eventArgs = {
            range: range || this.getActiveSheet().selectedRange,
            sortOptions: sortOptions || { sortDescriptors: {} },
            cancel: false
        };
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var promise = new Promise(function (resolve, reject) { resolve((function () { })()); });
        var sortArgs = { args: eventArgs, promise: promise };
        this.notify(initiateSort, sortArgs);
        return sortArgs.promise;
    };
    Workbook.prototype.addDataValidation = function (rules, range) {
        if (rules.type === 'List' && rules.value1.length > 256) {
            rules.value1 = rules.value1.substring(0, 255);
        }
        this.notify(cellValidation, { rules: rules, range: range || this.getActiveSheet().selectedRange });
    };
    Workbook.prototype.removeDataValidation = function (range) {
        this.notify(cellValidation, { range: range, isRemoveValidation: true });
    };
    Workbook.prototype.addInvalidHighlight = function (range) {
        this.notify(addHighlight, { range: range });
    };
    Workbook.prototype.removeInvalidHighlight = function (range) {
        this.notify(removeHighlight, { range: range });
    };
    Workbook.prototype.conditionalFormat = function (conditionalFormat) {
        conditionalFormat.range = conditionalFormat.range || this.getActiveSheet().selectedRange;
        this.notify(setCFRule, { conditionalFormat: conditionalFormat });
    };
    Workbook.prototype.clearConditionalFormat = function (range) {
        range = range || this.getActiveSheet().selectedRange;
        this.notify(clearCFRule, { range: range });
    };
    /**
     * To update a cell properties.
     *
     * @param {CellModel} cell - Cell properties.
     * @param {string} address - Address to update.
     * @returns {void} - To update a cell properties
     * {% codeBlock src='spreadsheet/updateCell/index.md' %}{% endcodeBlock %}
     */
    Workbook.prototype.updateCell = function (cell, address) {
        var sheetIdx;
        var range = getIndexesFromAddress(address);
        if (address.includes('!')) {
            sheetIdx = getSheetIndex(this, address.split('!')[0]);
            if (sheetIdx === undefined) {
                sheetIdx = this.activeSheetIndex;
            }
        }
        else {
            sheetIdx = this.activeSheetIndex;
        }
        updateCell(this, this.sheets[sheetIdx], { cell: cell, rowIdx: range[0], colIdx: range[1], uiRefresh: sheetIdx === this.activeSheetIndex,
            valChange: cell.value !== undefined || cell.formula !== undefined, preventEvt: true });
        this.notify(activeCellChanged, null);
    };
    /**
     * Used to get a row data from the data source with updated cell value.
     *
     * {% codeBlock src='spreadsheet/getRowData/index.md' %}{% endcodeBlock %}
     *
     * @param {number} index - Specifies the row index.
     * @param {number} sheetIndex - Specifies the sheet index. By default, it consider the active sheet index.
     * @returns {Object[]} - Return row data.
     */
    Workbook.prototype.getRowData = function (index, sheetIndex) {
        if (isNullOrUndefined(index)) {
            index = 0;
        }
        if (isNullOrUndefined(sheetIndex)) {
            sheetIndex = this.activeSheetIndex;
        }
        var eventArgs = { sheetIdx: sheetIndex, startIndex: index, modelType: 'Row', isDataRequest: true };
        this.notify(dataChanged, eventArgs);
        return eventArgs.data;
    };
    /**
     * This method is used to update the Range property in specified sheetIndex.
     *
     * @param {RangeModel} range - Specifies the range properties to update.
     * @param {number} sheetIdx - Specifies the sheetIdx to update.
     * @returns {void} - To update a range properties.
     */
    Workbook.prototype.updateRange = function (range, sheetIdx) {
        sheetIdx = sheetIdx ? sheetIdx - 1 : this.activeSheetIndex;
        var sheet = getSheet(this, sheetIdx);
        var ranges = sheet.ranges;
        if (!isNullOrUndefined(sheet)) {
            ranges.push(range);
            sheet.ranges = ranges;
        }
    };
    /**
     * This method is used to wrap/unwrap the text content of the cell.
     *
     * {% codeBlock src='spreadsheet/wrap/index.md' %}{% endcodeBlock %}
     *
     * @param {string} address - Address of the cell to be wrapped.
     * @param {boolean} wrap - Set `false` if the text content of the cell to be unwrapped.
     * @returns {void} - To wrap/unwrap the text content of the cell.
     * {% codeBlock src='spreadsheet/wrap/index.md' %}{% endcodeBlock %}
     */
    Workbook.prototype.wrap = function (address, wrap$$1) {
        if (wrap$$1 === void 0) { wrap$$1 = true; }
        wrap(address, wrap$$1, this);
    };
    /**
     * Adds the defined name to the Spreadsheet.
     *
     * @param {DefineNameModel} definedName - Specifies the name.
     * @returns {boolean} - Return the added status of the defined name.
     * {% codeBlock src='spreadsheet/addDefinedName/index.md' %}{% endcodeBlock %}
     */
    Workbook.prototype.addDefinedName = function (definedName) {
        var eventArgs = {
            action: 'addDefinedName',
            isAdded: false,
            definedName: definedName
        };
        this.notify(workbookFormulaOperation, eventArgs);
        return eventArgs.isAdded;
    };
    /**
     * Removes the defined name from the Spreadsheet.
     *
     * @param {string} definedName - Specifies the name.
     * @param {string} scope - Specifies the scope of the defined name.
     * @returns {boolean} - Return the removed status of the defined name.
     * {% codeBlock src='spreadsheet/removeDefinedName/index.md' %}{% endcodeBlock %}
     */
    Workbook.prototype.removeDefinedName = function (definedName, scope) {
        if (scope === void 0) { scope = ''; }
        var eventArgs = {
            action: 'removeDefinedName',
            isRemoved: false,
            definedName: definedName,
            scope: scope
        };
        this.notify(workbookFormulaOperation, eventArgs);
        return eventArgs.isRemoved;
    };
    /** @hidden
     * @param {string} address - Specifies the address.
     * @param {number} sheetIndex - Specifies the sheetIndex.
     * @param {boolean} valueOnly - Specifies the bool value.
     * @returns {void} - To clear range.
     */
    Workbook.prototype.clearRange = function (address, sheetIndex, valueOnly) {
        //** */
    };
    /**
     * Used to set the image in spreadsheet.
     *
     * @param {ImageModel} images - Specifies the options to insert image in spreadsheet.
     * @param {string} range - Specifies the range in spreadsheet.
     * @returns {void} - To set the image in spreadsheet.
     */
    Workbook.prototype.insertImage = function (images, range) {
        this.notify(setImage, { options: images, range: range ? range : this.getActiveSheet().selectedRange });
    };
    /**
     * Used to perform autofill action based on the specified range in spreadsheet.
     *
     * @param {string} fillRange - Specifies the fill range.
     * @param {string} dataRange - Specifies the data range.
     * @param {AutoFillDirection} direction - Specifies the direction("Down","Right","Up","Left") to be filled.
     * @param {AutoFillType} fillType - Specifies the fill type("FillSeries","CopyCells","FillFormattingOnly","FillWithoutFormatting") for autofill action.
     * @returns {void} - To perform autofill action based on the specified range in spreadsheet.
     */
    Workbook.prototype.autoFill = function (fillRange$$1, dataRange, direction, fillType) {
        var options = {
            dataRange: dataRange ? dataRange : this.getActiveSheet().selectedRange,
            fillRange: fillRange$$1,
            direction: direction ? direction : 'Down',
            fillType: fillType ? fillType : 'FillSeries'
        };
        this.notify(setAutoFill, options);
    };
    /**
     * Used to set the chart in spreadsheet.
     *
     * {% codeBlock src='spreadsheet/insertChart/index.md' %}{% endcodeBlock %}
     *
     * @param {ChartModel} chart - Specifies the options to insert chart in spreadsheet
     * @returns {void} - To set the chart in spreadsheet.
     */
    Workbook.prototype.insertChart = function (chart) {
        this.notify(setChart, { chart: chart });
    };
    /**
     * Used to delete the chart from spreadsheet.
     *
     * {% codeBlock src='spreadsheet/deleteChart/index.md' %}{% endcodeBlock %}
     *
     * @param {string} id - Specifies the chart element id.
     * @returns {void} - To delete the chart from spreadsheet.
     */
    Workbook.prototype.deleteChart = function (id) {
        this.notify(deleteChart, { id: id });
    };
    /**
     * Filters the range of cells in the sheet.
     *
     * @param {FilterOptions} filterOptions - Specifies the filterOptions
     * @param {string} range - Specifies the range
     * @returns {Promise<FilterEventArgs>} - To Filters the range of cells in the sheet.
     */
    Workbook.prototype.filter = function (filterOptions, range) {
        if (!this.allowFiltering) {
            return Promise.reject();
        }
        var eventArgs = {
            range: range || this.getActiveSheet().selectedRange,
            filterOptions: filterOptions,
            cancel: false
        };
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var promise = new Promise(function (resolve, reject) { resolve((function () { })()); });
        var filterArgs = { args: eventArgs, promise: promise };
        this.notify(initiateFilter, filterArgs);
        return filterArgs.promise;
    };
    /**
     * To add custom library function.
     *
     * @param {string} functionHandler - Custom function handler name
     * @param {string} functionName - Custom function name
     * {% codeBlock src='spreadsheet/addCustomFunction/index.md' %}{% endcodeBlock %}
     * @returns {void} - To add custom library function.
     */
    Workbook.prototype.addCustomFunction = function (functionHandler, functionName) {
        functionName = functionName ? functionName : typeof functionHandler === 'string' ? functionHandler :
            functionHandler.name.replace('bound ', '');
        var eventArgs = {
            action: 'addCustomFunction',
            functionHandler: functionHandler,
            functionName: functionName
        };
        this.notify(workbookFormulaOperation, eventArgs);
    };
    /**
     * This method is used to Clear contents, formats and hyperlinks in spreadsheet.
     *
     * @param {ClearOptions} options - Options for clearing the content, formats and hyperlinks in spreadsheet.
     * @returns {void} - To Clear contents, formats and hyperlinks.
     */
    Workbook.prototype.clear = function (options) {
        this.notify(clear, options);
    };
    /**
     * Gets the formatted text of the cell.
     *
     * {% codeBlock src='spreadsheet/getDisplayText/index.md' %}{% endcodeBlock %}
     *
     * @param {CellModel} cell - Specifies the cell.
     * @returns {string} - To get Display Text.
     */
    Workbook.prototype.getDisplayText = function (cell) {
        if (!cell) {
            return '';
        }
        if (cell.format && !isNullOrUndefined(cell.value)) {
            var eventArgs = {
                formattedText: cell.value, value: cell.value, format: cell.format, onLoad: true, cell: cell
            };
            this.notify(getFormattedCellObject, eventArgs);
            return eventArgs.formattedText;
        }
        else if (!cell.value && cell.hyperlink) {
            return typeof cell.hyperlink === 'string' ? cell.hyperlink : cell.hyperlink.address;
        }
        else {
            return cell.value || typeof cell.value === 'number' ? cell.value.toString() : '';
        }
    };
    /**
     * This method is used to freeze rows and columns after the specified cell in the Spreadsheet.
     *
     * @param {number} row - Specifies the freezed row count.
     * @param {number} column - Specifies the freezed column count.
     * @param {number | string} sheet - Specifies the sheet name or index in which the freeze operation will perform. By default,
     * active sheet will be considered.
     * {% codeBlock src='spreadsheet/freezePanes/index.md' %}{% endcodeBlock %}
     * @returns {void}
     */
    Workbook.prototype.freezePanes = function (row, column, sheet) {
        if (row === void 0) { row = 1; }
        if (column === void 0) { column = 1; }
        var model = this.getSheetModel(sheet);
        if (model.frozenRows === row && model.frozenColumns === column) {
            return;
        }
        this.setSheetPropertyOnMute(model, 'frozenRows', row);
        this.setSheetPropertyOnMute(model, 'frozenColumns', column);
        this.updateTopLeftCell();
        if (model.name === this.getActiveSheet().name) {
            this.notify(dataRefresh, null);
        }
    };
    /**
     * This method is used to unfreeze the frozen rows and columns from the active sheet.
     *
     * @param {number | string} sheet - Specifies the sheet name or index in which the unfreeze operation will perform. By default,
     * active sheet will be considered.
     * {% codeBlock src='spreadsheet/unfreezePanes/index.md' %}{% endcodeBlock %}
     * @returns {void}
     */
    Workbook.prototype.Unfreeze = function (sheet) {
        this.freezePanes(0, 0, sheet);
    };
    /**
     * @param {number} top - Specifies the top.
     * @param {number} left - Specifies the fleft.
     * @param {string} model - Specifies the model.
     * @param {SheetModel} sheet - Specifies the sheet.
     * @returns {void}
     * @hidden
     */
    Workbook.prototype.updateTopLeftCell = function (top, left, model, sheet) {
        if (!sheet) {
            sheet = this.getActiveSheet();
        }
        var indexes = getCellIndexes(sheet.topLeftCell);
        if (sheet.frozenRows || sheet.frozenColumns) {
            if (isNullOrUndefined(top)) {
                top = sheet.frozenRows ? 0 : indexes[0];
            }
            if (isNullOrUndefined(left)) {
                left = sheet.frozenColumns ? 0 : indexes[1];
            }
            top += this.frozenRowCount(sheet);
            left += this.frozenColCount(sheet);
            if (model) {
                if (model === 'row') {
                    top = getCellIndexes(sheet.paneTopLeftCell)[0];
                }
                else {
                    left = getCellIndexes(sheet.paneTopLeftCell)[1];
                }
            }
            this.setSheetPropertyOnMute(sheet, 'paneTopLeftCell', getCellAddress(top, left));
            if (sheet.frozenRows) {
                top = indexes[0];
            }
            if (sheet.frozenColumns) {
                left = indexes[1];
            }
        }
        else {
            if (isNullOrUndefined(top)) {
                top = indexes[0];
            }
            if (isNullOrUndefined(left)) {
                left = indexes[1];
            }
            this.setSheetPropertyOnMute(sheet, 'paneTopLeftCell', getCellAddress(top, left));
        }
        this.setSheetPropertyOnMute(sheet, 'topLeftCell', getCellAddress(top, left));
    };
    /**
     * @hidden
     * @param {string} address - Specifies the address.
     * @returns {number | number[]} - To get address info.
     */
    Workbook.prototype.getAddressInfo = function (address) {
        return getAddressInfo(this, address);
    };
    /**
     * @hidden
     * @param {SheetModel} sheet - Specifies the sheet.
     * @param {string} prop - Specifies the prop.
     * @param {Object} value - Specifies the value.
     * @returns {void} - To set sheet properties.
     */
    Workbook.prototype.setSheetPropertyOnMute = function (sheet, prop, value) {
        this.isProtectedOnChange = true;
        sheet[prop] = value;
        this.isProtectedOnChange = false;
    };
    /**
     * To get frozen row count from top index.
     *
     * @hidden
     * @param {SheetModel} sheet - Specifies the sheet.
     * @returns {number} - to get the frozen count.
     */
    Workbook.prototype.frozenRowCount = function (sheet) {
        return sheet.frozenRows ? (sheet.topLeftCell === 'A1' ? sheet.frozenRows : getCellIndexes(sheet.topLeftCell)[0] + sheet.frozenRows)
            : 0;
    };
    /**
     * To get frozen column count from left index.
     *
     * @hidden
     * @param {SheetModel} sheet - Specifies the sheet.
     * @returns {number} - to get the frozen count.
     */
    Workbook.prototype.frozenColCount = function (sheet) {
        return sheet.frozenColumns ? (sheet.topLeftCell === 'A1' ? sheet.frozenColumns : getCellIndexes(sheet.topLeftCell)[1] +
            sheet.frozenColumns) : 0;
    };
    /**
     * To update the provided range while inserting or deleting rows and columns.
     *
     * @param {InsertDeleteEventArgs} args - Insert / Detele event arguments.
     * @param {number[]} index - Existing range.
     * @returns {boolean} - It return `true`, if the insert / delete action happens between the provided range, otherwise `false`.
     * @hidden
     */
    Workbook.prototype.updateRangeOnInsertDelete = function (args, index) {
        var diff;
        var updated = false;
        if (args.isInsert) {
            diff = (args.endIndex - args.startIndex) + 1;
            if (args.modelType === 'Row') {
                if (args.startIndex <= index[0]) {
                    index[0] += diff;
                    updated = true;
                }
                if (args.startIndex <= index[2]) {
                    index[2] += diff;
                    updated = true;
                }
            }
            else {
                if (args.startIndex <= index[1]) {
                    index[1] += diff;
                    updated = true;
                }
                if (args.startIndex <= index[3]) {
                    index[3] += diff;
                    updated = true;
                }
            }
        }
        else {
            if (args.modelType === 'Row') {
                diff = index[0] - args.startIndex;
                if (diff > 0) {
                    if (index[0] > args.endIndex) {
                        diff = (args.endIndex - args.startIndex) + 1;
                        if (diff > 0) {
                            index[0] -= diff;
                            updated = true;
                        }
                    }
                    else {
                        index[0] -= diff;
                        updated = true;
                    }
                }
                if (args.startIndex <= index[2]) {
                    if (args.endIndex <= index[2]) {
                        index[2] -= (args.endIndex - args.startIndex) + 1;
                    }
                    else {
                        index[2] -= (index[2] - args.startIndex) + 1;
                    }
                    updated = true;
                }
            }
            else {
                diff = index[1] - args.startIndex;
                if (diff > 0) {
                    if (index[1] > args.endIndex) {
                        diff = (args.endIndex - args.startIndex) + 1;
                        if (diff > 0) {
                            index[1] -= diff;
                            updated = true;
                        }
                    }
                    else {
                        index[1] -= diff;
                        updated = true;
                    }
                }
                if (args.startIndex <= index[3]) {
                    if (args.endIndex <= index[3]) {
                        index[3] -= (args.endIndex - args.startIndex) + 1;
                    }
                    else {
                        index[3] -= (index[3] - args.startIndex) + 1;
                    }
                    updated = true;
                }
            }
        }
        return updated;
    };
    /**
     * Used in calculate to compute integer value of date
     */
    Workbook.prototype.dateToInt = function (date) {
        return dateToInt(date);
    };
    /**
     * Used to update format from calculate.
     */
    Workbook.prototype.setDateFormat = function (sheetId, rowIndex, colIndex) {
        var sheet = getSheet(this, getSheetIndexFromId(this, sheetId));
        if (!getCell(rowIndex, colIndex, sheet, null, true).format) {
            setCell(rowIndex, colIndex, sheet, { format: getFormatFromType('ShortDate') }, true);
        }
    };
    var Workbook_1;
    __decorate([
        Collection([], Sheet)
    ], Workbook.prototype, "sheets", void 0);
    __decorate([
        Property(0)
    ], Workbook.prototype, "activeSheetIndex", void 0);
    __decorate([
        Property('100%')
    ], Workbook.prototype, "height", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "allowFindAndReplace", void 0);
    __decorate([
        Property()
    ], Workbook.prototype, "filterCollection", void 0);
    __decorate([
        Property()
    ], Workbook.prototype, "sortCollection", void 0);
    __decorate([
        Property('100%')
    ], Workbook.prototype, "width", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "showRibbon", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "showFormulaBar", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "showSheetTabs", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "allowEditing", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "allowOpen", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "allowSave", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "allowSorting", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "allowFiltering", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "allowNumberFormatting", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "allowCellFormatting", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "allowHyperlink", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "allowInsert", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "allowDelete", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "allowMerge", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "allowDataValidation", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "allowImage", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "allowChart", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "allowAutoFill", void 0);
    __decorate([
        Complex({}, AutoFillSettings)
    ], Workbook.prototype, "autoFillSettings", void 0);
    __decorate([
        Property(true)
    ], Workbook.prototype, "allowConditionalFormat", void 0);
    __decorate([
        Complex({}, CellStyle)
    ], Workbook.prototype, "cellStyle", void 0);
    __decorate([
        Property('')
    ], Workbook.prototype, "openUrl", void 0);
    __decorate([
        Property('')
    ], Workbook.prototype, "saveUrl", void 0);
    __decorate([
        Property('')
    ], Workbook.prototype, "password", void 0);
    __decorate([
        Property(false)
    ], Workbook.prototype, "isProtected", void 0);
    __decorate([
        Collection([], DefineName)
    ], Workbook.prototype, "definedNames", void 0);
    __decorate([
        Event$1()
    ], Workbook.prototype, "beforeOpen", void 0);
    __decorate([
        Event$1()
    ], Workbook.prototype, "openFailure", void 0);
    __decorate([
        Event$1()
    ], Workbook.prototype, "beforeSave", void 0);
    __decorate([
        Event$1()
    ], Workbook.prototype, "saveComplete", void 0);
    __decorate([
        Event$1()
    ], Workbook.prototype, "beforeCellFormat", void 0);
    __decorate([
        Event$1()
    ], Workbook.prototype, "queryCellInfo", void 0);
    __decorate([
        Event$1()
    ], Workbook.prototype, "beforeCellUpdate", void 0);
    Workbook = Workbook_1 = __decorate([
        NotifyPropertyChanges
    ], Workbook);
    return Workbook;
}(Component));

var __extends$6 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Configures the Row behavior for the spreadsheet.
 *  ```html
 * <div id='Spreadsheet'></div>
 * ```
 * ```typescript
 * let spreadsheet: Spreadsheet = new Spreadsheet({
 *      sheets: [{
 *                rows: [{
 *                        index: 30,
 *                        cells: [{ index: 4, value: 'Total Amount:' },
 *                               { formula: '=SUM(F2:F30)', style: { fontWeight: 'bold' } }]
 *                }]
 * ...
 * });
 * spreadsheet.appendTo('#Spreadsheet');
 * ```
 */
var Row = /** @__PURE__ @class */ (function (_super) {
    __extends$6(Row, _super);
    function Row() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$5([
        Collection([], Cell)
    ], Row.prototype, "cells", void 0);
    __decorate$5([
        Property(0)
    ], Row.prototype, "index", void 0);
    __decorate$5([
        Property(20)
    ], Row.prototype, "height", void 0);
    __decorate$5([
        Property(false)
    ], Row.prototype, "customHeight", void 0);
    __decorate$5([
        Property(false)
    ], Row.prototype, "hidden", void 0);
    __decorate$5([
        Complex({}, Format)
    ], Row.prototype, "format", void 0);
    return Row;
}(ChildProperty));
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} rowIndex - Specifies the rowIndex.
 * @returns {RowModel} - To get the row.
 */
function getRow(sheet, rowIndex) {
    return sheet.rows[rowIndex];
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} rowIndex - Specifies the rowIndex.
 * @param {RowModel} row - Specifies the row.
 * @returns {void} - To set the row.
 */
function setRow(sheet, rowIndex, row) {
    if (!sheet.rows[rowIndex]) {
        sheet.rows[rowIndex] = {};
    }
    Object.keys(row).forEach(function (key) {
        sheet.rows[rowIndex][key] = row[key];
    });
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} index - Specifies the index.
 * @returns {boolean} - To return the bool value.
 */
function isHiddenRow(sheet, index) {
    return sheet.rows[index] && sheet.rows[index].hidden;
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} rowIndex - Specifies the rowIndex.
 * @param {boolean} checkDPR - Specifies the bool value.
 * @param {boolean} addHidden - By default hidden rows are considered as 0, set `true` if you want to add the hidden rows height.
 * @returns {number} - To get the row height.
 */
function getRowHeight(sheet, rowIndex, checkDPR, addHidden) {
    var hgt;
    if (sheet && sheet.rows && sheet.rows[rowIndex]) {
        if (!addHidden && sheet.rows[rowIndex].hidden) {
            return 0;
        }
        hgt = sheet.rows[rowIndex].height === undefined ? 20 : sheet.rows[rowIndex].height;
    }
    else {
        hgt = 20;
    }
    if (checkDPR && window.devicePixelRatio % 1 > 0) {
        var pointValue = (hgt * window.devicePixelRatio) % 1;
        return hgt + (pointValue ? ((pointValue > 0.5 ? (1 - pointValue) : -1 * pointValue) / window.devicePixelRatio) : 0);
    }
    else {
        return hgt;
    }
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} rowIndex - Specifies the rowIndex.
 * @param {number} height - Specifies the height.
 * @returns {void} - To set the row height.
 */
function setRowHeight(sheet, rowIndex, height) {
    if (sheet && sheet.rows) {
        if (!sheet.rows[rowIndex]) {
            sheet.rows[rowIndex] = {};
        }
        sheet.rows[rowIndex].height = height;
    }
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} startRow - Specifies the startRow.
 * @param {number} endRow - Specifies the endRow.
 * @param {boolean} checkDPR - Specifies the boolean value.
 * @param {boolean} addHidden - By default hidden rows are considered as 0, set `true` if you want to add the hidden rows height.
 * @returns {number} - To get the rows height.
 */
function getRowsHeight(sheet, startRow, endRow, checkDPR, addHidden) {
    if (endRow === void 0) { endRow = startRow; }
    var height = 0;
    var swap;
    if (startRow > endRow) {
        swap = startRow;
        startRow = endRow;
        endRow = swap;
    }
    for (var i = startRow; i <= endRow; i++) {
        height += getRowHeight(sheet, i, checkDPR, addHidden);
    }
    return height;
}

var __extends$7 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Configures the Column behavior for the spreadsheet.
 */
var Column = /** @__PURE__ @class */ (function (_super) {
    __extends$7(Column, _super);
    function Column() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$6([
        Property(0)
    ], Column.prototype, "index", void 0);
    __decorate$6([
        Property(64)
    ], Column.prototype, "width", void 0);
    __decorate$6([
        Property(false)
    ], Column.prototype, "customWidth", void 0);
    __decorate$6([
        Property(false)
    ], Column.prototype, "hidden", void 0);
    __decorate$6([
        Complex({}, Format)
    ], Column.prototype, "format", void 0);
    __decorate$6([
        Property(true)
    ], Column.prototype, "isLocked", void 0);
    __decorate$6([
        Property('')
    ], Column.prototype, "validation", void 0);
    return Column;
}(ChildProperty));
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} colIndex - Specifies the colIndex.
 * @returns {ColumnModel} - To get Column.
 */
function getColumn(sheet, colIndex) {
    if (sheet.columns) {
        if (!sheet.columns[colIndex]) {
            sheet.columns[colIndex] = {};
        }
    }
    else {
        sheet.columns = [];
        sheet.columns[colIndex] = {};
    }
    return sheet.columns[colIndex];
}
/** @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} colIndex - Specifies the colIndex.
 * @param {ColumnModel} column - Specifies the column.
 * @returns {void} - To set Column.
 */
function setColumn(sheet, colIndex, column) {
    var curColumn = getColumn(sheet, colIndex);
    Object.keys(column).forEach(function (key) {
        curColumn[key] = column[key];
    });
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} index - Specifies the index.
 * @param {boolean} skipHidden - Specifies the bool.
 * @param {boolean} checkDPR - Specifies the bool.
 * @returns {number} - To get Column width.
 */
function getColumnWidth(sheet, index, skipHidden, checkDPR) {
    var width;
    if (sheet && sheet.columns && sheet.columns[index]) {
        if (!skipHidden && sheet.columns[index].hidden) {
            return 0;
        }
        width = (sheet.columns[index].width || sheet.columns[index].customWidth) ? sheet.columns[index].width : 64;
    }
    else {
        width = 64;
    }
    if (checkDPR && window.devicePixelRatio % 1 > 0) {
        var pointValue = (width * window.devicePixelRatio) % 1;
        return width + (pointValue ? ((pointValue > 0.5 ? (1 - pointValue) : -1 * pointValue) / window.devicePixelRatio) : 0);
    }
    else {
        return width;
    }
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} startCol - Specifies the startCol.
 * @param {number} endCol - Specifies the endCol.
 * @param {boolean} checkDPR - Specifies the boolean value.
 * @returns {number} - returns the column width.
 */
function getColumnsWidth(sheet, startCol, endCol, checkDPR) {
    if (endCol === void 0) { endCol = startCol; }
    var width = 0;
    if (startCol > endCol) {
        var swap = startCol;
        startCol = endCol;
        endCol = swap;
    }
    for (var i = startCol; i <= endCol; i++) {
        width += getColumnWidth(sheet, i, null, checkDPR);
    }
    return width;
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} index - Specifies the index.
 * @returns {boolean} - returns the boolean value.
 */
function isHiddenCol(sheet, index) {
    return sheet.columns[index] && sheet.columns[index].hidden;
}

/**
 * Export Spreadsheet library base modules
 */

/**
 * Export Spreadsheet library modules
 */

/**
 * To get Spreadsheet required modules.
 *
 * @hidden
 * @param {Spreadsheet} context - To get Spreadsheet required modules.
 * @returns {ModuleDeclaration[]} - To get Spreadsheet required modules.
 */
function getRequiredModules(context) {
    var modules = [];
    pushBasicModules(context, modules);
    getWorkbookRequiredModules(context, modules);
    return modules;
}
// eslint-disable-next-line
function pushBasicModules(context, modules) {
    modules.push({ member: 'basic', args: [] });
    modules.push({ member: 'all', args: [] });
    if (context.showRibbon) {
        modules.push({
            member: 'ribbon',
            args: [context]
        });
    }
    if (context.showFormulaBar) {
        modules.push({
            member: 'formulaBar',
            args: [context]
        });
    }
    if (context.showSheetTabs) {
        modules.push({
            member: 'sheetTabs',
            args: [context]
        });
    }
    if (context.allowEditing) {
        modules.push({
            member: 'edit',
            args: [context]
        });
        modules.push({
            member: 'formula',
            args: [context]
        });
        modules.push({
            member: 'workbookFormula',
            args: [context]
        });
        modules.push({
            member: 'workbookEdit',
            args: [context]
        });
    }
    if (context.allowOpen) {
        modules.push({
            member: 'open',
            args: [context]
        });
    }
    if (context.allowSave) {
        modules.push({
            member: 'save',
            args: [context]
        });
    }
    if (context.enableContextMenu) {
        modules.push({
            member: 'contextMenu',
            args: [context]
        });
    }
    if (context.allowAutoFill) {
        modules.push({ member: 'autofill', args: [context] });
    }
    if (context.selectionSettings.mode !== 'None') {
        modules.push({
            member: 'selection',
            args: [context]
        });
    }
    if (context.enableKeyboardNavigation) {
        modules.push({
            member: 'keyboardNavigation',
            args: [context]
        });
    }
    if (context.allowNumberFormatting) {
        modules.push({
            member: 'numberFormat',
            args: [context]
        });
    }
    if (context.enableKeyboardShortcut) {
        modules.push({
            member: 'keyboardShortcut',
            args: [context]
        });
    }
    if (context.enableClipboard) {
        modules.push({
            member: 'clipboard',
            args: [context]
        });
    }
    if (context.allowCellFormatting) {
        modules.push({
            member: 'cellformat',
            args: [context]
        });
    }
    if (context.allowSorting) {
        modules.push({ member: 'sort', args: [context] });
    }
    if (context.allowResizing) {
        modules.push({
            member: 'resize',
            args: [context]
        });
    }
    modules.push({
        member: 'collaborativeEditing',
        args: [context]
    });
    modules.push({
        member: 'protectSheet',
        args: [context]
    });
    if (context.allowHyperlink) {
        modules.push({
            member: 'spreadsheetHyperlink',
            args: [context]
        });
    }
    if (context.allowUndoRedo) {
        modules.push({
            member: 'undoredo',
            args: [context]
        });
    }
    if (context.allowFiltering) {
        modules.push({ member: 'filter', args: [context] });
    }
    if (context.allowWrap) {
        modules.push({ member: 'wrapText', args: [context] });
    }
    if (context.allowInsert) {
        modules.push({ member: 'insert', args: [context] });
    }
    if (context.allowDelete) {
        modules.push({ member: 'delete', args: [context] });
    }
    if (context.allowDataValidation) {
        modules.push({ member: 'dataValidation', args: [context] });
    }
    if (context.allowFindAndReplace) {
        modules.push({ member: 'findAndReplace', args: [context] });
    }
    if (context.allowMerge) {
        modules.push({ member: 'merge', args: [context] });
    }
    if (context.allowConditionalFormat) {
        modules.push({ member: 'conditionalFormatting', args: [context] });
    }
    if (context.allowImage) {
        modules.push({ member: 'spreadsheetImage', args: [context] });
    }
    if (context.allowChart) {
        modules.push({ member: 'spreadsheetChart', args: [context] });
    }
}

/**
 * The function used to update Dom using requestAnimationFrame.
 *
 * @param  {Function} fn - Function that contains the actual action
 * @returns {void}
 * @hidden
 */
function getUpdateUsingRaf(fn) {
    requestAnimationFrame(function () {
        fn();
    });
}
/**
 * The function used to remove the dom element children.
 *
 * @param  {Element} parent - Specify the parent
 * @returns {void} - The function used to get colgroup width based on the row index.
 * @hidden
 */
function removeAllChildren(parent) {
    while (parent.firstChild) {
        parent.removeChild(parent.firstChild);
    }
}
/**
 * The function used to get colgroup width based on the row index.
 *
 * @param  {number} index - Specify the index
 * @returns {number} - The function used to get colgroup width based on the row index.
 * @hidden
 */
function getColGroupWidth(index) {
    var width = 30;
    if (index.toString().length > 3) {
        width = index.toString().length * 10;
    }
    return width;
}
var scrollAreaWidth = null;
var textLineHeight = 1.24;
/**
 * @hidden
 * @returns {number} - To get scrollbar width
 */
function getScrollBarWidth() {
    if (scrollAreaWidth !== null) {
        return scrollAreaWidth;
    }
    var htmlDivNode = document.createElement('div');
    var result = 0;
    htmlDivNode.style.cssText = 'width:100px;height: 100px;overflow: scroll;position: absolute;top: -9999px;';
    document.body.appendChild(htmlDivNode);
    result = (htmlDivNode.offsetWidth - htmlDivNode.clientWidth) | 0;
    document.body.removeChild(htmlDivNode);
    return scrollAreaWidth = result;
}
var classes = ['e-ribbon', 'e-formula-bar-panel', 'e-sheet-tab-panel', 'e-header-toolbar'];
/**
 * @hidden
 * @param {HTMLElement} element - Specify the element.
 * @param {string[]} classList - Specify the classList.
 * @returns {number} - get Siblings Height
 */
function getSiblingsHeight(element, classList) {
    if (classList === void 0) { classList = classes; }
    var previous = getHeightFromDirection(element, 'previous', classList);
    var next = getHeightFromDirection(element, 'next', classList);
    return previous + next;
}
/**
 * @param {HTMLElement} element - Specify the element.
 * @param {string} direction - Specify the direction.
 * @param {string[]} classList - Specify the classList.
 * @returns {number} - get Height FromDirection
 */
function getHeightFromDirection(element, direction, classList) {
    var sibling = (element)[direction + 'ElementSibling'];
    var result = 0;
    while (sibling) {
        if (classList.some(function (value) { return sibling.classList.contains(value); })) {
            result += sibling.offsetHeight;
        }
        sibling = (sibling)[direction + 'ElementSibling'];
    }
    return result;
}
/**
 * @hidden
 * @param {Spreadsheet} context - Specify the spreadsheet.
 * @param {number[]} range - Specify the range.
 * @param {boolean} isModify - Specify the boolean value.
 * @returns {boolean} - Returns boolean value.
 */
function inView(context, range, isModify) {
    if (context.scrollSettings.enableVirtualization) {
        var topIdx = context.viewport.topIndex;
        var leftIdx = context.viewport.leftIndex;
        var bottomIdx = context.viewport.bottomIndex;
        var rightIdx = context.viewport.rightIndex;
        var sheet = context.getActiveSheet();
        var inView_1;
        if (sheet.frozenRows || sheet.frozenColumns) {
            return context.insideViewport(range[0], range[1]) || context.insideViewport(range[2], range[3]);
        }
        else {
            inView_1 = topIdx <= range[0] && bottomIdx >= range[2] && leftIdx <= range[1] && rightIdx >= range[3];
            if (inView_1) {
                return true;
            }
        }
        if (isModify) {
            if (range[0] < topIdx && range[2] < topIdx || range[0] > bottomIdx && range[2] > bottomIdx) {
                return false;
            }
            else {
                if (range[0] < topIdx && range[2] > topIdx) {
                    range[0] = topIdx;
                    inView_1 = true;
                }
                if (range[2] > bottomIdx) {
                    range[2] = bottomIdx;
                    inView_1 = true;
                }
            }
            if (range[1] < leftIdx && range[3] < leftIdx || range[1] > rightIdx && range[3] > rightIdx) {
                return false;
            }
            else {
                if (range[1] < leftIdx && range[3] > leftIdx) {
                    range[1] = leftIdx;
                    inView_1 = true;
                }
                if (range[3] > rightIdx) {
                    range[3] = rightIdx;
                    inView_1 = true;
                }
            }
        }
        return inView_1;
    }
    else {
        return true;
    }
}
/**
 * To get the top left cell position in viewport.
 *
 * @hidden
 * @param {SheetModel} sheet - Specify the sheet.
 * @param {number[]} indexes - Specify the indexes.
 * @param {number} frozenRow - Specify the frozen row.
 * @param {number} frozenColumn - Specify the frozen column
 * @param {number} freezeScrollHeight - Specify the freeze scroll height
 * @param {number} freezeScrollWidth - Specify the freeze scroll width
 * @param {number} rowHdrWidth - Specify the row header width
 * @returns {number} - To get the top left cell position in viewport.
 */
function getCellPosition(sheet, indexes, frozenRow, frozenColumn, freezeScrollHeight, freezeScrollWidth, rowHdrWidth) {
    var i;
    var offset = { left: { idx: 0, size: 0 }, top: { idx: 0, size: 0 } };
    var top = offset.top.size;
    var left = offset.left.size;
    for (i = offset.top.idx; i < indexes[0]; i++) {
        if (frozenRow) {
            if (frozenRow - 1 < indexes[0] && i < frozenRow) {
                continue;
            }
        }
        top += getRowHeight(sheet, i, true);
    }
    for (i = offset.left.idx; i < indexes[1]; i++) {
        if (frozenColumn && frozenColumn - 1 < indexes[1] && i < frozenColumn) {
            continue;
        }
        left += getColumnWidth(sheet, i, null, true);
    }
    if (frozenRow && indexes[0] < frozenRow) {
        if (sheet.showHeaders) {
            top += 30;
        }
        if (freezeScrollHeight) {
            top -= freezeScrollHeight;
        }
    }
    if (frozenColumn && indexes[1] < frozenColumn) {
        if (sheet.showHeaders) {
            left += rowHdrWidth ? rowHdrWidth : 30;
        }
        if (freezeScrollWidth) {
            left -= freezeScrollWidth;
        }
    }
    return { top: top, left: left };
}
/**
 * @param {Spreadsheet} parent - Specify the parent
 * @param {HTMLElement} ele - Specify the element
 * @param {number[]} range - Specify the range
 * @param {string} cls - Specify the class name
 * @param {boolean} preventAnimation - Specify the preventAnimation.
 * @returns {void} - To set the position
 * @hidden
 */
function setPosition(parent, ele, range, cls, preventAnimation) {
    if (cls === void 0) { cls = 'e-selection'; }
    var sheet = parent.getActiveSheet();
    if (sheet.frozenRows || sheet.frozenColumns) {
        var content_1;
        var frozenRow_1 = parent.frozenRowCount(sheet);
        var frozenCol_1 = parent.frozenColCount(sheet);
        if (cls === 'e-active-cell') {
            if (range[0] < frozenRow_1 || range[1] < frozenCol_1) {
                ele.style.display = 'none';
                content_1 = range[0] < frozenRow_1 && range[1] < frozenCol_1 ? parent.getSelectAllContent() :
                    (range[0] < frozenRow_1 ? parent.getColumnHeaderContent() : parent.getRowHeaderContent());
                var rangeEle = content_1.querySelector('.' + cls);
                if (!rangeEle) {
                    rangeEle = ele.cloneNode(true);
                    content_1.appendChild(rangeEle);
                }
                ele = rangeEle;
                locateElem(ele, range, sheet, parent.enableRtl, frozenRow_1, frozenCol_1, preventAnimation, true, parent.viewport.beforeFreezeHeight, parent.viewport.beforeFreezeWidth, parent.sheetModule.colGroupWidth);
            }
            else {
                locateElem(ele, range, sheet, parent.enableRtl, frozenRow_1, frozenCol_1, preventAnimation);
            }
            if (ele.style.display) {
                ele.style.display = '';
            }
            removeRangeEle(parent.getSelectAllContent(), content_1, 'e-active-cell');
            removeRangeEle(parent.getColumnHeaderContent(), content_1, 'e-active-cell');
            removeRangeEle(parent.getRowHeaderContent(), content_1, 'e-active-cell');
        }
        else if (cls === 'e-autofill') {
            var contentElem = void 0;
            var freezeRow = parent.frozenRowCount(sheet);
            var freezeCol = parent.frozenColCount(sheet);
            if (range[0] < freezeRow || range[1] < freezeCol) {
                ele.style.display = 'none';
                contentElem = range[0] < freezeRow && range[1] < freezeCol ? parent.getSelectAllContent() :
                    (range[0] < freezeRow ? parent.getColumnHeaderContent() : parent.getRowHeaderContent());
                var rangeEle = contentElem.querySelector('.' + cls);
                if (!rangeEle) {
                    rangeEle = ele.cloneNode(true);
                    contentElem.appendChild(rangeEle);
                }
                ele = rangeEle;
                locateElem(ele, range, sheet, parent.enableRtl, freezeRow, freezeCol, preventAnimation, true, parent.viewport.beforeFreezeHeight, parent.viewport.beforeFreezeWidth, parent.sheetModule.colGroupWidth, 'e-autofill');
            }
            else {
                locateElem(ele, range, sheet, parent.enableRtl, freezeRow, freezeCol, preventAnimation, false, 0, 0, 0, 'e-autofill');
            }
            if (ele.style.display) {
                ele.style.display = '';
            }
            removeRangeEle(parent.getSelectAllContent(), contentElem, 'e-autofill');
            removeRangeEle(parent.getColumnHeaderContent(), contentElem, 'e-autofill');
            removeRangeEle(parent.getRowHeaderContent(), contentElem, 'e-autofill');
        }
        else if (cls === 'e-filloption') {
            var contentElem = void 0;
            var freezeRow = parent.frozenRowCount(sheet);
            var freezeCol = parent.frozenColCount(sheet);
            if ((range[0] < freezeRow || range[1] < freezeCol)) {
                if (range[3] + 1 === freezeCol && range[2] + 1 > freezeRow) {
                    locateElem(parent.getMainContent().querySelector('.e-filloption'), range, sheet, parent.enableRtl, freezeRow, freezeCol, preventAnimation, false, 0, 0, 0, 'e-filloption', true, { left: -4 });
                }
                else if (range[2] + 1 === freezeRow && range[3] + 1 > freezeCol) {
                    locateElem(parent.getMainContent().querySelector('.e-filloption'), range, sheet, parent.enableRtl, freezeRow, freezeCol, preventAnimation, false, 0, 0, 0, 'e-filloption', true, { top: -4 });
                }
                else if (range[3] + 1 === freezeCol && range[2] + 1 < freezeRow) { // for upper side
                    contentElem = parent.getColumnHeaderContent();
                    var rangeElem = contentElem.querySelector('.' + cls);
                    if (!rangeElem) {
                        parent.notify(getautofillDDB, { id: parent.element.id + '_autofilloptionbtn', appendElem: contentElem });
                    }
                    ele = parent.autofillModule.autoFillDropDown.element;
                    locateElem(ele, range, sheet, parent.enableRtl, freezeRow, freezeCol, preventAnimation, false, 0, 0, 0, 'e-filloption', true, { left: -4 });
                }
                else if (range[2] + 1 === freezeRow && range[3] + 1 === freezeCol) { // corner cell
                    locateElem(parent.getMainContent().querySelector('.e-filloption'), range, sheet, parent.enableRtl, freezeRow, freezeCol, preventAnimation, false, 0, 0, 0, 'e-filloption', true, { top: -4, left: -4 });
                }
                else {
                    contentElem = range[0] < freezeRow && range[1] < freezeCol ? parent.getSelectAllContent() :
                        (range[0] < freezeRow ? parent.getColumnHeaderContent() : parent.getRowHeaderContent());
                    var rangeEle = contentElem.querySelector('.' + cls);
                    if (!rangeEle) {
                        parent.notify(getautofillDDB, { id: parent.element.id + '_autofilloptionbtn', appendElem: contentElem });
                    }
                    ele = parent.autofillModule.autoFillDropDown.element;
                    locateElem(ele, range, sheet, parent.enableRtl, freezeRow, freezeCol, preventAnimation, true, parent.viewport.
                        beforeFreezeHeight, parent.viewport.beforeFreezeWidth, parent.sheetModule.colGroupWidth, 'e-filloption', true);
                }
            }
            else {
                locateElem(parent.getMainContent().querySelector('.e-filloption'), range, sheet, parent.enableRtl, freezeRow, freezeCol, preventAnimation, false, 0, 0, 0, 'e-filloption', true);
            }
            if (ele.style.display) {
                ele.style.display = '';
            }
            removeRangeEle(parent.getSelectAllContent(), contentElem, 'e-filloption');
            removeRangeEle(parent.getColumnHeaderContent(), contentElem, 'e-filloption');
            removeRangeEle(parent.getRowHeaderContent(), contentElem, 'e-filloption');
        }
        else {
            var swapRange = getSwapRange(range);
            if (swapRange[0] < frozenRow_1 || swapRange[1] < frozenCol_1) {
                ele.classList.add('e-hide');
                var ranges_1 = [];
                if (swapRange[0] < frozenRow_1 && swapRange[1] < frozenCol_1) {
                    if (swapRange[2] < frozenRow_1 && swapRange[3] < frozenCol_1) {
                        ranges_1.push(range);
                        removeRangeEle(parent.getColumnHeaderContent(), content_1, 'e-selection');
                        removeRangeEle(parent.getRowHeaderContent(), content_1, 'e-selection');
                    }
                    else if (swapRange[2] > frozenRow_1 - 1) {
                        if (swapRange[3] < frozenCol_1) {
                            removeRangeEle(parent.getColumnHeaderContent(), content_1, 'e-selection');
                            ranges_1.push([swapRange[0], swapRange[1], frozenRow_1 - 1, swapRange[3]]);
                            ranges_1.push([frozenRow_1, swapRange[1], swapRange[2], swapRange[3]]);
                        }
                        else {
                            ranges_1.push([swapRange[0], swapRange[1], frozenRow_1 - 1, frozenCol_1 - 1]);
                            ranges_1.push([frozenRow_1, swapRange[1], swapRange[2], frozenCol_1 - 1]);
                            ranges_1.push([swapRange[0], frozenCol_1, frozenRow_1 - 1, swapRange[3]]);
                            ranges_1.push([frozenRow_1, frozenCol_1, swapRange[2], swapRange[3]]);
                        }
                    }
                    else {
                        if (swapRange[2] < frozenRow_1) {
                            ranges_1.push([swapRange[0], swapRange[1], swapRange[2], frozenCol_1 - 1]);
                            ranges_1.push([swapRange[0], frozenCol_1, swapRange[2], swapRange[3]]);
                            removeRangeEle(parent.getRowHeaderContent(), content_1, 'e-selection');
                        }
                        else {
                            ranges_1.push([frozenRow_1, swapRange[1], swapRange[2], frozenCol_1 - 1]);
                            ranges_1.push([swapRange[0], swapRange[1], frozenRow_1 - 1, frozenCol_1 - 1]);
                            ranges_1.push([frozenRow_1, frozenCol_1, swapRange[2], swapRange[3]]);
                            ranges_1.push([swapRange[0], frozenCol_1, frozenRow_1 - 1, swapRange[3]]);
                        }
                    }
                }
                else if (swapRange[0] < frozenRow_1) {
                    if (swapRange[2] < frozenRow_1) {
                        ranges_1.push(range);
                    }
                    else {
                        ranges_1.push([swapRange[0], swapRange[1], frozenRow_1 - 1, swapRange[3]]);
                        ranges_1.push([frozenRow_1, swapRange[1], swapRange[2], swapRange[3]]);
                        removeRangeEle(parent.getSelectAllContent(), content_1, 'e-selection');
                        removeRangeEle(parent.getRowHeaderContent(), content_1, 'e-selection');
                    }
                }
                else {
                    if (swapRange[3] < frozenCol_1) {
                        ranges_1.push(range);
                    }
                    else {
                        ranges_1.push([swapRange[0], swapRange[1], swapRange[2], frozenCol_1 - 1]);
                        ranges_1.push([swapRange[0], frozenCol_1, swapRange[2], swapRange[3]]);
                        removeRangeEle(parent.getSelectAllContent(), content_1, 'e-selection');
                        removeRangeEle(parent.getColumnHeaderContent(), content_1, 'e-selection');
                    }
                }
                var removeEle_1;
                ranges_1.forEach(function (rng) {
                    content_1 = rng[2] < frozenRow_1 && rng[3] < frozenCol_1 ? parent.getSelectAllContent() :
                        (rng[2] < frozenRow_1 ? parent.getColumnHeaderContent() : (rng[3] < frozenCol_1 ?
                            parent.getRowHeaderContent() : parent.getMainContent()));
                    var rangeEle;
                    if (cls === 'e-copy-indicator' || cls === 'e-range-indicator') {
                        rangeEle = ele.cloneNode(true);
                        content_1.appendChild(rangeEle);
                        if (frozenRow_1) {
                            if (rng[2] + 1 === frozenRow_1) {
                                ranges_1.forEach(function (subRng) {
                                    if (subRng !== rng) {
                                        removeEle_1 = rangeEle.getElementsByClassName('e-bottom')[0];
                                        if (removeEle_1 && subRng[0] === frozenRow_1) {
                                            detach(removeEle_1);
                                        }
                                    }
                                });
                            }
                            if (rng[0] === frozenRow_1 && content_1.parentElement.classList.contains('e-main-panel')) {
                                ranges_1.forEach(function (subRng) {
                                    if (subRng !== rng) {
                                        removeEle_1 = rangeEle.getElementsByClassName('e-top')[0];
                                        if (removeEle_1 && subRng[2] + 1 === frozenRow_1) {
                                            detach(removeEle_1);
                                        }
                                    }
                                });
                            }
                        }
                        if (frozenCol_1) {
                            if (rng[3] + 1 === frozenCol_1) {
                                ranges_1.forEach(function (subRng) {
                                    if (subRng !== rng) {
                                        removeEle_1 = rangeEle.getElementsByClassName('e-right')[0];
                                        if (removeEle_1 && subRng[1] === frozenCol_1) {
                                            detach(removeEle_1);
                                        }
                                    }
                                });
                            }
                            if (rng[1] === frozenCol_1 && (content_1.classList.contains('e-sheet-content') || content_1.classList.contains('e-column-header'))) {
                                ranges_1.forEach(function (subRng) {
                                    if (subRng !== rng) {
                                        removeEle_1 = rangeEle.getElementsByClassName('e-left')[0];
                                        if (removeEle_1 && subRng[3] + 1 === frozenCol_1) {
                                            detach(removeEle_1);
                                        }
                                    }
                                });
                            }
                        }
                    }
                    else {
                        rangeEle = content_1.querySelector('.' + cls);
                        if (!rangeEle) {
                            rangeEle = ele.cloneNode(true);
                            content_1.appendChild(rangeEle);
                        }
                    }
                    locateElem(rangeEle, rng, sheet, parent.enableRtl, frozenRow_1, frozenCol_1, preventAnimation, false, parent.viewport.beforeFreezeHeight, parent.viewport.beforeFreezeWidth, parent.sheetModule.colGroupWidth);
                    if (rangeEle.classList.contains('e-hide')) {
                        rangeEle.classList.remove('e-hide');
                    }
                });
            }
            else {
                removeRangeEle(parent.getSelectAllContent(), null, 'e-selection');
                removeRangeEle(parent.getColumnHeaderContent(), null, 'e-selection');
                removeRangeEle(parent.getRowHeaderContent(), null, 'e-selection');
                locateElem(ele, range, sheet, parent.enableRtl, frozenRow_1, frozenCol_1, preventAnimation);
                if (cls === 'e-range-indicator' || !parent.getMainContent().querySelector('.' + cls)) {
                    parent.getMainContent().appendChild(ele);
                }
            }
        }
    }
    else {
        var promise = locateElem(ele, range, sheet, parent.enableRtl, 0, 0, preventAnimation);
        if (ele && !parent.getMainContent().querySelector('.' + cls)) {
            parent.getMainContent().appendChild(ele);
        }
        return promise;
    }
}
/**
 * @param {Element} content - Specify the content element.
 * @param {HTMLElement} checkElement - Specify the element.
 * @param {string} clsName - Specify the class name.
 * @returns {void} - remove element with given range
 */
function removeRangeEle(content, checkElement, clsName) {
    var ele;
    if (clsName === 'e-active-cell') {
        if (content !== checkElement) {
            ele = content.querySelector('.e-active-cell');
            if (ele) {
                detach(ele);
            }
        }
    }
    else if (clsName === 'e-autofill') {
        if (content !== checkElement) {
            ele = content.querySelector('.e-autofill');
            if (ele) {
                detach(ele);
            }
        }
    }
    else if (clsName === 'e-filloption') {
        if (content !== checkElement) {
            ele = content.querySelector('.e-filloption');
            if (ele) {
                detach(ele);
            }
        }
    }
    else {
        ele = content.querySelector('.e-selection');
        if (ele) {
            detach(ele);
        }
    }
}
/**
 * Position element with given range
 *
 * @hidden
 * @param {HTMLElement} ele - Specify the element.
 * @param {number[]} range - specify the range.
 * @param {SheetModel} sheet - Specify the sheet.
 * @param {boolean} isRtl - Specify the boolean value.
 * @param {number} frozenRow - Specidy the frozen row.
 * @param {number} frozenColumn - Specify the frozen column
 * @param {boolean} preventAnimation - Specify the preventAnimation.
 * @param {boolean} isActiveCell - Specidy the boolean value.
 * @param {number} freezeScrollHeight - Specify the freeze scroll height
 * @param {number} freezeScrollWidth - Specify the freeze scroll width
 * @param {number} rowHdrWidth - Specify the row header width
 * @param {number} cls - Specify the class
 * @param {number} isFillOptShow - Specify the fill option
 * @param {number} freezeFillOpt - Specifies the fill option
 * @param {number} freezeFillOpt.top - Specifies the fill option
 * @param {number} freezeFillOpt.left - Specifies the fill option
 * @returns {void} - Position element with given range
 */
function locateElem(ele, range, sheet, isRtl, frozenRow, frozenColumn, preventAnimation, isActiveCell, freezeScrollHeight, freezeScrollWidth, rowHdrWidth, cls, isFillOptShow, freezeFillOpt) {
    var swapRange = getSwapRange(range);
    var cellPosition = getCellPosition(sheet, swapRange, frozenRow, frozenColumn, freezeScrollHeight, freezeScrollWidth, rowHdrWidth);
    var startIndex = [skipHiddenIdx(sheet, 0, true), skipHiddenIdx(sheet, 0, true, 'columns')];
    var height = getRowsHeight(sheet, range[0], range[2], true);
    var width = getColumnsWidth(sheet, range[1], range[3], true);
    var isRowSelected = (range[1] === 0 && range[3] === sheet.colCount - 1);
    var isColSelected = (range[0] === 0 && range[2] === sheet.rowCount - 1);
    var top = 0;
    var tdiff = -5;
    var ldiff = -5;
    var left = 0;
    var otdiff = 6;
    var oldiff = 6;
    if (isNullOrUndefined(cls)) {
        var attrs = {
            'top': (swapRange[0] === startIndex[0] ? cellPosition.top : cellPosition.top - getDPRValue(1)) + 'px',
            'height': height && height + (swapRange[0] === startIndex[0] ? 0 : getDPRValue(1)) + 'px',
            'width': width && width + (swapRange[1] === startIndex[1] ? 0 : getDPRValue(1)) + (isActiveCell
                && frozenColumn && swapRange[1] < frozenColumn && swapRange[3] >= frozenColumn ? 1 : 0) + 'px'
        };
        attrs[isRtl ? 'right' : 'left'] = (swapRange[1] === startIndex[1] ? cellPosition.left : cellPosition.left - 1) + 'px';
        if (ele) {
            var promise = setStyleAttribute$1([{ element: ele, attrs: attrs }], preventAnimation);
            return promise;
        }
    }
    else {
        if (isRowSelected) {
            tdiff = -5;
            ldiff = -2;
            otdiff = 6;
            oldiff = 3;
        }
        if (isColSelected) {
            ldiff = -5;
            tdiff = 0;
            otdiff = 1;
            oldiff = 6;
        }
        if (!isColSelected) {
            top += height;
        }
        if (!isRowSelected) {
            left += width;
        }
        top += Math.round(cellPosition.top) + tdiff;
        left += Math.round(cellPosition.left) + ldiff;
        var attrs = {};
        if (isFillOptShow) {
            removeClass([ele], 'e-hide');
            top = freezeFillOpt && freezeFillOpt.top ? freezeFillOpt.top : top;
            left = freezeFillOpt && freezeFillOpt.left ? freezeFillOpt.left : left;
            attrs = {
                'top': top + otdiff + 'px',
                'left': left + oldiff + 'px'
            };
            if (ele) {
                setStyleAttribute$1([{ element: ele, attrs: attrs }], preventAnimation);
            }
        }
        else {
            attrs = {
                'top': top + 'px'
            };
            attrs[isRtl ? 'right' : 'left'] = left + 'px';
            if (ele) {
                setStyleAttribute$1([{ element: ele, attrs: attrs }], preventAnimation);
            }
        }
    }
}
/**
 * To update element styles using request animation frame
 *
 * @hidden
 * @param {StyleType[]} styles - Specify the styles
 * @param {boolean} preventAnimation - Specify the preventAnimation.
 * @returns {void} - To update element styles using request animation frame
 */
function setStyleAttribute$1(styles, preventAnimation) {
    var promise = new Promise(function (resolve) {
        var setStyleFn = function () {
            styles.forEach(function (style) {
                setStyleAttribute(style.element, style.attrs);
                resolve();
            });
        };
        if (preventAnimation) {
            setStyleFn();
        }
        else {
            requestAnimationFrame(function () { return setStyleFn(); });
        }
    });
    return promise;
}
/**
 * @hidden
 * @returns {string} - to get Start Event
 */
function getStartEvent() {
    return (Browser.isPointer ? 'pointerdown' : 'mousedown touchstart');
}
/**
 * @hidden
 * @returns {string} - to get Move Event
 */
function getMoveEvent() {
    return (Browser.isPointer ? 'pointermove' : 'mousemove touchmove');
}
/**
 * @hidden
 * @returns {string} - Returns string value.
 */
function getEndEvent() {
    return (Browser.isPointer ? 'pointerup' : 'mouseup touchend');
}
/**
 * @hidden
 * @param {Event} e - To specify the event.
 * @returns {boolean} - Returns boolean value.
 */
function isTouchStart(e) {
    return e.type === 'touchstart' || (e.type === 'pointerdown' && e.pointerType === 'touch');
}
/**
 * @hidden
 * @param {Event} e - To specify the event.
 * @returns {boolean} - Returns boolean value.
 */
function isTouchMove(e) {
    return e.type === 'touchmove' || (e.type === 'pointermove' && e.pointerType === 'touch');
}
/**
 * @hidden
 * @param {Event} e - To specify the event.
 * @returns {boolean} - Returns boolean value.
 */
function isTouchEnd(e) {
    return e.type === 'touchend' || (e.type === 'pointerup' && e.pointerType === 'touch');
}
/**
 * @hidden
 * @param {TouchEvent | MouseEvent} e - To specify the mouse and touch event.
 * @returns {number} - To get client value
 */
function isMouseDown(e) {
    return e && (e.type === 'mousedown' || e.type === 'pointerdown');
}
/**
 * @param {MouseEvent} e - Specify the event.
 * @returns {boolean} - To get boolean value.
 * @hidden
 */
function isMouseMove(e) {
    return e && (e.type === 'mousemove' || e.type === 'pointermove');
}
/**
 * @param {MouseEvent} e - Specify the event.
 * @returns {boolean} - To get boolean value
 * @hidden
 */
function isMouseUp(e) {
    return e && (e.type === 'mouseup' || e.type === 'pointerup');
}
/**
 * @param {MouseEvent | TouchEvent} e - To specify the mouse or touch event.
 * @returns {number} - To get client X value.
 * @hidden
 */
function getClientX(e) {
    return e.changedTouches ? e.changedTouches[0].clientX : e.clientX;
}
/**
 * @hidden
 * @param {MouseEvent | TouchEvent} e - To specify the mouse and touch event.
 * @returns {number} - To get client value
 */
function getClientY(e) {
    return e.changedTouches ? e.changedTouches[0].clientY : e.clientY;
}
/**
 * Get even number based on device pixel ratio
 *
 * @param {number} value - Specify the number
 * @param {boolean} preventDecrease - Specify the boolean value
 * @returns {number} - To get DPR value
 * @hidden
 */
function getDPRValue(value, preventDecrease) {
    if (window.devicePixelRatio % 1 > 0) {
        var pointValue = (value * window.devicePixelRatio) % 1;
        return value + (pointValue ? (((pointValue > 0.5 || preventDecrease) ? (1 - pointValue) : -1 * pointValue)
            / window.devicePixelRatio) : 0);
    }
    else {
        return value;
    }
}
var config = {
    role: 'role',
    selected: 'aria-selected',
    multiselectable: 'aria-multiselectable',
    busy: 'aria-busy',
    colcount: 'aria-colcount'
};
/**
 * @hidden
 * @param {HTMLElement} target - specify the target.
 * @param {IAriaOptions<boolean>} options - Specify the options.
 * @returns {void} -  to set Aria Options
 */
function setAriaOptions(target, options) {
    var props = Object.keys(options);
    props.forEach(function (name) {
        if (target) {
            target.setAttribute(config[name], options[name]);
        }
    });
}
/**
 * @hidden
 * @param {HTMLElement} element - specify the element.
 * @param {Object} component - Specify the component.
 * @returns {void} -  to destroy the component.
 */
function destroyComponent(element, component) {
    if (element) {
        var compObj = getComponent(element, component);
        if (compObj) {
            compObj.destroy();
        }
    }
}
/**
 * @hidden
 * @param {number} idx - Specify the index
 * @param {number} index - Specify the index
 * @param {string} value - Specify the value.
 * @param {boolean} isCol - Specify the boolean value.
 * @param {Spreadsheet} parent - Specify the parent.
 * @returns {void} - To set resize.
 */
function setResize(idx, index, value, isCol, parent) {
    var curEle;
    var curEleH;
    var curEleC;
    var preEle;
    var preEleH;
    var preEleC;
    var nxtEle;
    var nxtEleH;
    var nxtEleC;
    var sheet = parent.getActiveSheet();
    var frozenRow = parent.frozenRowCount(sheet);
    var frozenCol = parent.frozenColCount(sheet);
    if (isCol) {
        var header = idx < frozenCol ? parent.getSelectAllContent() : parent.getColumnHeaderContent();
        curEle = header.getElementsByTagName('th')[index];
        curEleH = header.getElementsByTagName('col')[index];
        curEleC = (idx < frozenCol ? parent.getRowHeaderContent() : parent.getMainContent()).getElementsByTagName('col')[index];
    }
    else {
        curEle = curEleH = frozenRow || frozenCol ? parent.getRow(idx, null, frozenCol - 1) :
            parent.getRow(idx, parent.getRowHeaderTable());
        curEleH.style.height = parseInt(value, 10) > 0 ? getDPRValue(parseInt(value, 10)) + 'px' : '2px';
        curEleC = parent.getRow(idx, null, frozenCol);
        curEleC.style.height = parseInt(value, 10) > 0 ? getDPRValue(parseInt(value, 10)) + 'px' : '0px';
        var hdrFntSize = void 0;
        if (sheet.showHeaders) {
            var hdrRow = parent.getRowHeaderContent().getElementsByClassName('e-row');
            var hdrClone = [];
            hdrClone[0] = hdrRow[index].getElementsByTagName('td')[0].cloneNode(true);
            hdrFntSize = findMaxValue(parent.getRowHeaderTable(), hdrClone, false, parent) + 1;
        }
        var contentRow = parent.getMainContent().getElementsByClassName('e-row');
        var contentClone = [];
        for (var idx_1 = 0; idx_1 < contentRow[index].getElementsByTagName('td').length; idx_1++) {
            contentClone[idx_1] = contentRow[index].getElementsByTagName('td')[idx_1].cloneNode(true);
        }
        var cntFntSize = findMaxValue(parent.getContentTable(), contentClone, false, parent) + 1;
        var fntSize = hdrFntSize >= cntFntSize ? hdrFntSize : cntFntSize;
        if (parseInt(curEleC.style.height, 10) < fntSize ||
            (curEle && curEle.classList.contains('e-reach-fntsize') && parseInt(curEleC.style.height, 10) === fntSize)) {
            if (sheet.showHeaders) {
                curEle.classList.add('e-reach-fntsize');
                curEleH.style.lineHeight = parseInt(value, 10) >= 4 ? ((parseInt(value, 10)) - 4) + 'px' :
                    parseInt(value, 10) > 0 ? ((parseInt(value, 10)) - 1) + 'px' : '0px';
            }
            curEleC.style.lineHeight = parseInt(value, 10) > 0 ? ((parseInt(value, 10)) - 1) + 'px' : '0px';
        }
        else {
            if (curEleH) {
                curEleH.style.removeProperty('line-height');
            }
            curEleC.style.removeProperty('line-height');
            if (curEle && curEle.classList.contains('e-reach-fntsize')) {
                curEle.classList.remove('e-reach-fntsize');
            }
        }
    }
    preEleC = curEleC.previousElementSibling;
    nxtEleC = curEleC.nextElementSibling;
    if (preEleC) {
        if (sheet.showHeaders) {
            preEle = curEle.previousElementSibling;
            preEleH = curEleH.previousElementSibling;
        }
        preEleC = curEleC.previousElementSibling;
    }
    if (nxtEleC) {
        if (sheet.showHeaders) {
            nxtEle = curEle.nextElementSibling;
            nxtEleH = curEleH.nextElementSibling;
        }
        nxtEleC = curEleC.nextElementSibling;
    }
    if (parseInt(value, 10) <= 0 && !(curEleC.classList.contains('e-zero') || curEleC.classList.contains('e-zero-start'))) {
        if (preEleC && nxtEleC) {
            if (isCol) {
                if (sheet.showHeaders) {
                    curEleH.style.width = '2px';
                }
                curEleC.style.width = '0px';
            }
            else {
                if (sheet.showHeaders) {
                    curEleH.style.height = '2px';
                }
                curEleC.style.height = '0px';
            }
            if (preEleC.classList.contains('e-zero-start')) {
                if (sheet.showHeaders) {
                    curEle.classList.add('e-zero-start');
                }
                curEleC.classList.add('e-zero-start');
            }
            else {
                if (sheet.showHeaders) {
                    curEle.classList.add('e-zero');
                }
                curEleC.classList.add('e-zero');
            }
            if (nxtEle && !nxtEle.classList.contains('e-zero') && !nxtEle.classList.contains('e-zero-last')) {
                if (sheet.showHeaders) {
                    curEle.classList.add('e-zero-last');
                }
                curEleC.classList.add('e-zero-last');
            }
            if (preEleC.classList.contains('e-zero-last')) {
                if (sheet.showHeaders) {
                    preEle.classList.remove('e-zero-last');
                }
                preEleC.classList.remove('e-zero-last');
            }
            if (sheet.showHeaders && preEle.classList.contains('e-zero')) {
                if (curEle.classList.contains('e-zero-end')) {
                    setWidthAndHeight(preEleH, -2, isCol);
                }
                else {
                    setWidthAndHeight(preEleH, -2, isCol);
                }
            }
            else if (sheet.showHeaders) {
                setWidthAndHeight(preEleH, -1, isCol);
            }
            if (sheet.showHeaders && preEle.classList.contains('e-zero-start')) {
                setWidthAndHeight(curEleH, -1, isCol);
            }
            if (sheet.showHeaders && nxtEle.classList.contains('e-zero')) {
                if (curEle.classList.contains('e-zero-start')) {
                    while (nxtEle) {
                        if (nxtEle.classList.contains('e-zero') && (parseInt(nxtEleH.style.height, 10) !== 0 && !isCol) ||
                            (parseInt(nxtEleH.style.width, 10) !== 0 && isCol)) {
                            if (isCol) {
                                curEleH.style.width = parseInt(curEleH.style.width, 10) - 1 + 'px';
                                nxtEleH.style.width = parseInt(nxtEleH.style.width, 10) - 1 + 'px';
                            }
                            else {
                                curEleH.style.height = parseInt(curEleH.style.height, 10) - 1 + 'px';
                                nxtEleH.style.height = parseInt(nxtEleH.style.height, 10) - 1 + 'px';
                            }
                            nxtEle.classList.remove('e-zero');
                            nxtEle.classList.add('e-zero-start');
                            break;
                        }
                        else {
                            var nxtIndex = void 0;
                            nxtEle.classList.remove('e-zero');
                            nxtEle.classList.add('e-zero-start');
                            if (isCol) {
                                nxtIndex = parseInt(nxtEle.getAttribute('aria-colindex'), 10) - 1;
                                nxtEle = parent.getColHeaderTable().getElementsByTagName('th')[nxtIndex + 1];
                                nxtEleH = parent.getColHeaderTable().getElementsByTagName('col')[nxtIndex + 1];
                            }
                            else {
                                nxtIndex = parseInt(nxtEle.getAttribute('aria-rowindex'), 10) - 1;
                                nxtEle = parent.getRowHeaderTable().getElementsByTagName('tr')[nxtIndex + 1];
                                nxtEleH = parent.getRowHeaderTable().getElementsByTagName('tr')[nxtIndex + 1];
                            }
                        }
                    }
                }
                else {
                    setWidthAndHeight(curEleH, -2, isCol);
                }
            }
            else if (sheet.showHeaders) {
                if (nxtEle.classList.contains('e-zero-end')) {
                    if (isCol) {
                        curEleH.style.width = '0px';
                    }
                    else {
                        curEleH.style.height = '0px';
                    }
                }
                else {
                    setWidthAndHeight(nxtEleH, -1, isCol);
                }
            }
        }
        else if (preEleC) {
            if (isCol) {
                if (sheet.showHeaders) {
                    curEleH.style.width = '1px';
                }
                curEleC.style.width = '0px';
            }
            else {
                if (sheet.showHeaders) {
                    curEleH.style.height = '1px';
                }
                curEleC.style.height = '0px';
            }
            if (sheet.showHeaders) {
                curEle.classList.add('e-zero-end');
            }
            curEleC.classList.add('e-zero-end');
            if (sheet.showHeaders) {
                curEle.classList.add('e-zero-last');
            }
            curEleC.classList.add('e-zero-last');
            if (sheet.showHeaders && preEle.classList.contains('e-zero')) {
                setWidthAndHeight(preEleH, -2, isCol);
            }
            else {
                setWidthAndHeight(preEleH, -1, isCol);
            }
        }
        else if (nxtEle) {
            curEle.classList.add('e-zero-start');
            curEleC.classList.add('e-zero-start');
            if (!nxtEle.classList.contains('e-zero')) {
                curEle.classList.add('e-zero-last');
                curEleC.classList.add('e-zero-last');
            }
            if (isCol) {
                curEleH.style.width = '1px';
                curEleC.style.width = '0px';
            }
            else {
                curEleH.style.height = '1px';
                curEleC.style.height = '0px';
            }
            if (sheet.showHeaders && nxtEle.classList.contains('e-zero')) {
                while (nxtEle) {
                    if (nxtEle.classList.contains('e-zero') && (parseInt(nxtEleH.style.width, 10) !== 0
                        && isCol) || (parseInt(nxtEleH.style.height, 10) !== 0 && !isCol)) {
                        if (isCol) {
                            nxtEleH.style.width = parseInt(nxtEleH.style.width, 10) - 1 + 'px';
                            curEleH.style.width = parseInt(curEleH.style.width, 10) - 1 + 'px';
                        }
                        else {
                            nxtEleH.style.height = parseInt(nxtEleH.style.height, 10) - 1 + 'px';
                            curEleH.style.height = parseInt(curEleH.style.height, 10) - 1 + 'px';
                        }
                        nxtEle.classList.add('e-zero-start');
                        nxtEle.classList.remove('e-zero');
                        break;
                    }
                    else {
                        var nxtIndex = void 0;
                        nxtEle.classList.add('e-zero-start');
                        nxtEle.classList.remove('e-zero');
                        if (isCol) {
                            nxtIndex = parseInt(nxtEle.getAttribute('aria-colindex'), 10) - 1;
                            nxtEleH = parent.getColHeaderTable().getElementsByTagName('col')[nxtIndex + 1];
                            nxtEle = parent.getColHeaderTable().getElementsByTagName('th')[nxtIndex + 1];
                        }
                        else {
                            nxtIndex = parseInt(nxtEle.getAttribute('aria-rowindex'), 10) - 1;
                            nxtEleH = parent.getRowHeaderTable().getElementsByTagName('tr')[nxtIndex + 1];
                            nxtEle = parent.getRowHeaderTable().getElementsByTagName('tr')[nxtIndex + 1];
                        }
                    }
                }
            }
            else if (sheet.showHeaders) {
                setWidthAndHeight(nxtEleH, -1, isCol);
            }
        }
    }
    else if (parseInt(value, 10) > 0) {
        var DPRValue = getDPRValue(parseInt(value, 10)) + 'px';
        if (isCol) {
            curEleH.style.width = DPRValue;
            curEleC.style.width = DPRValue;
        }
        else {
            curEleH.style.height = DPRValue;
            curEleC.style.height = DPRValue;
        }
        if (sheet.showHeaders && preEle && nxtEle) {
            if (preEle.classList.contains('e-zero')) {
                if (curEle.classList.contains('e-zero')) {
                    if (isCol) {
                        preEleH.style.width = parseInt(preEleH.style.width, 10) + 2 + 'px';
                        curEleH.style.width = parseInt(curEleH.style.width, 10) - 1 + 'px';
                    }
                    else {
                        preEleH.style.height = parseInt(preEleH.style.height, 10) + 2 + 'px';
                        curEleH.style.height = parseInt(curEleH.style.height, 10) - 1 + 'px';
                    }
                }
                else {
                    setWidthAndHeight(curEleH, -1, isCol);
                }
            }
            else {
                if (curEle.classList.contains('e-zero')) {
                    setWidthAndHeight(preEleH, 1, isCol);
                }
                else {
                    if (curEle.classList.contains('e-zero-start')) {
                        if (isCol) {
                            preEleH.style.width = parseInt(preEleH.style.width, 10) + 1 + 'px';
                            curEleH.style.width = parseInt(curEleH.style.width, 10) - 1 + 'px';
                        }
                        else {
                            preEleH.style.height = parseInt(preEleH.style.height, 10) + 1 + 'px';
                            curEleH.style.height = parseInt(curEleH.style.height, 10) - 1 + 'px';
                        }
                    }
                }
            }
            if (nxtEle.classList.contains('e-zero')) {
                setWidthAndHeight(curEleH, -1, isCol);
            }
            else {
                if (curEle.classList.contains('e-zero') || curEle.classList.contains('e-zero-start')) {
                    setWidthAndHeight(nxtEleH, 1, isCol);
                }
            }
            if (curEle.classList.contains('e-zero')) {
                curEle.classList.remove('e-zero');
            }
            if (curEle.classList.contains('e-zero-start')) {
                curEle.classList.remove('e-zero-start');
            }
            if (curEleC.classList.contains('e-zero')) {
                curEleC.classList.remove('e-zero');
            }
            if (curEleC.classList.contains('e-zero-start')) {
                curEleC.classList.remove('e-zero-start');
            }
            if (curEle.classList.contains('e-zero-last')) {
                curEle.classList.remove('e-zero-last');
            }
            if (curEleC.classList.contains('e-zero-last')) {
                curEleC.classList.remove('e-zero-last');
            }
            if (preEle.classList.contains('e-zero') || preEle.classList.contains('e-zero-start')) {
                preEle.classList.add('e-zero-last');
                preEleC.classList.add('e-zero-last');
            }
        }
        else if (sheet.showHeaders && preEle) {
            if (preEle.classList.contains('e-zero')) {
                if (curEle.classList.contains('e-zero')) {
                    if (isCol) {
                        curEleH.style.width = parseInt(curEleH.style.width, 10) - 1 + 'px';
                        preEleH.style.width = parseInt(preEleH.style.width, 10) + 2 + 'px';
                    }
                    else {
                        curEleH.style.height = parseInt(curEleH.style.height, 10) - 1 + 'px';
                        preEleH.style.height = parseInt(preEleH.style.height, 10) + 2 + 'px';
                    }
                }
                else {
                    setWidthAndHeight(curEleH, -1, isCol);
                }
            }
            else {
                if (curEle.classList.contains('e-zero')) {
                    setWidthAndHeight(preEleH, 1, isCol);
                }
                else {
                    setWidthAndHeight(curEleH, -1, isCol);
                }
            }
            if (curEle.classList.contains('e-zero')) {
                curEle.classList.remove('e-zero');
            }
            if (curEle.classList.contains('e-zero-end')) {
                curEle.classList.remove('e-zero-end');
            }
            if (curEleC.classList.contains('e-zero')) {
                curEleC.classList.remove('e-zero');
            }
            if (curEleC.classList.contains('e-zero-end')) {
                curEleC.classList.remove('e-zero-end');
            }
        }
        else if (sheet.showHeaders && nxtEle) {
            if (nxtEle.classList.contains('e-zero')) {
                setWidthAndHeight(curEleH, -1, isCol);
            }
            else if (curEle.classList.contains('e-zero-start')) {
                setWidthAndHeight(nxtEleH, 1, isCol);
                curEle.classList.remove('e-zero-start');
            }
            if (curEle.classList.contains('e-zero')) {
                curEle.classList.remove('e-zero');
            }
            if (curEleC.classList.contains('e-zero')) {
                curEleC.classList.remove('e-zero');
            }
            if (curEle.classList.contains('e-zero-start')) {
                curEle.classList.remove('e-zero-start');
            }
            if (curEleC.classList.contains('e-zero-start')) {
                curEleC.classList.remove('e-zero-start');
            }
        }
    }
}
/**
 * @hidden
 * @param {HTMLElement} trgt - Specify the target element.
 * @param {number} value - specify the number.
 * @param {boolean} isCol - Specify the boolean vlaue.
 * @returns {void} -  to set width and height.
 */
function setWidthAndHeight(trgt, value, isCol) {
    if (isCol) {
        trgt.style.width = parseInt(trgt.style.width, 10) + value + 'px';
    }
    else {
        trgt.style.height = parseInt(trgt.style.height, 10) + value + 'px';
    }
}
/**
 * @hidden
 * @param {number} lineHeight - Specify the line height for other culture text.
 * @returns {void} -  to set the line height for other culture text.
 */
function setTextLineHeight(lineHeight) {
    textLineHeight = lineHeight;
}
/**
 * @hidden
 * @param {HTMLElement} table - Specify the table.
 * @param {HTMLElement[]} text - specify the text.
 * @param {boolean} isCol - Specifyt boolean value
 * @param {Spreadsheet} parent - Specify the parent.
 * @param {string} prevData - specify the prevData.
 * @param {boolean} isWrap - Specifyt boolean value
 * @returns {number} - To find maximum value.
 */
function findMaxValue(table, text, isCol, parent, prevData, isWrap) {
    var myTableDiv = parent.createElement('div', { className: parent.element.className, styles: 'display: block' });
    var myTable = parent.createElement('table', {
        className: table.className + 'e-resizetable',
        styles: 'width: auto;height: auto'
    });
    var myTr = parent.createElement('tr');
    if (isCol) {
        text.forEach(function (element) {
            var tr = myTr.cloneNode();
            tr.appendChild(element);
            myTable.appendChild(tr);
        });
    }
    else {
        text.forEach(function (element) {
            myTr.appendChild(element.cloneNode(true));
        });
        myTable.appendChild(myTr);
    }
    myTableDiv.appendChild(myTable);
    document.body.appendChild(myTableDiv);
    var offsetWidthValue;
    var offsetHeightValue;
    var tableMaxWidth = myTable.getBoundingClientRect().width;
    var tableMaxHeight = myTable.getBoundingClientRect().height;
    if (!isWrap) {
        offsetHeightValue = tableMaxHeight;
        offsetWidthValue = tableMaxWidth;
    }
    else {
        if (isCol && parseInt(prevData, 10) > tableMaxWidth) {
            offsetWidthValue = tableMaxWidth;
        }
        else {
            offsetWidthValue = parseInt(prevData, 10);
        }
        if (!isCol && parseInt(prevData, 10) > tableMaxHeight) {
            offsetHeightValue = tableMaxHeight;
        }
        else {
            offsetHeightValue = parseInt(prevData, 10);
        }
    }
    document.body.removeChild(myTableDiv);
    if (isCol) {
        return Math.ceil(offsetWidthValue);
    }
    else {
        return Math.ceil(offsetHeightValue);
    }
}
/**
 * @hidden
 * @param {CollaborativeEditArgs} options - Specify the collaborative edit arguments.
 * @param {Spreadsheet} spreadsheet - specify the spreadsheet.
 * @param {boolean} isRedo - Specifyt the boolean value.
 * @param {CollaborativeEditArgs[]} undoCollections - Specify the undo collections.
 * @param {any} actionEventArgs - Specify the actionEventArgs.
 * @param {UndoRedoEventArgs} actionEventArgs.eventArgs - Specify the eventArgs.
 * @returns {void} - To update the Action.
 */
function updateAction(options, spreadsheet, isRedo, undoCollections, actionEventArgs) {
    /* eslint-disable-next-line  @typescript-eslint/no-explicit-any */
    var eventArgs = options.eventArgs;
    var chartElement;
    var element;
    var args;
    var promise;
    var sortArgs;
    var cellEvtArgs;
    var cellValue;
    var clipboardPromise;
    var model;
    var sheet;
    switch (options.action) {
        case 'sorting':
            args = {
                range: options.eventArgs.range,
                sortOptions: options.eventArgs.sortOptions,
                cancel: false
            };
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            promise = new Promise(function (resolve, reject) {
                resolve((function () { })());
            });
            sortArgs = { args: args, promise: promise };
            spreadsheet.notify(initiateSort, sortArgs);
            sortArgs.promise.then(function (args) {
                spreadsheet.serviceLocator.getService('cell').refreshRange(getIndexesFromAddress(args.range));
            });
            break;
        case 'cellSave': {
            cellEvtArgs = options.eventArgs;
            var cellSaveArgs = { element: cellEvtArgs.element, value: cellEvtArgs.value,
                oldValue: cellEvtArgs.oldValue, address: cellEvtArgs.address, displayText: cellEvtArgs.displayText,
                formula: cellEvtArgs.formula, originalEvent: cellEvtArgs.originalEvent };
            if (actionEventArgs) {
                actionEventArgs.eventArgs = cellSaveArgs;
                spreadsheet.notify(beginAction, actionEventArgs);
            }
            cellValue = cellSaveArgs.formula ? (isRedo ? { value: cellSaveArgs.formula } : { formula: cellSaveArgs.formula })
                : { value: cellSaveArgs.value };
            spreadsheet.updateCell(cellValue, cellSaveArgs.address);
            if (actionEventArgs) {
                spreadsheet.trigger('cellSave', actionEventArgs.eventArgs);
            }
            break;
        }
        case 'cellDelete': {
            var addrInfo = getAddressInfo(spreadsheet, options.eventArgs.address);
            clearRange(spreadsheet, addrInfo.indices, addrInfo.sheetIndex);
            break;
        }
        case 'format':
            if (eventArgs.requestType === 'CellFormat') {
                if (eventArgs.style && eventArgs.style.border && !isNullOrUndefined(eventArgs.borderType)) {
                    var style = {};
                    Object.assign(style, eventArgs.style, null, true);
                    eventArgs.style.border = undefined;
                    spreadsheet.notify(setCellFormat, { style: eventArgs.style, refreshRibbon: true, range: getRangeIndexes(eventArgs.range),
                        onActionUpdate: true });
                    eventArgs.style.border = style.border;
                    spreadsheet.setBorder(eventArgs.style, eventArgs.range, eventArgs.borderType);
                    eventArgs.style = style;
                }
                else {
                    spreadsheet.notify(setCellFormat, { style: eventArgs.style, refreshRibbon: true, range: getRangeIndexes(eventArgs.range),
                        onActionUpdate: true });
                }
                getUpdateUsingRaf(function () { return spreadsheet.selectRange(spreadsheet.getActiveSheet().selectedRange); });
            }
            else {
                spreadsheet.numberFormat(eventArgs.format, eventArgs.range);
            }
            break;
        case 'clipboard':
            if (eventArgs.copiedInfo.isCut && !isRedo) {
                return;
            }
            clipboardPromise = eventArgs.copiedInfo.isCut ? spreadsheet.cut(eventArgs.copiedRange) : spreadsheet.copy(eventArgs.copiedRange);
            clipboardPromise.then(function () { return spreadsheet.paste(eventArgs.pastedRange, eventArgs.type); });
            break;
        case 'gridLines':
            spreadsheet.setSheetPropertyOnMute(spreadsheet.sheets[eventArgs.sheetIdx], 'showGridLines', eventArgs.isShow);
            break;
        case 'headers':
            spreadsheet.setSheetPropertyOnMute(spreadsheet.sheets[eventArgs.sheetIdx], 'showHeaders', eventArgs.isShow);
            break;
        case 'resize':
        case 'resizeToFit':
            if (eventArgs.isCol) {
                if (eventArgs.hide === undefined) {
                    spreadsheet.setColWidth(eventArgs.width, eventArgs.index, eventArgs.sheetIdx);
                }
                else {
                    spreadsheet.hideColumn(eventArgs.index, eventArgs.index, eventArgs.hide);
                }
            }
            else {
                if (eventArgs.hide === undefined) {
                    spreadsheet.setRowHeight(eventArgs.height, eventArgs.index, eventArgs.sheetIdx + 1);
                }
                else {
                    spreadsheet.hideRow(eventArgs.index, eventArgs.index, eventArgs.hide);
                }
            }
            break;
        case 'renameSheet':
            spreadsheet.setSheetPropertyOnMute(spreadsheet.sheets[eventArgs.index - 1], 'name', eventArgs.value);
            break;
        case 'removeSheet':
            spreadsheet.notify(removeSheetTab, { index: eventArgs.index, isAction: true, count: eventArgs.sheetCount, clicked: true });
            break;
        case 'wrap':
            wrap(options.eventArgs.address, options.eventArgs.wrap, spreadsheet);
            break;
        case 'hideShow':
            if (eventArgs.isCol) {
                spreadsheet.hideColumn(eventArgs.startIndex, eventArgs.endIndex, eventArgs.hide);
            }
            else {
                spreadsheet.hideRow(eventArgs.startIndex, eventArgs.endIndex, eventArgs.hide);
            }
            break;
        case 'replace':
            spreadsheet.updateCell({ value: eventArgs.replaceValue }, eventArgs.address);
            break;
        case 'filter':
            if (isRedo === false) {
                spreadsheet.notify(initiateFilterUI, {
                    predicates: eventArgs.previousPredicates, range: eventArgs.range, sIdx: eventArgs.index, isUndoRedo: true
                });
            }
            else {
                spreadsheet.notify(initiateFilterUI, {
                    predicates: eventArgs.predicates, range: eventArgs.range, sIdx: eventArgs.index, isUndoRedo: true
                });
            }
            break;
        case 'insert':
            if (options.eventArgs.modelType === 'Sheet') {
                sheet = spreadsheet;
            }
            else {
                sheet = getSheet(spreadsheet, options.eventArgs.activeSheetIndex);
                if (!sheet) {
                    break;
                }
            }
            if (isRedo === false) {
                spreadsheet.notify(deleteModel, { model: sheet, start: options.eventArgs.index, end: options.eventArgs.index + (options.eventArgs.model.length - 1), modelType: options.eventArgs.modelType, isUndoRedo: true });
            }
            else {
                spreadsheet.notify(insertModel, { model: sheet, start: options.eventArgs.index, end: options.eventArgs.index +
                        (options.eventArgs.model.length - 1), modelType: options.eventArgs.modelType, isAction: false, checkCount: options.eventArgs.sheetCount, activeSheetIndex: options.eventArgs.activeSheetIndex, isUndoRedo: true });
            }
            break;
        case 'delete':
            if (options.eventArgs.modelType === 'Sheet') {
                sheet = spreadsheet;
            }
            else {
                sheet = getSheet(spreadsheet, options.eventArgs.activeSheetIndex);
                if (!sheet) {
                    break;
                }
            }
            if (isRedo === false) {
                spreadsheet.notify(insertModel, { model: sheet, start: options.eventArgs.deletedModel, modelType: options.eventArgs.modelType, isAction: false, columnCellsModel: options.eventArgs.deletedCellsModel, definedNames: options.eventArgs.definedNames, activeSheetIndex: options.eventArgs.activeSheetIndex, isUndoRedo: true });
            }
            else {
                spreadsheet.notify(deleteModel, { model: sheet, start: options.eventArgs.startIndex, checkCount: options.eventArgs.sheetCount, end: options.eventArgs.endIndex, modelType: options.eventArgs.modelType,
                    isUndoRedo: true });
            }
            break;
        case 'validation':
            if (isRedo) {
                var rules = { type: eventArgs.type, operator: eventArgs.operator, value1: eventArgs.value1, value2: eventArgs.value2, ignoreBlank: eventArgs.ignoreBlank, inCellDropDown: eventArgs.inCellDropDown };
                spreadsheet.notify(cellValidation, { rules: rules, range: eventArgs.range });
            }
            else {
                spreadsheet.notify(cellValidation, { range: eventArgs.range, isRemoveValidation: true });
            }
            break;
        case 'removeHighlight':
            if (isRedo) {
                spreadsheet.removeInvalidHighlight(eventArgs.range);
            }
            else {
                spreadsheet.addInvalidHighlight(eventArgs.range);
            }
            break;
        case 'addHighlight':
            if (isRedo) {
                spreadsheet.addInvalidHighlight(eventArgs.range);
            }
            else {
                spreadsheet.removeInvalidHighlight(eventArgs.range);
            }
            break;
        case 'merge':
            options.eventArgs.isAction = false;
            model = [];
            for (var rIdx = 0, rCnt = eventArgs.model.length; rIdx < rCnt; rIdx++) {
                model.push({ cells: [] });
                for (var cIdx = 0, cCnt = eventArgs.model[rIdx].cells.length; cIdx < cCnt; cIdx++) {
                    model[rIdx].cells[cIdx] = {};
                    Object.assign(model[rIdx].cells[cIdx], eventArgs.model[rIdx].cells[cIdx]);
                }
            }
            spreadsheet.notify(setMerge, options.eventArgs);
            eventArgs.model = model;
            break;
        case 'clear':
            spreadsheet.notify(clearViewer, { options: options.eventArgs, isPublic: true });
            break;
        case 'conditionalFormat':
            if (isRedo) {
                var conditionalFormat = { type: eventArgs.type, cFColor: eventArgs.cFColor, value: eventArgs.value,
                    range: eventArgs.range };
                spreadsheet.notify(setCFRule, { conditionalFormat: conditionalFormat, sheetIdx: eventArgs.sheetIdx, isUndoRedo: true });
            }
            else {
                spreadsheet.notify(clearCFRule, { range: eventArgs.range, sheetIdx: eventArgs.sheetIdx, isUndoRedo: true });
                for (var undoCollIdx = 0; undoCollIdx < undoCollections.length; undoCollIdx++) {
                    if (undoCollections[undoCollIdx].action === 'conditionalFormat') {
                        var conditionalFormat = {
                            type: undoCollections[undoCollIdx].eventArgs.type,
                            cFColor: undoCollections[undoCollIdx].eventArgs.cFColor,
                            value: undoCollections[undoCollIdx].eventArgs.value, range: undoCollections[undoCollIdx].eventArgs.range
                        };
                        spreadsheet.notify(cFUndo, { conditionalFormat: conditionalFormat, sheetIdx: undoCollections[undoCollIdx].eventArgs.sheetIdx });
                    }
                }
            }
            break;
        case 'clearCF':
            if (isRedo) {
                spreadsheet.notify(clearCFRule, { range: eventArgs.selectedRange, sheetIdx: eventArgs.sheetIdx, isClearCF: true, isUndoRedo: true });
            }
            else {
                spreadsheet.notify(clearCells, { conditionalFormats: eventArgs.cFormats, oldRange: eventArgs.oldRange,
                    selectedRange: eventArgs.selectedRange });
            }
            break;
        case 'insertImage':
            if (isRedo) {
                spreadsheet.notify(createImageElement, { options: { src: options.eventArgs.imageData, height: options.eventArgs.imageHeight, width: options.eventArgs.imageWidth, imageId: options.eventArgs.id }, range: options.eventArgs.range, isPublic: false,
                    isUndoRedo: true });
            }
            else {
                spreadsheet.notify(deleteImage, { id: options.eventArgs.id, sheetIdx: options.eventArgs.sheetIndex + 1, range: options.eventArgs.range });
            }
            break;
        case 'imageRefresh':
            element = document.getElementById(options.eventArgs.id);
            if (isRedo) {
                options.eventArgs.isUndoRedo = true;
                spreadsheet.notify(refreshImgCellObj, options.eventArgs);
            }
            else {
                spreadsheet.notify(refreshImgCellObj, { prevTop: options.eventArgs.currentTop, prevLeft: options.eventArgs.currentLeft, currentTop: options.eventArgs.prevTop, currentLeft: options.eventArgs.prevLeft, id: options.eventArgs.id, currentHeight: options.eventArgs.prevHeight, currentWidth: options.eventArgs.prevWidth, requestType: 'imageRefresh',
                    prevHeight: options.eventArgs.currentHeight, prevWidth: options.eventArgs.currentWidth, isUndoRedo: true });
            }
            element.style.height = isRedo ? options.eventArgs.currentHeight + 'px' : options.eventArgs.prevHeight + 'px';
            element.style.width = isRedo ? options.eventArgs.currentWidth + 'px' : options.eventArgs.prevWidth + 'px';
            element.style.top = isRedo ? options.eventArgs.currentTop + 'px' : options.eventArgs.prevTop + 'px';
            element.style.left = isRedo ? options.eventArgs.currentLeft + 'px' : options.eventArgs.prevLeft + 'px';
            break;
        case 'insertChart':
            if (isRedo) {
                var chartOptions = [{ type: eventArgs.type, theme: eventArgs.theme, isSeriesInRows: eventArgs.isSeriesInRows,
                        range: eventArgs.range, id: eventArgs.id, height: eventArgs.height, width: eventArgs.width }];
                spreadsheet.notify(setChart, { chart: chartOptions, isInitCell: eventArgs.isInitCell, isUndoRedo: false, range: eventArgs.posRange });
            }
            else {
                spreadsheet.notify(deleteChart, { id: eventArgs.id, isUndoRedo: true });
            }
            break;
        case 'deleteChart':
            if (isRedo) {
                spreadsheet.notify(deleteChart, { id: eventArgs.id });
            }
            else {
                var chartOpts = [{ type: eventArgs.type, theme: eventArgs.theme, isSeriesInRows: eventArgs.isSeriesInRows,
                        range: eventArgs.range, id: eventArgs.id, height: eventArgs.height, width: eventArgs.width, top: eventArgs.top,
                        left: eventArgs.left }];
                spreadsheet.notify(setChart, { chart: chartOpts, isInitCell: eventArgs.isInitCell, isUndoRedo: false, range: eventArgs.posRange });
            }
            break;
        case 'chartRefresh':
            chartElement = document.getElementById(options.eventArgs.id);
            if (chartElement) {
                chartElement.style.height = isRedo ? options.eventArgs.currentHeight + 'px' : options.eventArgs.prevHeight + 'px';
                chartElement.style.width = isRedo ? options.eventArgs.currentWidth + 'px' : options.eventArgs.prevWidth + 'px';
                chartElement.style.top = isRedo ? options.eventArgs.currentTop + 'px' : options.eventArgs.prevTop + 'px';
                chartElement.style.left = isRedo ? options.eventArgs.currentLeft + 'px' : options.eventArgs.prevLeft + 'px';
            }
            if (isRedo) {
                options.eventArgs.isUndoRedo = true;
                spreadsheet.notify(refreshChartSize, { height: chartElement.style.height, width: chartElement.style.width, overlayEle: chartElement });
            }
            else {
                spreadsheet.notify(refreshChartSize, { height: chartElement.style.height, width: chartElement.style.width, overlayEle: chartElement });
            }
            break;
        case 'autofill':
            if (isRedo) {
                spreadsheet.notify(setAutoFill, { fillRange: options.eventArgs.fillRange, dataRange: options.eventArgs.dataRange,
                    fillType: options.eventArgs.fillType, direction: options.eventArgs.direction });
            }
            break;
        case 'removeValidation':
            if (isRedo) {
                spreadsheet.notify(cellValidation, { range: eventArgs.range, isRemoveValidation: true });
            }
            break;
        case 'addDefinedName':
            if (isRedo === false) {
                spreadsheet.notify(workbookFormulaOperation, { action: 'removeDefinedName', isRemoved: false, definedName: eventArgs.name, scope: eventArgs.scope, isEventTrigger: true });
            }
            else {
                var definedName = { name: eventArgs.name, refersTo: eventArgs.refersTo, scope: eventArgs.scope, comment: eventArgs.comment };
                spreadsheet.notify(workbookFormulaOperation, { action: 'addDefinedName', isAdded: false, definedName: definedName, isEventTrigger: true });
            }
            break;
    }
}
/**
 * @hidden
 * @param {Workbook} workbook - Specify the workbook
 * @param {number} rowIdx - specify the roe index
 * @param {number} colIdx - specify the column Index.
 * @param {number} sheetIdx - specify the sheet index.
 * @returns {boolean} - Returns the boolean value.
 */
function hasTemplate(workbook, rowIdx, colIdx, sheetIdx) {
    var sheet = workbook.sheets[sheetIdx];
    var ranges = sheet.ranges;
    var range;
    for (var i = 0, len = ranges.length; i < len; i++) {
        if (ranges[i].template) {
            range = getRangeIndexes(ranges[i].address.length ? ranges[i].address : ranges[i].startCell);
            if (range[0] <= rowIdx && range[1] <= colIdx && range[2] >= rowIdx && range[3] >= colIdx) {
                return true;
            }
        }
    }
    return false;
}
/**
 * Setting row height in view an model.
 *
 * @hidden
 * @param {Spreadsheet} parent - Specify the parent
 * @param {SheetModel} sheet - specify the column width
 * @param {number} height - specify the style.
 * @param {number} rowIdx - specify the rowIdx
 * @param {HTMLElement} row - specify the row
 * @param {HTMLElement} hRow - specify the hRow.
 * @param {boolean} notifyRowHgtChange - specify boolean value.
 * @returns {void} - Setting row height in view an model.
 */
function setRowEleHeight(parent, sheet, height, rowIdx, row, hRow, notifyRowHgtChange) {
    if (notifyRowHgtChange === void 0) { notifyRowHgtChange = true; }
    var prevHgt = getRowHeight(sheet, rowIdx, true);
    var frozenCol = parent.frozenColCount(sheet);
    var dprHgt = getDPRValue(height);
    row = row || (sheet.frozenRows ? parent.getRow(rowIdx, null, frozenCol) : parent.getRow(rowIdx));
    if (row) {
        row.style.height = dprHgt + "px";
    }
    if (sheet.frozenColumns) {
        hRow = parent.getRow(rowIdx, null, frozenCol - 1);
    }
    else {
        hRow = hRow || parent.getRow(rowIdx, parent.getRowHeaderTable());
    }
    if (hRow) {
        hRow.style.height = dprHgt + "px";
    }
    setRowHeight(sheet, rowIdx, height);
    parent.setProperties({ sheets: parent.sheets }, true);
    if (notifyRowHgtChange) {
        parent.notify(rowHeightChanged, { rowIdx: rowIdx, threshold: dprHgt - prevHgt });
    }
}
/**
 * @hidden
 * @param {Workbook} context - Specify the context
 * @param {CellStyleModel} style - specify the style.
 * @param {number} lines - specify the lines
 * @param {number} lineHeight - Specify the line height.
 * @returns {number} - get Text Height
 */
function getTextHeight(context, style, lines, lineHeight) {
    if (lines === void 0) { lines = 1; }
    var fontSize = (style && style.fontSize) || context.cellStyle.fontSize;
    var fontSizePx = fontSize.indexOf('pt') > -1 ? parseInt(fontSize, 10) / 0.75 : parseInt(fontSize, 10);
    var hgt = fontSizePx * (lineHeight || getLineHeight(style && style.fontFamily ? style : context.cellStyle)) * lines;
    return Math.ceil(hgt % 1 > 0.9 ? hgt + 1 : hgt); // 0.9 -> if it is nearest value adding extra 1 pixel
}
/**
 * @hidden
 * @param {CellStyleModel} style - cell style
 * @returns {number} - returns line height
 */
function getLineHeight(style) {
    var lineHeight = textLineHeight;
    if (style) {
        if (style.fontFamily === 'Arial Black') {
            lineHeight = 1.44;
        }
        else if (style.fontFamily === '"Segoe UI", sans-serif') {
            lineHeight = 1.36;
        }
    }
    return lineHeight;
}
/**
 * @hidden
 * @param {string} text - Specify the text
 * @param {CellStyleModel} style - specify the style.
 * @param {CellStyleModel} parentStyle - specify the parentStyle
 * @returns {number} - get Text Width
 */
function getTextWidth(text, style, parentStyle, preventDpr) {
    if (!style) {
        style = parentStyle;
    }
    var canvas = document.createElement('canvas');
    var context = canvas.getContext('2d');
    context.font = (style.fontStyle || parentStyle.fontStyle) + ' ' + (style.fontWeight || parentStyle.fontWeight) + ' '
        + (style.fontSize || parentStyle.fontSize) + ' ' + (style.fontFamily || parentStyle.fontFamily);
    return preventDpr ? context.measureText(text).width : getDPRValue(context.measureText(text).width, true);
}
/**
 * @hidden
 * @param {string} text - Specify the text
 * @param {number} colwidth - specify the column width
 * @param {CellStyleModel} style - specify the style.
 * @param {CellStyleModel} parentStyle - specify the parentStyle
 * @returns {number} - Setting maximum height while doing formats and wraptext
 */
function getLines(text, colwidth, style, parentStyle) {
    var width;
    var splitTextArr;
    var lWidth;
    var cWidth;
    var prevWidth = 0;
    var textArr = text.toString().split(' ');
    var spaceWidth = getTextWidth(' ', style, parentStyle);
    var hypenWidth;
    var lines;
    var cnt = 0;
    var lineCnt = 0;
    var maxCnt = 0;
    var calculateCount = function (txt, isHypenSplit) {
        if (prevWidth) {
            cnt++;
        }
        if (width / colwidth >= 1) {
            txt.split('').forEach(function (val) {
                cWidth = getTextWidth(val, style, parentStyle, true);
                lWidth += cWidth;
                if (lWidth > colwidth) {
                    cnt++;
                    lWidth = cWidth;
                }
            });
            width = getDPRValue(lWidth, true);
        }
        if (!isHypenSplit) {
            addSpace(width);
        }
        prevWidth = width;
    };
    var addSpace = function (size) {
        width += ((size + spaceWidth) / colwidth >= 1 ? 0 : spaceWidth);
    };
    textArr.forEach(function (txt) {
        lWidth = 0;
        cWidth = 0;
        width = getTextWidth(txt, style, parentStyle);
        lines = (prevWidth + width) / colwidth;
        if (lines > 1) {
            splitTextArr = txt.split('-');
            if (splitTextArr.length > 1) {
                splitTextArr.forEach(function (splitText) {
                    lWidth = 0;
                    cWidth = 0;
                    if (!hypenWidth) {
                        hypenWidth = getTextWidth('-', style, parentStyle);
                    }
                    width = getTextWidth(splitText, style, parentStyle);
                    if (splitTextArr[splitTextArr.length - 1] !== splitText) {
                        width += hypenWidth;
                    }
                    lines = (prevWidth + width) / colwidth;
                    if (lines >= 1) {
                        calculateCount(splitText, splitTextArr[splitTextArr.length - 1] !== splitText);
                    }
                    else {
                        if (splitTextArr[splitTextArr.length - 1] === splitText && textArr[textArr.length - 1] !== txt) {
                            addSpace(prevWidth + width);
                        }
                        prevWidth += width;
                    }
                });
            }
            else {
                calculateCount(txt, false);
            }
        }
        else {
            addSpace(prevWidth + width);
            prevWidth += width;
        }
    });
    if (prevWidth) {
        lineCnt = (prevWidth - spaceWidth) / colwidth;
        maxCnt = parseFloat((lineCnt).toString().split('.')[0]);
        cnt += (lineCnt + 0.05 >= maxCnt + 1 ? Math.ceil(lineCnt) + 1 : Math.ceil(lineCnt));
    }
    return cnt;
}
/**
 * calculation for width taken by border inside a cell
 *
 * @param {number} rowIdx - Specify the row index.
 * @param {number} colIdx - Specify the column index.
 * @param {SheetModel} sheet - Specify the sheet.
 * @returns {number} - get border width.
 */
function getBorderWidth(rowIdx, colIdx, sheet) {
    var width = 0;
    var cell = getCell(rowIdx, colIdx, sheet, null, true);
    var rightSideCell = getCell(rowIdx, colIdx + 1, sheet, null, true);
    if (cell.style) {
        if (cell.style.border) {
            width = (colIdx === 0 ? 2 : 1) * parseFloat(cell.style.border.split('px')[0]);
        }
        else {
            if (colIdx === 0 && cell.style.borderLeft) {
                width = parseFloat(cell.style.borderLeft.split('px')[0]);
            }
            if (cell.style.borderRight) {
                width += parseFloat(cell.style.borderRight.split('px')[0]);
            }
        }
    }
    if (!(cell.style && (cell.style.border || cell.style.borderRight)) && rightSideCell.style && rightSideCell.style.borderLeft) {
        width += parseFloat(rightSideCell.style.borderLeft.split('px')[0]);
    }
    return width > 0 && width < 1 ? 1 : width;
}
/**
 * calculation for height taken by border inside a cell
 *
 * @param {number} rowIdx - Specify the row index.
 * @param {number} colIdx - Specify the column index.
 * @param {SheetModel} sheet - Specify the sheet.
 * @returns {number} - get border height.
 * @hidden
 */
function getBorderHeight(rowIdx, colIdx, sheet) {
    var height = 0;
    var cell = getCell(rowIdx, colIdx, sheet, null, true);
    if (cell.style) {
        if (cell.style.border) {
            height = (rowIdx === 0 ? 2 : 1) * parseFloat(cell.style.border.split('px')[0]);
        }
        else {
            if (rowIdx === 0 && cell.style.borderTop) {
                height = parseFloat(cell.style.borderTop.split('px')[0]);
            }
            if (cell.style.borderBottom) {
                height += parseFloat(cell.style.borderBottom.split('px')[0]);
            }
        }
    }
    var bottomSideCell = getCell(rowIdx + 1, colIdx, sheet, null, true);
    if (!(cell.style && (cell.style.border || cell.style.borderBottom)) && bottomSideCell.style && bottomSideCell.style.borderTop) {
        height += parseFloat(bottomSideCell.style.borderTop.split('px')[0]);
    }
    return Math.ceil(height) || 1; // 1 -> For default bottom border
}
/**
 * Calculating column width by excluding cell padding and border width
 *
 * @param {SheetModel} sheet - Specify the sheet
 * @param {number} rowIdx - Specify the row index.
 * @param {number} startColIdx - Specify the start column index.
 * @param {number} endColIdx - Specify the end column index.
 * @returns {number} - get excluded column width.
 * @hidden
 */
function getExcludedColumnWidth(sheet, rowIdx, startColIdx, endColIdx) {
    if (endColIdx === void 0) { endColIdx = startColIdx; }
    return getColumnsWidth(sheet, startColIdx, endColIdx, true) - getDPRValue((4 + (getBorderWidth(rowIdx, startColIdx, sheet) || 1))); // 4 -> For cell padding
}
/**
 * @param {Workbook} context - Specify the Workbook.
 * @param {number} rowIdx - Specify the row index.
 * @param {number} colIdx - Specify the column index.
 * @param {SheetModel} sheet - Specify the sheet.
 * @param {CellStyleModel} style - Specify the style.
 * @param {number} lines - Specify the lines.
 * @param {number} lineHeight - Specify the line height.
 * @returns {number} - get text height with border.
 * @hidden
 */
function getTextHeightWithBorder(context, rowIdx, colIdx, sheet, style, lines, lineHeight) {
    return getTextHeight(context, style, lines, lineHeight) + getBorderHeight(rowIdx, colIdx, sheet);
}
/**
 * Setting maximum height while doing formats and wraptext
 *
 * @hidden
 * @param {SheetModel} sheet - Specify the sheet
 * @param {number} rIdx - specify the row Index
 * @param {number} cIdx - specify the column Index.
 * @param {number} hgt - specify the hgt
 * @returns {void} - Setting maximum height while doing formats and wraptext
 */
function setMaxHgt(sheet, rIdx, cIdx, hgt) {
    if (!sheet.maxHgts[rIdx]) {
        sheet.maxHgts[rIdx] = {};
    }
    sheet.maxHgts[rIdx][cIdx] = hgt;
}
/**
 * Getting maximum height by comparing each cell's modified height.
 *
 * @hidden
 * @param {SheetModel} sheet - Specify the sheet.
 * @param {number} rIdx - Specify the row index.
 * @returns {number} - Getting maximum height by comparing each cell's modified height.
 */
function getMaxHgt(sheet, rIdx) {
    var maxHgt = 0;
    var rowHgt = sheet.maxHgts[rIdx];
    if (rowHgt) {
        Object.keys(rowHgt).forEach(function (key) {
            if (rowHgt[key] > maxHgt) {
                maxHgt = rowHgt[key];
            }
        });
    }
    return maxHgt;
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specify the sheet
 * @param {number} index - specify the index
 * @param {boolean} increase - specify the boolean value.
 * @param {string} layout - specify the string
 * @returns {number} - To skip the hidden index
 *
 */
function skipHiddenIdx(sheet, index, increase, layout) {
    if (layout === void 0) { layout = 'rows'; }
    if (index < 0) {
        index = -1;
    }
    if ((sheet[layout])[index] && (sheet[layout])[index].hidden) {
        if (increase) {
            index++;
        }
        else {
            index--;
        }
        index = skipHiddenIdx(sheet, index, increase, layout);
    }
    return index;
}
/**
 * @hidden
 * @param {HTMLElement} ele - Specify the element.
 * @returns {void} - Specify the focus.
 */
function focus(ele) {
    if (!document.activeElement.classList.contains('e-text-findNext-short')) {
        if (Browser.isIE) {
            var scrollX_1 = window.scrollX;
            var scrollY_1 = window.scrollY;
            ele.focus();
            window.scrollTo(scrollX_1, scrollY_1);
        }
        else {
            /* eslint-disable-next-line  @typescript-eslint/no-explicit-any */
            ele.focus({ preventScroll: true });
        }
    }
}
/**
 * Checks whether a specific range of cells is locked or not.
 *
 * @param {Spreadsheet} parent - Specify the spreadsheet.
 * @param {number[]} rangeIndexes - Specify the range indexes.
 * @returns {boolean} - Returns true if any of the cells is locked and returns false if none of the cells is locked.
 * @hidden
 */
function isLockedCells(parent, rangeIndexes) {
    var sheet = parent.getActiveSheet();
    var hasLockCell;
    var address = !isNullOrUndefined(rangeIndexes) ? rangeIndexes : getSwapRange(getRangeIndexes(sheet.selectedRange));
    for (var row = address[0]; row <= address[2]; row++) {
        for (var col = address[1]; col <= address[3]; col++) {
            var cell = getCell(row, col, sheet);
            if (isLocked(cell, getColumn(sheet, col))) {
                hasLockCell = true;
                break;
            }
        }
    }
    return hasLockCell;
}
/**
 * Checks whether the range is discontinuous or not.
 *
 * @param {string} range - Specify the sheet
 * @returns {boolean} - Returns true if the range is discontinuous range.
 * @hidden
 */
function isDiscontinuousRange(range) {
    return range.includes(' ');
}
/**
 * @hidden
 * @param {Spreadsheet} context - Specifies the context.
 * @param {number[]} range - Specifies the address range.
 * @param {number} sheetIdx - Specifies the sheetIdx.
 * @returns {void} - To clear the range.
 */
function clearRange(context, range, sheetIdx) {
    var sheet = getSheet(context, sheetIdx);
    var skip;
    var cell;
    var newCell;
    var td;
    var uiRefresh = sheetIdx === context.activeSheetIndex;
    for (var sRIdx = range[0], eRIdx = range[2]; sRIdx <= eRIdx; sRIdx++) {
        if ((getRow(sheet, sRIdx) || {}).isFiltered) {
            continue;
        }
        for (var sCIdx = range[1], eCIdx = range[3]; sCIdx <= eCIdx; sCIdx++) {
            var args = { cellIdx: [sRIdx, sCIdx], isUnique: false,
                uniqueRange: '' };
            context.notify(checkUniqueRange, args);
            skip = false;
            if (args.uniqueRange !== '') {
                var rangeIndex = getIndexesFromAddress(args.uniqueRange);
                skip = getCell(rangeIndex[0], rangeIndex[1], sheet).value === '#SPILL!';
            }
            if (!args.isUnique || skip) {
                cell = getCell(sRIdx, sCIdx, sheet);
                if (cell) {
                    newCell = {};
                    if (cell.formula) {
                        newCell.formula = '';
                    }
                    if (cell.value || cell.value === 0) {
                        newCell.value = '';
                    }
                    if (cell.hyperlink) {
                        newCell.hyperlink = '';
                    }
                    if (!Object.keys(newCell).length) {
                        continue;
                    }
                    td = context.getCell(sRIdx, sCIdx);
                    if (updateCell(context, sheet, { cell: newCell, rowIdx: sRIdx, colIdx: sCIdx, valChange: true, uiRefresh: uiRefresh, td: td })) {
                        continue;
                    }
                    delete cell.value;
                    delete cell.formula;
                    delete cell.hyperlink;
                    if (td) {
                        if (td.querySelector('.e-cf-databar')) {
                            td.removeChild(td.querySelector('.e-cf-databar'));
                        }
                        if (td.querySelector('.e-iconsetspan')) {
                            td.removeChild(td.querySelector('.e-iconsetspan'));
                        }
                    }
                    context.notify(checkConditionalFormat, { rowIdx: sRIdx, colIdx: sCIdx, cell: getCell(sRIdx, sCIdx, sheet), isAction: true });
                }
            }
        }
    }
}

/**
 * Represents clipboard support for Spreadsheet.
 */
var Clipboard = /** @__PURE__ @class */ (function () {
    function Clipboard(parent) {
        this.parent = parent;
        this.init();
        this.addEventListener();
    }
    Clipboard.prototype.init = function () {
        this.parent.element
            .appendChild(this.parent.createElement('input', { className: 'e-clipboard', attrs: { 'contenteditable': 'true' } }));
    };
    Clipboard.prototype.addEventListener = function () {
        var ele = this.getClipboardEle();
        this.parent.on(cut, this.cut, this);
        this.parent.on(copy, this.copy, this);
        this.parent.on(paste, this.paste, this);
        this.parent.on(clearCopy, this.clearCopiedInfo, this);
        this.parent.on(tabSwitch, this.tabSwitchHandler, this);
        this.parent.on(cMenuBeforeOpen, this.cMenuBeforeOpenHandler, this);
        this.parent.on(ribbonClick, this.ribbonClickHandler, this);
        this.parent.on(contentLoaded, this.initCopyIndicator, this);
        this.parent.on(rowHeightChanged, this.rowHeightChanged, this);
        this.parent.on(colWidthChanged, this.colWidthChanged, this);
        this.parent.on(refreshClipboard, this.refreshOnInsertDelete, this);
        EventHandler.add(ele, 'cut', this.cut, this);
        EventHandler.add(ele, 'copy', this.copy, this);
        EventHandler.add(ele, 'paste', this.paste, this);
    };
    Clipboard.prototype.removeEventListener = function () {
        var ele = this.getClipboardEle();
        if (!this.parent.isDestroyed) {
            this.parent.off(cut, this.cut);
            this.parent.off(copy, this.copy);
            this.parent.off(paste, this.paste);
            this.parent.off(clearCopy, this.clearCopiedInfo);
            this.parent.off(tabSwitch, this.tabSwitchHandler);
            this.parent.off(cMenuBeforeOpen, this.cMenuBeforeOpenHandler);
            this.parent.off(ribbonClick, this.ribbonClickHandler);
            this.parent.off(contentLoaded, this.initCopyIndicator);
            this.parent.off(rowHeightChanged, this.rowHeightChanged);
            this.parent.off(colWidthChanged, this.colWidthChanged);
            this.parent.off(refreshClipboard, this.refreshOnInsertDelete);
        }
        EventHandler.remove(ele, 'cut', this.cut);
        EventHandler.remove(ele, 'copy', this.copy);
        EventHandler.remove(ele, 'paste', this.paste);
    };
    Clipboard.prototype.ribbonClickHandler = function (args) {
        var parentId = this.parent.element.id;
        switch (args.item.id) {
            case parentId + '_cut':
                this.cut({ invokeCopy: true });
                break;
            case parentId + '_copy':
                this.copy({ invokeCopy: true });
                break;
        }
        focus(this.parent.element);
    };
    Clipboard.prototype.tabSwitchHandler = function (args) {
        if (args.activeTab === 0 && !this.copiedInfo && !this.copiedShapeInfo) {
            this.hidePaste();
        }
    };
    Clipboard.prototype.cMenuBeforeOpenHandler = function (e) {
        var sheet = this.parent.getActiveSheet();
        var l10n = this.parent.serviceLocator.getService(locale);
        var delRowItems = [];
        var hideRowItems = [];
        var delColItems = [];
        var hideColItems = [];
        var actCell = sheet.activeCell;
        var actCellIndex = getCellIndexes(actCell);
        var cellObj = getCell(actCellIndex[0], actCellIndex[1], sheet);
        var isLocked$$1 = sheet.isProtected && isLocked(cellObj, getColumn(sheet, actCellIndex[1]));
        if (e.target === 'Content' || e.target === 'RowHeader' || e.target === 'ColumnHeader' || e.target === 'SelectAll') {
            this.parent.enableContextMenuItems([l10n.getConstant('Paste'), l10n.getConstant('PasteSpecial')], (this.copiedInfo ||
                this.copiedShapeInfo && !isLocked$$1) ? true : false);
            this.parent.enableContextMenuItems([l10n.getConstant('Cut')], (!isLocked$$1) ? true : false);
        }
        if ((e.target === 'Content') && isLocked$$1) {
            this.parent.enableContextMenuItems([l10n.getConstant('Cut'), l10n.getConstant('Filter'), l10n.getConstant('Sort')], false);
        }
        if ((e.target === 'Content') && (isLocked$$1 && !sheet.protectSettings.insertLink)) {
            this.parent.enableContextMenuItems([l10n.getConstant('Hyperlink')], false);
        }
        if (e.target === 'ColumnHeader' && sheet.isProtected) {
            delColItems = [l10n.getConstant('DeleteColumn'), l10n.getConstant('DeleteColumns'),
                l10n.getConstant('InsertColumn'), l10n.getConstant('InsertColumns')];
            hideColItems = [l10n.getConstant('HideColumn'), l10n.getConstant('HideColumns'),
                l10n.getConstant('UnHideColumns')];
            this.parent.enableContextMenuItems(delColItems, false);
            this.parent.enableContextMenuItems(hideColItems, (sheet.protectSettings.formatColumns) ? true : false);
        }
        if (e.target === 'RowHeader' && sheet.isProtected) {
            delRowItems = [l10n.getConstant('DeleteRow'), l10n.getConstant('DeleteRows'),
                l10n.getConstant('InsertRow'), l10n.getConstant('InsertRows')];
            hideRowItems = [l10n.getConstant('HideRow'), l10n.getConstant('HideRows'), l10n.getConstant('UnHideRows')];
            this.parent.enableContextMenuItems(delRowItems, false);
            this.parent.enableContextMenuItems(hideRowItems, (sheet.protectSettings.formatRows) ? true : false);
        }
    };
    Clipboard.prototype.rowHeightChanged = function (args) {
        if (this.copiedInfo) {
            var ele = this.getCopyIndicator();
            if (ele) {
                if (this.copiedInfo.range[0] > args.rowIdx) {
                    ele.style.top = parseFloat(ele.style.top) + args.threshold + "px";
                }
                else if (inRange(this.copiedInfo.range, args.rowIdx, this.copiedInfo.range[1])) {
                    ele.style.height = parseFloat(ele.style.height) + args.threshold + "px";
                }
            }
        }
    };
    Clipboard.prototype.colWidthChanged = function (args) {
        if (this.copiedInfo) {
            var ele = this.getCopyIndicator();
            if (ele) {
                if (this.copiedInfo.range[1] > args.colIdx) {
                    ele.style.left = parseFloat(ele.style.left) + args.threshold + "px";
                }
                else if (inRange(this.copiedInfo.range, this.copiedInfo.range[0], args.colIdx)) {
                    ele.style.width = parseFloat(ele.style.width) + args.threshold + "px";
                }
            }
        }
    };
    Clipboard.prototype.cut = function (args) {
        this.setCopiedInfo(args, true);
    };
    Clipboard.prototype.copy = function (args) {
        this.setCopiedInfo(args, false);
    };
    Clipboard.prototype.paste = function (args) {
        if (this.parent.isEdit || this.parent.element.getElementsByClassName('e-dlg-overlay').length > 0) {
            return;
        }
        var rfshRange;
        var isExternal = ((args && args.clipboardData) || window['clipboardData']);
        args.isInternal = !isExternal;
        if (isExternal && args.clipboardData && args.clipboardData.getData('isInternalCut').length) {
            return; // to prevent multiple cut paste action
        }
        if (isExternal || this.copiedShapeInfo || (args.isInternal && this.copiedInfo)) {
            var isCut = void 0;
            var copiedIdx = this.getCopiedIdx();
            var copyInfo = Object.assign({ isExternal: isExternal }, this.copiedInfo);
            args.isAction = !!isExternal || args.isAction;
            var cSIdx = (args && args.sIdx > -1) ? args.sIdx : this.parent.activeSheetIndex;
            var curSheet = getSheet(this.parent, cSIdx);
            var selIdx = getSwapRange(args && args.range || getRangeIndexes(curSheet.selectedRange));
            var rows = isExternal && this.getExternalCells(args);
            if (!args.isInternal && rows && rows.internal) {
                isExternal = false;
                if (!this.copiedInfo) {
                    return;
                }
            }
            if (isExternal && !rows.length) { // If image pasted
                if (rows.file) {
                    this.parent.notify(insertImage, { file: rows.file });
                }
                return;
            }
            var cellLength = 1;
            if (rows) {
                for (var i = 0; i < rows.length; i++) {
                    cellLength = rows[i].cells.length > cellLength ? rows[i].cells.length : cellLength;
                }
            }
            var rowIdx = selIdx[0];
            var cIdx = isExternal
                ? [0, 0, rows.length - 1, cellLength - 1] : getSwapRange(this.copiedShapeInfo ?
                getRangeIndexes(curSheet.selectedRange) : this.copiedInfo.range);
            var isRepeative = (selIdx[2] - selIdx[0] + 1) % (cIdx[2] - cIdx[0] + 1) === 0
                && (selIdx[3] - selIdx[1] + 1) % (cIdx[3] - cIdx[1] + 1) === 0;
            rfshRange = isRepeative ? selIdx : [selIdx[0], selIdx[1]]
                .concat([selIdx[0] + cIdx[2] - cIdx[0], selIdx[1] + cIdx[3] - cIdx[1] || selIdx[1]]);
            var beginEventArgs = {
                requestType: 'paste',
                copiedInfo: this.copiedInfo,
                copiedRange: getRangeAddress(cIdx),
                pastedRange: getRangeAddress(rfshRange),
                type: (args && args.type) || 'All',
                cancel: false
            };
            if (args.isAction && !this.copiedShapeInfo) {
                this.parent.notify(beginAction, { eventArgs: beginEventArgs, action: 'clipboard' });
            }
            if (beginEventArgs.cancel) {
                return;
            }
            var cell = void 0;
            var isExtend = void 0;
            var prevCell = void 0;
            var mergeCollection = [];
            var prevSheet = getSheet(this.parent, isExternal ? cSIdx : copiedIdx);
            var notRemoveMerge = isSingleCell(cIdx) && this.isRangeMerged(selIdx, curSheet);
            selIdx = getRangeIndexes(beginEventArgs.pastedRange);
            rowIdx = selIdx[0];
            cIdx = isExternal
                ? [0, 0, rows.length - 1, cellLength - 1] : getSwapRange(this.copiedShapeInfo ?
                getRangeIndexes(curSheet.selectedRange) : this.copiedInfo.range);
            isRepeative = (selIdx[2] - selIdx[0] + 1) % (cIdx[2] - cIdx[0] + 1) === 0 && (selIdx[3] - selIdx[1] + 1) %
                (cIdx[3] - cIdx[1] + 1) === 0 && !notRemoveMerge;
            rfshRange = isRepeative ? selIdx : [selIdx[0], selIdx[1]]
                .concat([selIdx[0] + cIdx[2] - cIdx[0], selIdx[1] + cIdx[3] - cIdx[1] || selIdx[1]]);
            var isLockCell = curSheet.isProtected && isLockedCells(this.parent, rfshRange);
            if (isLockCell) {
                this.parent.notify(editAlert, null);
                return;
            }
            if (this.copiedShapeInfo && !this.copiedInfo) {
                var pictureElem = this.copiedShapeInfo.pictureElem;
                if (pictureElem.classList.contains('e-datavisualization-chart')) {
                    this.copiedShapeInfo.chartInfo.top = null;
                    this.copiedShapeInfo.chartInfo.left = null;
                    this.parent.notify(setChart, {
                        chart: [this.copiedShapeInfo.chartInfo], isInitCell: true, isUndoRedo: true, isPaste: true,
                        dataSheetIdx: this.copiedShapeInfo.sheetIdx, isCut: this.copiedShapeInfo.isCut,
                        range: args.range || curSheet.selectedRange, isIdAvailabe: false
                    });
                }
                else {
                    this.parent.notify(createImageElement, {
                        options: {
                            src: pictureElem.style.backgroundImage.replace(/url\((['"])?(.*?)\1\)/gi, '$2'),
                            height: this.copiedShapeInfo.height, width: this.copiedShapeInfo.width,
                            imageId: this.copiedShapeInfo.isCut ? pictureElem.id : ''
                        },
                        range: getRangeAddress([rowIdx, selIdx[1], rowIdx, selIdx[1]]), isPublic: false, isUndoRedo: true
                    });
                }
                var pastedCell = getCell(rowIdx, selIdx[1], curSheet);
                if (pastedCell && !isNullOrUndefined(pastedCell.image)) {
                    var imgLen = pastedCell.image ? pastedCell.image.length - 1 : 0;
                    var eventArgs = {
                        requestType: 'imagePaste',
                        copiedShapeInfo: this.copiedShapeInfo,
                        pasteSheetIndex: this.parent.activeSheetIndex,
                        pastedRange: getSheetName(this.parent) + '!' + getRangeAddress([rowIdx, selIdx[1], rowIdx, selIdx[1]]),
                        pastedPictureElement: document.getElementById(pastedCell.image[imgLen].id)
                    };
                    this.parent.notify(completeAction, { eventArgs: eventArgs, action: 'clipboard' });
                }
            }
            else {
                var mergeArgs = {
                    range: cIdx, prevSheet: prevSheet, cancel: false
                };
                this.parent.notify(pasteMerge, mergeArgs);
                if (mergeArgs.cancel) {
                    return;
                }
                var pasteType = beginEventArgs.type || args.type;
                var cRows = [];
                var isInRange = this.isInRange(cIdx, selIdx, copiedIdx);
                var isRowSelected = (selIdx[1] === 0 && selIdx[3] === curSheet.colCount - 1);
                var isColSelected = (selIdx[0] === 0 && selIdx[2] === curSheet.rowCount - 1);
                var isFullRowMerge = false;
                var isFullColMerge = false;
                var hiddenCount = 0;
                if (!isRepeative) {
                    this.setCF(cIdx, rfshRange, prevSheet, curSheet);
                }
                var cFormats = void 0;
                var cancel = void 0;
                for (var i = cIdx[0], l = 0; i <= cIdx[2]; i++, l++) {
                    if (!isExternal && !copyInfo.isCut && (getRow(prevSheet, i) || {}).isFiltered) {
                        l--;
                        hiddenCount++;
                        continue;
                    }
                    if (isInRange) {
                        cRows[selIdx[0] + l] = { cells: [] };
                    }
                    for (var j = cIdx[1], k = 0; j <= cIdx[3]; j++, k++) {
                        if (isInRange) {
                            cRows[selIdx[0] + l].cells[selIdx[1] + k] = getCell(selIdx[0] + l, selIdx[1] + k, prevSheet, false, true);
                        }
                        cell = isExternal ? rows[i].cells[j] : extend({}, (isInRange && cRows[i] && cRows[i].cells[j])
                            ? cRows[i].cells[j] : getCell(i, j, prevSheet), null, true);
                        if (isRowSelected || isColSelected) {
                            if (cell && cell.rowSpan) {
                                if (cell.rowSpan > 0) {
                                    if ((cell.rowSpan + i) - 1 <= cIdx[2]) {
                                        isFullRowMerge = true;
                                    }
                                    else {
                                        cell = {};
                                    }
                                }
                                else if (!isFullRowMerge) {
                                    cell = {};
                                }
                                else if (cell.rowSpan < 0) {
                                    var rowSpan = cell.rowSpan;
                                    var colSpan = cell.colSpan ? cell.colSpan : 0;
                                    var spanCell = getCell(rowIdx + rowSpan, (selIdx[1] + k) + colSpan, curSheet);
                                    if (spanCell && !spanCell.rowSpan) {
                                        cell = {};
                                    }
                                }
                            }
                            if (cell && cell.colSpan) {
                                if (cell.colSpan > 0) {
                                    if ((cell.colSpan + j) - 1 <= cIdx[3]) {
                                        isFullColMerge = true;
                                    }
                                    else {
                                        cell = {};
                                    }
                                }
                                else if (!isFullColMerge) {
                                    cell = {};
                                }
                            }
                        }
                        if (cell && args && args.type || pasteType) {
                            switch (pasteType) {
                                case 'Formats':
                                    cell = { format: cell.format, style: cell.style };
                                    break;
                                case 'Values':
                                    cell = { value: cell.value };
                                    if (cell.value && cell.value.toString().indexOf('\n') > -1) {
                                        var ele = this.parent.getCell(selIdx[0], selIdx[1]);
                                        ele.classList.add('e-alt-unwrap');
                                    }
                                    break;
                            }
                            isExtend = ['Formats', 'Values'].indexOf(args.type || pasteType) > -1;
                        }
                        if ((!this.parent.scrollSettings.isFinite && (cIdx[2] - cIdx[0] > (1048575 - selIdx[0])
                            || cIdx[3] - cIdx[1] > (16383 - selIdx[1])))
                            || (this.parent.scrollSettings.isFinite && (cIdx[2] - cIdx[0] > (curSheet.rowCount - 1 - selIdx[0])
                                || cIdx[3] - cIdx[1] > (curSheet.colCount - 1 - selIdx[1])))) {
                            this.showDialog();
                            return;
                        }
                        if (isRepeative) {
                            for (var x = selIdx[0]; x <= selIdx[2]; x += (cIdx[2] - cIdx[0]) + 1) {
                                if (!copyInfo.isCut && !hiddenCount && (getRow(curSheet, x + l) || {}).isFiltered) {
                                    continue;
                                }
                                for (var y = selIdx[1]; y <= selIdx[3]; y += (cIdx[3] - cIdx[1] + 1)) {
                                    if (i === cIdx[0] && j === cIdx[1] && (cFormats === undefined || cFormats.length)) {
                                        cFormats = this.setCF(cIdx, [x, y, x + (cIdx[2] - cIdx[0]), y + (cIdx[3] - cIdx[1])], prevSheet, curSheet, cFormats);
                                    }
                                    prevCell = getCell(x + l, y + k, curSheet, false, true);
                                    if (!isExternal && (prevCell.colSpan !== undefined || prevCell.rowSpan !== undefined)) {
                                        if (isRowSelected || isColSelected) {
                                            continue;
                                        }
                                        mergeArgs = { range: [x + l, y + k, x + l, y + k] };
                                        var merge$$1 = { range: mergeArgs.range, merge: false, isAction: false, type: 'All' };
                                        mergeCollection.push(merge$$1);
                                        if (this.parent.activeSheetIndex === curSheet.index) {
                                            this.parent.notify(setMerge, merge$$1);
                                        }
                                    }
                                    var colInd = y + k;
                                    cell = extend({}, cell ? cell : {}, null, true);
                                    if (!isExtend && this.copiedInfo && !this.copiedInfo.isCut) {
                                        var newFormula = getUpdatedFormula([x + l, colInd], [i, j], prevSheet);
                                        if (!isNullOrUndefined(newFormula)) {
                                            cell.formula = newFormula;
                                        }
                                    }
                                    if (curSheet.isProtected && cell && cell.isLocked !== false) {
                                        cell.isLocked = prevCell.isLocked;
                                    }
                                    cancel = this.setCell(x + l, colInd, curSheet, cell, isExtend, y === selIdx[3], !!isExternal, !!(cFormats && cFormats.length));
                                    if (cancel) {
                                        continue;
                                    }
                                    if (cell.formula && this.copiedInfo.isCut) {
                                        this.parent.notify(clearFormulaDependentCells, { cellRef: getRangeAddress([i, j, i, j]) });
                                    }
                                    if (cell.formula && cell.formula.includes('UNIQUE')) {
                                        var args_1 = { cellIdx: rfshRange,
                                            isUnique: false, uniqueRange: '' };
                                        this.parent.notify(checkUniqueRange, args_1);
                                        rfshRange = getRangeIndexes(args_1.uniqueRange);
                                        break;
                                    }
                                }
                            }
                        }
                        else {
                            if (isExternal || !hasTemplate(this.parent, i, j, copiedIdx)) {
                                if (notRemoveMerge) {
                                    this.setCell(rowIdx, selIdx[1] + k, curSheet, { value: cell.value }, true, j === cIdx[3]);
                                }
                                else {
                                    this.setCell(rowIdx, selIdx[1] + k, curSheet, cell, isExtend, j === cIdx[3]);
                                }
                            }
                        }
                        if (!isExternal && this.copiedInfo.isCut && !(inRange(selIdx, i, j) &&
                            copiedIdx === this.parent.activeSheetIndex)) {
                            var cell_1 = getCell(i, j, prevSheet);
                            if (cell_1) {
                                if (cell_1.isLocked || isNullOrUndefined(cell_1.isLocked)) {
                                    if ((isRowSelected || isColSelected) && (cell_1.rowSpan !== undefined || cell_1.colSpan !== undefined)) {
                                        continue;
                                    }
                                    else {
                                        cell_1 = null;
                                    }
                                }
                                else if (cell_1.isLocked === false) {
                                    if (prevSheet.isProtected) {
                                        cell_1 = { isLocked: false };
                                    }
                                    else {
                                        cell_1 = null;
                                    }
                                }
                            }
                            if (!this.setCell(i, j, prevSheet, cell_1, false, j === cIdx[3])) {
                                setCell(i, j, prevSheet, cell_1);
                            }
                        }
                    }
                    rowIdx++;
                }
                this.parent.notify(refreshRibbonIcons, null);
                rfshRange[2] -= hiddenCount;
                this.parent.setUsedRange(rfshRange[2], rfshRange[3]);
                if (cSIdx === this.parent.activeSheetIndex) {
                    this.parent.notify(selectRange, { address: getRangeAddress(rfshRange) });
                }
                if (!isExternal && this.copiedInfo.isCut) {
                    isCut = this.copiedInfo.isCut;
                    if (copiedIdx === this.parent.activeSheetIndex) {
                        this.parent.serviceLocator.getService('cell').refreshRange(cIdx);
                    }
                    this.clearCopiedInfo();
                }
                if ((isExternal || isInRange) && this.copiedInfo) {
                    this.clearCopiedInfo();
                }
                if (isExternal || (args && args.isAction)) {
                    focus(this.parent.element);
                }
                if (isCut) {
                    if (cFormats && cFormats.length && pasteType !== 'Values') {
                        this.parent.notify(clearCFRule, { range: getRangeAddress(cIdx), sheetIdx: isExternal ? cSIdx : copiedIdx });
                    }
                    //this.updateFilter(copyInfo, rfshRange);
                    setMaxHgt(prevSheet, cIdx[0], cIdx[1], (this.parent.getRow(cIdx[0]) || { offsetHeight: 20 }).offsetHeight);
                    var hgt = getMaxHgt(prevSheet, cIdx[0]);
                    setRowEleHeight(this.parent, prevSheet, hgt, cIdx[0]);
                }
                var copySheet = getSheet(this.parent, copiedIdx);
                if (!isExternal && cIdx[0] === cIdx[2] && (cIdx[3] - cIdx[1]) === copySheet.colCount - 1) {
                    var hgt = copySheet.rows[cIdx[0]].height;
                    for (var i = selIdx[0]; i <= selIdx[2]; i++) {
                        setRowEleHeight(this.parent, this.parent.getActiveSheet(), hgt, i);
                    }
                    if (isCut) {
                        setRowEleHeight(this.parent, copySheet, 20, cIdx[0]);
                    }
                }
                if (args.isAction) {
                    var eventArgs = {
                        requestType: 'paste',
                        copiedInfo: copyInfo,
                        mergeCollection: mergeCollection,
                        pasteSheetIndex: this.parent.activeSheetIndex,
                        copiedRange: prevSheet.name + '!' + (copyInfo.range ? getRangeAddress(copyInfo.range) : prevSheet.selectedRange),
                        pastedRange: curSheet.name + '!' + getRangeAddress(rfshRange),
                        type: pasteType || 'All'
                    };
                    if (!!hiddenCount) {
                        eventArgs['skipFilterCheck'] = true;
                    }
                    this.parent.notify(completeAction, { eventArgs: eventArgs, action: 'clipboard' });
                }
            }
        }
        else {
            this.getClipboardEle().select();
        }
    };
    Clipboard.prototype.setCF = function (cRange, pRange, cSheet, pSheet, conditionalFormats) {
        var cFRange;
        var indexes;
        var assignCF = function (conditionalFormat) {
            cFRange = [pRange[0] + (indexes[0] <= cRange[0] ? 0 : indexes[0] - cRange[0]),
                pRange[1] + (indexes[1] <= cRange[1] ? 0 : indexes[1] - cRange[1]),
                pRange[2] - (indexes[2] >= cRange[2] ? 0 : cRange[2] - indexes[2]),
                pRange[3] - (indexes[3] >= cRange[3] ? 0 : cRange[3] - indexes[3])];
            pSheet.conditionalFormats.push(extend({}, conditionalFormat, { range: getRangeAddress(cFRange) }));
        };
        if (conditionalFormats) {
            for (var i = 0, len = conditionalFormats.length; i < len; i++) {
                indexes = getRangeIndexes(conditionalFormats[i].range);
                assignCF(conditionalFormats[i]);
            }
        }
        else {
            conditionalFormats = [];
            if (cSheet.conditionalFormats) {
                for (var i = 0, len = cSheet.conditionalFormats.length; i < len; i++) {
                    indexes = getRangeIndexes(cSheet.conditionalFormats[i].range);
                    if (((indexes[0] >= cRange[0] && indexes[0] <= cRange[2]) || (indexes[2] >= cRange[0] && indexes[2] <= cRange[2])) &&
                        ((indexes[1] >= cRange[1] && indexes[1] <= cRange[3]) || (indexes[3] >= cRange[1] && indexes[3] <= cRange[3]))) {
                        conditionalFormats.push(cSheet.conditionalFormats[i]);
                        assignCF(cSheet.conditionalFormats[i]);
                    }
                }
            }
        }
        return conditionalFormats;
    };
    Clipboard.prototype.isRangeMerged = function (range, sheet) {
        var cell = getCell(range[0], range[1], sheet);
        if (cell && (cell.colSpan > 1 || cell.rowSpan > 1)) {
            var args = { range: range.slice(2, 4).concat(range.slice(2, 4)) };
            this.parent.notify(activeCellMergedRange, args);
            return args.range[0] === range[0] && args.range[1] === range[1] && args.range[2] === range[2] && args.range[3] === range[3];
        }
        return false;
    };
    Clipboard.prototype.updateFilter = function (copyInfo, pastedRange) {
        var isFilterCut;
        var diff;
        this.parent.notify(getFilteredCollection, null);
        for (var i = 0; i < this.parent.sheets.length; i++) {
            if (this.parent.filterCollection && this.parent.filterCollection[i] &&
                this.parent.filterCollection[i].sheetIndex === getSheetIndexFromId(this.parent, copyInfo.sId)) {
                var range = copyInfo.range;
                var fRange = getRangeIndexes(this.parent.filterCollection[i].filterRange);
                range = getSwapRange(range);
                if (fRange[0] === range[0] && fRange[2] === range[2] && fRange[1] === range[1] && fRange[3] === range[3]) {
                    isFilterCut = true;
                    diff = [Math.abs(range[0] - fRange[0]), Math.abs(range[1] - fRange[1]),
                        Math.abs(range[2] - fRange[2]), Math.abs(range[3] - fRange[3])];
                }
            }
        }
        var cell = this.parent.getCell(copyInfo.range[0], copyInfo.range[1]);
        cell = cell ? (cell.querySelector('.e-filter-icon') ? cell : this.parent.getCell(copyInfo.range[2], copyInfo.range[3])) : cell;
        var asc = cell ? cell.querySelector('.e-sortasc-filter') : cell;
        var desc = cell ? cell.querySelector('.e-sortdesc-filter') : cell;
        if (isFilterCut) {
            for (var n = 0; n < this.parent.filterCollection.length; n++) {
                var filterCol = this.parent.filterCollection[n];
                var sheetIndex = copyInfo && copyInfo.sId ? getSheetIndexFromId(this.parent, copyInfo.sId) :
                    this.parent.activeSheetIndex;
                if (filterCol.sheetIndex === sheetIndex) {
                    this.parent.notify(initiateFilterUI, { predicates: null, range: filterCol.filterRange, sIdx: sheetIndex, isCut: true });
                }
                if (filterCol.sheetIndex === sheetIndex && sheetIndex === this.parent.activeSheetIndex) {
                    diff = [pastedRange[0] + diff[0], pastedRange[1] + diff[1],
                        Math.abs(pastedRange[2] - diff[2]), Math.abs(pastedRange[3] - diff[3])];
                    this.parent.notify(initiateFilterUI, { predicates: null, range: getRangeAddress(diff), sIdx: null, isCut: true });
                    if (copyInfo.range[3] === copyInfo.range[1]) { // To update sorted icon after pasting.
                        var filteredCell = this.parent.getCell(pastedRange[0], pastedRange[1]);
                        if (asc && filteredCell) {
                            filteredCell.querySelector('.e-filter-icon').classList.add('e-sortasc-filter');
                        }
                        if (desc && filteredCell) {
                            filteredCell.querySelector('.e-filter-icon').classList.add('e-sortdesc-filter');
                        }
                    }
                }
            }
        }
    };
    Clipboard.prototype.isInRange = function (cRng, pRng, sIdx) {
        var activeSheetIndex = this.parent.activeSheetIndex;
        return (inRange(cRng, pRng[0], pRng[1]) && sIdx === activeSheetIndex) ||
            (inRange(cRng, pRng[2], pRng[3]) && sIdx === activeSheetIndex);
    };
    Clipboard.prototype.setCell = function (rIdx, cIdx, sheet, cell, isExtend, lastCell, isExternal, cFApplied) {
        var cancel = updateCell(this.parent, sheet, { cell: cell, rowIdx: rIdx, colIdx: cIdx, pvtExtend: !isExtend, valChange: true, lastCell: lastCell,
            uiRefresh: sheet.name === this.parent.getActiveSheet().name, checkCf: cFApplied });
        if (!cancel) {
            if (cell && cell.style && isExternal) {
                var hgt = getTextHeightWithBorder(this.parent, rIdx, cIdx, sheet, cell.style || this.parent.cellStyle, cell.wrap ?
                    getLines(this.parent.getDisplayText(cell), getExcludedColumnWidth(sheet, rIdx, cIdx), cell.style, this.parent.cellStyle) : 1);
                hgt = Math.round(hgt);
                if (hgt < 20) {
                    hgt = 20; // default height
                }
                setMaxHgt(sheet, rIdx, cIdx, hgt);
                var prevHeight = getRowsHeight(sheet, rIdx);
                var maxHgt = getMaxHgt(sheet, rIdx);
                var heightChanged = maxHgt > prevHeight;
                if (heightChanged) {
                    setRowEleHeight(this.parent, sheet, maxHgt, rIdx);
                }
            }
        }
        return cancel;
    };
    Clipboard.prototype.getCopiedIdx = function () {
        if (this.copiedInfo) {
            for (var i = 0; i < this.parent.sheets.length; i++) {
                if (this.parent.sheets[i].id === this.copiedInfo.sId) {
                    return i;
                }
            }
            this.clearCopiedInfo();
        }
        return -1;
    };
    Clipboard.prototype.setCopiedInfo = function (args, isCut) {
        var _this = this;
        if (this.parent.isEdit) {
            return;
        }
        var deferred = new Deferred();
        args.promise = deferred.promise;
        var sheet = this.parent.getActiveSheet();
        var range;
        if (args && args.range) {
            var isRowSelected = (args.range[1] === 0 && args.range[3] === sheet.colCount - 1);
            var isColSelected = (args.range[0] === 0 && args.range[2] === sheet.rowCount - 1);
            var mergeArgs = { range: args.range };
            if (!(isRowSelected || isColSelected)) {
                this.parent.notify(mergedRange, mergeArgs);
            }
            range = mergeArgs.range;
        }
        else {
            range = getRangeIndexes(sheet.selectedRange);
        }
        if (args && !args.isPublic && !args.clipboardData) {
            var eventArgs = { copiedRange: sheet.name + "!" + getRangeAddress(range), cancel: false, action: isCut ? 'cut' : 'copy' };
            this.parent.notify(beginAction, eventArgs);
            if (eventArgs.cancel) {
                return;
            }
        }
        var option = {
            sheet: sheet, indexes: [0, 0, sheet.rowCount - 1, sheet.colCount - 1], isFinite: this.parent.scrollSettings.isFinite, promise: 
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            new Promise(function (resolve, reject) { resolve((function () { })()); })
        };
        var pictureElements = document.getElementsByClassName('e-ss-overlay-active');
        var pictureLen = pictureElements.length;
        if (sheet.isLocalData && !(args && args.clipboardData) && range[0] === 0 && range[2] === (sheet.rowCount - 1)) {
            this.parent.showSpinner();
            this.parent.notify('updateSheetFromDataSource', option);
        }
        this.checkForUncalculatedFormula(range, (args && args.sId) ? args.sId : sheet.id);
        option.promise.then(function () {
            if (pictureLen > 0) {
                var imgRowIdx = {
                    clientY: pictureElements[0].offsetTop,
                    isImage: true
                };
                _this.parent.notify(getRowIdxFromClientY, imgRowIdx);
                var imgColIdx = {
                    clientX: pictureElements[0].offsetLeft,
                    isImage: true
                };
                _this.parent.notify(getColIdxFromClientX, imgColIdx);
                _this.copiedShapeInfo = {
                    sId: (args && args.sId) ? args.sId : sheet.id, sheetIdx: sheet.index, isCut: isCut, pictureElem: pictureElements[0], copiedRange: getRangeAddress([imgRowIdx.clientY, imgColIdx.clientX,
                        imgRowIdx.clientY, imgColIdx.clientX]), height: pictureElements[0].offsetHeight,
                    width: pictureElements[0].offsetWidth,
                    chartInfo: _this.getChartElemInfo(pictureElements[0])
                };
                _this.hidePaste(true);
                if (isCut) {
                    if (pictureElements[0].classList.contains('e-datavisualization-chart')) {
                        _this.parent.deleteChart(_this.copiedShapeInfo.chartInfo.id);
                    }
                    else {
                        _this.parent.notify(deleteImage, {
                            id: _this.copiedShapeInfo.pictureElem.id, sheetIdx: _this.copiedShapeInfo.sId,
                            range: _this.copiedShapeInfo.copiedRange
                        });
                    }
                }
            }
            else if (!(args && args.clipboardData)) {
                if (_this.copiedInfo) {
                    _this.clearCopiedInfo();
                }
                _this.copiedInfo = {
                    range: range, sId: (args && args.sId) ? args.sId : sheet.id, isCut: isCut
                };
                _this.hidePaste(true);
                _this.initCopyIndicator();
                if (!Browser.isIE) {
                    _this.getClipboardEle().select();
                }
                if (args && args.invokeCopy) {
                    document.execCommand(isCut ? 'cut' : 'copy');
                }
                _this.parent.hideSpinner();
            }
            if (Browser.isIE) {
                _this.setExternalCells(args, isCut);
            }
            deferred.resolve();
        });
        if (args && args.clipboardData) {
            this.setExternalCells(args, isCut);
            focus(this.parent.element);
        }
    };
    Clipboard.prototype.checkForUncalculatedFormula = function (range, sheetId) {
        var cell;
        var sheetIdx = getSheetIndexFromId(this.parent, sheetId);
        var sheet = getSheet(this.parent, sheetIdx);
        for (var i = range[0]; i <= range[2]; i++) {
            for (var j = range[1]; j <= range[3]; j++) {
                cell = getCell(i, j, sheet, null, true);
                if (cell.formula && isUndefined(cell.value)) {
                    this.parent.notify(workbookFormulaOperation, {
                        action: 'refreshCalculate', value: cell.formula, rowIndex: i, colIndex: j, isFormula: checkIsFormula(cell.formula), sheetIndex: sheetIdx
                    });
                }
            }
        }
    };
    Clipboard.prototype.getChartElemInfo = function (overlayEle) {
        var chartColl = this.parent.chartColl;
        if (overlayEle.classList.contains('e-datavisualization-chart')) {
            var chartId = overlayEle.getElementsByClassName('e-control')[0].id;
            for (var idx = 0; idx < chartColl.length; idx++) {
                if (chartColl[idx].id === chartId) {
                    var chart = chartColl[idx];
                    return chart;
                }
            }
        }
        return null;
    };
    Clipboard.prototype.clearCopiedInfo = function () {
        if (this.copiedInfo) {
            if (this.parent.getActiveSheet().id === this.copiedInfo.sId) {
                this.removeIndicator(this.parent.getSelectAllContent());
                this.removeIndicator(this.parent.getColumnHeaderContent());
                this.removeIndicator(this.parent.getRowHeaderContent());
                this.removeIndicator(this.parent.getMainContent());
            }
            this.copiedInfo = null;
            this.hidePaste();
        }
        if (this.copiedShapeInfo) {
            this.copiedShapeInfo = null;
            this.hidePaste();
        }
    };
    Clipboard.prototype.removeIndicator = function (ele) {
        if (ele) {
            var indicator = ele.getElementsByClassName('e-copy-indicator')[0];
            if (indicator) {
                detach(indicator);
            }
        }
    };
    Clipboard.prototype.initCopyIndicator = function () {
        if (this.copiedInfo && this.parent.getActiveSheet().id === this.copiedInfo.sId) {
            var copyIndicator = this.parent.createElement('div', { className: 'e-copy-indicator' });
            copyIndicator.appendChild(this.parent.createElement('div', { className: 'e-top' }));
            copyIndicator.appendChild(this.parent.createElement('div', { className: 'e-bottom' }));
            copyIndicator.appendChild(this.parent.createElement('div', { className: 'e-left' }));
            copyIndicator.appendChild(this.parent.createElement('div', { className: 'e-right' }));
            setPosition(this.parent, copyIndicator, this.copiedInfo.range, 'e-copy-indicator');
        }
    };
    Clipboard.prototype.showDialog = function () {
        var _this = this;
        this.parent.serviceLocator.getService(dialog).show({
            header: 'Spreadsheet',
            target: this.parent.element,
            height: 205, width: 340, isModal: true, showCloseIcon: true,
            content: this.parent.serviceLocator.getService(locale).getConstant('PasteAlert'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'PasteDialog',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
            }
        });
    };
    Clipboard.prototype.hidePaste = function (isShow) {
        if (this.parent.getActiveSheet().isProtected) {
            isShow = false;
        }
        this.parent.notify(enableToolbarItems, [{ items: [this.parent.element.id + '_paste'], enable: isShow || false }]);
    };
    Clipboard.prototype.setExternalCells = function (args, isCut) {
        var cell;
        var text = '';
        var range = getSwapRange(this.copiedInfo.range);
        var sheet = this.parent.getActiveSheet();
        var data = '<html><body><table class="e-spreadsheet" xmlns="http://www.w3.org/1999/xhtml"><tbody>';
        for (var i = range[0]; i <= range[2]; i++) {
            if (!isCut && (getRow(sheet, i) || {}).isFiltered) {
                continue;
            }
            data += '<tr>';
            for (var j = range[1]; j <= range[3]; j++) {
                cell = getCell(i, j, sheet, false, true);
                if (cell.colSpan < 0 || cell.rowSpan < 0) {
                    continue;
                }
                data += '<td';
                if (cell.colSpan) {
                    data += ' colspan="' + cell.colSpan + '"';
                }
                if (cell.rowSpan) {
                    data += ' rowspan="' + cell.rowSpan + '"';
                }
                data += ' style="white-space:' + (cell.wrap ? 'normal' : 'nowrap') + ';vertical-align:bottom;';
                if (cell.style) {
                    Object.keys(cell.style).forEach(function (style) {
                        var regex = style.match(/[A-Z]/);
                        data += (style === 'backgroundColor' ? 'background' : (regex ? style.replace(regex[0], '-'
                            + regex[0].toLowerCase()) : style)) + ':' + ((style === 'backgroundColor' || style === 'color')
                            ? cell.style[style].slice(0, 7) : cell.style[style]) + ';';
                    });
                }
                data += '"';
                if (!isNullOrUndefined(cell.value)) {
                    var eventArgs = {
                        formattedText: cell.value,
                        value: cell.value,
                        format: cell.format,
                        onLoad: true,
                        cell: cell,
                        rowIndex: i,
                        colIndex: j
                    };
                    if (cell.format && cell.format !== 'General') {
                        // eslint-disable-next-line
                        data += cell.value.toString().includes('"') ? " cell-value='" + cell.value + "'" : ' cell-value="' + cell.value +
                            '"';
                        this.parent.notify(getFormattedCellObject, eventArgs);
                    }
                    data += '>';
                    data += eventArgs.formattedText;
                    text += eventArgs.formattedText;
                    data += '</td>';
                }
                else {
                    data += '></td>';
                }
                text += j === range[3] ? '' : '\t';
            }
            data += '</tr>';
            text += i === range[2] ? '' : '\n';
        }
        data += '</tbody></table></body></html>';
        if (Browser.isIE) {
            window['clipboardData'].setData('text', text);
            if (isCut) {
                window['clipboardData'].setData('isInternalCut', text);
            }
        }
        else {
            args.clipboardData.setData('text/html', data);
            args.clipboardData.setData('text/plain', text);
            if (isCut) {
                args.clipboardData.setData('isInternalCut', text);
            }
            args.preventDefault();
        }
    };
    Clipboard.prototype.getExternalCells = function (args) {
        var _this = this;
        var html;
        var text;
        var rows = [];
        var cells = [];
        var cellStyle;
        var ele = this.parent.createElement('span');
        if (Browser.isIE) {
            text = window['clipboardData'].getData('text');
        }
        else {
            html = args.clipboardData.getData('text/html');
            text = args.clipboardData.getData('text/plain');
            ele.innerHTML = html;
        }
        if (ele.querySelector('table')) {
            var isFilteredRange = false;
            if (this.copiedInfo && !this.copiedInfo.isCut) {
                var filterCol = this.parent.filterCollection;
                if (filterCol) {
                    for (var i = 0; i < filterCol.length; i++) {
                        var indexes = getRangeIndexes(filterCol[i].filterRange);
                        var copyIndexes = this.copiedInfo.range;
                        if (indexes[0] === copyIndexes[0] && indexes[1] === copyIndexes[1] && indexes[2] === copyIndexes[2]
                            && indexes[3] === copyIndexes[3]) {
                            isFilteredRange = true;
                            break;
                        }
                    }
                }
            }
            if (ele.querySelector('.e-spreadsheet') && this.copiedInfo && !isFilteredRange) {
                rows = { internal: true };
            }
            else {
                var table = ele.querySelector('table');
                var i_1 = 0;
                var j_1;
                [].slice.call(table.rows || []).forEach(function (tr) {
                    if (!rows[i_1]) {
                        rows[i_1] = { cells: [] };
                    }
                    cells = rows[i_1].cells;
                    j_1 = 0;
                    [].slice.call(tr.cells || []).forEach(function (td) {
                        if (cells[j_1]) {
                            j_1 = _this.getNewIndex(cells, j_1);
                        }
                        cells[j_1] = {};
                        cellStyle = _this.getStyle(td, ele);
                        td.textContent = td.textContent.replace(/(\r\n|\n|\r)/gm, '');
                        td.textContent = td.textContent.replace(/\s+/g, ' ');
                        if (cellStyle.whiteSpace &&
                            cellStyle.whiteSpace !== 'nowrap') {
                            cells[j_1].wrap = true;
                            delete cellStyle['whiteSpace'];
                        }
                        if (Object.keys(cellStyle).length) {
                            if (cellStyle.border) {
                                ['borderBottom', 'borderTop', 'borderLeft', 'borderRight'].forEach(function (prop) {
                                    cellStyle[prop] = cellStyle.border;
                                });
                                delete cellStyle.border;
                            }
                            cells[j_1].style = cellStyle;
                        }
                        if (td.textContent) {
                            cells[j_1].value = parseIntValue(td.textContent.trim());
                        }
                        if (td.getAttribute('number-format')) {
                            cells[j_1].format = td.getAttribute('number-format');
                            if (cells[j_1].value && td.getAttribute('cell-value')) {
                                cells[j_1].value = parseIntValue(td.getAttribute('cell-value').trim());
                            }
                        }
                        if (td.getAttribute('colspan') && parseInt(td.getAttribute('colspan'), 10) > 1) {
                            cells[j_1].colSpan = parseInt(td.getAttribute('colspan'), 10);
                        }
                        if (td.getAttribute('rowspan') && parseInt(td.getAttribute('rowspan'), 10) > 1) {
                            cells[j_1].rowSpan = parseInt(td.getAttribute('rowspan'), 10);
                        }
                        if (cells[j_1].colSpan > 1 && cells[j_1].rowSpan > 1) {
                            var cell = void 0;
                            for (var k = i_1, len = i_1 + cells[j_1].rowSpan; k < len; k++) {
                                for (var l = j_1, len_1 = j_1 + cells[j_1].colSpan; l < len_1; l++) {
                                    if (k === i_1 && l === j_1) {
                                        continue;
                                    }
                                    cell = cells[j_1].style ? { style: extend({}, cells[j_1].style) } : {};
                                    if (k !== i_1) {
                                        cell.rowSpan = i_1 - k;
                                    }
                                    if (l !== j_1) {
                                        cell.colSpan = j_1 - l;
                                    }
                                    if (!rows[k]) {
                                        rows[k] = { cells: [] };
                                    }
                                    rows[k].cells[l] = cell;
                                }
                            }
                        }
                        else if (cells[j_1].colSpan > 1) {
                            for (var k = j_1 + 1, len = j_1 + cells[j_1].colSpan; k < len; k++) {
                                cells[k] = { colSpan: j_1 - k, style: extend({}, cellStyle) };
                            }
                        }
                        else if (cells[j_1].rowSpan > 1) {
                            for (var k = i_1 + 1, len = i_1 + cells[j_1].rowSpan; k < len; k++) {
                                if (!rows[k]) {
                                    rows[k] = { cells: [] };
                                }
                                rows[k].cells[j_1] = { rowSpan: i_1 - k, style: extend({}, cellStyle) };
                            }
                        }
                        j_1++;
                    });
                    i_1++;
                });
            }
        }
        else if (ele.querySelector('img')) {
            var img = ele.querySelector('img');
            this.parent.notify(createImageElement, { options: { src: img.src, height: img.height, width: img.width }, isPublic: true });
        }
        else if (text) {
            var childArr_1;
            var filteredChild_1;
            if (html) {
                childArr_1 = [].slice.call(ele.children);
            }
            text.split('\n').forEach(function (row) {
                cellStyle = null;
                if (html) {
                    filteredChild_1 = childArr_1.filter(function (elem) { return elem.textContent && elem.textContent.replace(/(\r\n|\n|\r|\s)/gm, ' ').trim() === row.trim(); })[0];
                    if (filteredChild_1) {
                        cellStyle = _this.getStyle(filteredChild_1, ele);
                        childArr_1.splice(childArr_1.indexOf(filteredChild_1), 1);
                    }
                }
                row.trim().split('\t').forEach(function (col, j) {
                    if (col || cellStyle) {
                        cells[j] = {};
                        if (cellStyle) {
                            if (cellStyle.whiteSpace &&
                                cellStyle.whiteSpace !== 'nowrap') {
                                cells[j].wrap = true;
                                delete cellStyle['whiteSpace'];
                                if (Object.keys(cellStyle).length) {
                                    cells[j].style = cellStyle;
                                }
                            }
                            else {
                                cells[j].style = cellStyle;
                            }
                        }
                        if (col) {
                            if (checkIsFormula(col)) {
                                cells[j].formula = col;
                            }
                            else {
                                cells[j].value = parseIntValue(col.trim());
                            }
                        }
                    }
                });
                rows.push({ cells: cells });
                cells = [];
            });
        }
        else if (args.clipboardData.types.length === 1 && args.clipboardData.types[0] === 'Files' && args.clipboardData.files[0] &&
            args.clipboardData.files[0].type.includes('image')) {
            return { file: args.clipboardData.files[0] };
        }
        setTimeout(function () { _this.getClipboardEle().innerHTML = ''; }, 0);
        return rows;
    };
    Clipboard.prototype.getNewIndex = function (cells, index) {
        if (cells[index]) {
            index++;
            index = this.getNewIndex(cells, index);
        }
        return index;
    };
    Clipboard.prototype.getStyle = function (td, ele) {
        var styles = [];
        var cellStyle = {};
        var keys = Object.keys(this.parent.commonCellStyle);
        if (ele.querySelector('style') && td.classList.length) {
            if (ele.querySelector('style').innerHTML.indexOf(td.classList[0]) > -1) {
                var styleTagCSS = ele.querySelector('style').innerHTML.split(td.classList[0]);
                styles.push(styleTagCSS[styleTagCSS.length - 1].split('{')[1].split('}')[0]);
            }
        }
        var nodeList = [].slice.call(td.querySelectorAll('*'));
        nodeList.unshift(td);
        nodeList.forEach(function (node) {
            if (node.getAttribute('style')) {
                styles.push(node.getAttribute('style'));
            }
            if (node.tagName === 'B') {
                styles.push('font-weight:bold');
            }
            if (node.tagName === 'I') {
                styles.push('font-style:italic');
            }
            if (node.tagName === 'U') {
                styles.push('text-decoration:underline');
            }
        });
        if (keys.length) {
            if (ele.querySelector('style')) {
                var tdStyle = (ele.querySelector('style').innerHTML.includes('td') ?
                    ele.querySelector('style').innerHTML.split('td')[1] : ele.querySelector('style').innerHTML);
                tdStyle = tdStyle.includes('{') ? tdStyle.split('{')[1].split('}')[0] : tdStyle.split('}')[0];
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    var regex = key.match(/[A-Z]/);
                    if (regex) {
                        key = key.replace(regex[0], '-' + regex[0].toLowerCase());
                    }
                    if (tdStyle.indexOf(key) > -1) {
                        cellStyle[keys[i]] = tdStyle.split(key + ':')[1].split(';')[0].trim();
                    }
                }
            }
        }
        if (styles.length) {
            var index_1;
            var value_1;
            var splitValue_1;
            // `styleAttr` holds the `CSS` property and `styleValue` holds its corresponding `JS` property in same order, common for border.
            var styleAttr_1 = ['font-family', 'vertical-align', 'text-align', 'text-indent', 'color', 'white-space',
                'font-weight', 'font-style', 'font-size', 'text-decoration', 'background'];
            var styleValue_1 = ['fontFamily', 'verticalAlign', 'textAlign', 'textIndent', 'color', 'whiteSpace', 'fontWeight',
                'fontStyle', 'fontSize', 'textDecoration', 'backgroundColor'];
            var borderAttr_1 = ['border-bottom', 'border-top', 'border-right', 'border-left', 'border'];
            var borderValue_1 = ['borderBottom', 'borderTop', 'borderRight', 'borderLeft', 'border'];
            styles.forEach(function (styles) {
                styles.split(';').forEach(function (style) {
                    value_1 = style.split(':')[0].trim();
                    index_1 = styleAttr_1.indexOf(value_1);
                    if (index_1 > -1) {
                        value_1 = style.split(':')[1].trim();
                        cellStyle[styleValue_1[index_1]] = value_1;
                    }
                    else {
                        index_1 = borderAttr_1.indexOf(value_1);
                        if (index_1 > -1) {
                            value_1 = style.split(':')[1].trim();
                            if (value_1 === 'none') {
                                value_1 = '';
                            }
                            else if (value_1.includes('pt')) {
                                splitValue_1 = value_1.split('pt');
                                splitValue_1[0] = (parseFloat(splitValue_1[0]) / 0.75).toFixed(2) + 'px';
                                value_1 = splitValue_1.join('');
                            }
                            cellStyle[borderValue_1[index_1]] = value_1;
                        }
                    }
                });
            });
        }
        if (td.innerHTML.indexOf('<s>') > -1) {
            cellStyle.textDecoration = 'line-through';
        }
        if (cellStyle.textDecoration &&
            ['underline', 'line-through', 'underline line-through', 'none'].indexOf(cellStyle.textDecoration) === -1) {
            cellStyle.textDecoration = 'none';
        }
        if (cellStyle.textAlign && ['left', 'center', 'right'].indexOf(cellStyle.textAlign) === -1) {
            cellStyle.textAlign = 'left';
        }
        if (cellStyle.verticalAlign && ['bottom', 'middle', 'top'].indexOf(cellStyle.verticalAlign) === -1) {
            cellStyle.verticalAlign = 'bottom';
        }
        if (cellStyle.fontSize) {
            cellStyle.fontSize = Math.round(parseFloat((cellStyle.fontSize.indexOf('px') > -1) ? (parseFloat(cellStyle.fontSize) * 0.75).toString() : cellStyle.fontSize)) + 'pt';
        }
        if (cellStyle.fontWeight && ['bold', 'normal'].indexOf(cellStyle.fontWeight) === -1) {
            cellStyle.fontWeight = cellStyle.fontWeight > '599' ? 'bold' : 'normal';
        }
        return cellStyle;
    };
    Clipboard.prototype.refreshOnInsertDelete = function (args) {
        if (this.copiedInfo) {
            if (args.model.id !== this.copiedInfo.sId) {
                return;
            }
            var range = this.copiedInfo.range;
            if (args.isInsert) {
                if (args.modelType === 'Column') {
                    if (args.start <= range[3]) {
                        if (args.start <= range[1]) {
                            var len = args.end - args.start + 1;
                            range[1] += len;
                            range[3] += len;
                        }
                        else {
                            range[3] = range[1] + (args.start - range[1] - 1);
                        }
                        this.performAction();
                    }
                }
                else {
                    if (args.start <= range[2]) {
                        if (args.start <= range[0]) {
                            var len = args.end - args.start + 1;
                            range[0] += len;
                            range[2] += len;
                        }
                        else {
                            range[2] = range[1] + (args.start - range[1] - 1);
                        }
                        this.performAction();
                    }
                }
            }
            else {
                this.clearCopiedInfo();
            }
        }
    };
    Clipboard.prototype.performAction = function () {
        var copyIndicator = this.getCopyIndicator();
        if (copyIndicator) {
            setPosition(this.parent, copyIndicator, this.copiedInfo.range, 'e-copy-indicator');
        }
    };
    Clipboard.prototype.getClipboardEle = function () {
        return this.parent.element.getElementsByClassName('e-clipboard')[0];
    };
    Clipboard.prototype.getCopyIndicator = function () {
        return this.parent.element.getElementsByClassName('e-copy-indicator')[0];
    };
    Clipboard.prototype.getModuleName = function () {
        return 'clipboard';
    };
    Clipboard.prototype.destroy = function () {
        this.removeEventListener();
        var ele = this.getClipboardEle();
        detach(ele);
        this.parent = null;
    };
    return Clipboard;
}());

/**
 * The `Protect-Sheet` module is used to handle the Protecting functionalities in Spreadsheet.
 */
var Edit = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for edit module in Spreadsheet.
     *
     * @param {Spreadsheet} parent - Constructor for edit module in Spreadsheet.
     * @private
     */
    function Edit(parent) {
        this.editorElem = null;
        this.editCellData = {};
        this.isEdit = false;
        this.isCellEdit = true;
        this.isNewValueEdit = true;
        this.isAltEnter = false;
        this.validCharacters = ['+', '-', '*', '/', ',', '(', '=', '&'];
        this.formulaBarCurStartPos = null;
        this.curEndPos = null;
        this.curStartPos = null;
        this.selectionStart = null;
        this.selectionEnd = null;
        this.uniqueColl = '';
        this.uniqueActCell = '';
        this.isSpill = false;
        this.keyCodes = {
            BACKSPACE: 8,
            SPACE: 32,
            TAB: 9,
            DELETE: 46,
            ESC: 27,
            ENTER: 13,
            FIRSTALPHABET: 65,
            LASTALPHABET: 90,
            FIRSTNUMBER: 48,
            LASTNUMBER: 59,
            FIRSTNUMPAD: 96,
            LASTNUMPAD: 111,
            SYMBOLSETONESTART: 186,
            SYMBOLSETONEEND: 192,
            SYMBOLSETTWOSTART: 219,
            SYMBOLSETTWOEND: 222,
            FIREFOXEQUALPLUS: 61,
            FIREFOXMINUS: 173,
            F2: 113
        };
        this.parent = parent;
        this.addEventListener();
        //Spreadsheet.Inject(WorkbookEdit);
    }
    /**
     * To destroy the edit module.
     *
     * @returns {void} - To destroy the edit module.
     * @hidden
     */
    Edit.prototype.destroy = function () {
        if (this.isEdit) {
            this.cancelEdit(true, false);
        }
        this.removeEventListener();
        this.parent = null;
        this.editorElem = null;
    };
    Edit.prototype.addEventListener = function () {
        EventHandler.add(this.parent.element, 'dblclick', this.dblClickHandler, this);
        this.parent.on(mouseDown, this.mouseDownHandler, this);
        this.parent.on(keyUp, this.keyUpHandler, this);
        this.parent.on(keyDown, this.keyDownHandler, this);
        this.parent.on(editOperation, this.performEditOperation, this);
        this.parent.on(initiateCur, this.initiateCurPosition, this);
        this.parent.on(editValue, this.updateFormulaBarValue, this);
        this.parent.on(addressHandle, this.addressHandler, this);
        this.parent.on(initiateEdit, this.initiateRefSelection, this);
        this.parent.on(forRefSelRender, this.refSelectionRender, this);
        this.parent.on(checkUniqueRange, this.checkUniqueRange, this);
        this.parent.on(reApplyFormula, this.reApplyFormula, this);
        this.parent.on(activeSheetChanged, this.sheetChangeHandler, this);
    };
    Edit.prototype.removeEventListener = function () {
        EventHandler.remove(this.parent.element, 'dblclick', this.dblClickHandler);
        if (!this.parent.isDestroyed) {
            this.parent.off(mouseDown, this.mouseDownHandler);
            this.parent.off(keyUp, this.keyUpHandler);
            this.parent.off(keyDown, this.keyDownHandler);
            this.parent.off(editOperation, this.performEditOperation);
            this.parent.off(initiateCur, this.initiateCurPosition);
            this.parent.off(editValue, this.updateFormulaBarValue);
            this.parent.off(addressHandle, this.addressHandler);
            this.parent.off(initiateEdit, this.initiateRefSelection);
            this.parent.off(forRefSelRender, this.refSelectionRender);
            this.parent.off(checkUniqueRange, this.checkUniqueRange);
            this.parent.off(reApplyFormula, this.reApplyFormula);
            this.parent.off(activeSheetChanged, this.sheetChangeHandler);
        }
    };
    /**
     * Get the module name.
     *
     * @returns {string} - Get the module name.
     * @private
     */
    Edit.prototype.getModuleName = function () {
        return 'edit';
    };
    Edit.prototype.performEditOperation = function (args) {
        var action = args.action;
        switch (action) {
            case 'renderEditor':
                this.renderEditor();
                break;
            case 'refreshEditor':
                this.refreshEditor(args.value, args.refreshFormulaBar, args.refreshEditorElem, args.isAppend, args.trigEvent);
                if (args.refreshCurPos) {
                    this.setCursorPosition();
                }
                break;
            case 'startEdit':
                if (!this.isEdit) {
                    this.isNewValueEdit = args.isNewValueEdit;
                    this.startEdit(args.address, args.value, args.refreshCurPos);
                }
                else {
                    var isEdit = false;
                    var arg = { isEdit: isEdit };
                    this.parent.notify(isFormulaBarEdit, arg);
                    if (arg.isEdit) {
                        this.isNewValueEdit = args.isNewValueEdit;
                        this.startEdit(args.address, args.value, args.refreshCurPos);
                    }
                }
                break;
            case 'endEdit':
                if (this.isEdit) {
                    this.endEdit(args.refreshFormulaBar);
                }
                break;
            case 'cancelEdit':
                if (this.isEdit) {
                    this.cancelEdit(args.refreshFormulaBar);
                }
                break;
            case 'getCurrentEditValue':
                args.editedValue = this.editCellData.value;
                if (args.endFormulaRef !== undefined) {
                    args.endFormulaRef = this.endFormulaRef;
                }
                break;
            case 'refreshDependentCellValue':
                this.refreshDependentCellValue(args.rowIdx, args.colIdx, args.sheetIdx);
                break;
            case 'getElement':
                args.element = this.getEditElement(this.parent.getActiveSheet());
                break;
            case 'focusEditorElem':
                this.editorElem.focus();
                break;
            case 'getCurrentEditSheetIdx':
                args.sheetIndex = this.editCellData.sheetIndex;
                break;
        }
    };
    Edit.prototype.keyUpHandler = function (e) {
        if (this.isEdit) {
            var editElement = this.getEditElement(this.parent.getActiveSheet());
            if (e.altKey && e.keyCode === 13) {
                editElement.focus();
                this.altEnter();
                this.isAltEnter = true;
            }
            else if (this.isCellEdit && this.editCellData.value !== editElement.textContent && e.keyCode !== 16) {
                this.refreshEditor(editElement.textContent, this.isCellEdit);
            }
            var isFormulaEdit = checkIsFormula(this.editCellData.value, true);
            if (isFormulaEdit && (!e || e.keyCode !== 16)) {
                this.updateFormulaReference(editElement);
                if (this.endFormulaRef) {
                    var curOffset = this.getCurPosition();
                    if (curOffset.end && this.validCharacters.indexOf(this.editCellData.value[curOffset.end - 1]) > -1) {
                        this.endFormulaRef = false;
                    }
                }
            }
        }
    };
    Edit.prototype.updateFormulaReference = function (editElement) {
        var formulaRefIndicator = this.parent.element.querySelector('.e-formularef-indicator');
        if (formulaRefIndicator) {
            formulaRefIndicator.parentElement.removeChild(formulaRefIndicator);
        }
        if (this.editCellData.value !== editElement.textContent) {
            this.refreshEditor(editElement.textContent, true);
        }
        var sheetIdx = this.editCellData.sheetIndex;
        var editValue$$1 = this.editCellData.value;
        this.parent.notify(initiateFormulaReference, { range: editValue$$1, formulaSheetIdx: sheetIdx });
    };
    Edit.prototype.keyDownHandler = function (e) {
        var trgtElem = e.target;
        var keyCode = e.keyCode;
        var sheet = this.parent.getActiveSheet();
        var actCell = getCellIndexes(sheet.activeCell);
        var cell = getCell(actCell[0], actCell[1], sheet) || {};
        if (!closest(e.target, '.e-findtool-dlg') && !closest(e.target, '.e-validationerror-dlg')
            && !closest(e.target, '.e-hyperlink-dlg')) {
            if (!sheet.isProtected || closest(e.target, '.e-sheet-rename') || !isLocked(cell, getColumn(sheet, actCell[1]))) {
                if (this.isEdit) {
                    var editorElem = this.getEditElement(sheet);
                    var isFormulaEdit = checkIsFormula(this.editCellData.value, true);
                    if (this.isCellEdit || (isFormulaEdit && this.editCellData.value !== editorElem.textContent && e.keyCode !== 16)) {
                        if (actCell[1] < this.parent.frozenColCount(sheet) && (!sheet.frozenRows || actCell[0] >=
                            this.parent.frozenRowCount(sheet)) && editorElem && editorElem.style.height !== 'auto') {
                            if (getTextWidth(editorElem.textContent, cell.style, this.parent.cellStyle) > parseInt(editorElem.style.maxWidth, 10)) {
                                editorElem.style.height = 'auto';
                            }
                        }
                        if (getTextWidth(editorElem.textContent, cell.style, this.parent.cellStyle) > parseInt(editorElem.style.maxWidth, 10) - 5) { // 5 decreased for padding.
                            editorElem.style.height = 'auto';
                        }
                        if (actCell[0] < this.parent.frozenRowCount(sheet) && editorElem && !editorElem.style.overflow && getTextWidth(editorElem.textContent, cell.style, this.parent.cellStyle) > parseInt(editorElem.style.maxWidth, 10)) {
                            editorElem.style.overflow = 'auto';
                        }
                        this.refreshEditor(editorElem.textContent, this.isCellEdit, false, false, false);
                    }
                    if (!e.altKey) {
                        switch (keyCode) {
                            case this.keyCodes.ENTER:
                                if (Browser.isWindows) {
                                    e.preventDefault();
                                }
                                if (this.isAltEnter) {
                                    var text = editorElem.textContent;
                                    if (text && text.indexOf('\n') > -1) {
                                        wrap(this.parent.getActiveSheet().selectedRange, true, this.parent, true);
                                        this.refreshEditor(editorElem.textContent, this.isCellEdit, false, false, false);
                                        this.isAltEnter = false;
                                    }
                                }
                                if (!isFormulaEdit) {
                                    this.endEdit(false, e);
                                }
                                else {
                                    var formulaRefIndicator = this.parent.element.querySelector('.e-formularef-indicator');
                                    if (formulaRefIndicator) {
                                        formulaRefIndicator.parentElement.removeChild(formulaRefIndicator);
                                    }
                                    if (this.editCellData.sheetIndex === sheet.id - 1) {
                                        this.endEdit(false, e);
                                    }
                                    else {
                                        this.parent.goTo(this.editCellData.fullAddr);
                                        this.endEdit(false, e);
                                    }
                                }
                                break;
                            case this.keyCodes.TAB:
                                if (!this.hasFormulaSuggSelected()) {
                                    this.endEdit(false, e);
                                }
                                break;
                            case this.keyCodes.ESC:
                                this.cancelEdit(true, true, e);
                                break;
                        }
                    }
                }
                else {
                    if (!this.isEdit && (trgtElem.classList.contains('e-spreadsheet') || closest(trgtElem, '.e-sheet-panel'))) {
                        var isAlphabet = (keyCode >= this.keyCodes.FIRSTALPHABET && keyCode <= this.keyCodes.LASTALPHABET);
                        var isNumeric = (keyCode >= this.keyCodes.FIRSTNUMBER && keyCode <= this.keyCodes.LASTNUMBER);
                        var isNumpadKeys = (keyCode >= this.keyCodes.FIRSTNUMPAD && keyCode <= this.keyCodes.LASTNUMPAD);
                        var isSymbolkeys = (keyCode >= this.keyCodes.SYMBOLSETONESTART &&
                            keyCode <= this.keyCodes.SYMBOLSETONEEND);
                        if (!isSymbolkeys) {
                            isSymbolkeys = (keyCode >= this.keyCodes.SYMBOLSETTWOSTART && keyCode <= this.keyCodes.SYMBOLSETTWOEND);
                        }
                        var isFirefoxExceptionkeys = (keyCode === this.keyCodes.FIREFOXEQUALPLUS) ||
                            (keyCode === this.keyCodes.FIREFOXMINUS);
                        var isF2Edit = (!e.shiftKey && !e.ctrlKey && !e.metaKey && keyCode === this.keyCodes.F2);
                        var isBackSpace = keyCode === this.keyCodes.BACKSPACE;
                        if ((!e.ctrlKey && !e.metaKey && !e.altKey && ((!e.shiftKey && keyCode === this.keyCodes.SPACE) || isAlphabet || isNumeric ||
                            isNumpadKeys || isSymbolkeys || (Browser.info.name === 'mozilla' && isFirefoxExceptionkeys))) || isF2Edit || isBackSpace) {
                            if (isF2Edit) {
                                this.isNewValueEdit = false;
                            }
                            var pictureElements = document.getElementsByClassName('e-ss-overlay-active');
                            var pictureLen = pictureElements.length;
                            if (pictureLen > 0) {
                                if (keyCode === this.keyCodes.DELETE) {
                                    this.parent.notify(deleteImage, {
                                        id: pictureElements[0].id, sheetIdx: this.parent.activeSheetIndex + 1
                                    });
                                }
                            }
                            else {
                                this.startEdit(null, null, true, true);
                            }
                        }
                        if (keyCode === this.keyCodes.DELETE) {
                            var islockcell = sheet.isProtected && isLockedCells(this.parent);
                            if (!islockcell) {
                                this.editingHandler('delete');
                                this.parent.notify(activeCellChanged, null);
                            }
                            else {
                                this.parent.notify(editAlert, null);
                            }
                        }
                    }
                }
            }
            else {
                if (((keyCode >= this.keyCodes.FIRSTALPHABET && keyCode <= this.keyCodes.LASTALPHABET) ||
                    (keyCode >= this.keyCodes.FIRSTNUMBER && keyCode <= this.keyCodes.LASTNUMBER)
                    || (keyCode === this.keyCodes.DELETE) || (keyCode === this.keyCodes.BACKSPACE) || (keyCode === this.keyCodes.SPACE)
                    || (keyCode >= this.keyCodes.FIRSTNUMPAD && keyCode <= this.keyCodes.LASTNUMPAD) ||
                    (keyCode >= this.keyCodes.SYMBOLSETONESTART && keyCode <= this.keyCodes.SYMBOLSETONEEND)
                    || (keyCode >= 219 && keyCode <= 222) || (!e.shiftKey && !e.ctrlKey && !e.metaKey && keyCode === this.keyCodes.F2))
                    && (keyCode !== 67) && (keyCode !== 89) && (keyCode !== 90)) {
                    if (sheet.protectSettings.insertLink && keyCode === 75) {
                        return;
                    }
                    if (!this.parent.element.querySelector('.e-editAlert-dlg') && !e.ctrlKey && e.keyCode !== 70 &&
                        !trgtElem.parentElement.classList.contains('e-unprotectpwd-content') &&
                        !trgtElem.parentElement.classList.contains('e-password-content') &&
                        !trgtElem.parentElement.classList.contains('e-sheet-password-content') &&
                        !trgtElem.parentElement.classList.contains('e-unprotectsheetpwd-content') &&
                        !trgtElem.parentElement.classList.contains('e-reenterpwd-content')) {
                        this.parent.notify(editAlert, null);
                    }
                }
            }
        }
    };
    Edit.prototype.renderEditor = function () {
        if (!this.editorElem || !select('#' + this.parent.element.id + '_edit', this.parent.element)) {
            var editor = this.parent.createElement('div', { id: this.parent.element.id + '_edit', className: 'e-spreadsheet-edit' });
            editor.contentEditable = 'true';
            editor.spellcheck = false;
            if (this.parent.element.getElementsByClassName('e-spreadsheet-edit')[0]) {
                this.parent.element.getElementsByClassName('e-spreadsheet-edit')[0].remove();
            }
            var sheetContentElem = this.parent.element.querySelector('.e-sheet-content');
            if (!sheetContentElem) {
                return;
            }
            sheetContentElem.appendChild(editor);
            this.editorElem = editor;
        }
        this.parent.notify(formulaOperation, { action: 'renderAutoComplete' });
    };
    Edit.prototype.refreshEditor = function (value, refreshFormulaBar, refreshEditorElem, isAppend, trigEvent) {
        if (trigEvent === void 0) { trigEvent = true; }
        if (isAppend) {
            value = this.editCellData.value = this.editCellData.value + value;
        }
        else {
            this.editCellData.value = value;
        }
        var editorElem = this.getEditElement(this.parent.getActiveSheet());
        if (refreshEditorElem && editorElem) {
            editorElem.textContent = value;
        }
        if (refreshFormulaBar) {
            this.parent.notify(formulaBarOperation, { action: 'refreshFormulabar', value: value });
        }
        if (this.parent.isEdit && editorElem && trigEvent && this.editCellData.value === editorElem.textContent) {
            if (this.triggerEvent('cellEditing').cancel) {
                this.cancelEdit();
            }
        }
        // if (this.editorElem.scrollHeight + 2 <= this.editCellData.element.offsetHeight) {
        //     this.editorElem.style.height = (this.editCellData.element.offsetHeight + 1) + 'px';
        // } else {
        //     this.editorElem.style.removeProperty('height');
        // }
    };
    Edit.prototype.startEdit = function (address, value, refreshCurPos, preventFormulaReference) {
        if (refreshCurPos === void 0) { refreshCurPos = true; }
        if (this.parent.showSheetTabs) {
            this.parent.element.querySelector('.e-add-sheet-tab').setAttribute('disabled', 'true');
        }
        var sheet = this.parent.getActiveSheet();
        var range = getCellIndexes(sheet.activeCell);
        var cell = getCell(range[0], range[1], sheet, false, true);
        if (hasTemplate(this.parent, range[0], range[1], this.parent.activeSheetIndex)) {
            var cellEle = this.parent.getCell(range[0], range[1]);
            var isDelTemplate = false;
            var value_1 = cellEle.innerHTML;
            if (cellEle) {
                if (value_1.indexOf('<') > -1 && value_1.indexOf('>') > -1 && value_1.indexOf('input') > -1) {
                    isDelTemplate = true;
                }
            }
            if (isDelTemplate) {
                return;
            }
        }
        this.updateEditCellDetail(address, value);
        this.initiateEditor(refreshCurPos);
        this.positionEditor();
        this.parent.isEdit = this.isEdit = true;
        this.parent.notify(clearCopy, null);
        this.parent.notify(enableToolbarItems, [{ enable: false }]);
        if (cell.formula && !preventFormulaReference) {
            this.parent.notify(initiateFormulaReference, { range: cell.formula, formulaSheetIdx: this.editCellData.sheetIndex });
        }
    };
    Edit.prototype.setCursorPosition = function () {
        var elem = this.getEditElement(this.parent.getActiveSheet());
        var textLen = elem.textContent.length;
        if (textLen) {
            var selection = document.getSelection();
            var range = document.createRange();
            range.setStart(elem.firstChild, textLen);
            range.collapse(true);
            selection.removeAllRanges();
            selection.addRange(range);
        }
        elem.focus();
    };
    Edit.prototype.hasFormulaSuggSelected = function () {
        var suggDdlElem = document.getElementById(this.parent.element.id + '_ac_popup');
        return suggDdlElem && suggDdlElem.style.visibility === 'visible' &&
            suggDdlElem.querySelectorAll('.e-item-focus').length > 0;
    };
    Edit.prototype.editingHandler = function (action) {
        var pictureElements = document.getElementsByClassName('e-ss-overlay-active');
        var pictureLen = pictureElements.length;
        var isSpill;
        switch (action) {
            case 'delete':
                if (pictureLen > 0) {
                    if (pictureElements[0].classList.contains('e-datavisualization-chart')) {
                        this.parent.notify(deleteChart, {
                            id: pictureElements[0].id, sheetIdx: this.parent.activeSheetIndex + 1
                        });
                    }
                    else {
                        this.parent.notify(deleteImage, {
                            id: pictureElements[0].id, sheetIdx: this.parent.activeSheetIndex + 1
                        });
                    }
                }
                else {
                    var sheet = this.parent.getActiveSheet();
                    var address = sheet.selectedRange;
                    var range = getIndexesFromAddress(address);
                    range = range[0] > range[2] ? getSwapRange(range) : range;
                    address = getRangeAddress(range);
                    var cellDeleteArgs = { address: sheet.name + '!' + address, cancel: false };
                    this.parent.notify(beginAction, { action: 'cellDelete', eventArgs: cellDeleteArgs });
                    if (cellDeleteArgs.cancel) {
                        return;
                    }
                    address = getRangeFromAddress(cellDeleteArgs.address);
                    range = getRangeIndexes(address);
                    clearRange(this.parent, range, this.parent.activeSheetIndex);
                    this.parent.notify(selectionComplete, {});
                    var args = { cellIdx: range, isUnique: false };
                    this.checkUniqueRange(args);
                    if (args.isUnique) {
                        var indexes = getRangeIndexes(this.uniqueColl);
                        var cell = getCell(indexes[0], indexes[1], this.parent.getActiveSheet());
                        if (cell) {
                            isSpill = cell.value.indexOf('#SPILL!') > -1;
                        }
                    }
                    if (args.isUnique && this.uniqueColl.split(':')[0] === address.split(':')[0]) {
                        var index = getRangeIndexes(this.uniqueColl);
                        for (var i = index[0]; i <= index[2]; i++) {
                            for (var j = index[1]; j <= index[3]; j++) {
                                this.parent.updateCell({ value: '', formula: '' }, getRangeAddress([i, j]));
                            }
                        }
                        this.parent.notify(removeUniquecol, null);
                        this.uniqueColl = '';
                    }
                    else if (args.isUnique) {
                        var uniqueRange = getRangeIndexes(this.uniqueColl);
                        if (getCell(uniqueRange[0], uniqueRange[1], sheet).value === '#SPILL!') {
                            var skip = false;
                            for (var j = uniqueRange[0]; j <= uniqueRange[2]; j++) {
                                for (var k = uniqueRange[1]; k <= uniqueRange[3]; k++) {
                                    var cell = getCell(j, k, sheet);
                                    if (j === uniqueRange[0] && k === uniqueRange[1]) {
                                        skip = false;
                                    }
                                    else if (!isNullOrUndefined(cell.value) && cell.value !== '') {
                                        skip = true;
                                    }
                                }
                            }
                            if (!skip) {
                                this.reApplyFormula();
                            }
                        }
                    }
                    if (args.isUnique) {
                        this.parent.notify(completeAction, { action: 'cellDelete',
                            eventArgs: { address: sheet.name + '!' + address, isSpill: isSpill } });
                    }
                    else {
                        this.parent.notify(completeAction, { action: 'cellDelete', eventArgs: { address: sheet.name + '!' + address } });
                    }
                }
                break;
        }
    };
    Edit.prototype.getCurPosition = function () {
        var cursorOffset = {};
        var selection = window.getSelection();
        if (this.editorElem.textContent === this.editCellData.value) {
            cursorOffset.start = selection.anchorOffset;
            cursorOffset.end = selection.focusOffset;
            if (cursorOffset.start > cursorOffset.end) {
                var x = cursorOffset.start;
                cursorOffset.start = cursorOffset.end;
                cursorOffset.end = x;
            }
        }
        if (selection && selection.focusNode && selection.focusNode.classList &&
            selection.focusNode.classList.contains('e-formula-bar-panel') &&
            this.editorElem.textContent === this.editCellData.value) {
            var formulaBar$$1 = selection.focusNode.getElementsByClassName('e-formula-bar e-css')[0];
            cursorOffset.start = formulaBar$$1.selectionStart;
            cursorOffset.end = formulaBar$$1.selectionEnd;
        }
        return cursorOffset;
    };
    Edit.prototype.mouseDownHandler = function (e) {
        if (!closest(e.target, '.e-findtool-dlg')) {
            if (this.isEdit) {
                var curOffset = this.getCurPosition();
                if (curOffset.start) {
                    this.curStartPos = this.selectionStart = curOffset.start;
                }
                if (curOffset.end) {
                    this.curEndPos = this.selectionEnd = curOffset.end;
                }
                var trgtElem = e.target;
                var sheet = this.parent.getActiveSheet();
                var formulaRefIndicator = this.parent.element.querySelector('.e-formularef-indicator');
                this.isCellEdit = trgtElem.classList.contains('e-spreadsheet-edit');
                var isFormula = checkIsFormula(this.editCellData.value, true);
                var editorElem = this.getEditElement(sheet);
                if (trgtElem.classList.contains('e-cell') || trgtElem.classList.contains('e-header-cell') ||
                    trgtElem.classList.contains('e-selectall') || closest(trgtElem, '.e-toolbar-item.e-active') || closest(trgtElem, '.e-table')) {
                    if (this.isAltEnter) {
                        var editText = editorElem.textContent;
                        if (editText && editText.indexOf('\n') > -1) {
                            this.isAltEnter = false;
                            wrap(this.parent.getActiveSheet().selectedRange, true, this.parent);
                            this.refreshEditor(editorElem.textContent, this.isCellEdit);
                        }
                    }
                    if (!isFormula || this.endFormulaRef) {
                        this.endFormulaRef = false;
                        this.endEdit(false, e);
                    }
                    else {
                        var curPos = this.selectionEnd;
                        var actCellIdx = getCellIndexes(sheet.activeCell);
                        var cell = getCell(actCellIdx[0], actCellIdx[1], sheet);
                        if (this.selectionStart !== this.selectionEnd && this.editCellData.value === editorElem.textContent &&
                            this.validCharacters.indexOf(editorElem.textContent.substring((this.selectionStart - 1), this.selectionStart)) !== -1) {
                            if (isCellReference(editorElem.textContent.substring(this.selectionStart, this.selectionEnd)) &&
                                editorElem.textContent.indexOf(':') !== this.selectionEnd) {
                                this.editCellData.value = editorElem.textContent.substring(0, this.selectionStart) +
                                    editorElem.textContent.substring(this.selectionEnd, editorElem.textContent.length);
                            }
                        }
                        if (this.editCellData.value === editorElem.textContent && (editorElem.textContent.indexOf('(') !==
                            editorElem.textContent.length - 1 && editorElem.textContent.indexOf('(') !== -1) &&
                            this.selectionStart === this.selectionEnd) {
                            if (this.editCellData.sheetIndex !== sheet.id - 1) {
                                var elem = this.parent.element.querySelector('.e-formula-bar');
                                if (editorElem.textContent.substring(elem.selectionEnd - 1, elem.selectionEnd) !== ',' &&
                                    !e.shiftKey) {
                                    if (formulaRefIndicator) {
                                        formulaRefIndicator.parentElement.removeChild(formulaRefIndicator);
                                    }
                                    this.parent.goTo(this.editCellData.fullAddr);
                                    this.endEdit(false, e);
                                    return;
                                }
                            }
                            else {
                                if (this.validCharacters.indexOf(editorElem.textContent.substring(curPos - 1, curPos)) === -1) {
                                    if (formulaRefIndicator) {
                                        formulaRefIndicator.parentElement.removeChild(formulaRefIndicator);
                                    }
                                    this.endEdit(false, e);
                                    return;
                                }
                            }
                        }
                        if (!cell) {
                            return;
                        }
                        isFormula = cell.formula ?
                            checkIsFormula(getCell(actCellIdx[0], actCellIdx[1], sheet).formula) ||
                                (this.editCellData.value && this.editCellData.value.toString().indexOf('=') === 0) : false;
                        if (isFormula && this.parent.isEdit) {
                            var curPos_1 = this.selectionEnd;
                            if (this.editCellData.value.length === curPos_1) {
                                if (this.editCellData.value.substring(this.editCellData.value.length - 1) === ')' ||
                                    isNumber(this.editCellData.value.substring(this.editCellData.value.length - 1))) {
                                    if (formulaRefIndicator) {
                                        formulaRefIndicator.parentElement.removeChild(formulaRefIndicator);
                                    }
                                    this.endEdit(false, e);
                                }
                            }
                            else if (this.editCellData.value === editorElem.textContent) {
                                if (this.validCharacters.indexOf((this.editCellData.value +
                                    sheet.selectedRange).substring(curPos_1 - 1, curPos_1)) === -1) {
                                    if (formulaRefIndicator) {
                                        formulaRefIndicator.parentElement.removeChild(formulaRefIndicator);
                                    }
                                    this.endEdit(false, e);
                                }
                                else if (this.validCharacters.indexOf(editorElem.textContent.substring(curPos_1 - 1, curPos_1)) === -1 ||
                                    (editorElem.textContent.substring(curPos_1, curPos_1 + 1) !== ')' &&
                                        this.validCharacters.indexOf(editorElem.textContent.substring(curPos_1, curPos_1 + 1)) === -1)) {
                                    if (formulaRefIndicator) {
                                        formulaRefIndicator.parentElement.removeChild(formulaRefIndicator);
                                    }
                                    this.endEdit(false, e);
                                }
                            }
                        }
                    }
                }
                else {
                    if (isFormula && this.editCellData.value === editorElem.textContent && editorElem.textContent.indexOf('(') !==
                        editorElem.textContent.length - 1 && !this.isCellEdit &&
                        this.validCharacters.indexOf(this.editCellData.value.substring(this.selectionStart - 1, this.selectionStart)) === -1) {
                        if (this.editCellData.sheetIndex === sheet.id - 1) {
                            var curPos = window.getSelection().focusOffset;
                            if (this.validCharacters.indexOf(editorElem.textContent.substring(curPos - 1, curPos)) === -1) {
                                if (formulaRefIndicator) {
                                    formulaRefIndicator.parentElement.removeChild(formulaRefIndicator);
                                }
                                this.parent.goTo(this.editCellData.fullAddr);
                                this.endEdit(false, e);
                                return;
                            }
                        }
                    }
                }
            }
        }
    };
    Edit.prototype.dblClickHandler = function (e) {
        var trgtElem = e.target;
        var sheet = this.parent.getActiveSheet();
        var actCell = getCellIndexes(sheet.activeCell);
        var cell = getCell(actCell[0], actCell[1], sheet) || {};
        if (closest(trgtElem, '.e-datavisualization-chart')) {
            return;
        }
        if (!sheet.isProtected || !isLocked(cell, getColumn(sheet, actCell[1]))) {
            if ((trgtElem.className.indexOf('e-ss-overlay') < 0) &&
                (trgtElem.classList.contains('e-active-cell') || trgtElem.classList.contains('e-cell')
                    || closest(trgtElem, '.e-sheet-content') || trgtElem.classList.contains('e-table'))) {
                if (this.isEdit) {
                    if (checkIsFormula(this.editCellData.value)) {
                        var sheetName = this.editCellData.fullAddr.substring(0, this.editCellData.fullAddr.indexOf('!'));
                        if (this.parent.getActiveSheet().name === sheetName) {
                            this.endEdit();
                        }
                    }
                    else {
                        if (trgtElem.className.indexOf('e-spreadsheet-edit') < 0) {
                            this.endEdit();
                        }
                    }
                }
                else {
                    this.isNewValueEdit = false;
                    this.startEdit();
                }
            }
        }
        else {
            if (trgtElem.classList.contains('e-active-cell') || trgtElem.classList.contains('e-cell')) {
                this.parent.notify(editAlert, null);
            }
        }
    };
    Edit.prototype.updateEditCellDetail = function (addr, value) {
        var sheetIdx;
        var sheet;
        if (isNullOrUndefined(this.editCellData.sheetIndex)) {
            if (addr && addr.split('!').length > 1) {
                sheetIdx = getSheetIndex(this.parent, getSheetNameFromAddress(addr));
            }
            else {
                sheetIdx = this.parent.activeSheetIndex;
            }
        }
        else {
            sheetIdx = this.editCellData.sheetIndex;
        }
        if (!this.editCellData.addr) {
            sheet = getSheet(this.parent, sheetIdx);
            if (addr) {
                addr = getRangeFromAddress(addr);
            }
            else {
                addr = sheet.activeCell;
            }
        }
        else if (checkIsFormula(this.editCellData.value, true)) {
            sheet = getSheet(this.parent, sheetIdx);
            this.isNewValueEdit = false;
        }
        if (addr) {
            var range = getRangeIndexes(addr);
            var rowIdx = range[0];
            var colIdx = range[1];
            var cellElem = this.parent.getCell(rowIdx, colIdx);
            var cellPosition = getCellPosition(sheet, range, this.parent.frozenRowCount(sheet), this.parent.frozenColCount(sheet), this.parent.viewport.beforeFreezeHeight, this.parent.viewport.beforeFreezeWidth, this.parent.sheetModule.colGroupWidth);
            this.editCellData = {
                addr: addr,
                fullAddr: getSheetName(this.parent, sheetIdx) + '!' + addr,
                rowIndex: rowIdx,
                colIndex: colIdx,
                sheetIndex: sheetIdx,
                element: cellElem,
                value: value || '',
                position: cellPosition
            };
        }
    };
    Edit.prototype.initiateEditor = function (refreshCurPos) {
        var _this = this;
        var data = this.parent.getData(this.editCellData.fullAddr);
        data.then(function (values) {
            values.forEach(function (cell) {
                var args = { cell: cell, value: cell ? cell.value : '' };
                _this.parent.notify(getFormattedBarText, args);
                var value = cell ? args.value : '';
                if (cell && cell.formula) {
                    value = cell.formula;
                }
                _this.editCellData.oldValue = value;
                if (_this.editCellData.value) {
                    value = _this.editCellData.value;
                }
                else {
                    _this.editCellData.value = value;
                }
                if (_this.isNewValueEdit) {
                    value = '';
                }
                else {
                    _this.isNewValueEdit = true;
                }
                if (!isUndefined(value)) {
                    _this.refreshEditor(value, false, true, false, false);
                }
                if (refreshCurPos) {
                    _this.setCursorPosition();
                }
                if (_this.triggerEvent('cellEdit').cancel) {
                    _this.cancelEdit(true, false);
                }
            });
        });
    };
    Edit.prototype.positionEditor = function (isWrap) {
        var tdElem = this.editCellData.element;
        var isEdit = false;
        var cellEle;
        var arg = { isEdit: isEdit };
        this.parent.notify(isFormulaBarEdit, arg);
        if (arg.isEdit && isNullOrUndefined(tdElem)) {
            cellEle = this.parent.getCell(this.editCellData.rowIndex, this.editCellData.colIndex);
            tdElem = cellEle;
            this.editCellData.element = cellEle;
        }
        if (tdElem) {
            tdElem.classList.add('e-ss-edited');
            var sheet = this.parent.getActiveSheet();
            var cell = getCell(this.editCellData.rowIndex, this.editCellData.colIndex, sheet, false, true);
            var left = this.editCellData.position.left + 1;
            var top_1 = this.editCellData.position.top + 1;
            var args = { range: [this.editCellData.rowIndex, this.editCellData.colIndex, this.editCellData.rowIndex,
                    this.editCellData.colIndex] };
            this.parent.notify(activeCellMergedRange, args);
            var minHeight = getRowsHeight(sheet, args.range[0], args.range[2]) - 3;
            var minWidth = getColumnsWidth(sheet, args.range[1], args.range[3]) - 3;
            var mainContElement = this.parent.getMainContent().parentElement;
            var editWidth = void 0;
            var frozenCol = this.parent.frozenColCount(sheet);
            var zIndex = void 0;
            var preventWrap = void 0;
            var frozenRow = this.parent.frozenRowCount(sheet);
            var addWrap = void 0;
            if (this.editCellData.colIndex < frozenCol) {
                editWidth = Math.abs(this.parent.getRowHeaderContent().getBoundingClientRect()[this.parent.enableRtl ? 'left' : 'right'] -
                    tdElem.getBoundingClientRect()[this.parent.enableRtl ? 'right' : 'left']) - 1;
                if (this.editCellData.rowIndex < frozenRow) {
                    if (this.parent.getRowHeaderContent().style.zIndex === '2') {
                        zIndex = '3';
                    }
                }
                else {
                    if (getTextWidth(cell.value, cell.style, this.parent.cellStyle) > editWidth) {
                        addWrap = true;
                    }
                }
            }
            else {
                editWidth = (mainContElement.offsetWidth - left - 28) - this.parent.sheetModule.getRowHeaderWidth(sheet);
            }
            if (this.editCellData.rowIndex < frozenRow) {
                preventWrap = true;
            }
            var height = !preventWrap && ((cell && cell.wrap) || (tdElem && isWrap) || addWrap) ? 'auto;' : minHeight + 'px;';
            // let editHeight: number = mainContElement.offsetHeight - top - 28;
            var inlineStyles = 'display:block;top:' + top_1 + 'px;' + (this.parent.enableRtl ? 'right:' : 'left:') + left + 'px;' +
                'min-width:' + minWidth + 'px;max-width:' + (cell && cell.wrap ? minWidth : editWidth) + 'px;' +
                'height:' + height + (cell && cell.wrap ? ('width:' + minWidth + 'px;') : '') + 'min-height:' + minHeight + 'px;' +
                (zIndex ? 'z-index: ' + zIndex + ';' : '') + (preventWrap && ((cell && !cell.wrap) || (tdElem && isWrap)) && (getTextWidth(cell.value, cell.style, this.parent.cellStyle) > editWidth || (tdElem && isWrap)) ? 'overflow: auto;' : '');
            inlineStyles += tdElem.style.cssText;
            var editorElem = this.getEditElement(sheet, true);
            editorElem.setAttribute('style', inlineStyles);
            if (getTextWidth(editorElem.textContent, cell.style, this.parent.cellStyle) > editWidth) {
                editorElem.style.height = 'auto';
            }
            // we using edit div height as auto , while editing div enlarges and hide active cell bottom border for that
            // we increasing 1px height to active cell.
            var actCell = this.parent.element.querySelector('.e-active-cell');
            if (actCell) {
                actCell.style.height = (minHeight + 4) + 'px';
            }
            if (tdElem.classList.contains('e-right-align')) {
                editorElem.classList.add('e-right-align');
            }
            else if (tdElem.classList.contains('e-center-align')) {
                editorElem.classList.add('e-center-align');
            }
        }
    };
    Edit.prototype.updateEditedValue = function (tdRefresh, value) {
        if (tdRefresh === void 0) { tdRefresh = true; }
        var oldCellValue = this.editCellData.oldValue;
        var oldValue = oldCellValue ? oldCellValue.toString().toUpperCase() : '';
        var isValidate = true;
        var address = this.editCellData.addr;
        var cellIndex = getRangeIndexes(this.parent.getActiveSheet().activeCell);
        var sheet = this.parent.getActiveSheet();
        var cell = getCell(cellIndex[0], cellIndex[1], sheet);
        var column = getColumn(sheet, cellIndex[1]);
        if (value) {
            this.editCellData.value = value;
        }
        var newVal = this.editCellData.value;
        /* To set the before cell details for undo redo. */
        this.parent.notify(setActionData, { args: { action: 'beforeCellSave', eventArgs: { address: this.editCellData.addr } } });
        if (this.parent.allowDataValidation && ((cell && cell.validation) || (column && column.validation))) {
            var value_2 = newVal ? newVal : this.getEditElement(sheet).innerText;
            var isCell = true;
            var sheetIdx = this.parent.activeSheetIndex;
            var range = void 0;
            if (typeof address === 'string') {
                range = getRangeIndexes(address);
            }
            else {
                range = address;
            }
            this.parent.notify(isValidation, { value: value_2, range: range, sheetIdx: sheetIdx, isCell: isCell });
            isValidate = this.parent.allowDataValidation;
            this.editCellData.value = isValidate ? value_2 : this.editCellData.value;
            this.parent.allowDataValidation = true;
        }
        if ((oldCellValue !== this.editCellData.value || oldValue.indexOf('=RAND()') > -1 || oldValue.indexOf('RAND()') > -1 ||
            oldValue.indexOf('=RANDBETWEEN(') > -1 || oldValue.indexOf('RANDBETWEEN(') > -1) && isValidate) {
            var sheet_1 = this.parent.getActiveSheet();
            var cellIndex_1 = getRangeIndexes(sheet_1.activeCell);
            if (oldCellValue && oldCellValue.toString().indexOf('=UNIQUE(') > -1 && this.editCellData.value === '') {
                this.parent.notify(removeUniquecol, null);
            }
            var args = { cellIdx: cellIndex_1, isUnique: false };
            this.checkUniqueRange(args);
            var isUniqueRange = args.isUnique;
            if (isUniqueRange && oldCellValue !== '' && this.editCellData.value === '') {
                var rangeIdx = getRangeIndexes(this.uniqueColl);
                if (getCell(rangeIdx[0], rangeIdx[1], sheet_1).value.indexOf('#SPILL!') === -1) {
                    return isValidate;
                }
            }
            if (oldCellValue && oldCellValue.toString().indexOf('UNIQUE') > -1 &&
                this.editCellData.value && this.editCellData.value.toString().indexOf('UNIQUE') > -1 && isUniqueRange) {
                this.updateUniqueRange('');
            }
            this.parent.notify(workbookEditOperation, { action: 'updateCellValue', address: this.editCellData.addr, value: this.editCellData.value });
            var cell_1 = getCell(cellIndex_1[0], cellIndex_1[1], sheet_1, true);
            var eventArgs = this.getRefreshNodeArgs(cell_1);
            this.editCellData.value = eventArgs.value;
            if (cell_1 && cell_1.formula) {
                this.editCellData.formula = cell_1.formula;
            }
            if (cell_1 && cell_1.wrap) {
                this.parent.notify(wrapEvent, { range: cellIndex_1, wrap: true, sheet: sheet_1 });
            }
            if (tdRefresh) {
                this.parent.refreshNode(this.editCellData.element, eventArgs);
            }
            if (cell_1 && cell_1.hyperlink) {
                this.parent.serviceLocator.getService('cell').refreshRange(cellIndex_1);
            }
            if (isUniqueRange) {
                var rangeIdx = getRangeIndexes(this.uniqueColl);
                if (getCell(rangeIdx[0], rangeIdx[1], sheet_1).value.indexOf('#SPILL!') > -1) {
                    this.isSpill = true;
                }
                if ((oldCellValue !== '' && this.editCellData.value === '') ||
                    (this.editCellData.formula && this.editCellData.formula.length > 1 && oldCellValue !== this.editCellData.formula)) {
                    var skip = false;
                    for (var j = rangeIdx[0]; j <= rangeIdx[2]; j++) {
                        for (var k = rangeIdx[1]; k <= rangeIdx[3]; k++) {
                            var cell_2 = getCell(j, k, sheet_1);
                            if (j === rangeIdx[0] && k === rangeIdx[1]) {
                                skip = false;
                            }
                            else if (cell_2 && !isNullOrUndefined(cell_2.value) && cell_2.value !== '') {
                                skip = true;
                            }
                        }
                    }
                    if (!skip) {
                        this.reApplyFormula();
                    }
                }
                else {
                    this.updateUniqueRange(newVal);
                }
            }
        }
        return isValidate;
    };
    Edit.prototype.checkUniqueRange = function (uniquArgs) {
        var args = { range: [] };
        this.parent.notify(getUniqueRange, args);
        var collection = args.range;
        for (var i = 0; i < collection.length; i++) {
            if (collection[i].split('!')[0] === this.parent.getActiveSheet().name) {
                var rangeIdx = getRangeIndexes(collection[i]);
                for (var j = rangeIdx[0]; j <= rangeIdx[2]; j++) {
                    for (var k = rangeIdx[1]; k <= rangeIdx[3]; k++) {
                        if (uniquArgs.cellIdx[0] === j && uniquArgs.cellIdx[1] === k) {
                            uniquArgs.isUnique = true;
                            this.uniqueCell = true;
                            var uniqueIndex = this.uniqueColl !== '' ? getRangeIndexes(this.uniqueColl) : [0, 0, 0, 0];
                            var collectionIndex = getRangeIndexes(collection[i]);
                            if (uniqueIndex[0] === collectionIndex[0] && uniqueIndex[1] === collectionIndex[1]) {
                                var index = [uniqueIndex[0], collectionIndex[1], uniqueIndex[0], collectionIndex[1]];
                                index[2] = uniqueIndex[2] > collectionIndex[2] ? uniqueIndex[2] : collectionIndex[2];
                                index[3] = uniqueIndex[3] > collectionIndex[3] ? uniqueIndex[3] : collectionIndex[3];
                                this.uniqueColl = getRangeAddress(index);
                                uniquArgs.uniqueRange = getRangeAddress(index);
                            }
                            else {
                                this.uniqueColl = collection[i];
                                uniquArgs.uniqueRange = collection[i];
                            }
                        }
                    }
                }
            }
        }
    };
    Edit.prototype.updateUniqueRange = function (value) {
        var rangeIdx = getRangeIndexes(this.uniqueColl);
        var skip = false;
        if (getCell(rangeIdx[0], rangeIdx[1], this.parent.getActiveSheet()).value !== '#SPILL!') {
            skip = true;
        }
        for (var j = rangeIdx[0]; j <= rangeIdx[2]; j++) {
            for (var k = rangeIdx[1]; k <= rangeIdx[3]; k++) {
                if (skip) {
                    if (j === rangeIdx[0] && k === rangeIdx[1]) {
                        this.parent.updateCell({ value: '#SPILL!' }, getRangeAddress([j, k]));
                    }
                    else {
                        if (getRangeAddress([j, k]).split(':')[0] === this.editCellData.addr) {
                            this.parent.updateCell({ value: value }, getRangeAddress([j, k]));
                        }
                        else {
                            this.parent.updateCell({ value: '' }, getRangeAddress([j, k]));
                        }
                    }
                }
            }
        }
    };
    Edit.prototype.reApplyFormula = function () {
        var cellIdx = getRangeIndexes(this.uniqueColl);
        var cell = getCell(cellIdx[0], cellIdx[1], this.parent.getActiveSheet());
        this.parent.updateCell({ value: '' }, getRangeAddress([cellIdx[0], cellIdx[1]]));
        var sheets = this.parent.sheets;
        var formula = cell.formula;
        for (var i = 0; i < sheets.length; i++) {
            if (formula.indexOf(sheets[i].name) > -1) {
                formula = formula.replace(sheets[i].name, '!' + i);
            }
        }
        this.parent.computeExpression(formula);
        this.uniqueCell = false;
        if (this.uniqueActCell !== '') {
            this.editCellData.value = this.uniqueActCell;
            this.uniqueActCell = '';
        }
    };
    Edit.prototype.refreshDependentCellValue = function (rowIdx, colIdx, sheetIdx) {
        if (rowIdx && colIdx) {
            rowIdx--;
            colIdx--;
            if (((this.editCellData.rowIndex !== rowIdx || this.editCellData.colIndex !== colIdx)
                && this.parent.activeSheetIndex === sheetIdx) || (this.uniqueCell && this.parent.activeSheetIndex === sheetIdx)) {
                var td = this.parent.getCell(rowIdx, colIdx);
                if (td) {
                    if (td.parentElement) {
                        var curRowIdx = td.parentElement.getAttribute('aria-rowindex');
                        if (curRowIdx && Number(curRowIdx) - 1 !== rowIdx) {
                            return;
                        }
                    }
                    var sheet = getSheet(this.parent, sheetIdx);
                    var cell = getCell(rowIdx, colIdx, sheet);
                    var actCell = getRangeIndexes(sheet.activeCell);
                    if (actCell[0] === rowIdx && actCell[1] === colIdx) {
                        this.uniqueActCell = cell.value;
                    }
                    var eventArgs = this.getRefreshNodeArgs(cell, rowIdx, colIdx);
                    this.parent.refreshNode(td, eventArgs);
                }
            }
        }
    };
    Edit.prototype.getRefreshNodeArgs = function (cell, rowIdx, colIdx) {
        cell = cell ? cell : {};
        var fCode = (cell && cell.format) ? cell.format : '';
        var eventArgs = {
            value: cell.value, format: fCode, onLoad: true,
            formattedText: '', isRightAlign: false, type: 'General', cell: cell,
            rowIndex: rowIdx === undefined ? this.editCellData.rowIndex : rowIdx,
            colIndex: colIdx === undefined ? this.editCellData.colIndex : colIdx, isRowFill: false
        };
        this.parent.notify(getFormattedCellObject, eventArgs);
        eventArgs.formattedText = this.parent.allowNumberFormatting ? eventArgs.formattedText : eventArgs.value;
        var args = {
            isRightAlign: eventArgs.isRightAlign,
            result: eventArgs.formattedText,
            type: eventArgs.type,
            value: eventArgs.value,
            curSymbol: eventArgs.curSymbol,
            isRowFill: eventArgs.isRowFill
        };
        return args;
    };
    Edit.prototype.endEdit = function (refreshFormulaBar, event) {
        if (refreshFormulaBar === void 0) { refreshFormulaBar = false; }
        var sheet = this.parent.getActiveSheet();
        var actCell = getCellIndexes(sheet.activeCell);
        var cell = this.parent.getCell(actCell[0], actCell[1]);
        var fSize = '';
        if (this.editCellData.element && this.editCellData.element.children[0] &&
            this.editCellData.element.children[0].className === 'e-cf-databar') {
            fSize = cell.children[0].querySelector('.e-databar-value').style.fontSize;
        }
        if (refreshFormulaBar) {
            this.refreshEditor(this.editCellData.oldValue, false, true, false, false);
        }
        var triggerEventArgs = this.triggerEvent('beforeCellSave');
        if (triggerEventArgs.cancel) {
            if (this.parent.isEdit && event) {
                event.preventDefault();
            }
            return;
        }
        if (triggerEventArgs.value && triggerEventArgs.value.toString().indexOf('\n') > -1) {
            wrap(this.parent.getActiveSheet().selectedRange, true, this.parent);
            this.refreshEditor(triggerEventArgs.value, this.isCellEdit, false, false, false);
        }
        var isValidate = this.updateEditedValue(true, triggerEventArgs.value);
        if (isValidate) {
            this.triggerEvent('cellSave', event, triggerEventArgs.value);
            this.resetEditState();
            this.focusElement();
        }
        else if (event) {
            event.preventDefault();
        }
        if (fSize !== '') {
            cell.children[0].querySelector('.e-databar-value').style.fontSize = fSize;
        }
        if (this.parent.showSheetTabs && !this.parent.isProtected) {
            this.parent.element.querySelector('.e-add-sheet-tab').removeAttribute('disabled');
        }
        if (this.parent.isValidationHighlighted && getCell(actCell[0], actCell[1], sheet).validation) {
            this.parent.addInvalidHighlight();
        }
    };
    Edit.prototype.cancelEdit = function (refreshFormulaBar, trigEvent, event) {
        if (refreshFormulaBar === void 0) { refreshFormulaBar = true; }
        if (trigEvent === void 0) { trigEvent = true; }
        this.refreshEditor(this.editCellData.oldValue, refreshFormulaBar, false, false, false);
        if (trigEvent) {
            this.triggerEvent('cellSave', event);
        }
        this.resetEditState();
        this.focusElement();
    };
    Edit.prototype.focusElement = function () {
        focus(this.parent.element);
        this.parent.notify(enableToolbarItems, [{ enable: true }]);
    };
    Edit.prototype.triggerEvent = function (eventName, event, value) {
        var sheet = this.parent.getActiveSheet();
        var cell = getCell(this.editCellData.rowIndex, this.editCellData.colIndex, sheet);
        var eventArgs = {
            element: this.editCellData.element,
            value: value ? value : this.editCellData.value,
            oldValue: this.editCellData.oldValue,
            address: this.editCellData.fullAddr,
            displayText: this.parent.getDisplayText(cell)
        };
        if (eventArgs.address) {
            var indexes = getRangeIndexes(eventArgs.address);
            var args = { cellIdx: indexes, isUnique: false };
            this.checkUniqueRange(args);
            if (args.isUnique) {
                eventArgs.isSpill = this.isSpill;
            }
        }
        if (eventArgs.value !== eventArgs.oldValue) {
            if (eventName !== 'cellSave') {
                eventArgs.cancel = false;
            }
            if (eventName === 'beforeCellSave') {
                this.parent.notify(beginAction, { eventArgs: eventArgs, action: 'cellSave', preventAction: true });
                cell = checkIsFormula(eventArgs.value) ? { formula: eventArgs.value } : { value: eventArgs.value };
                var args = { cell: cell, cancel: false, sheetId: sheet.id, rowIndex: this.editCellData.rowIndex,
                    colIndex: this.editCellData.colIndex };
                this.parent.trigger(beforeCellUpdate, args);
                if (args.cancel) {
                    this.cancelEdit(false, false);
                    eventArgs.cancel = true;
                    return eventArgs;
                }
            }
            this.parent.trigger(eventName, eventArgs);
            if (eventName === 'cellSave') {
                if (this.editCellData.formula) {
                    eventArgs.formula = this.editCellData.formula;
                }
                eventArgs.originalEvent = event;
                this.parent.notify(completeAction, { eventArgs: eventArgs, action: 'cellSave' });
            }
        }
        else if (eventName !== 'cellSave' && eventName !== 'beforeCellSave') {
            this.parent.trigger(eventName, eventArgs);
        }
        return { value: eventArgs.value, oldValue: null, element: null, address: null, cancel: eventArgs.cancel };
    };
    Edit.prototype.altEnter = function () {
        this.positionEditor(true);
        var selection = window.getSelection();
        var node = selection.anchorNode;
        var offset;
        var range = document.createRange();
        offset = (node.nodeType === 3) ? selection.anchorOffset : node.textContent.length;
        if (offset === 0 && node.textContent.length > 0) {
            offset = node.textContent.length;
        }
        var text = node.textContent;
        var textBefore = text.slice(0, offset);
        var textAfter = text.slice(offset) || ' ';
        node.textContent = textBefore + '\n' + textAfter;
        range = document.createRange();
        if (node.nodeType === 3) {
            range.setStart(node, offset + 1);
            range.setEnd(node, offset + 1);
        }
        else if (node.nodeType === 1) {
            range.setStart(node.firstChild, offset + 1);
            range.setEnd(node.firstChild, offset + 1);
        }
        selection.removeAllRanges();
        selection.addRange(range);
    };
    Edit.prototype.resetEditState = function (elemRefresh) {
        if (elemRefresh === void 0) { elemRefresh = true; }
        if (elemRefresh) {
            var editorElem = this.getEditElement(this.parent.getActiveSheet());
            if (checkIsFormula(editorElem.textContent) || editorElem.textContent === '') {
                this.parent.notify(clearCellRef, null);
            }
            if (this.editCellData.element) {
                this.editCellData.element.classList.remove('e-ss-edited');
                this.editorElem.textContent = '';
                if (editorElem === this.editorElem) {
                    this.editorElem.removeAttribute('style');
                    this.editorElem.classList.remove('e-right-align');
                }
                else {
                    detach(editorElem);
                }
            }
        }
        this.editCellData = {};
        this.parent.isEdit = this.isEdit = false;
        this.isCellEdit = true;
        this.parent.notify(formulaOperation, { action: 'endEdit' });
    };
    Edit.prototype.refSelectionRender = function () {
        var editorElem = this.getEditElement(this.parent.getActiveSheet());
        if (editorElem) {
            if (checkIsFormula(editorElem.textContent)) {
                this.parent.notify(initiateFormulaReference, {
                    range: editorElem.textContent, formulaSheetIdx: this.editCellData.sheetIndex
                });
            }
        }
    };
    // Start edit the formula cell and set cursor position
    Edit.prototype.initiateRefSelection = function () {
        var sheetName = this.editCellData.fullAddr.substring(0, this.editCellData.fullAddr.indexOf('!'));
        var value = this.editCellData.value;
        if (this.parent.getActiveSheet().name === sheetName && checkIsFormula(this.editCellData.value, true)) {
            this.startEdit(this.editCellData.addr, value, false);
            this.parent.notify(initiateFormulaReference, {
                range: this.editCellData.value, formulaSheetIdx: this.editCellData.sheetIndex
            });
            this.getEditElement(this.parent.getActiveSheet()).innerHTML = value;
            this.initiateCurPosition();
        }
        else {
            this.initiateCurPosition();
        }
    };
    Edit.prototype.addressHandler = function (args) {
        var selection = window.getSelection();
        this.selectionStart = selection.anchorOffset;
        this.selectionEnd = selection.focusOffset;
        if (this.selectionStart > this.selectionEnd) {
            var x = this.selectionStart;
            this.selectionStart = this.selectionEnd;
            this.selectionEnd = x;
        }
        if ((selection && selection.focusNode && selection.focusNode.classList &&
            selection.focusNode.classList.contains('e-formula-bar-panel'))) {
            var formulaBar$$1 = selection.focusNode.getElementsByClassName('e-formula-bar e-css')[0];
            this.selectionStart = formulaBar$$1.selectionStart;
            this.selectionEnd = formulaBar$$1.selectionEnd;
        }
        var eventArgs = { action: 'getCurrentEditValue', editedValue: '' };
        this.parent.notify(editOperation, eventArgs);
        var address = args.range;
        var sheetName = this.editCellData.fullAddr.substring(0, this.editCellData.fullAddr.indexOf('!'));
        var sheetIdx = this.editCellData.sheetIndex;
        var editorEle = this.getEditElement(this.parent.getActiveSheet());
        if (this.parent.getActiveSheet().name !== sheetName) {
            address = '\'' + this.parent.getActiveSheet().name + '\'' + '!' + address;
        }
        if (args.isSelect) {
            this.parent.notify(initiateFormulaReference, { range: eventArgs.editedValue + address, formulaSheetIdx: sheetIdx });
        }
        else {
            var sheetName_1 = this.editCellData.fullAddr.substring(0, this.editCellData.fullAddr.indexOf('!'));
            if (this.parent.getActiveSheet().name === sheetName_1) {
                var editedValue = eventArgs.editedValue;
                if (this.selectionStart !== this.selectionEnd) {
                    this.formulaBarCurStartPos = this.selectionStart;
                    this.curStartPos = this.selectionStart;
                    this.curEndPos = this.selectionStart + address.length;
                    editorEle.textContent = editedValue.substring(0, this.selectionStart)
                        + address + editedValue.substring(this.selectionStart);
                }
                else if (editedValue.indexOf(')') === editedValue.length - 1 && this.selectionEnd === editedValue.length) {
                    editorEle.textContent = editedValue.substring(0, editedValue.length - 1)
                        + address + editedValue.substring(editedValue.length - 1);
                    this.curEndPos = editorEle.textContent.length - 1;
                }
                else if (editedValue.indexOf(')') !== editedValue.length - 1) {
                    editorEle.textContent = editedValue + address;
                    this.curEndPos = editorEle.textContent.length;
                }
                else if (editorEle.textContent !== editedValue) {
                    editorEle.textContent = editedValue.substring(0, this.curStartPos)
                        + address + editedValue.substring(this.curStartPos);
                    this.curEndPos = this.curStartPos + address.length;
                }
                else if (this.selectionStart === this.selectionEnd &&
                    this.validCharacters.indexOf(editedValue.substring(this.selectionStart - 1, this.selectionEnd)) !== -1 &&
                    (this.validCharacters.indexOf(editedValue.substring(this.selectionStart, this.selectionEnd + 1)) !== -1 ||
                        editedValue.substring(this.selectionStart, this.selectionEnd + 1) === ')')) {
                    editorEle.textContent = editedValue.substring(0, this.selectionStart)
                        + address + editedValue.substring(this.selectionEnd);
                    this.curStartPos = this.selectionStart;
                    this.curEndPos = this.selectionStart + address.length;
                    this.formulaBarCurStartPos = this.curStartPos;
                }
            }
        }
    };
    Edit.prototype.updateFormulaBarValue = function () {
        var selection = window.getSelection();
        var value = this.editCellData.value;
        var address = this.parent.getActiveSheet().selectedRange;
        address = isSingleCell(getIndexesFromAddress(address)) ? address.split(':')[0] : address;
        var formulaBar$$1 = this.parent.element.querySelector('.e-formula-bar');
        if (value && checkIsFormula(value, true)) {
            var sheetName = this.editCellData.fullAddr.substring(0, this.editCellData.fullAddr.indexOf('!'));
            if (this.parent.getActiveSheet().name !== sheetName) {
                address = '\'' + this.parent.getActiveSheet().name + '\'' + '!' + address;
            }
            if (!isNullOrUndefined(this.formulaBarCurStartPos)) {
                formulaBar$$1.value = value.substring(0, this.formulaBarCurStartPos)
                    + address + value.substring(this.formulaBarCurStartPos);
            }
            else if (value.indexOf(')') === value.length - 1 && selection.focusOffset === value.length) {
                formulaBar$$1.value = value.substring(0, value.length - 1) + address + value.substring(value.length - 1);
            }
            else if (value.indexOf(')') !== value.length - 1) {
                formulaBar$$1.value = value + address;
            }
            else if (formulaBar$$1.value !== value) {
                formulaBar$$1.value = value.substring(0, this.curStartPos)
                    + address + value.substring(this.curStartPos);
            }
            this.curEndPos = this.curStartPos + address.length;
        }
    };
    Edit.prototype.setFormulaBarCurPosition = function (input, selectionStart, selectionEnd) {
        if (input.setSelectionRange) {
            input.focus();
            input.selectionStart = selectionStart;
            input.selectionEnd = selectionStart;
            input.setSelectionRange(selectionStart, selectionEnd);
        }
    };
    Edit.prototype.initiateCurPosition = function (args) {
        if (args === void 0) { args = { isCellEdit: false }; }
        var el = this.getEditElement(this.parent.getActiveSheet(), true);
        if (args.isCellEdit) {
            var curOffset = this.getCurPosition();
            if (!this.endFormulaRef && curOffset.start === curOffset.end) {
                this.updateFormulaReference(el);
                if (curOffset.end && this.validCharacters.indexOf(this.editCellData.value[curOffset.end - 1]) === -1) {
                    this.endFormulaRef = true;
                }
            }
            return;
        }
        var value = el.innerText;
        var selection = window.getSelection();
        if ((selection && selection.focusNode && selection.focusNode.classList &&
            selection.focusNode.classList.contains('e-formula-bar-panel'))) {
            var formulaBar$$1 = this.parent.element.querySelector('.e-formula-bar');
            this.setFormulaBarCurPosition(formulaBar$$1, this.curEndPos, this.curEndPos);
            return;
        }
        if (value) {
            var range = document.createRange();
            if (value.indexOf(')') === value.length - 1) {
                range.setStart(el.childNodes[0], this.curEndPos);
                range.setEnd(el.childNodes[0], this.curEndPos);
            }
            else {
                range.setStart(el.childNodes[0], this.curEndPos);
                range.setEnd(el.childNodes[0], this.curEndPos);
            }
            selection.removeAllRanges();
            selection.addRange(range);
        }
        var sheetIdx = this.editCellData.sheetIndex;
        if (sheetIdx !== this.parent.getActiveSheet().id - 1) {
            var elem = this.parent.element.querySelector('.e-formula-bar');
            if (elem.value) {
                var valueLength = elem.value.length;
                if (elem.value.indexOf(')') === valueLength - 1) {
                    this.setFormulaBarCurPosition(elem, valueLength - 1, valueLength - 1);
                }
                else {
                    this.setFormulaBarCurPosition(elem, valueLength, valueLength);
                }
            }
        }
    };
    Edit.prototype.getEditElement = function (sheet, isEdit) {
        if ((this.isEdit || isEdit) && (sheet.frozenRows || sheet.frozenColumns)) {
            var frozenRow = this.parent.frozenRowCount(sheet);
            var frozenCol = this.parent.frozenColCount(sheet);
            var range = getCellIndexes(sheet.activeCell);
            var content = void 0;
            if (range[0] < frozenRow && range[1] < frozenCol) {
                content = this.parent.getSelectAllContent();
            }
            else if (range[0] < frozenRow) {
                content = this.parent.getColumnHeaderContent();
            }
            else if (range[1] < frozenCol) {
                content = this.parent.getRowHeaderContent();
            }
            else {
                return this.editorElem;
            }
            var editEle = content.getElementsByClassName('e-spreadsheet-edit')[0];
            if (!editEle && isEdit) {
                editEle = content.appendChild(this.editorElem.cloneNode());
            }
            return editEle;
        }
        return this.editorElem;
    };
    Edit.prototype.sheetChangeHandler = function () {
        if (!this.isEdit) {
            this.editCellData.value = null;
        }
    };
    return Edit;
}());

/**
 * Represents selection support for Spreadsheet.
 */
var Selection = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for the Spreadsheet selection module.
     *
     * @param {Spreadsheet} parent - Constructor for the Spreadsheet selection module.
     * @private
     */
    function Selection(parent) {
        this.uniqueOBracket = String.fromCharCode(129);
        this.uniqueCBracket = String.fromCharCode(130);
        this.uniqueCSeparator = String.fromCharCode(131);
        this.uniqueCOperator = String.fromCharCode(132);
        this.uniquePOperator = String.fromCharCode(133);
        this.uniqueSOperator = String.fromCharCode(134);
        this.uniqueMOperator = String.fromCharCode(135);
        this.uniqueDOperator = String.fromCharCode(136);
        this.uniqueModOperator = String.fromCharCode(137);
        this.uniqueConcateOperator = String.fromCharCode(138);
        this.uniqueEqualOperator = String.fromCharCode(139);
        this.uniqueExpOperator = String.fromCharCode(140);
        this.uniqueGTOperator = String.fromCharCode(141);
        this.uniqueLTOperator = String.fromCharCode(142);
        this.invalidOperators = ['%'];
        this.formulaRange = [];
        this.tableRangesFormula = {};
        this.parent = parent;
        this.addEventListener();
        this.mouseMoveEvt = this.mouseMoveHandler.bind(this);
    }
    Selection.prototype.addEventListener = function () {
        this.parent.on(contentLoaded, this.init, this);
        this.parent.on(mouseDown, this.mouseDownHandler, this);
        this.parent.on(virtualContentLoaded, this.virtualContentLoadedHandler, this);
        this.parent.on(cellNavigate, this.cellNavigateHandler, this);
        this.parent.on(selectRange, this.selectRange, this);
        this.parent.on(rowHeightChanged, this.rowHeightChanged, this);
        this.parent.on(colWidthChanged, this.colWidthChanged, this);
        this.parent.on(protectSelection, this.protectHandler, this);
        this.parent.on(initiateFormulaReference, this.initiateFormulaSelection, this);
        this.parent.on(clearCellRef, this.clearBorder, this);
        this.parent.on(getRowIdxFromClientY, this.getRowIdxFromClientY, this);
        this.parent.on(getColIdxFromClientX, this.getColIdxFromClientX, this);
        this.parent.on(focusBorder, this.chartBorderHandler, this);
        this.parent.on(selectionStatus, this.isTouchSelectionStarted, this);
    };
    Selection.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(contentLoaded, this.init);
            this.parent.off(mouseDown, this.mouseDownHandler);
            this.parent.off(virtualContentLoaded, this.virtualContentLoadedHandler);
            this.parent.off(cellNavigate, this.cellNavigateHandler);
            this.parent.off(selectRange, this.selectRange);
            this.parent.off(rowHeightChanged, this.rowHeightChanged);
            this.parent.off(colWidthChanged, this.colWidthChanged);
            this.parent.off(protectSelection, this.protectHandler);
            this.parent.off(initiateFormulaReference, this.initiateFormulaSelection);
            this.parent.off(clearCellRef, this.clearBorder);
            this.parent.off(getRowIdxFromClientY, this.getRowIdxFromClientY);
            this.parent.off(getColIdxFromClientX, this.getColIdxFromClientX);
            this.parent.off(focusBorder, this.chartBorderHandler);
            this.parent.off(selectionStatus, this.isTouchSelectionStarted);
        }
    };
    Selection.prototype.isTouchSelectionStarted = function (args) {
        args.touchSelectionStarted = this.touchSelectionStarted;
    };
    Selection.prototype.rowHeightChanged = function (args) {
        var _this = this;
        if (!args.threshold) {
            return;
        }
        getUpdateUsingRaf(function () {
            var ele = _this.getActiveCell();
            var sheet = _this.parent.getActiveSheet();
            if (ele) {
                var cellIndex = getCellIndexes(sheet.activeCell);
                if (sheet.frozenRows || sheet.frozenColumns) {
                    var e = { range: [cellIndex[0], cellIndex[1], cellIndex[0], cellIndex[1]] };
                    _this.parent.notify(activeCellMergedRange, e);
                    setPosition(_this.parent, ele, e.range, 'e-active-cell');
                }
                else {
                    if (cellIndex[0] === args.rowIdx) {
                        ele.style.height = parseFloat(ele.style.height) + args.threshold + "px";
                    }
                    else if (cellIndex[0] > args.rowIdx) {
                        ele.style.top = parseFloat(ele.style.top) + args.threshold + "px";
                    }
                }
            }
            ele = _this.getSelectionElement();
            if (ele) {
                var selectedRange = getRangeIndexes(sheet.selectedRange);
                var sRange = getSwapRange(selectedRange);
                var mergeArgs = { range: sRange, isActiveCell: false, skipChecking: true };
                _this.parent.notify(mergedRange, mergeArgs);
                if (mergeArgs.isActiveCell || (sRange[0] === sRange[2] && sRange[1] === sRange[3])) {
                    return;
                }
                if (sheet.frozenRows || sheet.frozenColumns) {
                    setPosition(_this.parent, ele, selectedRange);
                    return;
                }
                var rowStart = sRange[0];
                var rowEnd = sRange[2];
                if (rowStart <= args.rowIdx && rowEnd >= args.rowIdx && ele) {
                    ele.style.height = parseFloat(ele.style.height) + args.threshold + "px";
                }
                else if (rowStart > args.rowIdx && ele) {
                    ele.style.top = parseFloat(ele.style.top) + args.threshold + "px";
                }
            }
        });
    };
    Selection.prototype.colWidthChanged = function (args) {
        var _this = this;
        if (!args.threshold) {
            return;
        }
        getUpdateUsingRaf(function () {
            var sheet = _this.parent.getActiveSheet();
            var ele = _this.getActiveCell();
            if (ele) {
                var cellIndex = getCellIndexes(_this.parent.getActiveSheet().activeCell);
                if (sheet.frozenRows || sheet.frozenColumns) {
                    var mergeArgs = { range: [cellIndex[0], cellIndex[1], cellIndex[0], cellIndex[1]] };
                    _this.parent.notify(activeCellMergedRange, mergeArgs);
                    setPosition(_this.parent, ele, mergeArgs.range, 'e-active-cell');
                }
                else {
                    if (cellIndex[1] === args.colIdx) {
                        ele.style.width = parseFloat(ele.style.width) + args.threshold + "px";
                    }
                    else if (cellIndex[1] > args.colIdx) {
                        ele.style.left = parseFloat(ele.style.left) + args.threshold + "px";
                    }
                }
            }
            ele = _this.getSelectionElement();
            var selectedRange = getRangeIndexes(_this.parent.getActiveSheet().selectedRange);
            var sRange = getSwapRange(selectedRange);
            var e = { range: sRange, isActiveCell: false, skipChecking: true };
            _this.parent.notify(mergedRange, e);
            if (e.isActiveCell || (sRange[0] === sRange[2] && sRange[1] === sRange[3])) {
                return;
            }
            if (sheet.frozenRows || sheet.frozenColumns) {
                setPosition(_this.parent, ele, selectedRange);
                return;
            }
            var colStart = sRange[1];
            var colEnd = sRange[3];
            if (colStart <= args.colIdx && colEnd >= args.colIdx && ele) {
                ele.style.width = parseFloat(ele.style.width) + args.threshold + "px";
            }
            else if (colStart > args.colIdx && ele) {
                ele.style.left = parseFloat(ele.style.left) + args.threshold + "px";
            }
        });
    };
    Selection.prototype.selectRange = function (args) {
        args.address = this.parent.selectionSettings.mode === 'Single' ? getRangeAddress(getCellIndexes(args.address)) : args.address;
        this.selectMultiRange(args.address, null, null, args.skipChecking);
    };
    Selection.prototype.init = function () {
        this.createSelectionElement();
        var sheet = this.parent.getActiveSheet();
        var sRange = getSwapRange(getRangeIndexes(sheet.selectedRange));
        var actRange = getCellIndexes(sheet.activeCell);
        var inRange = sRange[0] <= actRange[0] && sRange[2] >= actRange[0] && sRange[1] <= actRange[1]
            && sRange[3] >= actRange[1];
        this.selectMultiRange(sheet.selectedRange, true, inRange);
    };
    Selection.prototype.selectMultiRange = function (address, isInit, inRange, skipChecking) {
        var _this = this;
        var sheetIdx = this.parent.activeSheetIndex;
        if (address.indexOf('!') > -1) {
            sheetIdx = getSheetIndex(this.parent, getSheetNameFromAddress(address));
            address = address.split('!')[1];
        }
        if (this.parent.activeSheetIndex === sheetIdx) {
            address.split(' ').forEach(function (rng, idx) {
                _this.selectRangeByIdx(getRangeIndexes(rng), { type: 'mousedown', ctrlKey: idx === 0 ? false : true }, null, inRange, isInit, skipChecking);
            });
        }
        else {
            updateSelectedRange(this.parent, address, this.parent.sheets[sheetIdx]);
        }
    };
    Selection.prototype.createSelectionElement = function () {
        var content = this.parent.getMainContent();
        var ele = this.parent.createElement('div', { className: 'e-selection' });
        content.appendChild(ele);
        ele = this.parent.createElement('div', { className: 'e-active-cell' });
        content.appendChild(ele);
    };
    Selection.prototype.mouseDownHandler = function (e) {
        if (closest(e.target, '.e-scrollbar') || e.target.classList.contains('e-main-panel') ||
            e.target.classList.contains('e-sheet')) {
            return;
        }
        var eventArgs = { action: 'getCurrentEditValue', editedValue: '' };
        this.parent.notify(editOperation, eventArgs);
        var isFormulaEdit = checkIsFormula(eventArgs.editedValue, true);
        if (!this.parent.isEdit || isFormulaEdit) {
            var overlayElem = document.getElementById(this.parent.element.id + '_overlay');
            if (typeof (e.target.className) === 'string') {
                if (e.target.className.indexOf('e-ss-overlay') > -1) {
                    return;
                }
            }
            else if (overlayElem) {
                overlayElem.classList.remove('e-ss-overlay-active');
            }
            if (closest(e.target, '.e-datavisualization-chart')) {
                return;
            }
            if (this.parent.getActiveSheet().isProtected && !this.parent.getActiveSheet().protectSettings.selectCells) {
                return;
            }
            if (!closest(e.target, '.e-findtool-dlg')) {
                if (this.getSheetElement().contains(e.target) && !e.target.classList.contains('e-colresize')
                    && !e.target.classList.contains('e-rowresize')) {
                    var sheet = this.parent.getActiveSheet();
                    var mode = this.parent.selectionSettings.mode;
                    var rowIdx = this.getRowIdxFromClientY({ clientY: getClientY(e), target: e.target });
                    var colIdx = this.getColIdxFromClientX({ clientX: getClientX(e), target: e.target });
                    var activeIdx = getCellIndexes(sheet.activeCell);
                    var isRowSelected = void 0;
                    var isColSelected = void 0;
                    if (sheet.showHeaders) {
                        var trgt = e.target;
                        if (sheet.frozenColumns || sheet.frozenRows) {
                            var headerEle = this.parent.getSelectAllContent().querySelector('thead');
                            if (headerEle) {
                                isColSelected = (this.parent.getColumnHeaderContent().contains(trgt) || headerEle.contains(trgt)) &&
                                    trgt.classList.contains('e-header-cell');
                            }
                            else {
                                isColSelected = this.parent.getColumnHeaderContent().contains(trgt) &&
                                    trgt.classList.contains('e-header-cell');
                            }
                            headerEle = this.parent.getSelectAllContent().querySelector('tbody');
                            if (headerEle) {
                                isRowSelected = (this.parent.getRowHeaderContent().contains(trgt) || headerEle.contains(trgt)) &&
                                    trgt.classList.contains('e-header-cell');
                            }
                            else {
                                isRowSelected = this.parent.getRowHeaderContent().contains(trgt) &&
                                    trgt.classList.contains('e-header-cell');
                            }
                        }
                        else {
                            isRowSelected = this.parent.getRowHeaderContent().contains(e.target);
                            isColSelected = this.parent.getColumnHeaderContent().contains(e.target);
                        }
                    }
                    if (e.which === 3 && this.isSelected(rowIdx, colIdx)) {
                        return;
                    }
                    if (e.target.classList.contains('e-autofill')) {
                        if (this.parent.element.querySelector('.e-dragfill-ddb:not(.e-hide)')) {
                            return;
                        }
                        else {
                            this.isautoFillClicked = true;
                            this.dAutoFillCell = sheet.selectedRange;
                        }
                    }
                    var topLeftIdx = getRangeIndexes(sheet.topLeftCell);
                    var range = void 0;
                    if (isRowSelected) {
                        this.isRowSelected = true;
                        if (!e.shiftKey || mode === 'Single') {
                            this.startCell = [rowIdx, 0];
                        }
                        range = [this.startCell[0], sheet.frozenColumns ? topLeftIdx[1] : 0, rowIdx, sheet.colCount - 1];
                    }
                    else if (isColSelected) {
                        this.isColSelected = true;
                        if (!e.shiftKey || mode === 'Single') {
                            this.startCell = [0, colIdx];
                        }
                        range = [sheet.frozenRows ? topLeftIdx[0] : 0, this.startCell[1], sheet.rowCount - 1, colIdx];
                    }
                    else if (closest(e.target, '.e-select-all-cell')) {
                        this.startCell = [sheet.frozenRows ? topLeftIdx[0] : 0, sheet.frozenColumns ? topLeftIdx[1] : 0];
                        range = [].concat(this.startCell, [sheet.rowCount - 1, sheet.colCount - 1]);
                    }
                    else if (!e.target.classList.contains('e-sheet-content')) {
                        if (!e.shiftKey || mode === 'Single') {
                            this.startCell = [rowIdx, colIdx];
                        }
                        if (!this.isautoFillClicked && !closest(e.target, '.e-filloption')) {
                            range = [].concat(this.startCell ? this.startCell : getCellIndexes(sheet.activeCell), [rowIdx, colIdx]);
                        }
                    }
                    var preventEvt = e.ctrlKey && range && sheet.selectedRange.includes(getRangeAddress(range));
                    if (!preventEvt && mode === 'Multiple' && (!isTouchEnd(e) && (!isTouchStart(e) ||
                        (isTouchStart(e) && activeIdx[0] === rowIdx && activeIdx[1] === colIdx)) || isColSelected || isRowSelected)) {
                        document.addEventListener(getMoveEvent().split(' ')[0], this.mouseMoveEvt);
                        if (!Browser.isPointer) {
                            document.addEventListener(getMoveEvent().split(' ')[1], this.mouseMoveEvt, { passive: false });
                        }
                        this.touchSelectionStarted = true;
                    }
                    else {
                        this.touchSelectionStarted = false;
                    }
                    if (!preventEvt && !isTouchEnd(e)) {
                        EventHandler.add(document, getEndEvent(), this.mouseUpHandler, this);
                    }
                    if (isTouchStart(e) && !(isColSelected || isRowSelected)) {
                        this.touchEvt = e;
                        return;
                    }
                    if (range) {
                        this.selectRangeByIdx(range, e);
                    }
                    if (this.parent.isMobileView()) {
                        this.parent.element.classList.add('e-mobile-focused');
                        this.parent.renderModule.setSheetPanelSize();
                    }
                }
            }
        }
        if (isFormulaEdit && (e.target.classList.contains('e-cell') ||
            e.target.classList.contains('e-header-cell')) && this.parent.isEdit) {
            var range = this.parent.getActiveSheet().selectedRange;
            range = isSingleCell(getIndexesFromAddress(range)) ? range.split(':')[0] : range;
            this.parent.notify(addressHandle, { range: range, isSelect: false });
        }
    };
    Selection.prototype.mouseMoveHandler = function (e) {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        if (isTouchMove(e)) {
            e.preventDefault();
        }
        var eventArgs = { action: 'getCurrentEditValue', editedValue: '' };
        this.parent.notify(editOperation, eventArgs);
        var isFormulaEdit = checkIsFormula(eventArgs.editedValue, true);
        var verticalContent = this.parent.getMainContent().parentElement;
        var horizontalContent = this.parent.element.getElementsByClassName('e-scroller')[0];
        var clientRect = verticalContent.getBoundingClientRect();
        var frozenCol = this.parent.frozenColCount(sheet);
        var left = clientRect.left + this.parent.sheetModule.getRowHeaderWidth(sheet);
        var top = clientRect.top;
        var right = clientRect.right;
        var bottom = clientRect.bottom;
        var clientX = getClientX(e);
        var clientY = getClientY(e);
        // remove math.min or handle top and left auto scroll
        var colIdx = this.isRowSelected ? sheet.colCount - 1 :
            this.getColIdxFromClientX({ clientX: Math.min(clientX, right), target: e.target });
        var rowIdx = this.isColSelected ? sheet.rowCount - 1 :
            this.getRowIdxFromClientY({ clientY: Math.min(clientY, bottom), target: e.target });
        var prevIndex;
        if (e.ctrlKey) {
            var selRanges = sheet.selectedRange.split(' ');
            prevIndex = getRangeIndexes(selRanges[selRanges.length - 1]);
        }
        else {
            prevIndex = getRangeIndexes(sheet.selectedRange);
        }
        var mergeArgs = { range: [rowIdx, colIdx, rowIdx, colIdx] };
        this.parent.notify(activeCellMergedRange, mergeArgs);
        if (mergeArgs.range[2] === prevIndex[2] && mergeArgs.range[3] === prevIndex[3]) {
            return;
        }
        var frozenRow = this.parent.frozenRowCount(sheet);
        var isScrollDown = clientY > bottom && rowIdx < sheet.rowCount;
        var isScrollUp = clientY < top && rowIdx >= 0 && !this.isColSelected && !!verticalContent.scrollTop;
        var isScrollRight = clientX > right && colIdx < sheet.colCount;
        var isScrollLeft = clientX < left && colIdx >= 0 && !this.isRowSelected && !!horizontalContent.scrollLeft;
        this.clearInterval();
        var scrollUpRowIdx;
        var scrollUpColIdx;
        if (!isFormulaEdit && !this.isColSelected && !this.isRowSelected) {
            prevIndex = getCellIndexes(sheet.activeCell);
        }
        if (isScrollDown || isScrollUp || isScrollRight || isScrollLeft) {
            if (isScrollUp || isScrollLeft) {
                scrollUpRowIdx = rowIdx;
                scrollUpColIdx = colIdx;
            }
            this.scrollInterval = setInterval(function () {
                if ((isScrollDown || isScrollUp) && !_this.isColSelected) {
                    rowIdx = _this.getRowIdxFromClientY({ clientY: isScrollDown ? bottom : top });
                    if (rowIdx >= sheet.rowCount) { // clear interval when scroll up
                        _this.clearInterval();
                        return;
                    }
                    verticalContent.scrollTop += (isScrollDown ? 1 : -1) * getRowHeight(sheet, rowIdx);
                }
                if ((isScrollRight || isScrollLeft) && !_this.isRowSelected) {
                    colIdx = _this.getColIdxFromClientX({ clientX: isScrollRight ? right : left });
                    if (colIdx >= sheet.colCount) { // clear interval when scroll left
                        _this.clearInterval();
                        return;
                    }
                    horizontalContent.scrollLeft += (isScrollRight ? 1 : -1) * getColumnWidth(sheet, colIdx);
                }
                if ((isScrollUp && !verticalContent.scrollTop) || (isScrollLeft && !horizontalContent.scrollLeft)) {
                    _this.selectRangeByIdx([].concat(prevIndex[0], prevIndex[1], [scrollUpRowIdx, scrollUpColIdx]), e);
                    _this.clearInterval();
                    return;
                }
                _this.selectRangeByIdx([].concat(prevIndex[0], prevIndex[1], [rowIdx, colIdx]), e);
            }, 100);
        }
        else {
            var indexes = [].concat(prevIndex[0], prevIndex[1], [rowIdx, colIdx]);
            if (frozenRow && indexes[0] < frozenRow && indexes[2] >= frozenRow && verticalContent.scrollTop) {
                verticalContent.scrollTop = 0;
                indexes[2] = frozenRow;
            }
            if (frozenCol && indexes[1] < frozenCol && indexes[3] >= frozenCol && horizontalContent.scrollLeft) {
                horizontalContent.scrollLeft = 0;
                indexes[3] = frozenCol;
            }
            if (this.isautoFillClicked) {
                var args = { e: e, indexes: null };
                this.parent.notify(selectAutoFillRange, args);
                indexes = args.indexes;
            }
            this.selectRangeByIdx(indexes, e);
        }
        if (isFormulaEdit && this.parent.isEdit && !closest(e.target, '#' + this.parent.element.id + '_edit')) {
            var range = this.parent.getActiveSheet().selectedRange;
            this.parent.notify(addressHandle, { range: range, isSelect: false });
        }
    };
    Selection.prototype.mouseUpHandler = function (e) {
        var rowIdx = this.getRowIdxFromClientY({ clientY: getClientY(e), target: e.target });
        var colIdx = this.getColIdxFromClientX({ clientX: getClientX(e), target: e.target });
        this.clearInterval();
        if (isTouchEnd(e) && !(this.isColSelected || this.isRowSelected) &&
            (this.getRowIdxFromClientY({ clientY: getClientY(this.touchEvt), target: e.target }) === rowIdx &&
                this.getColIdxFromClientX({ clientX: getClientX(this.touchEvt), target: e.target }) === colIdx)) {
            this.mouseDownHandler(e);
        }
        document.removeEventListener(getMoveEvent().split(' ')[0], this.mouseMoveEvt);
        if (!Browser.isPointer) {
            document.removeEventListener(getMoveEvent().split(' ')[1], this.mouseMoveEvt);
        }
        EventHandler.remove(document, getEndEvent(), this.mouseUpHandler);
        this.parent.notify(mouseUpAfterSelection, e);
        if (this.isautoFillClicked) {
            var sheet = this.parent.getActiveSheet();
            var indexes = getRangeIndexes(sheet.selectedRange);
            if (!(this.isColSelected && indexes[1] === colIdx) && !(this.isRowSelected && indexes[0] === rowIdx)) {
                this.parent.notify(performAutoFill, { event: e, dAutoFillCell: this.dAutoFillCell });
            }
            this.isautoFillClicked = false;
        }
        else if (!e.ctrlKey && !isDiscontinuousRange(getSelectedRange(this.parent.getActiveSheet()))) {
            this.parent.notify(positionAutoFillElement, null);
        }
        else {
            this.parent.notify(hideAutoFillElement, null);
        }
        var eventArgs = { action: 'getCurrentEditValue', editedValue: '' };
        this.parent.notify(editOperation, eventArgs);
        var isFormulaEdit = checkIsFormula(eventArgs.editedValue) ||
            (eventArgs.editedValue && eventArgs.editedValue.toString().indexOf('=') === 0);
        if (isFormulaEdit && this.parent.isEdit) {
            this.parent.notify(initiateCur, { isCellEdit: e.target.classList.contains('e-spreadsheet-edit') });
        }
    };
    Selection.prototype.isSelected = function (rowIdx, colIdx) {
        var isSelected = false;
        var indexes;
        var ranges = this.parent.getActiveSheet().selectedRange.split(' ');
        for (var i = 0; i < ranges.length; i++) {
            indexes = getSwapRange(getRangeIndexes(ranges[i]));
            if (indexes[0] <= rowIdx && rowIdx <= indexes[2] && indexes[1] <= colIdx && colIdx <= indexes[3]) {
                isSelected = true;
                break;
            }
        }
        return isSelected;
    };
    Selection.prototype.virtualContentLoadedHandler = function (args) {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        var indexes = getRangeIndexes(sheet.selectedRange);
        var isColSelected;
        var isRowSelected;
        sheet.selectedRange.split(' ').forEach(function (rng, idx) {
            indexes = getRangeIndexes(rng);
            isRowSelected = (indexes[1] === 0 && indexes[3] === args.prevRowColCnt.colCount - 1);
            isColSelected = (indexes[0] === 0 && indexes[2] === args.prevRowColCnt.rowCount - 1);
            if (isColSelected && isRowSelected) {
                _this.selectRangeByIdx([0, 0, sheet.rowCount - 1, sheet.colCount - 1], null, true, null, null, null, idx);
            }
            else if (isColSelected) {
                _this.selectRangeByIdx([0, indexes[1], sheet.rowCount - 1, indexes[3]], null, true, null, null, null, idx);
            }
            else if (isRowSelected) {
                _this.selectRangeByIdx([indexes[0], 0, indexes[2], sheet.colCount - 1], null, true, null, null, null, idx);
            }
            else {
                indexes = getRangeIndexes(rng);
                _this.highlightHdr(indexes, idx === 0 ? false : true, indexes[0] >= _this.parent.viewport.topIndex || indexes[2] >= _this.parent.viewport.topIndex, indexes[1] >= _this.parent.viewport.leftIndex || indexes[3] >= _this.parent.viewport.leftIndex);
            }
        });
    };
    Selection.prototype.clearInterval = function () {
        clearInterval(this.scrollInterval);
        this.scrollInterval = null;
    };
    Selection.prototype.getScrollLeft = function () {
        return this.parent.scrollModule ? this.parent.scrollModule.prevScroll.scrollLeft : 0;
    };
    Selection.prototype.cellNavigateHandler = function (args) {
        var sheet = this.parent.getActiveSheet();
        if (sheet.isProtected && !sheet.protectSettings.selectCells) {
            return;
        }
        this.selectRangeByIdx(args.range.concat(args.range), undefined, false, false, false, false, undefined, args.preventAnimation);
    };
    Selection.prototype.getColIdxFromClientX = function (e) {
        var width = 0;
        var sheet = this.parent.getActiveSheet();
        var left = 0;
        if (e.isImage) {
            left = e.clientX;
        }
        else {
            var cliRect = document.getElementById(this.parent.element.id + '_sheet').getBoundingClientRect();
            if (this.parent.enableRtl) {
                left = (cliRect.right - this.parent.sheetModule.getRowHeaderWidth(sheet, true) - 1) - e.clientX;
            }
            else {
                left = e.clientX - (cliRect.left + this.parent.sheetModule.getRowHeaderWidth(sheet, true) + 1);
            }
            left += this.parent.viewport.beforeFreezeWidth;
            if (!e.target || (!closest(e.target, '.e-row-header') && !closest(e.target, '.e-selectall-container')) ||
                this.isScrollableArea(e.clientX, e.target, true)) {
                left += this.getScrollLeft();
            }
        }
        for (var i = 0;; i++) {
            width += getColumnWidth(sheet, i, null, true);
            if (left < width || (this.parent.scrollSettings.isFinite && i === sheet.colCount - 1)) {
                if (!e.isImage) {
                    e.size = left;
                }
                e.clientX = i;
                return i;
            }
        }
    };
    Selection.prototype.isScrollableArea = function (offset, target, isclientX) {
        if (!target.classList.contains('e-table')) {
            return false;
        }
        if (isclientX) {
            return offset > this.parent.getMainContent().getBoundingClientRect().left;
        }
        else {
            return offset > this.parent.getMainContent().parentElement.getBoundingClientRect().top;
        }
    };
    Selection.prototype.getRowIdxFromClientY = function (args) {
        var height = 0;
        var sheet = this.parent.getActiveSheet();
        var top = 0;
        if (args.isImage) {
            top = args.clientY;
        }
        else {
            var sheetEle = document.getElementById(this.parent.element.id + '_sheet');
            top = args.clientY + this.parent.viewport.beforeFreezeHeight -
                (sheetEle.getBoundingClientRect().top + (sheet.showHeaders ? 31 : 0));
            if (!args.target || !closest(args.target, '.e-header-panel') || this.isScrollableArea(args.clientY, args.target)) {
                top += this.parent.getMainContent().parentElement.scrollTop;
            }
        }
        for (var i = 0;; i++) {
            height += getRowHeight(sheet, i, true);
            if (top < height || (this.parent.scrollSettings.isFinite && i === sheet.rowCount - 1)) {
                if (!args.isImage) {
                    args.size = top;
                }
                args.clientY = i;
                return i;
            }
        }
    };
    Selection.prototype.initFormulaReferenceIndicator = function (range) {
        if (this.parent.isEdit) {
            var forRefIndicator = this.parent.createElement('div', { className: 'e-formularef-indicator' });
            forRefIndicator.appendChild(this.parent.createElement('div', { className: 'e-top' }));
            forRefIndicator.appendChild(this.parent.createElement('div', { className: 'e-bottom' }));
            forRefIndicator.appendChild(this.parent.createElement('div', { className: 'e-left' }));
            forRefIndicator.appendChild(this.parent.createElement('div', { className: 'e-right' }));
            this.parent.getMainContent().appendChild(forRefIndicator);
            setPosition(this.parent, forRefIndicator, range, 'e-formularef-indicator');
        }
    };
    Selection.prototype.selectRangeByIdx = function (range, e, isScrollRefresh, isActCellChanged, isInit, skipChecking, selectedRowColIdx, preventAnimation) {
        var _this = this;
        if (e && e.target && closest(e.target, '#' + this.parent.element.id + '_edit')) {
            return;
        }
        var eventArgs = { action: 'getCurrentEditValue', editedValue: '',
            endFormulaRef: false };
        this.parent.notify(editOperation, eventArgs);
        var isFormulaEdit = checkIsFormula(eventArgs.editedValue, true) && !eventArgs.endFormulaRef;
        var isMultiRange = e && e.ctrlKey && isMouseDown(e);
        var ele;
        if (!isMultiRange) {
            ele = this.getSelectionElement(e, selectedRowColIdx);
        }
        var sheet = this.parent.getActiveSheet();
        var formulaRefIndicator = this.parent.element.querySelector('.e-formularef-indicator');
        var mergeArgs = { range: [].slice.call(range), isActiveCell: false, skipChecking: skipChecking };
        var isMergeRange;
        var overlayEle = document.querySelector('.e-datavisualization-chart.e-ss-overlay-active');
        if (!this.isColSelected && !this.isRowSelected) {
            this.parent.notify(mergedRange, mergeArgs);
        }
        if (range !== mergeArgs.range) {
            isMergeRange = true;
        }
        range = mergeArgs.range;
        var promise = new Promise(function (resolve) { resolve((function () { })()); });
        var args = { range: getRangeAddress(range), cancel: false };
        this.parent.trigger('beforeSelect', args);
        if (args.cancel) {
            return;
        }
        if (isFormulaEdit && formulaRefIndicator) {
            formulaRefIndicator.parentElement.removeChild(formulaRefIndicator);
        }
        this.parent.notify(hideAutoFillOptions, null);
        if ((isSingleCell(range) || mergeArgs.isActiveCell) && !isMultiRange) {
            if (ele) {
                if (!ele.classList.contains('e-multi-range')) {
                    ele.classList.add('e-hide');
                }
                if (sheet.frozenRows || sheet.frozenColumns) {
                    removeRangeEle(this.parent.getSelectAllContent(), null, 'e-selection');
                    removeRangeEle(this.parent.getColumnHeaderContent(), null, 'e-selection');
                    removeRangeEle(this.parent.getRowHeaderContent(), null, 'e-selection');
                }
            }
            if (!sheet.frozenColumns && !sheet.frozenRows && ele) {
                setPosition(this.parent, ele, range);
            }
            if (isFormulaEdit && e && e.target && !e.target.classList.contains('e-spreadsheet-edit')
                && this.parent.isEdit) {
                this.parent.notify(addressHandle, { range: getRangeAddress(range).split(':')[0], isSelect: true });
                this.initFormulaReferenceIndicator(range);
            }
        }
        else {
            if (isMultiRange) {
                if (selectedRowColIdx === undefined) {
                    var selRange_1 = getRangeAddress(range);
                    if (sheet.selectedRange.includes(selRange_1)) {
                        var selRanges = sheet.selectedRange.split(' ');
                        if (selRanges.length > 1) {
                            selRanges.splice(selRanges.indexOf(selRange_1), 1);
                            selRange_1 = selRanges.join(' ');
                        }
                        else {
                            selRange_1 = sheet.activeCell + ':' + sheet.activeCell;
                        }
                        this.selectRange({ address: selRange_1 });
                        return;
                    }
                    else {
                        ele = this.getSelectionElement(e, selectedRowColIdx);
                    }
                }
                else {
                    ele = this.getSelectionElement(e, selectedRowColIdx);
                }
            }
            if (isFormulaEdit && this.parent.isEdit) {
                if (e && e.target && !e.target.classList.contains('e-spreadsheet-edit') && this.parent.isEdit) {
                    this.parent.notify(addressHandle, { range: getRangeAddress(range), isSelect: true });
                    this.initFormulaReferenceIndicator(range);
                }
            }
            else {
                if (ele) {
                    ele.classList.remove('e-hide');
                }
                var offset = (this.isColSelected && this.isRowSelected) ? undefined
                    : this.getOffset(range[2], range[3]);
                if (isMergeRange && offset) { // Need to handle half hidden merge cell in better way
                    offset.left = { idx: 0, size: 0 };
                }
                promise = setPosition(this.parent, ele, range, undefined) || promise;
            }
        }
        var eArgs = { action: 'getCurrentEditSheetIdx', sheetIndex: null };
        this.parent.notify(editOperation, eArgs);
        var selRange = getRangeAddress(range);
        if (e && e.ctrlKey && (isMouseMove(e) || isMouseUp(e))) {
            selRange = sheet.selectedRange.slice(0, sheet.selectedRange.lastIndexOf(' ')) + ' ' + selRange;
        }
        else if (selectedRowColIdx > -1) {
            var selRanges = sheet.selectedRange.split(' ');
            selRanges[selectedRowColIdx] = selRange;
            selRange = selRanges.join(' ');
        }
        if (!isFormulaEdit && !this.isautoFillClicked) {
            var isSelectRangeChange = false;
            if (sheet.selectedRange !== selRange) {
                isSelectRangeChange = true;
            }
            updateSelectedRange(this.parent, selRange, sheet, isMultiRange);
            if (isSelectRangeChange) {
                promise.then(function () {
                    _this.parent.trigger('select', { range: _this.parent.getActiveSheet().selectedRange });
                });
            }
        }
        else if (!isInit && !this.isautoFillClicked) {
            updateSelectedRange(this.parent, selRange, sheet, isMultiRange);
        }
        this.UpdateRowColSelected(range);
        this.highlightHdr(range, e && e.ctrlKey);
        if (!isScrollRefresh && !(e && (e.type === 'mousemove' || isTouchMove(e)))) {
            if (!isFormulaEdit) {
                this.updateActiveCell(isActCellChanged ? getRangeIndexes(sheet.activeCell) : range, isInit, preventAnimation);
            }
            else if (eArgs.sheetIndex === this.parent.getActiveSheet().id - 1 && isInit) {
                isActCellChanged = true;
                this.updateActiveCell(isActCellChanged ? getRangeIndexes(sheet.activeCell) : range, isInit, preventAnimation);
            }
            else if (!this.parent.isEdit) {
                this.updateActiveCell(isActCellChanged ? getRangeIndexes(sheet.activeCell) : range, isInit, preventAnimation);
            }
        }
        if (isNullOrUndefined(e)) {
            e = { type: 'mousedown' };
        }
        if (!isFormulaEdit) {
            this.parent.notify(selectionComplete, e);
        }
        else if (!isInit) {
            this.parent.notify(selectionComplete, e);
        }
        if (!isMultiRange && !isDiscontinuousRange(getSelectedRange(this.parent.getActiveSheet()))) {
            this.parent.notify(positionAutoFillElement, { preventAnimation: preventAnimation });
        }
        else {
            this.parent.notify(hideAutoFillElement, null);
        }
        if (this.parent.showAggregate) {
            this.parent.notify(showAggregate, {});
        }
        this.parent.notify(refreshImgElem, {});
        if (overlayEle) {
            this.parent.notify(removeDesignChart, {});
        }
        this.parent.notify(clearChartBorder, {});
    };
    Selection.prototype.UpdateRowColSelected = function (indexes) {
        var sheet = this.parent.getActiveSheet();
        this.isRowSelected = (indexes[1] === 0 && indexes[3] === sheet.colCount - 1);
        this.isColSelected = (indexes[0] === 0 && indexes[2] === sheet.rowCount - 1);
    };
    Selection.prototype.updateActiveCell = function (range, isInit, preventAnimation) {
        var sheet = this.parent.getActiveSheet();
        var topLeftIdx = getRangeIndexes(sheet.topLeftCell);
        var rowIdx;
        var colIdx;
        var isMergeRange;
        if (this.isColSelected) {
            rowIdx = topLeftIdx[0];
            colIdx = range[1];
            if (this.isRowSelected) {
                colIdx = topLeftIdx[1];
            }
        }
        else {
            rowIdx = range[0];
            colIdx = range[1];
            if (this.isRowSelected) {
                colIdx = topLeftIdx[1];
            }
        }
        var mergeArgs = { range: [rowIdx, colIdx].concat([rowIdx, colIdx]) };
        this.parent.notify(activeCellMergedRange, mergeArgs);
        if (range !== mergeArgs.range) {
            isMergeRange = true;
        }
        range = mergeArgs.range;
        if (sheet.activeCell !== getCellAddress(range[0], range[1]) || isInit) {
            this.parent.setSheetPropertyOnMute(sheet, 'activeCell', getCellAddress(range[0], range[1]));
            if (sheet.isProtected) {
                var element = this.parent.element.querySelector('.e-formula-bar');
                var cell = getCell(range[0], range[1], sheet);
                var isCellLocked = isLocked(cell, getColumn(sheet, range[1]));
                if (isCellLocked && element && !element.disabled) {
                    element.disabled = true;
                }
                else if (!isCellLocked && element && element.disabled) {
                    element.disabled = false;
                }
            }
            if (this.getActiveCell()) {
                var offset = this.getOffset(range[2], range[3]);
                if (isMergeRange) {
                    offset.left = { idx: 0, size: 0 };
                }
                setPosition(this.parent, this.getActiveCell(), range, 'e-active-cell', preventAnimation);
            }
            this.parent.notify(activeCellChanged, null);
        }
        else {
            setPosition(this.parent, this.getActiveCell(), range, 'e-active-cell', preventAnimation);
        }
    };
    Selection.prototype.getOffset = function (rowIdx, colIdx) {
        var offset = { left: { idx: 0, size: 0 }, top: { idx: 0, size: 0 } };
        if (this.parent.scrollModule) {
            if (colIdx >= this.parent.scrollModule.offset.left.idx) {
                offset.left = this.parent.scrollModule.offset.left;
            }
            if (rowIdx >= this.parent.scrollModule.offset.top.idx) {
                offset.top = this.parent.scrollModule.offset.top;
            }
        }
        return offset;
    };
    Selection.prototype.getSelectionElement = function (e, selectedRowColIdx) {
        if (e && e.ctrlKey) {
            if (isMouseUp(e) || isMouseMove(e)) {
                return this.parent.getMainContent().querySelector('.e-selection:last-child');
            }
            else {
                var selElem = this.parent.getMainContent().getElementsByClassName('e-selection')[0];
                selElem.classList.remove('e-hide');
                var ele = selElem.cloneNode();
                ele.classList.add('e-multi-range');
                return this.parent.getMainContent().appendChild(ele);
            }
        }
        else if (selectedRowColIdx > -1) {
            return this.parent.getMainContent().getElementsByClassName('e-selection')[selectedRowColIdx];
        }
        else {
            var elems = [].slice.call(this.parent.element.getElementsByClassName('e-multi-range'));
            elems.forEach(function (ele) {
                remove(ele);
            });
            return this.parent.getMainContent().getElementsByClassName('e-selection')[0];
        }
    };
    Selection.prototype.getActiveCell = function () {
        return this.parent.getMainContent().getElementsByClassName('e-active-cell')[0];
    };
    Selection.prototype.getSheetElement = function () {
        return document.getElementById(this.parent.element.id + '_sheet');
    };
    Selection.prototype.highlightHdr = function (range, isMultiRange, isRowRefresh, isColRefresh) {
        if (isRowRefresh === void 0) { isRowRefresh = true; }
        if (isColRefresh === void 0) { isColRefresh = true; }
        if (this.parent.getActiveSheet().showHeaders) {
            var sheet = this.parent.getActiveSheet();
            var rowHdr = [];
            var colHdr = [];
            var swapRange = getSwapRange(range);
            swapRange = this.getHdrIndexes(swapRange);
            var selectAll$$1 = this.parent.element.getElementsByClassName('e-select-all-cell')[0];
            if (!isMultiRange) {
                removeClass(this.getSheetElement().querySelectorAll('.e-highlight'), 'e-highlight');
                removeClass(this.getSheetElement().querySelectorAll('.e-prev-highlight'), 'e-prev-highlight');
            }
            if (selectAll$$1) {
                removeClass([selectAll$$1], ['e-prev-highlight-right', 'e-prev-highlight-bottom']);
            }
            if (isRowRefresh) {
                var frozenRow = this.parent.frozenRowCount(sheet);
                var selectAll_1;
                var td = void 0;
                var selectAllHdr = this.parent.getSelectAllContent().querySelector('tbody');
                if (selectAllHdr) {
                    selectAll_1 = [].slice.call(selectAllHdr.querySelectorAll('.e-header-cell'));
                }
                var header = [].slice.call(this.parent.getRowHeaderContent().querySelectorAll('.e-header-cell'));
                var topIndex = getCellIndexes(sheet.topLeftCell)[0];
                for (var i = swapRange[0]; i < swapRange[2] + 1; i++) {
                    if (i < frozenRow) {
                        td = selectAll_1[i - topIndex];
                    }
                    else {
                        td = header[i - frozenRow];
                    }
                    if (td) {
                        rowHdr.push(td);
                    }
                }
            }
            if (isColRefresh) {
                var frozenCol = this.parent.frozenColCount(sheet);
                var selectAll_2;
                var td = void 0;
                var selectAllHdr = this.parent.getSelectAllContent().querySelector('thead');
                if (selectAllHdr) {
                    selectAll_2 = [].slice.call(selectAllHdr.querySelectorAll('.e-header-cell'));
                }
                var header = [].slice.call(this.parent.getColumnHeaderContent().querySelectorAll('th'));
                var leftIndex = getCellIndexes(sheet.topLeftCell)[1];
                for (var i = swapRange[1]; i < swapRange[3] + 1; i++) {
                    if (i < frozenCol) {
                        td = selectAll_2[i - leftIndex];
                    }
                    else {
                        td = header[i - frozenCol];
                    }
                    if (td) {
                        colHdr.push(td);
                    }
                }
            }
            if (sheet.isProtected && !sheet.protectSettings.selectCells) {
                removeClass([].concat(rowHdr, colHdr), 'e-highlight');
            }
            else {
                addClass([].concat(rowHdr, colHdr), 'e-highlight');
            }
            if (rowHdr.length && rowHdr[0].parentElement.previousElementSibling) {
                rowHdr[0].parentElement.previousElementSibling.classList.add('e-prev-highlight');
            }
            if (colHdr.length && colHdr[0].previousElementSibling) {
                colHdr[0].previousElementSibling.classList.add('e-prev-highlight');
            }
            if (this.isRowSelected && this.isColSelected) {
                if (sheet.isProtected && !sheet.protectSettings.selectCells) {
                    document.getElementById(this.parent.element.id + "_select_all").classList.remove('e-highlight');
                }
                else {
                    document.getElementById(this.parent.element.id + "_select_all").classList.add('e-highlight');
                }
            }
            if (selectAll$$1) {
                if (swapRange[0] === 0) {
                    selectAll$$1.classList.add('e-prev-highlight-bottom');
                }
                if (swapRange[1] === 0) {
                    selectAll$$1.classList.add('e-prev-highlight-right');
                }
            }
        }
    };
    Selection.prototype.protectHandler = function () {
        var range = getRangeIndexes(this.parent.getActiveSheet().selectedRange);
        var swapRange = getSwapRange(range);
        var actRange = getCellIndexes(this.parent.getActiveSheet().activeCell);
        var inRange = swapRange[0] <= actRange[0] && swapRange[2] >= actRange[0] && swapRange[1] <= actRange[1]
            && swapRange[3] >= actRange[1];
        this.selectRangeByIdx(range, null, null, inRange);
    };
    Selection.prototype.getHdrIndexes = function (range) {
        if (this.parent.scrollSettings.enableVirtualization) {
            var indexes = [];
            var hiddenRowCount = this.parent.hiddenCount(this.parent.viewport.topIndex, range[0]);
            var hiddenColCount = this.parent.hiddenCount(this.parent.viewport.leftIndex, range[1], 'columns');
            indexes[0] = this.isColSelected ? range[0] : (range[0] - this.parent.viewport.topIndex) < 0
                ? 0 : ((range[0] - hiddenRowCount) - this.parent.viewport.topIndex);
            indexes[1] = this.isRowSelected ? range[1] : (range[1] - this.parent.viewport.leftIndex) < 0
                ? 0 : ((range[1] - hiddenColCount) - this.parent.viewport.leftIndex);
            indexes[2] = this.isColSelected ? this.parent.viewport.rowCount + this.parent.getThreshold('row') * 2 : range[2] -
                this.parent.hiddenCount(range[0], range[2]) - hiddenRowCount - this.parent.viewport.topIndex;
            indexes[3] = this.isRowSelected ? this.parent.viewport.colCount + this.parent.getThreshold('col') * 2 :
                range[3] - this.parent.hiddenCount(range[1], range[3], 'columns') - hiddenColCount - this.parent.viewport.leftIndex;
            return indexes;
        }
        return range;
    };
    Selection.prototype.initiateFormulaSelection = function (args) {
        this.processFormulaEditRange(args.range, args.formulaSheetIdx);
    };
    Selection.prototype.processFormulaEditRange = function (val, formulaStartSheetIdx) {
        var str;
        var formulaSheetIdx = formulaStartSheetIdx;
        var i = 0;
        var parsedVal = this.parseFormula(val);
        var len = parsedVal.length;
        var ctrlKeyCount = 0;
        var formulaBorder = [['e-vborderright', 'e-vborderbottom'], ['e-pborderright', 'e-pborderbottom'],
            ['e-cborderright', 'e-cborderbottom'], ['e-gborderright', 'e-gborderbottom'], ['e-oborderright', 'e-oborderbottom'],
            ['e-bborderright', 'e-bborderbottom']];
        this.clearBorder();
        var actSheetIdx = this.parent.getActiveSheet().id - 1;
        while (i < len) {
            str = parsedVal[i];
            if (this.invalidOperators.indexOf(str) > -1) {
                break;
            }
            if (isCellReference(str.toUpperCase())) {
                str = str.replace(/\$/g, '');
                if (i > 0) {
                    if (parsedVal[i - 1].indexOf('!') === parsedVal[i - 1].length - 1) {
                        var splitStr = parsedVal[i - 1].split('!');
                        formulaSheetIdx = getSheetIndex(this.parent, splitStr[0].substring(1, splitStr[0].length - 1));
                    }
                }
                if (parsedVal[i + 1] === ':') {
                    i++;
                    if (parsedVal[i + 1] && isCellReference(parsedVal[i + 1].toUpperCase())) {
                        str = str + ':' + parsedVal[i + 1];
                        i++;
                    }
                }
                if (actSheetIdx === formulaSheetIdx) {
                    this.updateFormulaEditRange(str, ctrlKeyCount, formulaBorder);
                }
                formulaSheetIdx = formulaStartSheetIdx;
                ctrlKeyCount++;
            }
            i++;
        }
    };
    Selection.prototype.updateFormulaEditRange = function (str, i, formulaBorder) {
        var indices = getRangeIndexes(str);
        this.formulaRange[i] = str;
        this.dStartCell = { rowIndex: indices[0], colIndex: indices[1] };
        this.dEndCell = { rowIndex: indices[2], colIndex: indices[3] };
        this.focusBorder(this.dStartCell, this.dEndCell, formulaBorder[i % 6]);
    };
    Selection.prototype.chartBorderHandler = function (args) {
        this.focusBorder(args.startcell, args.endcell, args.classes, true);
    };
    Selection.prototype.focusBorder = function (startcell, endcell, classes, isChart) {
        isChart = isNullOrUndefined(isChart) ? false : isChart;
        var range = getSwapRange([startcell.rowIndex, startcell.colIndex, endcell.rowIndex, endcell.colIndex]);
        var sheet = this.parent.getActiveSheet();
        if (sheet.frozenRows || sheet.frozenColumns) {
            var rangeReference = this.parent.createElement('div', {
                className: isChart ? 'e-range-indicator e-chart-range' : 'e-range-indicator e-formuala-range'
            });
            rangeReference.appendChild(this.parent.createElement('div', { className: 'e-top' }));
            rangeReference.appendChild(this.parent.createElement('div', { className: 'e-bottom' }));
            rangeReference.appendChild(this.parent.createElement('div', { className: 'e-left' }));
            rangeReference.appendChild(this.parent.createElement('div', { className: 'e-right' }));
            setPosition(this.parent, rangeReference, range, 'e-range-indicator');
            return;
        }
        var minr = range[0];
        var minc = range[1];
        var maxr = range[2];
        var maxc = range[3];
        if (minr) {
            (this.getEleFromRange([minr - 1, minc, minr - 1, maxc])).forEach(function (td) {
                if (td) {
                    td.classList.add(classes[1]);
                    if (!isChart) {
                        td.classList.add('e-formularef-selection');
                    }
                }
            }); // top
        }
        (this.getEleFromRange([minr, maxc, maxr, maxc])).forEach(function (td) {
            if (td) {
                td.classList.add(classes[0]);
                if (!isChart) {
                    td.classList.add('e-formularef-selection');
                }
            }
        }); // right
        this.getEleFromRange([maxr, minc, maxr, maxc]).forEach(function (td) {
            if (td) {
                td.classList.add(classes[1]);
                if (!isChart) {
                    td.classList.add('e-formularef-selection');
                }
            }
        }); // bottom
        if (minc) {
            (this.getEleFromRange([minr, minc - 1, maxr, minc - 1])).forEach(function (td) {
                if (td) {
                    td.classList.add(classes[0]);
                    if (!isChart) {
                        td.classList.add('e-formularef-selection');
                    }
                }
            }); // left
        }
    };
    Selection.prototype.getEleFromRange = function (range) {
        var startRIndex = range[0];
        var startCIndex = range[1];
        var endRIndex = range[2];
        var endCIndex = range[3];
        var i;
        var rowIdx;
        var temp;
        var tempCells = [];
        var rowCells;
        var cells = [];
        if (startRIndex > endRIndex) {
            temp = startRIndex;
            startRIndex = endRIndex;
            endRIndex = temp;
        }
        if (startCIndex > endCIndex) {
            temp = startCIndex;
            startCIndex = endCIndex;
            endCIndex = temp;
        }
        if (this.parent.scrollSettings.enableVirtualization) {
            for (i = startRIndex; i <= endRIndex; i++) {
                rowIdx = i;
                if (rowIdx > -1) {
                    var row = this.parent.getRow(rowIdx, null);
                    if (row) {
                        rowCells = row.getElementsByClassName('e-cell');
                        tempCells = (endCIndex === startCIndex) ?
                            [rowCells[endCIndex]] : this.getRowCells(rowCells, startCIndex, endCIndex + 1);
                        this.merge(cells, tempCells);
                    }
                }
            }
        }
        return cells;
    };
    Selection.prototype.getRowCells = function (rowCells, startCIndex, endCIndex) {
        var tdCol = [];
        for (startCIndex; startCIndex < endCIndex; startCIndex++) {
            if (rowCells[startCIndex]) {
                tdCol.push(rowCells[startCIndex]);
            }
        }
        return tdCol;
    };
    Selection.prototype.merge = function (first, second) {
        if (!first || !second) {
            return;
        }
        Array.prototype.push.apply(first, second);
    };
    Selection.prototype.clearBorder = function () {
        var sheet = this.parent.getActiveSheet();
        if (sheet.frozenColumns || sheet.frozenRows) {
            var formualIndicator = [].slice.call(this.parent.element.getElementsByClassName('e-formuala-range'));
            formualIndicator.forEach(function (indicator) { detach(indicator); });
            return;
        }
        var borderEleColl = this.parent.element.getElementsByClassName('e-formularef-selection');
        for (var idx = 0; idx < borderEleColl.length; idx++) {
            var td = borderEleColl[idx];
            var classArr = ['e-vborderright', 'e-vborderbottom', 'e-pborderright', 'e-pborderbottom',
                'e-cborderright', 'e-cborderbottom', 'e-gborderright', 'e-gborderbottom', 'e-oborderright',
                'e-oborderbottom', 'e-bborderright', 'e-bborderbottom'];
            for (var idx_1 = 0; idx_1 < classArr.length; idx_1++) {
                td.classList.remove(classArr[idx_1]);
            }
        }
        // for (let idx: number = 0; idx < borderEleColl.length; idx++) {
        //     const td: HTMLElement = borderEleColl[idx] as HTMLElement;
        // }
    };
    Selection.prototype.parseFormula = function (formulaStr) {
        var tempStr;
        var str;
        var i = 0;
        var arr = [];
        formulaStr = this.markSpecialChar(formulaStr.replace('=', ''));
        var formula = formulaStr.split(/\(|\)|=|\^|>|<|,|:|\+|-|\*|\/|%|&/g);
        var len = formula.length;
        while (i < len) {
            tempStr = formula[i];
            if (!tempStr) {
                i++;
                continue;
            }
            if (tempStr.length === 1) {
                arr.push(this.isUniqueChar(tempStr) ? this.getUniqueCharVal(tempStr) : tempStr);
            }
            else {
                str = tempStr[0];
                if (tempStr.indexOf('!') > 0) {
                    if (this.isUniqueChar(str)) {
                        arr.push(this.getUniqueCharVal(str));
                        tempStr = tempStr.substr(1);
                    }
                    var strVal = tempStr.indexOf('!') + 1;
                    arr.push(tempStr.substr(0, strVal));
                    arr.push(tempStr.substr(strVal));
                }
                else if (this.isUniqueChar(str)) {
                    arr.push(this.getUniqueCharVal(str));
                    arr.push(tempStr.substr(1));
                }
                else {
                    arr.push(tempStr);
                }
            }
            i++;
        }
        return arr;
    };
    Selection.prototype.isUniqueChar = function (str) {
        var code = str.charCodeAt(str.charAt[0]);
        return code >= 129 && code <= 142;
    };
    Selection.prototype.getUniqueCharVal = function (tempStr) {
        switch (tempStr) {
            case this.uniqueOBracket:
                return '(';
            case this.uniqueCBracket:
                return ')';
            case this.uniqueCOperator:
                return ':';
            case this.uniqueSOperator:
                return '-';
            case this.uniquePOperator:
                return '+';
            case this.uniqueMOperator:
                return '*';
            case this.uniqueDOperator:
                return '/';
            case this.uniqueModOperator:
                return '%';
            case this.uniqueCSeparator:
                return ',';
            case this.uniqueConcateOperator:
                return '&';
            case this.uniqueEqualOperator:
                return '=';
            case this.uniqueExpOperator:
                return '^';
            case this.uniqueLTOperator:
                return '<';
            case this.uniqueGTOperator:
                return '>';
        }
        return '';
    };
    Selection.prototype.markSpecialChar = function (formulaVal) {
        formulaVal = formulaVal.replace(/\(/g, '(' + this.uniqueOBracket).replace(/\)/g, ')' + this.uniqueCBracket);
        formulaVal = formulaVal.replace(/,/g, ',' + this.uniqueCSeparator).replace(/:/g, ':' + this.uniqueCOperator);
        formulaVal = formulaVal.replace(/\+/g, '+' + this.uniquePOperator).replace(/-/g, '-' + this.uniqueSOperator);
        formulaVal = formulaVal.replace(/\*/g, '*' + this.uniqueMOperator).replace(/\//g, '/' + this.uniqueDOperator);
        formulaVal = formulaVal.replace(/&/g, '&' + this.uniqueConcateOperator);
        formulaVal = formulaVal.replace(/=/g, '=' + this.uniqueEqualOperator);
        formulaVal = formulaVal.replace(/\^/g, '^' + this.uniqueExpOperator);
        formulaVal = formulaVal.replace(/>/g, '>' + this.uniqueGTOperator).replace(/</g, '<' + this.uniqueLTOperator);
        return formulaVal.replace(/%/g, '%' + this.uniqueModOperator);
    };
    /**
     * For internal use only - Get the module name.
     *
     * @private
     * @returns {string} - Get the module name.
     */
    Selection.prototype.getModuleName = function () {
        return 'selection';
    };
    Selection.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    return Selection;
}());

/**
 * The `Scroll` module is used to handle scrolling behavior.
 *
 * @hidden
 */
var Scroll = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for the Spreadsheet scroll module.
     *
     * @param {Spreadsheet} parent - Constructor for the Spreadsheet scroll module.
     * @private
     */
    function Scroll(parent) {
        this.clientX = 0;
        /** @hidden */
        this.isKeyScroll = true;
        this.parent = parent;
        this.addEventListener();
        this.initProps();
    }
    Scroll.prototype.onContentScroll = function (e) {
        var target = this.parent.getMainContent().parentElement;
        var scrollLeft = e.scrollLeft;
        var top = e.scrollTop || target.scrollTop;
        var left = scrollLeft && this.parent.enableRtl ? this.initScrollValue - scrollLeft : scrollLeft;
        var scrollArgs;
        var prevSize;
        if (this.parent.allowAutoFill) {
            var elem = document.querySelector('#' + this.parent.element.id + '_autofilloptionbtn-popup');
            var DDBElem = document.querySelector('#' + this.parent.element.id + '_autofilloptionbtn');
            if (elem) {
                var DDBObj = getComponent(DDBElem, DropDownButton);
                DDBObj.toggle();
            }
        }
        if (!isNullOrUndefined(scrollLeft) && this.prevScroll.scrollLeft !== left) {
            var scrollRight = left > this.prevScroll.scrollLeft;
            prevSize = this.offset.left.size;
            this.offset.left = this.getColOffset(left, scrollRight, e.skipHidden);
            if (!e.preventScroll) {
                this.parent.getColumnHeaderContent().scrollLeft = scrollLeft;
                this.parent.getMainContent().scrollLeft = scrollLeft;
                e.scrollLeft = scrollLeft;
            }
            scrollArgs = {
                cur: this.offset.left, prev: { idx: this.leftIndex, size: prevSize }, increase: scrollRight, preventScroll: e.preventScroll
            };
            this.updateTopLeftCell(scrollRight);
            this.parent.notify(onHorizontalScroll, scrollArgs);
            if (!this.parent.scrollSettings.enableVirtualization && scrollRight && !this.parent.scrollSettings.isFinite) {
                this.updateNonVirtualCols();
            }
            this.leftIndex = scrollArgs.prev.idx;
            this.prevScroll.scrollLeft = left;
        }
        if (this.prevScroll.scrollTop !== top) {
            if (e.skipRowVirualScroll) {
                this.prevScroll.scrollTop = 0;
                this.offset.top = { idx: 0, size: 0 };
            }
            var scrollDown = top > this.prevScroll.scrollTop;
            prevSize = this.offset.top.size;
            this.offset.top = this.getRowOffset(top, scrollDown);
            scrollArgs = {
                cur: this.offset.top, prev: { idx: this.topIndex, size: prevSize }, increase: scrollDown, preventScroll: e.preventScroll
            };
            this.updateTopLeftCell(scrollDown);
            if (e.preventScroll && this.offset.top.idx <= this.parent.getThreshold('row')) {
                this.offset.top = { idx: 0, size: 0 };
            }
            else if (!e.skipRowVirualScroll) {
                this.parent.notify(onVerticalScroll, scrollArgs);
            }
            else {
                scrollArgs.prev.idx = scrollArgs.cur.idx;
            }
            if (!this.parent.scrollSettings.enableVirtualization && scrollDown && !this.parent.scrollSettings.isFinite) {
                this.updateNonVirtualRows();
            }
            this.topIndex = scrollArgs.prev.idx;
            this.prevScroll.scrollTop = top;
        }
        var isEdit = false;
        var args = { isEdit: isEdit };
        this.parent.notify(isFormulaBarEdit, args);
        if (args.isEdit) {
            var textArea = this.parent.element.querySelector('.e-formula-bar');
            textArea.focus();
        }
        this.isKeyScroll = true;
    };
    Scroll.prototype.updateScrollValue = function (args) {
        if (args.scrollLeft !== undefined) {
            this.prevScroll.scrollLeft = args.scrollLeft + (this.prevScroll.scrollLeft - this.offset.left.size);
            this.offset.left.size = args.scrollLeft;
        }
        if (args.scrollTop !== undefined) {
            this.prevScroll.scrollTop = args.scrollTop + (this.prevScroll.scrollTop - this.offset.top.size);
            this.offset.top.size = args.scrollTop;
        }
    };
    Scroll.prototype.updateNonVirtualRows = function () {
        var sheet = this.parent.getActiveSheet();
        var threshold = this.parent.getThreshold('row');
        if (this.offset.top.idx > sheet.rowCount - (this.parent.viewport.rowCount + threshold)) {
            this.parent.renderModule.refreshUI({ rowIndex: sheet.rowCount, colIndex: 0, direction: 'first', refresh: 'RowPart' }, getCellAddress(sheet.rowCount, 0) + ":" + getCellAddress(sheet.rowCount + threshold - 1, sheet.colCount - 1));
            this.parent.setSheetPropertyOnMute(sheet, 'rowCount', sheet.rowCount + threshold);
            this.parent.viewport.bottomIndex = sheet.rowCount - 1;
        }
    };
    Scroll.prototype.updateNonVirtualCols = function () {
        var sheet = this.parent.getActiveSheet();
        var threshold = this.parent.getThreshold('col');
        if (this.offset.left.idx > sheet.colCount - (this.parent.viewport.colCount + threshold)) {
            this.parent.renderModule.refreshUI({ rowIndex: 0, colIndex: sheet.colCount, direction: 'first', refresh: 'ColumnPart' }, getCellAddress(0, sheet.colCount) + ":" + getCellAddress(sheet.rowCount - 1, sheet.colCount + threshold - 1));
            this.parent.setSheetPropertyOnMute(sheet, 'colCount', sheet.colCount + threshold);
            this.parent.viewport.rightIndex = sheet.colCount - 1;
        }
    };
    Scroll.prototype.updateTopLeftCell = function (increase) {
        var sheet = this.parent.getActiveSheet();
        var top = this.offset.top.idx;
        var left = this.offset.left.idx;
        if (!increase) {
            top = skipHiddenIdx(sheet, top, true);
            left = skipHiddenIdx(sheet, left, true, 'columns');
        }
        this.parent.updateTopLeftCell(top, left);
    };
    Scroll.prototype.getRowOffset = function (scrollTop, scrollDown) {
        var temp = this.offset.top.size;
        var sheet = this.parent.getActiveSheet();
        var i = scrollDown ? this.offset.top.idx + 1 : (this.offset.top.idx ? this.offset.top.idx - 1 : 0);
        var frozenRow = this.parent.frozenRowCount(sheet);
        var count = this.parent.scrollSettings.isFinite ? sheet.rowCount : Infinity;
        scrollTop = Math.round(scrollTop);
        while (i < count) {
            if (scrollDown) {
                temp += getRowHeight(sheet, i - 1 + frozenRow, true);
                if (Math.abs(Math.round(temp) - scrollTop) <= 1) { // <=1 -> For other resolution scrollTop value slightly various with row height
                    return { idx: i, size: temp };
                }
                if (Math.round(temp) > scrollTop) {
                    return { idx: i - 1, size: temp - getRowHeight(sheet, i - 1 + frozenRow, true) };
                }
                i++;
            }
            else {
                if (temp === 0) {
                    return { idx: 0, size: 0 };
                }
                temp -= getRowHeight(sheet, i + frozenRow, true);
                if (temp < 0) {
                    temp = 0;
                }
                if (Math.abs(Math.round(temp) - scrollTop) <= 1) {
                    return { idx: i, size: temp };
                }
                if (Math.round(temp) < scrollTop) {
                    temp += getRowHeight(sheet, i + frozenRow, true);
                    if (Math.round(temp) > scrollTop) {
                        return { idx: i, size: temp - getRowHeight(sheet, i + frozenRow, true) < 0 ? 0 :
                                temp - getRowHeight(sheet, i + frozenRow, true) };
                    }
                    else {
                        return { idx: skipHiddenIdx(sheet, i + 1, true), size: temp };
                    }
                }
                i--;
            }
        }
        return { idx: this.offset.top.idx, size: this.offset.top.size };
    };
    Scroll.prototype.getColOffset = function (scrollLeft, increase, skipHidden) {
        var temp = this.offset.left.size;
        var sheet = this.parent.getActiveSheet();
        var i = increase ? this.offset.left.idx + 1 : (this.offset.left.idx ? this.offset.left.idx - 1 : 0);
        var frozenCol = this.parent.frozenColCount(sheet);
        var count = this.parent.scrollSettings.isFinite ? sheet.colCount : Infinity;
        while (i < count) {
            if (increase) {
                temp += getColumnWidth(sheet, i - 1 + frozenCol, skipHidden, true);
                if (Math.abs(Math.round(temp) - scrollLeft) <= 1) {
                    return { idx: i, size: temp };
                }
                if (Math.round(temp) > scrollLeft) {
                    return { idx: i - 1, size: temp - getColumnWidth(sheet, i - 1 + frozenCol, skipHidden, true) };
                }
                i++;
            }
            else {
                if (temp === 0) {
                    return { idx: 0, size: 0 };
                }
                temp -= getColumnWidth(sheet, i + frozenCol, skipHidden, true);
                if (temp < 0) {
                    temp = 0;
                }
                if (Math.abs(Math.round(temp) - scrollLeft) <= 1) {
                    return { idx: i, size: temp };
                }
                if (Math.round(temp) < scrollLeft) {
                    temp += getColumnWidth(sheet, i + frozenCol, skipHidden, true);
                    if (Math.round(temp) > scrollLeft) {
                        temp = temp - getColumnWidth(sheet, i + frozenCol, skipHidden, true);
                        return { idx: i, size: temp < 0 ? 0 : temp };
                    }
                    else {
                        return { idx: skipHiddenIdx(sheet, i + 1, true, 'columns'), size: temp };
                    }
                }
                i--;
            }
        }
        return { idx: this.offset.left.idx, size: this.offset.left.size };
    };
    Scroll.prototype.contentLoaded = function (args) {
        if (!this.parent.scrollSettings.enableVirtualization) {
            var scrollTrack = this.parent.createElement('div', { className: 'e-virtualtrack' });
            this.updateNonVirualScrollWidth({ scrollTrack: scrollTrack });
            this.parent.getScrollElement().appendChild(scrollTrack);
        }
        if (args.left) {
            this.parent.getScrollElement().scrollLeft = args.left;
        }
        this.setScrollEvent();
        if (this.parent.enableRtl) {
            this.initScrollValue = this.parent.getScrollElement().scrollLeft;
        }
    };
    Scroll.prototype.updateNonVirualScrollWidth = function (args) {
        if (!args.scrollTrack) {
            args.scrollTrack = this.parent.getScrollElement().getElementsByClassName('e-virtualtrack')[0];
        }
        args.scrollTrack.style.width = Math.abs(this.parent.getContentTable().getBoundingClientRect().width) + 'px';
    };
    Scroll.prototype.onHeaderWheel = function (e) {
        e.preventDefault();
        this.parent.getMainContent().parentElement.scrollTop += e.deltaY;
        this.parent.getScrollElement().scrollLeft += e.deltaX;
    };
    Scroll.prototype.onContentWheel = function (e) {
        if (e.deltaX !== 0) {
            e.preventDefault();
            this.parent.getScrollElement().scrollLeft += e.deltaX;
        }
    };
    Scroll.prototype.scrollHandler = function (e) {
        this.onContentScroll({ scrollLeft: e.target.scrollLeft });
    };
    Scroll.prototype.updateScroll = function (args) {
        if (isNullOrUndefined(args.left)) {
            this.parent.sheetModule.contentPanel.scrollTop = args.top;
        }
        else {
            this.parent.getScrollElement().scrollLeft = args.left;
        }
    };
    Scroll.prototype.setScrollEvent = function (args) {
        if (args === void 0) { args = { set: true }; }
        if (args.set) {
            EventHandler.add(this.parent.sheetModule.contentPanel, 'scroll', this.onContentScroll, this);
            EventHandler.add(this.parent.getColumnHeaderContent(), 'wheel', this.onHeaderWheel, this);
            EventHandler.add(this.parent.getSelectAllContent(), 'wheel', this.onHeaderWheel, this);
            EventHandler.add(this.parent.getMainContent(), 'wheel', this.onContentWheel, this);
            EventHandler.add(this.parent.getRowHeaderContent(), 'wheel', this.onContentWheel, this);
            EventHandler.add(this.parent.getScrollElement(), 'scroll', this.scrollHandler, this);
        }
        else {
            EventHandler.remove(this.parent.sheetModule.contentPanel, 'scroll', this.onContentScroll);
            EventHandler.remove(this.parent.getColumnHeaderContent(), 'wheel', this.onHeaderWheel);
            EventHandler.remove(this.parent.getSelectAllContent(), 'wheel', this.onHeaderWheel);
            EventHandler.remove(this.parent.getMainContent(), 'wheel', this.onContentWheel);
            EventHandler.remove(this.parent.getRowHeaderContent(), 'wheel', this.onContentWheel);
            EventHandler.remove(this.parent.getScrollElement(), 'scroll', this.scrollHandler);
        }
    };
    Scroll.prototype.initProps = function () {
        this.topIndex = 0;
        this.leftIndex = 0;
        this.prevScroll = { scrollLeft: 0, scrollTop: 0 };
        this.offset = { left: { idx: 0, size: 0 }, top: { idx: 0, size: 0 } };
    };
    /**
     * @hidden
     *
     * @returns {void} - To Set padding
     */
    Scroll.prototype.setPadding = function () {
        this.parent.sheetModule.contentPanel.style.overflowY = 'scroll';
        var scrollWidth = getScrollBarWidth();
        if (scrollWidth > 0) {
            var colHeader = this.parent.getColumnHeaderContent();
            var cssProps = this.parent.enableRtl ? { margin: 'marginLeft', border: 'borderLeftWidth' }
                : { margin: 'marginRight', border: 'borderRightWidth' };
            colHeader.parentElement.style[cssProps.margin] = scrollWidth + 'px';
            colHeader.style[cssProps.border] = '1px';
        }
    };
    Scroll.prototype.setClientX = function (e) {
        if (e.type === 'mousedown' || e.pointerType === 'mouse') {
            return;
        }
        var args = { touchSelectionStarted: false };
        this.parent.notify(selectionStatus, args);
        if (args.touchSelectionStarted) {
            return;
        }
        this.clientX = this.getPointX(e);
        var sheetContent = document.getElementById(this.parent.element.id + '_sheet');
        EventHandler.add(sheetContent, Browser.isPointer ? 'pointermove' : 'touchmove', this.onTouchScroll, this);
        EventHandler.add(sheetContent, Browser.isPointer ? 'pointerup' : 'touchend', this.pointerUpHandler, this);
    };
    Scroll.prototype.getPointX = function (e) {
        var clientX = 0;
        if (e.touches && e.touches.length) {
            clientX = e.touches[0].clientX;
        }
        else {
            clientX = e.clientX;
        }
        return clientX;
    };
    Scroll.prototype.onTouchScroll = function (e) {
        if (e.pointerType === 'mouse') {
            return;
        }
        var clientX = this.getPointX(e);
        var diff = this.clientX - clientX;
        var scroller = this.parent.element.getElementsByClassName('e-scroller')[0];
        if ((diff > 10 || diff < -10) && scroller.scrollLeft + diff >= 0) {
            e.preventDefault();
            this.clientX = clientX;
            getUpdateUsingRaf(function () { scroller.scrollLeft += diff; });
        }
    };
    Scroll.prototype.pointerUpHandler = function () {
        var sheetContent = document.getElementById(this.parent.element.id + '_sheet');
        EventHandler.remove(sheetContent, Browser.isPointer ? 'pointermove' : 'touchmove', this.onTouchScroll);
        EventHandler.remove(sheetContent, Browser.isPointer ? 'pointerup' : 'touchend', this.pointerUpHandler);
    };
    Scroll.prototype.addEventListener = function () {
        this.parent.on(contentLoaded, this.contentLoaded, this);
        this.parent.on(onContentScroll, this.onContentScroll, this);
        this.parent.on(updateScroll, this.updateScroll, this);
        this.parent.on(deInitProperties, this.initProps, this);
        this.parent.on(spreadsheetDestroyed, this.destroy, this);
        this.parent.on(setScrollEvent, this.setScrollEvent, this);
        this.parent.on(mouseDown, this.setClientX, this);
        this.parent.on(updateScrollValue, this.updateScrollValue, this);
        if (!this.parent.scrollSettings.enableVirtualization) {
            this.parent.on(virtualContentLoaded, this.updateNonVirualScrollWidth, this);
            this.parent.on(colWidthChanged, this.updateNonVirualScrollWidth, this);
        }
    };
    Scroll.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    Scroll.prototype.removeEventListener = function () {
        this.parent.off(contentLoaded, this.contentLoaded);
        this.parent.off(onContentScroll, this.onContentScroll);
        this.parent.off(updateScroll, this.updateScroll);
        this.parent.off(deInitProperties, this.initProps);
        this.parent.off(spreadsheetDestroyed, this.destroy);
        this.parent.off(setScrollEvent, this.setScrollEvent);
        this.parent.off(mouseDown, this.setClientX);
        this.parent.off(updateScrollValue, this.updateScrollValue);
        if (!this.parent.scrollSettings.enableVirtualization) {
            this.parent.off(virtualContentLoaded, this.updateNonVirualScrollWidth);
            this.parent.off(colWidthChanged, this.updateNonVirualScrollWidth);
        }
    };
    return Scroll;
}());

/**
 * VirtualScroll module
 *
 * @hidden
 */
var VirtualScroll = /** @__PURE__ @class */ (function () {
    function VirtualScroll(parent) {
        this.scroll = [];
        this.parent = parent;
        this.addEventListener();
    }
    VirtualScroll.prototype.createVirtualElement = function (args) {
        var sheet = this.parent.getActiveSheet();
        var container = this.parent.getMainContent();
        this.content = this.parent.createElement('div', { className: 'e-virtualable' });
        this.content.appendChild(container.querySelector('.e-table'));
        container.appendChild(this.content);
        var vTrack = container.appendChild(this.parent.createElement('div', { className: 'e-virtualtrack' }));
        var height = 0;
        var width;
        if (this.parent.sheets.length > this.scroll.length) {
            this.initScroll();
        }
        var endIndex = this.parent.viewport.bottomIndex;
        if (sheet.rowCount > endIndex + 1 || sheet.usedRange.rowIndex > endIndex) {
            if (!this.parent.scrollSettings.isFinite && sheet.rowCount <= sheet.usedRange.rowIndex) {
                this.parent.setSheetPropertyOnMute(sheet, 'rowCount', sheet.usedRange.rowIndex + 1);
            }
            this.setScrollCount(sheet.rowCount, 'row');
        }
        else {
            if (!this.parent.scrollSettings.isFinite) {
                this.parent.setSheetPropertyOnMute(sheet, 'rowCount', endIndex + 1);
            }
            this.scroll[this.parent.activeSheetIndex].rowCount = sheet.rowCount;
        }
        var startIndex = this.parent.frozenRowCount(sheet);
        var indexes = getCellIndexes(sheet.topLeftCell);
        if (args.top) {
            height = args.top;
            if (sheet.frozenRows) {
                height += getRowsHeight(sheet, indexes[0], startIndex - 1, true);
            }
            startIndex = getCellIndexes(sheet.paneTopLeftCell)[0];
        }
        height += getRowsHeight(sheet, startIndex, this.scroll[this.parent.activeSheetIndex].rowCount - 1, true);
        endIndex = this.parent.viewport.rightIndex;
        var size = 0;
        var frozenCol = this.parent.frozenColCount(sheet);
        if (args.left) {
            size = args.left;
            if (frozenCol) {
                size += getColumnsWidth(sheet, indexes[1], frozenCol - 1, true);
            }
            startIndex = getCellIndexes(sheet.paneTopLeftCell)[1];
        }
        else {
            startIndex = frozenCol;
        }
        if (sheet.colCount > endIndex + 1 || sheet.usedRange.colIndex > endIndex) {
            if (!this.parent.scrollSettings.isFinite && sheet.colCount <= sheet.usedRange.colIndex) {
                this.parent.setSheetPropertyOnMute(sheet, 'colCount', sheet.usedRange.colIndex + 1);
            }
            size += getColumnsWidth(sheet, startIndex, endIndex, true);
            this.setScrollCount(sheet.colCount, 'col');
            width = size + getColumnsWidth(sheet, endIndex + 1, this.scroll[this.parent.activeSheetIndex].colCount - 1, true);
        }
        else {
            if (!this.parent.scrollSettings.isFinite) {
                this.parent.setSheetPropertyOnMute(sheet, 'colCount', endIndex + 1);
            }
            size += getColumnsWidth(sheet, startIndex, sheet.colCount - 1, true);
            this.scroll[this.parent.activeSheetIndex].colCount = sheet.colCount;
            width = size;
        }
        if (isNullOrUndefined(this.parent.viewport.leftIndex)) {
            this.parent.viewport.leftIndex = 0;
        }
        if (isNullOrUndefined(this.parent.viewport.topIndex)) {
            this.parent.viewport.topIndex = 0;
        }
        if (args.left) {
            size = getColumnsWidth(sheet, this.parent.viewport.leftIndex + frozenCol, endIndex, true);
        }
        if (isNullOrUndefined(this.translateX)) {
            this.translateX = 0;
        }
        if (isNullOrUndefined(this.translateY)) {
            this.translateY = 0;
        }
        container = this.parent.getRowHeaderContent();
        this.rowHeader = this.content.cloneNode();
        this.rowHeader.appendChild(container.querySelector('.e-table'));
        container.appendChild(this.rowHeader);
        var rowVTrack = container.appendChild(vTrack.cloneNode());
        this.rowHeader.style.transform = "translate(0px, " + this.translateY + "px)";
        container = this.parent.getColumnHeaderContent();
        this.colHeader = this.content.cloneNode();
        this.colHeader.appendChild(container.querySelector('.e-table'));
        container.appendChild(this.colHeader);
        var colVTrack = container.appendChild(vTrack.cloneNode());
        this.colHeader.style.width = size + "px";
        rowVTrack.style.height = height + "px";
        colVTrack.style.width = width + "px";
        this.colHeader.style.transform = "translate(" + this.translateX + "px, 0px)";
        this.content.style.transform = "translate(" + this.translateX + "px, " + this.translateY + "px)";
        this.content.style.width = size + "px";
        vTrack.style.height = height + "px";
        vTrack.style.width = width + "px";
        if (this.parent.allowScrolling) {
            this.parent.getScrollElement().appendChild(colVTrack.cloneNode(true));
        }
    };
    VirtualScroll.prototype.initScroll = function () {
        var i = 0;
        while (i < this.parent.sheets.length) {
            if (!this.scroll[i]) {
                this.scroll.push({ rowCount: 0, colCount: 0 });
            }
            i++;
        }
    };
    VirtualScroll.prototype.setScrollCount = function (count, layout) {
        var activeSheetIdx = this.parent.activeSheetIndex;
        if (!this.scroll[activeSheetIdx][layout + 'Count'] || this.scroll[activeSheetIdx][layout + 'Count'] !== count) {
            this.scroll[activeSheetIdx][layout + 'Count'] = count;
        }
    };
    VirtualScroll.prototype.getRowAddress = function (indexes) {
        var sheet = this.parent.getActiveSheet();
        return getRangeAddress([indexes[0], sheet.frozenColumns ? getCellIndexes(sheet.topLeftCell)[1] : this.parent.viewport.leftIndex,
            indexes[1], this.parent.viewport.rightIndex]);
    };
    VirtualScroll.prototype.getColAddress = function (indexes) {
        var sheet = this.parent.getActiveSheet();
        return getRangeAddress([sheet.frozenRows ? getCellIndexes(sheet.topLeftCell)[0] : this.parent.viewport.topIndex, indexes[0],
            this.parent.viewport.bottomIndex, indexes[1]]);
    };
    VirtualScroll.prototype.updateScrollCount = function (idx, layout, threshold) {
        if (threshold === void 0) { threshold = idx; }
        var sheet = this.parent.getActiveSheet();
        var rowCount = idx + this.parent.viewport[layout + 'Count'] + 1 + threshold;
        var usedRangeCount = this.scroll[this.parent.activeSheetIndex][layout + 'Count'];
        if (rowCount < usedRangeCount) {
            if (sheet[layout + 'Count'] === usedRangeCount) {
                return;
            }
            rowCount = usedRangeCount;
        }
        if (!this.parent.scrollSettings.isFinite) {
            this.parent.setSheetPropertyOnMute(sheet, layout + 'Count', rowCount);
        }
    };
    VirtualScroll.prototype.onVerticalScroll = function (args) {
        var idx = args.cur.idx;
        var height = args.cur.size;
        var prevIdx = args.prev.idx;
        var idxDiff = Math.abs(idx - prevIdx);
        var threshold = this.parent.getThreshold('row');
        if (idxDiff > Math.round(threshold / 2)) {
            var startIdx = void 0;
            var lastIdx = void 0;
            var prevTopIdx = void 0;
            var sheet = this.parent.getActiveSheet();
            if (idx <= threshold) {
                if (!args.increase) {
                    if (this.translateY && prevIdx > threshold) {
                        this.translateY = 0;
                        var frozenCol = this.parent.frozenColCount(sheet);
                        var frozenRow = this.parent.frozenRowCount(sheet);
                        if (!args.preventScroll) {
                            var colIndex = frozenCol ? getCellIndexes(sheet.topLeftCell)[1] : this.parent.viewport.leftIndex;
                            var fIndexes = frozenCol ? [frozenRow, this.parent.viewport.leftIndex + frozenCol] : [];
                            if (idxDiff < this.parent.viewport.rowCount + threshold) {
                                startIdx = skipHiddenIdx(sheet, frozenRow, true);
                                if (startIdx < 0) {
                                    startIdx = frozenRow;
                                }
                                lastIdx = skipHiddenIdx(sheet, (this.parent.viewport.topIndex + frozenRow) - 1, false);
                                this.parent.viewport.topIndex = skipHiddenIdx(sheet, startIdx - frozenRow, true);
                                var hiddenCount = this.hiddenCount(startIdx, lastIdx);
                                var skippedHiddenIdx = skipHiddenIdx(sheet, (this.parent.viewport.bottomIndex - ((lastIdx - startIdx + 1) - hiddenCount)), args.increase);
                                this.parent.viewport.bottomIndex -= (((lastIdx - startIdx + 1) - hiddenCount) +
                                    (this.hiddenCount(skippedHiddenIdx, this.parent.viewport.bottomIndex)));
                                this.parent.renderModule.refreshUI({
                                    colIndex: colIndex, rowIndex: startIdx, direction: 'last', refresh: 'RowPart',
                                    skipUpdateOnFirst: true, frozenIndexes: fIndexes
                                }, this.getRowAddress([startIdx, skipHiddenIdx(sheet, lastIdx, false)]));
                            }
                            else {
                                var prevColIndex = this.parent.viewport.leftIndex;
                                this.parent.renderModule.refreshUI({ rowIndex: 0, colIndex: colIndex, refresh: 'Row', skipUpdateOnFirst: true,
                                    frozenIndexes: fIndexes, skipTranslate: true });
                                if (frozenCol) {
                                    this.parent.viewport.leftIndex = prevColIndex;
                                }
                                this.translate({ refresh: 'Row' });
                            }
                            focus(this.parent.element);
                            idx = 0;
                        }
                        else {
                            this.parent.viewport.topIndex = prevIdx - (threshold - frozenRow);
                        }
                    }
                    this.updateScrollCount(threshold, 'row');
                }
            }
            if (prevIdx < threshold) {
                idxDiff = Math.abs(idx - threshold);
            }
            if (!args.increase && this.parent.scrollSettings.isFinite && this.parent.viewport.bottomIndex ===
                skipHiddenIdx(sheet, sheet.rowCount - 1, false)) {
                var thresholdIdx = this.parent.viewport.topIndex + getRangeIndexes(sheet.topLeftCell)[0] - 1;
                if (idx > thresholdIdx) {
                    args.prev.idx = idx;
                    return;
                }
                idxDiff = thresholdIdx - idx;
            }
            if (idx > threshold) {
                prevTopIdx = this.parent.viewport.topIndex;
                this.parent.viewport.topIndex = idx - threshold;
                if (args.increase && prevTopIdx > this.parent.viewport.topIndex) {
                    this.parent.viewport.topIndex = prevTopIdx;
                    return;
                }
                var frozenRow = this.parent.frozenRowCount(sheet);
                if (!args.preventScroll) {
                    var frozenCol = this.parent.frozenColCount(sheet);
                    var colIndex = frozenCol ? getCellIndexes(sheet.topLeftCell)[1] : this.parent.viewport.leftIndex;
                    var frozenIndexes = [];
                    if (sheet.frozenColumns) {
                        frozenIndexes = [frozenRow, this.parent.viewport.leftIndex + frozenCol];
                    }
                    if (idxDiff < this.parent.viewport.rowCount + threshold) {
                        if (args.increase) {
                            startIdx = this.parent.viewport.bottomIndex + 1;
                            lastIdx = this.parent.viewport.bottomIndex + (this.parent.viewport.topIndex - prevTopIdx);
                            lastIdx -= this.hiddenCount(prevTopIdx, this.parent.viewport.topIndex - 1);
                            if (lastIdx <= this.parent.viewport.bottomIndex) {
                                this.parent.viewport.topIndex = skipHiddenIdx(sheet, this.parent.viewport.topIndex, args.increase);
                                this.setThresholdHeight(height, threshold, frozenRow);
                                return;
                            }
                            var indexes = this.parent.skipHidden(startIdx, lastIdx, 'rows', false);
                            var finiteOffset = this.checkLastIdx(indexes[1], 'row');
                            startIdx = indexes[0];
                            lastIdx = finiteOffset.index;
                            this.parent.viewport.topIndex = skipHiddenIdx(sheet, this.parent.viewport.topIndex - finiteOffset.diff, !this.parent.scrollSettings.isFinite);
                            this.setThresholdHeight(height, idx - this.parent.viewport.topIndex, frozenRow, !!finiteOffset.diff);
                            this.parent.viewport.bottomIndex = lastIdx;
                            this.parent.renderModule.refreshUI({ colIndex: colIndex, rowIndex: startIdx, direction: 'first', refresh: 'RowPart',
                                frozenIndexes: frozenIndexes }, this.getRowAddress([startIdx, lastIdx]));
                        }
                        else {
                            this.parent.viewport.topIndex = startIdx = skipHiddenIdx(sheet, this.parent.viewport.topIndex, false);
                            if (startIdx < 0) {
                                this.parent.viewport.topIndex = startIdx = 0;
                            }
                            startIdx = skipHiddenIdx(sheet, startIdx + frozenRow, true);
                            lastIdx = skipHiddenIdx(sheet, prevTopIdx - 1, false);
                            if (lastIdx < 0 || lastIdx < startIdx) {
                                this.parent.viewport.topIndex = prevTopIdx;
                                return;
                            }
                            var hiddenCount = this.hiddenCount(startIdx, lastIdx);
                            this.parent.viewport.bottomIndex -= (((lastIdx - startIdx) + 1) - hiddenCount);
                            this.parent.viewport.bottomIndex = skipHiddenIdx(sheet, this.parent.viewport.bottomIndex, false);
                            startIdx = this.parent.skipHidden(startIdx, lastIdx)[0];
                            this.setThresholdHeight(height, idx - this.parent.viewport.topIndex, frozenRow);
                            this.parent.renderModule.refreshUI({ colIndex: colIndex, rowIndex: startIdx, direction: 'last', refresh: 'RowPart',
                                frozenIndexes: frozenIndexes }, this.getRowAddress([startIdx, lastIdx]));
                        }
                    }
                    else {
                        prevTopIdx = this.parent.viewport.leftIndex;
                        this.parent.viewport.topIndex = skipHiddenIdx(sheet, this.parent.viewport.topIndex, false);
                        this.parent.renderModule.refreshUI({
                            rowIndex: this.parent.viewport.topIndex, colIndex: colIndex, refresh: 'Row',
                            frozenIndexes: frozenIndexes, skipTranslate: true
                        });
                        if (frozenCol) {
                            this.parent.viewport.leftIndex = prevTopIdx;
                        }
                        this.setThresholdHeight(height, idx - this.parent.viewport.topIndex, frozenRow);
                        this.translate({ refresh: 'Row' });
                    }
                    this.updateScrollCount(idx, 'row', threshold);
                    this.focusSheet();
                }
                else {
                    this.setThresholdHeight(height, threshold, frozenRow);
                    this.translate({ refresh: 'Row' });
                }
            }
            args.prev.idx = idx;
        }
    };
    VirtualScroll.prototype.hiddenCount = function (startIdx, endIdx, layout) {
        if (layout === void 0) { layout = 'rows'; }
        var index = 0;
        var sheet = this.parent.getActiveSheet();
        for (var i = startIdx; i <= endIdx; i++) {
            if ((sheet[layout])[i] && (sheet[layout])[i].hidden) {
                index++;
            }
        }
        return index;
    };
    VirtualScroll.prototype.checkLastIdx = function (idx, layout) {
        var diff = 0;
        if (this.parent.scrollSettings.isFinite) {
            var sheet = this.parent.getActiveSheet();
            var count = sheet[layout + 'Count'] - 1;
            if (idx > count) {
                diff = idx - count;
                idx = skipHiddenIdx(sheet, count, false);
            }
        }
        return { index: idx, diff: diff };
    };
    VirtualScroll.prototype.onHorizontalScroll = function (args) {
        var idx = args.cur.idx;
        var width = args.cur.size;
        var prevIdx = args.prev.idx;
        var idxDiff = Math.abs(idx - prevIdx);
        var threshold = this.parent.getThreshold('col');
        if (idxDiff > Math.round(threshold / 2)) {
            var startIdx = void 0;
            var endIdx = void 0;
            var prevLeftIdx = void 0;
            var sheet = this.parent.getActiveSheet();
            if (idx <= threshold) {
                if (!args.increase) {
                    if (this.translateX && prevIdx > threshold) {
                        this.translateX = 0;
                        var frozenCol = this.parent.frozenColCount(sheet);
                        var frozenRow = this.parent.frozenRowCount(sheet);
                        if (!args.preventScroll) {
                            var rowIndex = frozenRow ? getCellIndexes(sheet.topLeftCell)[0] : this.parent.viewport.topIndex;
                            var fIndexes = frozenRow ? [this.parent.viewport.topIndex + frozenRow, frozenCol] : [];
                            if (idxDiff < this.parent.viewport.colCount + threshold) {
                                startIdx = skipHiddenIdx(sheet, frozenCol, true, 'columns');
                                if (startIdx < 0) {
                                    startIdx = frozenCol;
                                }
                                endIdx = skipHiddenIdx(sheet, (this.parent.viewport.leftIndex + frozenCol) - 1, false, 'columns');
                                this.parent.viewport.leftIndex = skipHiddenIdx(sheet, startIdx - frozenCol, true, 'columns');
                                var hiddenCount = this.hiddenCount(startIdx, endIdx, 'columns');
                                var skippedHiddenIdx = skipHiddenIdx(sheet, (this.parent.viewport.rightIndex - ((endIdx - startIdx + 1) - hiddenCount)), args.increase, 'columns');
                                this.parent.viewport.rightIndex -= (((endIdx - startIdx + 1) - hiddenCount) +
                                    (this.hiddenCount(skippedHiddenIdx, this.parent.viewport.rightIndex, 'columns')));
                                this.parent.renderModule.refreshUI({ rowIndex: rowIndex, colIndex: startIdx, direction: 'last', refresh: 'ColumnPart',
                                    skipUpdateOnFirst: true, frozenIndexes: fIndexes }, this.getColAddress([startIdx, skipHiddenIdx(sheet, endIdx, false, 'columns')]));
                            }
                            else {
                                var prevRowIndex = this.parent.viewport.topIndex;
                                this.parent.renderModule.refreshUI({ rowIndex: rowIndex, colIndex: 0, refresh: 'Column', skipUpdateOnFirst: true,
                                    frozenIndexes: fIndexes, skipTranslate: true });
                                if (frozenRow) {
                                    this.parent.viewport.topIndex = prevRowIndex;
                                }
                                this.translate({ refresh: 'Column' });
                            }
                            focus(this.parent.element);
                            idx = 0;
                        }
                        else {
                            this.parent.viewport.leftIndex = prevIdx - (threshold - frozenCol);
                        }
                    }
                    this.updateScrollCount(threshold, 'col');
                }
            }
            if (prevIdx < threshold) {
                idxDiff = Math.abs(idx - threshold);
            }
            if (!args.increase && this.parent.scrollSettings.isFinite && this.parent.viewport.rightIndex === sheet.colCount - 1) {
                var thresholdIdx = this.parent.viewport.leftIndex + getRangeIndexes(sheet.topLeftCell)[1] - 1;
                thresholdIdx += this.hiddenCount(this.parent.viewport.leftIndex, thresholdIdx);
                if (idx > thresholdIdx) {
                    args.prev.idx = idx;
                    return;
                }
                idxDiff = thresholdIdx - idx;
            }
            if (idx > threshold) {
                prevLeftIdx = this.parent.viewport.leftIndex;
                this.parent.viewport.leftIndex = idx - threshold;
                if (args.increase && prevLeftIdx > this.parent.viewport.leftIndex) {
                    this.parent.viewport.leftIndex = prevLeftIdx;
                    return;
                }
                var frozenCol = this.parent.frozenColCount(sheet);
                if (!args.preventScroll) {
                    var frozenRow = this.parent.frozenRowCount(sheet);
                    var rowIndex = frozenRow ? getCellIndexes(sheet.topLeftCell)[0] : this.parent.viewport.topIndex;
                    var frozenIndexes = [];
                    if (frozenRow) {
                        frozenIndexes = [frozenRow + this.parent.viewport.topIndex, frozenCol];
                    }
                    if (idxDiff < this.parent.viewport.colCount + threshold) {
                        if (args.increase) {
                            startIdx = this.parent.viewport.rightIndex + 1;
                            endIdx = this.parent.viewport.rightIndex + (this.parent.viewport.leftIndex - prevLeftIdx);
                            endIdx -= this.hiddenCount(prevLeftIdx, this.parent.viewport.leftIndex - 1, 'columns');
                            if (endIdx <= this.parent.viewport.rightIndex) {
                                this.parent.viewport.leftIndex = skipHiddenIdx(sheet, this.parent.viewport.leftIndex, args.increase, 'columns');
                                this.setThresholdWidth(width, threshold, frozenCol);
                                return;
                            }
                            var indexes = this.parent.skipHidden(startIdx, endIdx, 'columns', false);
                            var finiteOffset = this.checkLastIdx(indexes[1], 'col');
                            startIdx = indexes[0];
                            endIdx = finiteOffset.index;
                            this.parent.viewport.leftIndex = skipHiddenIdx(sheet, this.parent.viewport.leftIndex - finiteOffset.diff, !this.parent.scrollSettings.isFinite, 'columns');
                            this.setThresholdWidth(width, idx - this.parent.viewport.leftIndex, frozenCol, !!finiteOffset.diff);
                            this.parent.viewport.rightIndex = endIdx;
                            this.parent.renderModule.refreshUI({ rowIndex: rowIndex, colIndex: startIdx, direction: 'first', refresh: 'ColumnPart',
                                frozenIndexes: frozenIndexes }, this.getColAddress([startIdx, endIdx]));
                        }
                        else {
                            startIdx = skipHiddenIdx(sheet, this.parent.viewport.leftIndex, false, 'columns');
                            this.parent.viewport.leftIndex = startIdx;
                            if (startIdx < 0) {
                                this.parent.viewport.leftIndex = startIdx = 0;
                            }
                            startIdx = skipHiddenIdx(sheet, startIdx + frozenCol, true, 'columns');
                            endIdx = skipHiddenIdx(sheet, prevLeftIdx - 1, false, 'columns');
                            if (endIdx < 0 || endIdx < startIdx) {
                                this.parent.viewport.leftIndex = prevLeftIdx;
                                return;
                            }
                            var hiddenCount = this.hiddenCount(startIdx, endIdx, 'columns');
                            this.parent.viewport.rightIndex -= (((endIdx - startIdx) + 1) - hiddenCount);
                            this.parent.viewport.rightIndex = skipHiddenIdx(sheet, this.parent.viewport.rightIndex, false, 'columns');
                            startIdx = this.parent.skipHidden(startIdx, endIdx, 'columns')[0];
                            this.setThresholdWidth(width, idx - this.parent.viewport.leftIndex, frozenCol);
                            this.parent.renderModule.refreshUI({ rowIndex: rowIndex, colIndex: startIdx, direction: 'last', refresh: 'ColumnPart',
                                frozenIndexes: frozenIndexes }, this.getColAddress([startIdx, endIdx]));
                        }
                    }
                    else {
                        prevLeftIdx = this.parent.viewport.topIndex;
                        this.parent.viewport.leftIndex = skipHiddenIdx(sheet, this.parent.viewport.leftIndex, false, 'columns');
                        this.parent.renderModule.refreshUI({
                            rowIndex: rowIndex, colIndex: this.parent.viewport.leftIndex, refresh: 'Column', frozenIndexes: frozenIndexes,
                            skipTranslate: true
                        });
                        if (frozenRow) {
                            this.parent.viewport.topIndex = prevLeftIdx;
                        }
                        this.setThresholdWidth(width, idx - this.parent.viewport.leftIndex, frozenCol);
                        this.translate({ refresh: 'Column' });
                    }
                    this.updateScrollCount(idx, 'col', threshold);
                    this.focusSheet();
                }
                else {
                    this.setThresholdWidth(width, threshold, frozenCol);
                    this.translate({ refresh: 'Column' });
                }
            }
            args.prev.idx = idx;
        }
    };
    VirtualScroll.prototype.focusSheet = function () {
        if (!document.activeElement.classList.contains('e-text-findNext-short') || !closest(document.activeElement, '#' + this.parent.element.id)) {
            focus(this.parent.element);
        }
    };
    VirtualScroll.prototype.setThresholdHeight = function (scrollHeight, threshold, frozenRow, endReached) {
        var sheet = this.parent.getActiveSheet();
        var start = this.parent.viewport.topIndex + frozenRow;
        var end;
        if (endReached) {
            var vTrack = this.parent.getMainContent().querySelector('.e-virtualtrack');
            if (vTrack) {
                scrollHeight = parseInt(vTrack.style.height, 10);
                end = this.parent.viewport.bottomIndex;
            }
            else {
                this.translateY = getRowsHeight(sheet, 0, start - 1, true);
                return;
            }
        }
        else {
            end = (start + threshold) - 1;
        }
        this.translateY = scrollHeight - getRowsHeight(sheet, start, end, true);
    };
    VirtualScroll.prototype.setThresholdWidth = function (scrollWidth, threshold, frozenCol, endReached) {
        var sheet = this.parent.getActiveSheet();
        var start = this.parent.viewport.leftIndex + frozenCol;
        var end;
        if (endReached) {
            var vTrack = this.parent.getMainContent().querySelector('.e-virtualtrack');
            if (vTrack) {
                scrollWidth = parseInt(vTrack.style.width, 10);
                end = this.parent.viewport.rightIndex;
            }
            else {
                this.translateY = getColumnsWidth(sheet, 0, start - 1, true);
                return;
            }
        }
        else {
            end = (start + threshold) - 1;
        }
        this.translateX = scrollWidth - getColumnsWidth(sheet, start, end, true);
    };
    VirtualScroll.prototype.translate = function (args) {
        if (args.skipTranslate || !this.content) {
            return;
        }
        var translateX = this.translateX || 0;
        translateX = this.parent.enableRtl ? -translateX : translateX;
        if (args.refresh === 'Row' || args.refresh === 'RowPart') {
            this.content.style.transform = "translate(" + translateX + "px, " + this.translateY + "px)";
            this.rowHeader.style.transform = "translate(0px, " + this.translateY + "px)";
        }
        if (args.refresh === 'Column' || args.refresh === 'ColumnPart') {
            this.content.style.transform = "translate(" + translateX + "px, " + this.translateY + "px)";
            this.colHeader.style.transform = "translate(" + translateX + "px, 0px)";
        }
    };
    VirtualScroll.prototype.updateColumnWidth = function (args) {
        if (args.refresh === 'Column') {
            this.content.style.width = '';
            var sheet = this.parent.getActiveSheet();
            var width = getColumnsWidth(sheet, this.parent.viewport.leftIndex + this.parent.frozenColCount(sheet), this.parent.viewport.rightIndex, true);
            this.colHeader.style.width = width + 'px';
            this.content.style.width = width + 'px';
            if (!this.parent.scrollSettings.isFinite || args.isUpdate) {
                var scroll_1 = this.parent.element.querySelector('.e-scroller .e-virtualtrack');
                if (!scroll_1) {
                    return;
                }
                var scrollWidth = parseInt(scroll_1.style.width, 10);
                var newWidth = width + this.translateX + this.parent.viewport.beforeFreezeWidth;
                if (newWidth > scrollWidth) {
                    var diff = newWidth - scrollWidth;
                    scroll_1.style.width = scrollWidth + diff + 'px';
                }
                else {
                    var diff = scrollWidth - newWidth;
                    var vTrack = this.parent.getMainContent().getElementsByClassName('e-virtualtrack')[0];
                    if (scrollWidth - diff < parseInt(vTrack.style.width, 10)) {
                        scroll_1.style.width = vTrack.style.width;
                    }
                }
            }
        }
        else if (!this.parent.scrollSettings.isFinite) {
            var vTrack = this.parent.getMainContent().getElementsByClassName('e-virtualtrack')[0];
            var vTrackHeight = parseInt(vTrack.style.height, 10);
            var height = this.content.getBoundingClientRect().height;
            var newHeight = height + this.translateY + this.parent.viewport.beforeFreezeHeight;
            if (newHeight > vTrackHeight) {
                var diff = newHeight - vTrackHeight;
                vTrack.style.height = vTrackHeight + diff + 'px';
            }
            else {
                var diff = vTrackHeight - newHeight;
                var hVTrack = this.parent.getRowHeaderContent().getElementsByClassName('e-virtualtrack')[0];
                if (vTrackHeight - diff < parseInt(hVTrack.style.height, 10)) {
                    vTrack.style.height = hVTrack.style.height;
                }
            }
        }
    };
    VirtualScroll.prototype.updateRowColCount = function (args) {
        if (!this.scroll.length) {
            return;
        }
        var sheet = this.parent.getActiveSheet();
        if (args.update === 'row') {
            if (args.index !== this.scroll[this.parent.activeSheetIndex].rowCount - 1) {
                var height = this.getVTrackHeight('height');
                var newHeight = height;
                if (args.index >= this.scroll[this.parent.activeSheetIndex].rowCount) {
                    if (args.start === undefined) {
                        newHeight += getRowsHeight(sheet, this.scroll[this.parent.activeSheetIndex].rowCount, args.index, true);
                    }
                    else {
                        newHeight += getRowsHeight(sheet, args.start, args.end, true);
                    }
                }
                else {
                    if (args.start === undefined) {
                        newHeight -= getRowsHeight(sheet, args.index + 1, this.scroll[this.parent.activeSheetIndex].rowCount - 1, true);
                    }
                    else {
                        newHeight -= getRowsHeight(sheet, args.start, args.end, true);
                    }
                }
                if (!args.isDelete && newHeight < height) {
                    return;
                }
                this.scroll[this.parent.activeSheetIndex].rowCount = args.index + 1;
                this.updateVTrack(this.rowHeader, newHeight, 'height');
                if (this.scroll[this.parent.activeSheetIndex].rowCount > sheet.rowCount) {
                    this.parent.setSheetPropertyOnMute(sheet, 'rowCount', this.scroll[this.parent.activeSheetIndex].rowCount);
                }
            }
        }
        else {
            if (args.index !== this.scroll[this.parent.activeSheetIndex].colCount - 1) {
                var width = this.getVTrackHeight('width');
                var newWidth = width;
                if (args.index >= this.scroll[this.parent.activeSheetIndex].colCount) {
                    if (args.start === undefined) {
                        newWidth += getColumnsWidth(sheet, this.scroll[this.parent.activeSheetIndex].colCount, args.index, true);
                    }
                    else {
                        newWidth += getColumnsWidth(sheet, args.start, args.end, true);
                    }
                }
                else {
                    if (args.start === undefined) {
                        newWidth -= getColumnsWidth(sheet, args.index + 1, this.scroll[this.parent.activeSheetIndex].colCount - 1, true);
                    }
                    else {
                        newWidth -= getColumnsWidth(sheet, args.start, args.end, true);
                    }
                }
                if (!args.isDelete && newWidth < width) {
                    return;
                }
                this.scroll[this.parent.activeSheetIndex].colCount = args.index + 1;
                this.updateVTrack(this.colHeader, newWidth, 'width');
                if (this.scroll[this.parent.activeSheetIndex].colCount > sheet.colCount) {
                    this.parent.setSheetPropertyOnMute(sheet, 'colCount', this.scroll[this.parent.activeSheetIndex].colCount);
                }
            }
        }
    };
    VirtualScroll.prototype.getVTrackHeight = function (str) {
        var height = this.content.nextElementSibling.style[str];
        if (height.includes('e+')) {
            height = height.split('px')[0];
            var heightArr = height.split('e+');
            return Number(heightArr[0]) * Math.pow(10, Number(heightArr[1]));
        }
        else {
            return parseFloat(height);
        }
    };
    VirtualScroll.prototype.updateVTrackHeight = function (args) {
        if (args.rowIdx < this.scroll[this.parent.activeSheetIndex].rowCount) {
            this.updateVTrack(this.rowHeader, this.getVTrackHeight('height') + args.threshold, 'height');
        }
        if (args.rowIdx < this.parent.viewport.topIndex) {
            this.translateY += args.threshold;
            this.translate({ refresh: 'Row' });
        }
    };
    VirtualScroll.prototype.updateVTrackWidth = function (args) {
        if (args.colIdx >= this.parent.viewport.leftIndex && args.colIdx <= this.parent.viewport.rightIndex) {
            var hdrVTrack = this.parent.getColumnHeaderContent().getElementsByClassName('e-virtualtrack')[0];
            hdrVTrack.style.width = parseFloat(hdrVTrack.style.width) + args.threshold + 'px';
            var cntVTrack = this.parent.getMainContent().getElementsByClassName('e-virtualtrack')[0];
            cntVTrack.style.width = parseFloat(cntVTrack.style.width) + args.threshold + 'px';
            var hdrColumn = this.parent.getColumnHeaderContent().getElementsByClassName('e-virtualable')[0];
            hdrColumn.style.width = parseFloat(hdrColumn.style.width) + args.threshold + 'px';
            var cntColumn = this.parent.getMainContent().getElementsByClassName('e-virtualable')[0];
            cntColumn.style.width = parseFloat(cntColumn.style.width) + args.threshold + 'px';
        }
        else {
            this.parent.scrollModule.offset.left.size += args.threshold;
            this.translateX += args.threshold;
            this.translate({ refresh: 'Column' });
        }
    };
    VirtualScroll.prototype.updateVTrack = function (header, size, sizeStr) {
        header.nextElementSibling.style[sizeStr] = size + "px";
        this.content.nextElementSibling.style[sizeStr] = size + "px";
        if (sizeStr === 'width' && this.parent.allowScrolling) {
            this.parent.getScrollElement().firstElementChild.style.width = size + "px";
        }
    };
    VirtualScroll.prototype.deInitProps = function () {
        this.parent.viewport.leftIndex = null;
        this.parent.viewport.topIndex = null;
        this.parent.viewport.bottomIndex = null;
        this.translateX = null;
        this.translateY = null;
    };
    VirtualScroll.prototype.updateScrollProps = function (args) {
        var _this = this;
        if (args === void 0) { args = { sheetIndex: 0, sheets: this.parent.sheets }; }
        if (this.scroll.length === 0) {
            this.initScroll();
        }
        else {
            args.sheets.forEach(function () { _this.scroll.splice(args.sheetIndex, 0, { rowCount: 0, colCount: 0 }); });
        }
    };
    VirtualScroll.prototype.sliceScrollProps = function (args) {
        if (isNullOrUndefined(args.sheetIndex)) {
            this.scroll.length = 0;
        }
        else {
            this.scroll.splice(args.sheetIndex, 1);
        }
    };
    VirtualScroll.prototype.updateTranslate = function (args) {
        if (args.height) {
            if (args.isRender) {
                this.translateY -= args.height;
            }
            else {
                var height = parseInt(this.parent.getMainContent().getElementsByClassName('e-virtualtrack')[0].style.height, 10);
                if (args.isHide) {
                    this.updateVTrack(this.rowHeader, height - args.height, 'height');
                    this.setThresholdHeight(this.translateY, ((args.prevSize - 1) - this.parent.viewport.topIndex) + 1, this.parent.frozenRowCount(this.parent.getActiveSheet()));
                }
                else {
                    this.updateVTrack(this.rowHeader, height + args.height, 'height');
                    this.translateY = this.translateY + args.size;
                }
            }
            this.translate({ refresh: 'Row' });
        }
        if (args.width) {
            this.translateX -= args.width;
            this.translate({ refresh: 'Column' });
        }
    };
    VirtualScroll.prototype.addEventListener = function () {
        this.parent.on(beforeContentLoaded, this.createVirtualElement, this);
        this.parent.on(beforeVirtualContentLoaded, this.translate, this);
        this.parent.on(virtualContentLoaded, this.updateColumnWidth, this);
        this.parent.on(updateTableWidth, this.updateColumnWidth, this);
        this.parent.on(onVerticalScroll, this.onVerticalScroll, this);
        this.parent.on(onHorizontalScroll, this.onHorizontalScroll, this);
        this.parent.on(updateRowColCount, this.updateRowColCount, this);
        this.parent.on(rowHeightChanged, this.updateVTrackHeight, this);
        this.parent.on(colWidthChanged, this.updateVTrackWidth, this);
        this.parent.on(deInitProperties, this.deInitProps, this);
        this.parent.on(sheetsDestroyed, this.sliceScrollProps, this);
        this.parent.on(sheetCreated, this.updateScrollProps, this);
        this.parent.on(updateTranslate, this.updateTranslate, this);
        this.parent.on(spreadsheetDestroyed, this.destroy, this);
    };
    VirtualScroll.prototype.destroy = function () {
        this.removeEventListener();
        this.rowHeader = null;
        this.colHeader = null;
        this.content = null;
        this.parent = null;
        this.scroll.length = 0;
        this.translateX = null;
        this.translateY = null;
    };
    VirtualScroll.prototype.removeEventListener = function () {
        this.parent.off(beforeContentLoaded, this.createVirtualElement);
        this.parent.off(beforeVirtualContentLoaded, this.translate);
        this.parent.off(virtualContentLoaded, this.updateColumnWidth);
        this.parent.off(updateTableWidth, this.updateColumnWidth);
        this.parent.off(onVerticalScroll, this.onVerticalScroll);
        this.parent.off(onHorizontalScroll, this.onHorizontalScroll);
        this.parent.off(updateRowColCount, this.updateRowColCount);
        this.parent.off(rowHeightChanged, this.updateVTrackHeight);
        this.parent.off(colWidthChanged, this.updateVTrackWidth);
        this.parent.off(sheetsDestroyed, this.sliceScrollProps);
        this.parent.off(sheetCreated, this.updateScrollProps);
        this.parent.off(updateTranslate, this.updateTranslate);
        this.parent.off(spreadsheetDestroyed, this.destroy);
    };
    return VirtualScroll;
}());

/**
 * Represents keyboard navigation support for Spreadsheet.
 */
var KeyboardNavigation = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for the Spreadsheet Keyboard Navigation module.
     *
     * @private
     * @param {Spreadsheet} parent - Specify the spreadsheet
     */
    function KeyboardNavigation(parent) {
        this.parent = parent;
        this.addEventListener();
        /* code snippet */
    }
    KeyboardNavigation.prototype.addEventListener = function () {
        this.parent.on(keyDown, this.keyDownHandler, this);
        /* code snippet */
    };
    KeyboardNavigation.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(keyDown, this.keyDownHandler);
        }
        /* code snippet */
    };
    KeyboardNavigation.prototype.keyDownHandler = function (e) {
        var _this = this;
        if (!this.parent.isEdit && (document.activeElement.classList.contains('e-spreadsheet') ||
            closest(document.activeElement, '.e-sheet')) && !closest(e.target, '.e-name-box')) {
            var isNavigate = void 0;
            var scrollIdxes = void 0;
            var isRtl = this.parent.enableRtl;
            var sheet_1 = this.parent.getActiveSheet();
            var filterArgs = { e: e, isFilterCell: false };
            var actIdxes_1 = getCellIndexes(sheet_1.activeCell);
            if ([9, 37, 38, 39, 40, 33, 34].indexOf(e.keyCode) > -1) {
                e.preventDefault();
            }
            if (e.shiftKey) { // shift selection
                this.shiftSelection(e);
            }
            if (!e.shiftKey && e.altKey && (e.keyCode === 38 || e.keyCode === 40)) {
                this.parent.notify(filterCellKeyDown, filterArgs);
            }
            if ((!e.shiftKey && ((!isRtl && e.keyCode === 37) || (isRtl && e.keyCode === 39)))
                || (e.shiftKey && e.keyCode === 9)) { //left key
                if (actIdxes_1[1] > 0) {
                    actIdxes_1[1] -= 1;
                    isNavigate = true;
                }
                else {
                    var content = this.parent.getMainContent();
                    if (actIdxes_1[1] === 0 && content.scrollLeft && !isRtl) {
                        content.scrollLeft = 0;
                    }
                }
            }
            else if (e.shiftKey && e.keyCode === 13) { // Up key
                if (!this.parent.element.querySelector('.e-find-toolbar')) {
                    if (actIdxes_1[0] > 0) {
                        actIdxes_1[0] -= 1;
                        isNavigate = true;
                    }
                    else {
                        var content = this.parent.getMainContent().parentElement;
                        if (actIdxes_1[0] === 0 && content.scrollTop) {
                            content.scrollTop = 0;
                        }
                    }
                }
            }
            else if (!filterArgs.isFilterCell && !e.shiftKey && e.keyCode === 38) { // Up key
                if (actIdxes_1[0] > 0) {
                    actIdxes_1[0] -= 1;
                    isNavigate = true;
                }
                else {
                    var content = this.parent.getMainContent().parentElement;
                    if (actIdxes_1[0] === 0 && content.scrollTop) {
                        content.scrollTop = 0;
                    }
                }
            }
            else if ((!e.shiftKey && ((!isRtl && e.keyCode === 39) || (isRtl && e.keyCode === 37))) || e.keyCode === 9) { // Right key
                var cell = getCell(actIdxes_1[0], actIdxes_1[1], sheet_1);
                if (cell && cell.colSpan > 1) {
                    actIdxes_1[1] += (cell.colSpan - 1);
                }
                if (actIdxes_1[1] < sheet_1.colCount - 1) {
                    actIdxes_1[1] += 1;
                    isNavigate = true;
                }
            }
            else if ((!filterArgs.isFilterCell && !e.shiftKey && e.keyCode === 40) || e.keyCode === 13) { // Down Key
                var cell = getCell(actIdxes_1[0], actIdxes_1[1], sheet_1);
                if (cell && cell.rowSpan > 1) {
                    actIdxes_1[0] += (cell.rowSpan - 1);
                }
                if (actIdxes_1[0] < sheet_1.rowCount - 1) {
                    actIdxes_1[0] += 1;
                    isNavigate = true;
                }
            }
            /* else if (e.keyCode === 36) {
                actIdxes[1] = 0;
                if (e.ctrlKey) {
                    actIdxes[0] = 0;
                }
                isNavigate = true;
                e.preventDefault();
            } else if (e.keyCode === 35 && e.ctrlKey) {
                actIdxes = [sheet.usedRange.rowIndex, sheet.usedRange.colIndex];
                scrollIdxes = [sheet.usedRange.rowIndex - this.parent.viewport.rowCount,
                    sheet.usedRange.colIndex - this.parent.viewport.colCount];
                isNavigate = true;
                e.preventDefault();
            } */
            else if (!e.shiftKey && (e.keyCode === 34 || e.keyCode === 33) && (!this.parent.scrollModule ||
                this.parent.scrollModule.isKeyScroll)) { // Page Up and Page Down
                var mainPanel = this.parent.element.querySelector('.e-main-panel');
                var diff = 0;
                if (e.keyCode === 34) { // Page Down
                    diff = mainPanel.getBoundingClientRect().height + mainPanel.scrollTop;
                }
                else { // Page Up
                    diff = mainPanel.scrollTop - mainPanel.getBoundingClientRect().height;
                    if (diff < 0) {
                        return;
                    }
                }
                var aRowIdx = getCellIndexes(this.parent.getActiveSheet().activeCell)[0];
                var topRow_1 = getCellIndexes(this.parent.getActiveSheet().paneTopLeftCell)[0];
                var selectDiff_1 = aRowIdx - topRow_1;
                if (this.parent.scrollModule) {
                    this.parent.scrollModule.isKeyScroll = false;
                }
                mainPanel.scrollTop = diff;
                getUpdateUsingRaf(function () {
                    topRow_1 = getCellIndexes(_this.parent.getActiveSheet().paneTopLeftCell)[0];
                    _this.parent.notify(cellNavigate, { range: [topRow_1 + selectDiff_1, actIdxes_1[1]], preventAnimation: true });
                });
            }
            if (isNavigate && (!this.parent.scrollModule || this.parent.scrollModule.isKeyScroll)) {
                if (e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 13) {
                    while (isHiddenRow(sheet_1, actIdxes_1[0])) {
                        if (e.keyCode === 40 || (!e.shiftKey && e.keyCode === 13)) {
                            actIdxes_1[0] = actIdxes_1[0] + 1;
                        }
                        if (e.keyCode === 38 || (e.shiftKey && e.keyCode === 13)) {
                            actIdxes_1[0] = actIdxes_1[0] - 1;
                            if (actIdxes_1[0] < 0) {
                                return;
                            }
                        }
                    }
                }
                if (e.keyCode === 37 || e.keyCode === 39 || e.keyCode === 9) {
                    while (isHiddenCol(sheet_1, actIdxes_1[1])) {
                        if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {
                            actIdxes_1[1] = actIdxes_1[1] + 1;
                        }
                        if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {
                            actIdxes_1[1] = actIdxes_1[1] - 1;
                            if (actIdxes_1[1] < 0) {
                                return;
                            }
                        }
                    }
                }
                this.scrollNavigation(scrollIdxes || actIdxes_1, scrollIdxes ? true : false);
                var range_1 = getRangeAddress(actIdxes_1);
                var navigateFn = function (preventAnimation) {
                    if (range_1 === sheet_1.selectedRange) {
                        return;
                    }
                    _this.parent.setSheetPropertyOnMute(sheet_1, 'activeCell', range_1);
                    _this.parent.notify(cellNavigate, { range: actIdxes_1, preventAnimation: preventAnimation });
                };
                if (this.parent.scrollModule && this.parent.scrollModule.isKeyScroll) {
                    if (range_1 === sheet_1.selectedRange) {
                        return;
                    }
                    getUpdateUsingRaf(navigateFn.bind(this, true));
                }
                else {
                    navigateFn();
                }
            }
        }
        if (e.target.classList.contains('e-sheet-rename')) {
            if (e.keyCode === 32) {
                e.stopPropagation();
            }
            else if (e.keyCode === 13 || e.keyCode === 27) {
                this.parent.notify(renameSheet, e);
            }
        }
    };
    KeyboardNavigation.prototype.shiftSelection = function (e) {
        var sheet = this.parent.getActiveSheet();
        var selectedRange = getRangeIndexes(sheet.selectedRange);
        var swapRange = getSwapRange(selectedRange);
        var noHidden = true;
        if (e.keyCode === 38) { // shift + up arrow
            for (var i = swapRange[1]; i <= swapRange[3]; i++) {
                var cell = getCell(selectedRange[2], i, this.parent.getActiveSheet());
                if (!isNullOrUndefined(cell) && cell.rowSpan && cell.rowSpan < 0) {
                    selectedRange[2] = selectedRange[2] - (Math.abs(cell.rowSpan) + 1);
                    noHidden = false;
                    break;
                }
            }
            if (noHidden) {
                selectedRange[2] = selectedRange[2] - 1;
            }
            if (selectedRange[2] < 0) {
                selectedRange[2] = 0;
            }
        }
        if (e.keyCode === 40) { // shift + down arrow
            for (var i = swapRange[1]; i <= swapRange[3]; i++) {
                var cell = getCell(selectedRange[2], i, this.parent.getActiveSheet());
                if (!isNullOrUndefined(cell) && cell.rowSpan && cell.rowSpan > 0) {
                    selectedRange[2] = selectedRange[2] + Math.abs(cell.rowSpan);
                    noHidden = false;
                    break;
                }
            }
            if (noHidden) {
                selectedRange[2] = selectedRange[2] + 1;
            }
        }
        if (e.keyCode === 39) { // shift + right arrow
            for (var i = swapRange[0]; i <= swapRange[2]; i++) {
                var cell = getCell(i, selectedRange[3], this.parent.getActiveSheet());
                if (!isNullOrUndefined(cell) && cell.colSpan && cell.colSpan > 0) {
                    selectedRange[3] = selectedRange[3] + Math.abs(cell.colSpan);
                    noHidden = false;
                    break;
                }
            }
            if (noHidden) {
                selectedRange[3] = selectedRange[3] + 1;
            }
        }
        if (e.keyCode === 37) { // shift + left arrow
            for (var i = swapRange[0]; i <= swapRange[2]; i++) {
                var cell = getCell(i, selectedRange[3], this.parent.getActiveSheet());
                if (!isNullOrUndefined(cell) && cell.colSpan && cell.colSpan < 0) {
                    selectedRange[3] = selectedRange[3] - (Math.abs(cell.colSpan) + 1);
                    noHidden = false;
                    break;
                }
            }
            if (noHidden) {
                selectedRange[3] = selectedRange[3] - 1;
            }
            if (selectedRange[3] < 0) {
                selectedRange[3] = 0;
            }
        }
        if (e.shiftKey && e.ctrlKey && !this.parent.scrollSettings.enableVirtualization) { // ctrl + shift selection
            var usedRange = [sheet.usedRange.rowIndex, sheet.usedRange.colIndex];
            if (e.keyCode === 37) {
                if (selectedRange[3] <= usedRange[1]) {
                    selectedRange[3] = 0;
                }
                else {
                    selectedRange[3] = usedRange[1];
                }
            }
            if (e.keyCode === 38) {
                if (selectedRange[2] <= usedRange[0]) {
                    selectedRange[2] = 0;
                }
                else {
                    selectedRange[2] = usedRange[0];
                }
            }
            if (e.keyCode === 39) {
                if (selectedRange[3] <= usedRange[1]) {
                    selectedRange[3] = usedRange[1];
                }
                else {
                    selectedRange[3] = this.parent.getActiveSheet().colCount;
                }
            }
            if (e.keyCode === 40) {
                if (selectedRange[2] <= usedRange[0]) {
                    selectedRange[2] = usedRange[0];
                }
                else {
                    selectedRange[2] = this.parent.getActiveSheet().rowCount;
                }
            }
        }
        if (e.keyCode === 37 || e.keyCode === 39 || e.keyCode === 38 || e.keyCode === 40) {
            var activeIdxes = getCellIndexes(sheet.activeCell);
            while (isHiddenRow(this.parent.getActiveSheet(), selectedRange[2])) {
                if (e.keyCode === 40) {
                    selectedRange[2] = selectedRange[2] + 1;
                }
                if (e.keyCode === 38) {
                    selectedRange[2] = selectedRange[2] - 1;
                }
            }
            this.parent.selectRange(getRangeAddress(selectedRange));
            this.scrollNavigation([isColumnSelected(sheet, selectedRange) ? activeIdxes[0] : selectedRange[2],
                isRowSelected(sheet, selectedRange) ? activeIdxes[1] : selectedRange[3]], false);
        }
    };
    KeyboardNavigation.prototype.scrollNavigation = function (actIdxes, isScroll) {
        if (!this.parent.allowScrolling) {
            return;
        }
        var x = this.parent.enableRtl ? -1 : 1;
        var cont = this.parent.getMainContent().parentElement;
        var hCont = this.parent.getScrollElement();
        var sheet = this.parent.getActiveSheet();
        var selectedRange = getSwapRange(getRangeIndexes(sheet.selectedRange));
        var topLeftIdxes = getCellIndexes(sheet.topLeftCell);
        var frozenRow = this.parent.frozenRowCount(sheet);
        var frozenCol = this.parent.frozenColCount(sheet);
        var paneTopLeftIdxes = getCellIndexes(sheet.paneTopLeftCell);
        var topIdx = skipHiddenIdx(sheet, actIdxes[0] < frozenRow ? topLeftIdxes[0] : paneTopLeftIdxes[0], true);
        var leftIdx = actIdxes[1] < frozenCol ? topLeftIdxes[1] : paneTopLeftIdxes[1];
        var offsetTopSize = this.parent.scrollModule.offset.top.size;
        if (cont.scrollTop) {
            if (frozenRow && actIdxes[0] !== selectedRange[2]) {
                if (actIdxes[0] === frozenRow) {
                    cont.scrollTop = 0;
                    return;
                }
                if (actIdxes[0] === frozenRow - 1) {
                    cont.scrollTop = 0;
                }
            }
            else if (actIdxes[0] === skipHiddenIdx(sheet, 0, true)) {
                cont.scrollTop = 0;
                return;
            }
        }
        if (hCont && hCont.scrollLeft) {
            if (frozenCol && actIdxes[1] !== selectedRange[3]) {
                if (actIdxes[1] === frozenCol) {
                    hCont.scrollLeft = 0;
                    return;
                }
                if (actIdxes[1] === frozenCol - 1) {
                    hCont.scrollLeft = 0;
                }
            }
            else if (actIdxes[1] === skipHiddenIdx(sheet, 0, true, 'columns')) {
                hCont.scrollLeft = 0;
                return;
            }
        }
        if (this.getBottomIdx(topIdx) <= actIdxes[0] || isScroll) {
            cont.scrollTop = offsetTopSize + getRowHeight(sheet, skipHiddenIdx(sheet, paneTopLeftIdxes[0], true), true);
            this.parent.scrollModule.isKeyScroll = false;
        }
        else if (topIdx > actIdxes[0]) {
            cont.scrollTop = offsetTopSize - Math.ceil(getRowHeight(sheet, actIdxes[0], true));
            this.parent.scrollModule.isKeyScroll = false;
        }
        var scrollLeftIdx = this.getRightIdx(leftIdx);
        if ((scrollLeftIdx <= actIdxes[1] || isScroll) && hCont) {
            hCont.scrollLeft += getColumnWidth(sheet, scrollLeftIdx, null, true) * x;
            this.parent.scrollModule.isKeyScroll = false;
        }
        else if (leftIdx > actIdxes[1] && hCont) {
            hCont.scrollLeft -= getColumnWidth(sheet, actIdxes[1], null, true) * x;
            this.parent.scrollModule.isKeyScroll = false;
        }
    };
    KeyboardNavigation.prototype.getBottomIdx = function (top) {
        var hgt = 0;
        var sheet = this.parent.getActiveSheet();
        var viewPortHeight = (sheet.frozenRows ? this.parent.viewport.height - this.parent.sheetModule.getColHeaderHeight(sheet, true) : this.parent.viewport.height) - 17 || 20;
        for (var i = top;; i++) {
            hgt += getRowHeight(sheet, i, true);
            if (hgt >= viewPortHeight) {
                return i;
            }
        }
    };
    KeyboardNavigation.prototype.getRightIdx = function (left) {
        var width = 0;
        var sheet = this.parent.getActiveSheet();
        var contWidth = this.parent.getMainContent().parentElement.offsetWidth -
            this.parent.sheetModule.getRowHeaderWidth(sheet) - this.parent.sheetModule.getScrollSize();
        for (var i = left;; i++) {
            width += getColumnWidth(sheet, i, null, true);
            if (width >= contWidth) {
                return i;
            }
        }
    };
    /**
     * For internal use only - Get the module name.
     *
     * @private
     * @returns {string} - Get the module name.
     */
    KeyboardNavigation.prototype.getModuleName = function () {
        return 'keyboardNavigation';
    };
    KeyboardNavigation.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    return KeyboardNavigation;
}());

/**
 * Represents keyboard shortcut support for Spreadsheet.
 */
var KeyboardShortcut = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for the Spreadsheet Keyboard Shortcut module.
     *
     * @param {Spreadsheet} parent - Specify the spreadsheet.
     * @private
     */
    function KeyboardShortcut(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    KeyboardShortcut.prototype.addEventListener = function () {
        this.parent.on(keyDown, this.keyDownHandler, this);
    };
    KeyboardShortcut.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(keyDown, this.keyDownHandler);
        }
    };
    KeyboardShortcut.prototype.isTrgtNotInput = function (e) {
        var trgt = e.target;
        return (!closest(trgt, '.e-filter-popup')
            && !closest(trgt, '.e-find-dlg') && !closest(trgt, '.e-hyperlink-dlg') &&
            !closest(trgt, '.e-sheet-tab') && !closest(trgt, '.e-name-box') && !closest(trgt, '.e-link-dialog'));
    };
    KeyboardShortcut.prototype.keyDownHandler = function (e) {
        if ((e.ctrlKey || e.metaKey) && this.isTrgtNotInput(e)) {
            if (!closest(e.target, '.e-find-dlg')) {
                if ([79, 83].indexOf(e.keyCode) > -1) {
                    e.preventDefault();
                }
                else if (e.keyCode === 65 && !this.parent.isEdit) {
                    e.preventDefault();
                }
            }
            if (e.keyCode === 79) {
                select('#' + this.parent.element.id + '_fileUpload', this.parent.element).click();
            }
            else if (e.keyCode === 83) {
                if (this.parent.saveUrl && this.parent.allowSave) {
                    this.parent.notify(exportDialog, null);
                }
            }
            else if (e.keyCode === 67) {
                this.parent.notify(copy, { promise: Promise });
            }
            else if (e.keyCode === 75) {
                var sheet = this.parent.getActiveSheet();
                var indexes = getCellIndexes(sheet.activeCell);
                var row = this.parent.sheets[this.parent.getActiveSheet().id - 1].rows[indexes[0]];
                var cell = void 0;
                e.preventDefault();
                if (!isNullOrUndefined(row)) {
                    cell = row.cells[indexes[1]];
                }
                if (isNullOrUndefined(cell)) {
                    setCell(indexes[0], indexes[1], this.parent.getActiveSheet(), cell, false);
                }
                if (cell && cell.hyperlink) {
                    this.parent.notify(editHyperlink, null);
                }
                else {
                    this.parent.notify(initiateHyperlink, null);
                }
            }
            else if (e.keyCode === 90) { /* Ctrl + Z */
                if (!this.parent.isEdit) {
                    e.preventDefault();
                    this.parent.notify(performUndoRedo, { isUndo: true });
                }
            }
            else if (e.keyCode === 89) { /* Ctrl + Y */
                if (!this.parent.isEdit) {
                    e.preventDefault();
                    this.parent.notify(performUndoRedo, { isUndo: false });
                }
            }
            else if (e.keyCode === 82 || e.keyCode === 68) { /* Ctrl + R */ /* Ctrl + D */
                e.preventDefault();
                this.parent.notify(fillRange, { verticalFill: e.keyCode === 68 });
            }
            var actSheet = this.parent.sheets[this.parent.getActiveSheet().id - 1];
            var isLocked$$1 = void 0;
            if (actSheet) {
                var actCell = actSheet.activeCell;
                var actCellIndex = getCellIndexes(actCell);
                var cellObj = getCell(actCellIndex[0], actCellIndex[1], actSheet);
                isLocked$$1 = actSheet.isProtected && isLocked(cellObj, getColumn(actSheet, actCellIndex[1]));
            }
            if (e.keyCode === 70) {
                e.preventDefault();
                this.parent.notify(ribbonFind, null);
            }
            if ((!isLocked$$1 || !actSheet.isProtected || e.keyCode === 86) && e.keyCode !== 70) {
                if (e.keyCode === 71) {
                    e.preventDefault();
                    this.parent.notify(gotoDlg, null);
                }
                else if (e.keyCode === 72) {
                    e.preventDefault();
                    this.parent.notify(findDlg, null);
                }
                else if (e.keyCode === 88) {
                    this.parent.notify(cut, { promise: Promise });
                }
                else if (e.keyCode === 86) {
                    this.parent.notify(paste, { isAction: true });
                }
                else if (e.keyCode === 66) {
                    e.preventDefault();
                    var value = this.parent.getCellStyleValue(['fontWeight'], getCellIndexes(this.parent.getActiveSheet().activeCell)).fontWeight;
                    value = value === 'bold' ? 'normal' : 'bold';
                    this.parent.notify(setCellFormat, { style: { fontWeight: value }, onActionUpdate: true, refreshRibbon: true });
                }
                else if (e.keyCode === 73) {
                    e.preventDefault();
                    var value = this.parent.getCellStyleValue(['fontStyle'], getCellIndexes(this.parent.getActiveSheet().activeCell)).fontStyle;
                    value = value === 'italic' ? 'normal' : 'italic';
                    this.parent.notify(setCellFormat, { style: { fontStyle: value }, onActionUpdate: true, refreshRibbon: true });
                }
                else if (e.keyCode === 85) {
                    e.preventDefault();
                    this.parent.notify(textDecorationUpdate, { style: { textDecoration: 'underline' }, refreshRibbon: true });
                }
                else if (e.keyCode === 53) {
                    e.preventDefault();
                    this.parent.notify(textDecorationUpdate, { style: { textDecoration: 'line-through' }, refreshRibbon: true });
                }
                if (e.shiftKey) {
                    if (e.keyCode === 76) { /* Ctrl + Shift + L */
                        if (!this.parent.isEdit) {
                            e.preventDefault();
                            this.parent.notify(initiateFilterUI, {});
                        }
                    }
                }
            }
        }
        if (e.keyCode === 27) {
            this.parent.notify(clearCopy, null);
        }
    };
    KeyboardShortcut.prototype.getModuleName = function () {
        return 'keyboardShortcut';
    };
    KeyboardShortcut.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    return KeyboardShortcut;
}());

/**
 * CellFormat module allows to format the cell styles.
 */
var CellFormat = /** @__PURE__ @class */ (function () {
    function CellFormat(parent) {
        this.checkHeight = false;
        this.parent = parent;
        this.row = parent.createElement('tr', { className: 'e-row' });
        this.parent.on(initialLoad, this.addEventListener, this);
    }
    CellFormat.prototype.applyCellFormat = function (args) {
        var keys = Object.keys(args.style);
        var sheet = this.parent.getActiveSheet();
        if (args.lastCell && getMaxHgt(sheet, args.rowIdx) <= 20 && !keys.length) {
            return;
        }
        var cell = args.cell || this.parent.getCell(args.rowIdx, args.colIdx);
        if (cell) {
            this.updateMergeBorder(args, sheet);
            if (args.style.border !== undefined || args.style.borderTop !== undefined || args.style.borderLeft !== undefined) {
                var curStyle_1 = {};
                Object.keys(args.style).forEach(function (key) { curStyle_1[key] = args.style[key]; });
                if (curStyle_1.border !== undefined) {
                    Object.assign(cell.style, { borderRight: args.style.border, borderBottom: args.style.border });
                    this.setLeftBorder(args.style.border, cell, args.rowIdx, args.colIdx, args.row, args.onActionUpdate, args.first, sheet);
                    this.setTopBorder(args.style.border, cell, args.rowIdx, args.colIdx, args.pRow, args.pHRow, args.onActionUpdate, args.first, args.lastCell, args.manualUpdate, sheet);
                    delete curStyle_1.border;
                }
                if (curStyle_1.borderTop !== undefined) {
                    this.setTopBorder(args.style.borderTop, cell, args.rowIdx, args.colIdx, args.pRow, args.pHRow, args.onActionUpdate, args.first, args.lastCell, args.manualUpdate, sheet);
                    delete curStyle_1.borderTop;
                }
                if (curStyle_1.borderLeft !== undefined) {
                    this.setLeftBorder(args.style.borderLeft, cell, args.rowIdx, args.colIdx, args.row, args.onActionUpdate, args.first, sheet);
                    delete curStyle_1.borderLeft;
                }
                if (Object.keys(curStyle_1).length) {
                    if (curStyle_1.borderBottom !== undefined) {
                        this.setThickBorderHeight(curStyle_1.borderBottom, args.rowIdx, args.colIdx, cell, args.row, args.hRow, args.onActionUpdate, args.lastCell, args.manualUpdate);
                    }
                    Object.assign(cell.style, curStyle_1);
                }
            }
            else {
                if (args.style.borderBottom !== undefined) {
                    this.setThickBorderHeight(args.style.borderBottom, args.rowIdx, args.colIdx, cell, args.row, args.hRow, args.onActionUpdate, args.lastCell, args.manualUpdate);
                }
                // if (currCell.format && currCell.format.indexOf('[') > -1 && !isNumber(currCell.value)) {
                //     //do nothing
                // } else {
                //     Object.assign(cell.style, args.style);
                // }
                Object.assign(cell.style, args.style);
                var CellElem = getCell(args.rowIdx, args.colIdx, sheet); // Need to remove after adding span support to merge
                if (CellElem && (CellElem.rowSpan || CellElem.colSpan) && cell.offsetHeight > 0) {
                    var height = getTextHeight(this.parent, CellElem.style || this.parent.cellStyle);
                    if (height > cell.offsetHeight) {
                        setRowEleHeight(this.parent, sheet, cell.offsetHeight, args.rowIdx);
                    }
                }
            }
            if (args.isHeightCheckNeeded) {
                var cellModel = getCell(args.rowIdx, args.colIdx, sheet, null, true);
                if (!sheet.rows[args.rowIdx] || !sheet.rows[args.rowIdx].customHeight) {
                    if (!args.manualUpdate) {
                        if (!cellModel.wrap && this.isHeightCheckNeeded(args.style)) {
                            setMaxHgt(sheet, args.rowIdx, args.colIdx, getTextHeightWithBorder(this.parent, args.rowIdx, args.colIdx, sheet, args.style));
                        }
                        if (args.lastCell) {
                            var height = getMaxHgt(sheet, args.rowIdx);
                            if (height > 20 && height > getRowHeight(sheet, args.rowIdx)) {
                                setRowEleHeight(this.parent, sheet, height, args.rowIdx, args.row, args.hRow, this.parent.scrollSettings.isFinite);
                            }
                        }
                    }
                    else {
                        if (!this.checkHeight) {
                            this.checkHeight = this.isHeightCheckNeeded(args.style, args.onActionUpdate);
                        }
                        if (cell && cell.children[0] && cell.children[0].className === 'e-cf-databar' && args.style.fontSize) {
                            cell.children[0].querySelector('.e-databar-value').style.fontSize = args.style.fontSize;
                        }
                        this.updateRowHeight(args.rowIdx, args.colIdx, args.lastCell, args.onActionUpdate);
                        if (cellModel.wrap && (args.style.fontSize || args.style.fontFamily)) {
                            cell.style.lineHeight = (parseFloat((cellModel.style && cellModel.style.fontSize) || this.parent.cellStyle.fontSize) * getLineHeight(cellModel.style && cellModel.style.fontFamily ?
                                cellModel.style : this.parent.cellStyle)) + 'pt';
                        }
                    }
                }
                else if (!cellModel.wrap && (args.style.fontSize || args.style.fontFamily)) {
                    var hgt = getRowHeight(sheet, args.rowIdx, true) - getBorderHeight(args.rowIdx, args.colIdx, sheet);
                    if (hgt < getTextHeight(this.parent, cellModel.style)) {
                        cell.style.lineHeight = hgt + "px";
                    }
                    else if (cell.style.lineHeight) {
                        cell.style.lineHeight = '';
                    }
                }
            }
        }
        else {
            this.updateRowHeight(args.rowIdx, args.colIdx, true, args.onActionUpdate);
        }
    };
    CellFormat.prototype.updateRowHeight = function (rowIdx, colIdx, isLastCell, onActionUpdate) {
        if (this.checkHeight) {
            var hgt = 0;
            var maxHgt = void 0;
            var sheet = this.parent.getActiveSheet();
            var cell = getCell(rowIdx, colIdx, sheet, null, true);
            var td = this.parent.getCell(rowIdx, colIdx);
            if (!cell.rowSpan && !cell.colSpan) {
                hgt = getTextHeightWithBorder(this.parent, rowIdx, colIdx, sheet, cell.style ||
                    this.parent.cellStyle, cell.wrap ? getLines(this.parent.getDisplayText(cell), getExcludedColumnWidth(sheet, rowIdx, colIdx), cell.style, this.parent.cellStyle) : 1);
                if (!isNullOrUndefined(cell.value)) {
                    var val = cell.value.toString();
                    if (val.indexOf('\n') > -1) {
                        var i = void 0;
                        var splitVal = cell.value.split('\n');
                        var n = 0;
                        var valLength = splitVal.length;
                        for (i = 0; i < valLength; i++) {
                            var lines = getLines(splitVal[i], getExcludedColumnWidth(sheet, rowIdx, colIdx), cell.style, this.parent.cellStyle);
                            if (lines === 0) {
                                lines = 1; // for empty new line
                            }
                            n = n + lines;
                        }
                        hgt =
                            getTextHeightWithBorder(this.parent, rowIdx, colIdx, sheet, cell.style || this.parent.cellStyle, n);
                    }
                }
                if (hgt < 20) {
                    hgt = 20; // default height
                }
                if (td && td.children[0] && td.children[0].className === 'e-cf-databar') {
                    td.children[0].style.height = '100%';
                    td.children[0].firstElementChild.nextElementSibling.style.height = '100%';
                }
                setMaxHgt(sheet, rowIdx, colIdx, hgt);
                if (isLastCell) {
                    this.checkHeight = false;
                    var row = sheet.frozenRows ? this.parent.getRow(rowIdx, null, sheet.frozenColumns) :
                        this.parent.getRow(rowIdx);
                    if (!row) {
                        return;
                    }
                    var prevHeight = getRowHeight(sheet, rowIdx);
                    maxHgt = getMaxHgt(sheet, rowIdx);
                    var heightChanged = onActionUpdate ? maxHgt !== prevHeight : maxHgt > prevHeight;
                    if (heightChanged) {
                        setRowEleHeight(this.parent, sheet, maxHgt, rowIdx, row, null, true);
                    }
                }
            }
        }
    };
    CellFormat.prototype.updateMergeBorder = function (args, sheet) {
        var cellModel = getCell(args.rowIdx, args.colIdx, sheet, null, true);
        var mergeArgs = { range: [args.rowIdx, args.colIdx, args.rowIdx, args.colIdx] };
        this.parent.notify(activeCellMergedRange, mergeArgs);
        if (cellModel.rowSpan > 1 && !args.style.borderBottom) {
            var bottomCell = getCell(mergeArgs.range[2], mergeArgs.range[1], sheet, null, true);
            if (bottomCell.style && bottomCell.style.borderBottom) {
                args.style.borderBottom = bottomCell.style.borderBottom;
            }
        }
        if (cellModel.colSpan > 1 && !args.style.borderRight) {
            var rightCell = getCell(mergeArgs.range[0], mergeArgs.range[3], sheet, null, true);
            if (rightCell.style && rightCell.style.borderRight) {
                args.style.borderRight = rightCell.style.borderRight;
            }
        }
    };
    CellFormat.prototype.isHeightCheckNeeded = function (style, onActionUpdate) {
        var keys = Object.keys(style);
        return (onActionUpdate ? keys.indexOf('fontSize') > -1 : keys.indexOf('fontSize') > -1
            && Number(style.fontSize.split('pt')[0]) > 12) || keys.indexOf('fontFamily') > -1 || keys.indexOf('borderTop') > -1
            || keys.indexOf('borderBottom') > -1;
    };
    CellFormat.prototype.setLeftBorder = function (border, cell, rowIdx, colIdx, row, actionUpdate, first, sheet) {
        if (first && first.includes('Column')) {
            return;
        }
        var prevCell = this.parent.getCell(rowIdx, colIdx - 1, row);
        if (prevCell) {
            var model = getCell(rowIdx, colIdx - 1, sheet, false, true);
            if ((!!model.rowSpan && model.rowSpan !== 1) || (!!model.colSpan && model.colSpan !== 1)) {
                var mergeArgs = { range: [rowIdx, colIdx - 1, rowIdx, colIdx - 1] };
                this.parent.notify(activeCellMergedRange, mergeArgs);
                model = getCell(mergeArgs.range[0], mergeArgs.range[1], sheet, false, true);
                if (model.style && model.style.borderRight && model.style.borderRight !== 'none') {
                    return;
                }
                else {
                    model = getCell(mergeArgs.range[0], mergeArgs.range[3], sheet, null, true);
                    if (model.style && model.style.borderRight && model.style.borderRight !== 'none') {
                        return;
                    }
                    cell.style.borderLeft = border;
                }
            }
            else {
                if (actionUpdate && border !== '' && colIdx === this.parent.viewport.leftIndex) {
                    this.parent.getMainContent().scrollLeft -= this.getBorderSize(border);
                }
                prevCell.style.borderRight = (border === 'none') ? prevCell.style.borderRight : border;
            }
        }
        else {
            cell.style.borderLeft = border;
        }
    };
    CellFormat.prototype.setTopBorder = function (border, cell, rowIdx, colIdx, pRow, pHRow, actionUpdate, first, lastCell, manualUpdate, sheet) {
        if (first && first.includes('Row')) {
            return;
        }
        var prevCell = this.parent.getCell(rowIdx - 1, colIdx, pRow);
        if (prevCell) {
            var model = getCell(rowIdx - 1, colIdx, sheet, false, true);
            if ((!!model.rowSpan && model.rowSpan !== 1) || (!!model.colSpan && model.colSpan !== 1)) {
                var mergeArgs = { range: [rowIdx - 1, colIdx, rowIdx - 1, colIdx] };
                this.parent.notify(activeCellMergedRange, mergeArgs);
                model = getCell(mergeArgs.range[0], mergeArgs.range[1], sheet, false, true);
                if (model.style && model.style.borderBottom && model.style.borderBottom !== 'none') {
                    return;
                }
                else {
                    model = getCell(mergeArgs.range[2], mergeArgs.range[1], sheet, null, true);
                    if (model.style && model.style.borderBottom && model.style.borderBottom !== 'none') {
                        return;
                    }
                    cell.style.borderTop = border;
                }
            }
            else {
                if (isHiddenRow(sheet, rowIdx - 1)) {
                    var index = [Number(prevCell.parentElement.getAttribute('aria-rowindex')) - 1, colIdx];
                    if (this.parent.getCellStyleValue(['bottomPriority'], index).bottomPriority) {
                        return;
                    }
                }
                if (actionUpdate && border !== '' && sheet.topLeftCell.includes("" + (rowIdx + 1))) {
                    this.parent.getMainContent().parentElement.scrollTop -= this.getBorderSize(border);
                }
                this.setThickBorderHeight(border, rowIdx - 1, colIdx, prevCell, pRow, pHRow, actionUpdate, lastCell, manualUpdate);
                prevCell.style.borderBottom = (border === 'none') ? prevCell.style.borderBottom : border;
            }
        }
        else {
            cell.style.borderTop = border;
        }
    };
    CellFormat.prototype.setThickBorderHeight = function (border, rowIdx, colIdx, cell, row, hRow, actionUpdate, lastCell, manualUpdate) {
        var size = border ? this.getBorderSize(border) : 1;
        var sheet = this.parent.getActiveSheet();
        if (size > 2 && (!sheet.rows[rowIdx] || !sheet.rows[rowIdx].customHeight)) {
            if (manualUpdate) {
                if (!this.checkHeight) {
                    this.checkHeight = true;
                }
                this.updateRowHeight(rowIdx, colIdx, lastCell, actionUpdate);
            }
            else {
                var prevHeight = getRowHeight(sheet, rowIdx);
                var height = Math.ceil(this.parent.calculateHeight(this.parent.getCellStyleValue(['fontFamily', 'fontSize'], [rowIdx, colIdx]), 1, 3));
                if (height > prevHeight) {
                    setRowEleHeight(this.parent, sheet, height, rowIdx, row, hRow, false);
                    this.parent.notify(rowHeightChanged, { rowIdx: rowIdx, threshold: height - 20 });
                }
            }
        }
        if (actionUpdate && (lastCell || !this.checkHeight) && size < 3 && (!sheet.rows[rowIdx] || !sheet.rows[rowIdx].customHeight)) {
            if (!this.checkHeight) {
                this.checkHeight = true;
            }
            this.updateRowHeight(rowIdx, colIdx, lastCell, actionUpdate);
        }
    };
    CellFormat.prototype.getBorderSize = function (border) {
        var size = border.split(' ')[0];
        return size === 'thin' ? 1 : (size === 'medium' ? 2 : (size === 'thick' ? 3 :
            (parseInt(size, 10) ? parseInt(size, 10) : 1)));
    };
    CellFormat.prototype.clearObj = function (args) {
        var options = args.options;
        var range = options.range ? (options.range.indexOf('!') > 0) ? options.range.split('!')[1] : options.range.split('!')[0]
            : this.parent.getActiveSheet().selectedRange;
        var sheetIndex = (options.range && options.range.indexOf('!') > 0) ?
            getSheetIndex(this.parent, options.range.split('!')[0]) : this.parent.activeSheetIndex;
        var rangeIdx = getRangeIndexes(range);
        var sheet = this.parent.sheets[sheetIndex];
        var sRIdx = rangeIdx[0];
        var eRIdx = rangeIdx[2];
        var sCIdx;
        var eCIdx;
        var eventArgs = { range: range, type: options.type, requestType: 'clear', sheetIndex: sheetIndex };
        if (!args.isPublic) {
            this.parent.notify(beginAction, { action: 'beforeClear', eventArgs: eventArgs });
        }
        if (options.type === 'Clear Formats' || options.type === 'Clear All') {
            this.parent.notify(clearCFRule, { range: range, isPublic: false, isclearFormat: true });
            for (sRIdx; sRIdx <= eRIdx; sRIdx++) {
                sCIdx = rangeIdx[1];
                eCIdx = rangeIdx[3];
                for (sCIdx; sCIdx <= eCIdx; sCIdx++) {
                    var cell = getCell(sRIdx, sCIdx, sheet);
                    var cellElem = this.parent.getCell(sRIdx, sCIdx);
                    if (cell) {
                        if (cell.formula) {
                            this.parent.notify(clearFormulaDependentCells, { cellRef: getRangeAddress([sRIdx, sCIdx, sRIdx, sCIdx]) });
                        }
                        if (cell.wrap) {
                            this.parent.notify(wrapEvent, { range: [sRIdx, sCIdx, sRIdx, sCIdx], wrap: false, sheet: sheet });
                        }
                        if (cell.hyperlink) {
                            removeClass(cellElem.querySelectorAll('.e-hyperlink'), 'e-hyperlink-style');
                            if (options.type === 'Clear All') {
                                this.parent.removeHyperlink(getRangeAddress([sRIdx, sCIdx, sRIdx, sCIdx]));
                            }
                        }
                    }
                }
            }
        }
        if (options.type === 'Clear Hyperlinks') {
            this.parent.removeHyperlink(range);
            return;
        }
        this.parent.notify(clear, { range: sheet.name + '!' + range, type: options.type });
        this.parent.serviceLocator.getService('cell').refreshRange(getRangeIndexes(range));
        if (!args.isPublic) {
            eventArgs = { range: sheet.name + '!' + range, type: options.type, sheetIndex: sheetIndex };
            this.parent.notify('actionComplete', { eventArgs: eventArgs, action: 'clear' });
        }
        this.parent.notify(addHighlight, { range: range, isclearFormat: true });
        this.parent.notify(selectRange, { address: range });
        this.parent.notify(activeCellChanged, null);
    };
    CellFormat.prototype.addEventListener = function () {
        this.parent.on(applyCellFormat, this.applyCellFormat, this);
        this.parent.on(clearViewer, this.clearObj, this);
    };
    CellFormat.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(initialLoad, this.addEventListener);
            this.parent.off(applyCellFormat, this.applyCellFormat);
            this.parent.off(clearViewer, this.clearObj);
        }
    };
    /**
     * Destroy cell format module.
     *
     * @returns {void} - Destroy cell format module.
     */
    CellFormat.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
        this.row = null;
        this.checkHeight = null;
    };
    /**
     * Get the cell format module name.
     *
     * @returns {string} - Get the cell format module name.
     */
    CellFormat.prototype.getModuleName = function () {
        return 'cellformat';
    };
    return CellFormat;
}());

/**
 * The `Resize` module is used to handle the resizing functionalities in Spreadsheet.
 */
var Resize = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for resize module in Spreadsheet.
     *
     * @param {Spreadsheet} parent - Constructor for resize module in Spreadsheet.
     * @private
     */
    function Resize(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    Resize.prototype.addEventListener = function () {
        this.parent.on(contentLoaded, this.wireEvents, this);
        this.parent.on(autoFit, this.autoFit, this);
        this.parent.on(setAutoFit, this.setAutoFitHandler, this);
    };
    Resize.prototype.autoFit = function (args) {
        var element = args.isRow ? this.parent.getRowHeaderTable() : this.parent.getColHeaderTable().rows[0];
        for (var i = args.startIndex; i <= args.endIndex; i++) {
            this.trgtEle = args.isRow ? this.parent.getRow(i, element) :
                this.parent.getCell(null, i, element);
            this.setAutofit(i, !args.isRow);
        }
    };
    Resize.prototype.wireEvents = function () {
        var rowHeader = this.parent.getRowHeaderContent();
        var colHeader = this.parent.element.getElementsByClassName('e-header-panel')[0];
        if (!colHeader) {
            return;
        }
        EventHandler.add(colHeader, 'dblclick', this.dblClickHandler, this);
        EventHandler.add(rowHeader, 'dblclick', this.dblClickHandler, this);
        EventHandler.add(colHeader, 'mousedown', this.mouseDownHandler, this);
        EventHandler.add(rowHeader, 'mousedown', this.mouseDownHandler, this);
        this.wireResizeCursorEvent(rowHeader, colHeader);
    };
    Resize.prototype.wireResizeCursorEvent = function (rowHeader, colHeader) {
        EventHandler.add(rowHeader, 'mousemove', this.setTarget, this);
        EventHandler.add(colHeader, 'mousemove', this.setTarget, this);
    };
    Resize.prototype.unWireResizeCursorEvent = function () {
        EventHandler.remove(this.parent.getRowHeaderContent(), 'mousemove', this.setTarget);
        var headerPanel = this.parent.element.getElementsByClassName('e-header-panel')[0];
        if (headerPanel) {
            EventHandler.remove(headerPanel, 'mousemove', this.setTarget);
        }
    };
    Resize.prototype.unwireEvents = function () {
        EventHandler.remove(this.parent.getColumnHeaderContent(), 'dblclick', this.dblClickHandler);
        EventHandler.remove(this.parent.getRowHeaderContent(), 'dblclick', this.dblClickHandler);
        EventHandler.remove(this.parent.getColumnHeaderContent(), 'mousedown', this.mouseDownHandler);
        EventHandler.remove(this.parent.getRowHeaderContent(), 'mousedown', this.mouseDownHandler);
        this.unWireResizeCursorEvent();
    };
    Resize.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(contentLoaded, this.wireEvents);
            this.parent.off(autoFit, this.autoFit);
            this.parent.off(setAutoFit, this.setAutoFitHandler);
        }
    };
    Resize.prototype.mouseMoveHandler = function (e) {
        var colResizeHandler = this.parent.element.getElementsByClassName('e-colresize-handler')[0];
        var rowResizeHandler = this.parent.element.getElementsByClassName('e-rowresize-handler')[0];
        this.resizeTooltip(null, true, e);
        if (colResizeHandler || rowResizeHandler) {
            this.isMouseMoved = true;
            if (colResizeHandler) {
                if (e.x > this.trgtEle.parentElement.firstChild.getBoundingClientRect().left) {
                    colResizeHandler.style.left = e.clientX -
                        document.getElementById(this.parent.element.id + '_sheet').getBoundingClientRect().left + 'px';
                }
            }
            else if (rowResizeHandler) {
                if (e.y >= this.trgtEle.parentElement.parentElement.firstChild.getBoundingClientRect().top) {
                    rowResizeHandler.style.top = e.clientY -
                        document.getElementById(this.parent.element.id + '_sheet').getBoundingClientRect().top + 'px';
                }
            }
        }
    };
    Resize.prototype.mouseDownHandler = function (e) {
        if (!closest(e.target, '.e-header-cell')) {
            return;
        }
        this.event = e;
        this.trgtEle = e.target;
        if (this.trgtEle.parentElement.classList.contains('e-hide-end') || this.trgtEle.classList.contains('e-hide-end')) {
            var offsetSize = this.trgtEle.offsetHeight;
            var offset = e.offsetY;
            if ((offsetSize >= 10 && offset < 5) || (offsetSize - 2 < 8 && offset < Math.ceil((offset - 2) / 2))) {
                this.trgtEle.classList.add('e-skip-resize');
            }
        }
        this.updateTarget(e, this.trgtEle);
        var trgt = this.trgtEle;
        var className = trgt.classList.contains('e-colresize') ? 'e-colresize-handler' :
            trgt.classList.contains('e-rowresize') ? 'e-rowresize-handler' : '';
        this.createResizeHandler(trgt, className);
        this.unWireResizeCursorEvent();
        EventHandler.add(this.parent.element, 'mousemove', this.mouseMoveHandler, this);
        EventHandler.add(document, 'mouseup', this.mouseUpHandler, this);
    };
    Resize.prototype.mouseUpHandler = function (e) {
        var resizeHandler = this.parent.element.getElementsByClassName('e-resize-handle')[0];
        this.resizeOn(e);
        this.isMouseMoved = null;
        var HeaderTooltip = document.querySelector('.e-header-tooltip');
        if (resizeHandler) {
            detach(resizeHandler);
            this.updateCursor();
        }
        if (HeaderTooltip) {
            HeaderTooltip.remove();
        }
        EventHandler.remove(document, 'mouseup', this.mouseUpHandler);
        EventHandler.remove(this.parent.element, 'mousemove', this.mouseMoveHandler);
        this.wireResizeCursorEvent(this.parent.getRowHeaderContent(), this.parent.element.getElementsByClassName('e-header-panel')[0]);
        this.parent.notify(positionAutoFillElement, null);
        this.parent.notify(hideAutoFillOptions, null);
    };
    Resize.prototype.dblClickHandler = function (e) {
        if (!closest(e.target, '.e-header-cell')) {
            return;
        }
        this.trgtEle = e.target;
        this.updateTarget(e, this.trgtEle);
        if (this.trgtEle.classList.contains('e-colresize')) {
            var colIndx = parseInt(this.trgtEle.getAttribute('aria-colindex'), 10) - 1;
            var prevWidth = getColumnWidth(this.parent.getActiveSheet(), colIndx) + "px";
            if (this.trgtEle.classList.contains('e-unhide-column')) {
                this.showHiddenColumns(colIndx - 1);
            }
            else {
                this.setAutofit(colIndx, true, prevWidth);
            }
        }
        else if (this.trgtEle.classList.contains('e-rowresize')) {
            var rowIndx = parseInt(this.trgtEle.parentElement.getAttribute('aria-rowindex'), 10) - 1;
            var prevHeight = getRowHeight(this.parent.getActiveSheet(), rowIndx) + "px";
            this.setAutofit(rowIndx, false, prevHeight);
        }
        this.parent.notify(positionAutoFillElement, null);
    };
    Resize.prototype.setTarget = function (e) {
        if (!closest(e.target, '.e-header-cell')) {
            return;
        }
        var trgt = e.target;
        var sheet = this.parent.getActiveSheet();
        if (sheet.isProtected && (!sheet.protectSettings.formatColumns || !sheet.protectSettings.formatRows)) {
            if (!sheet.protectSettings.formatRows && !sheet.protectSettings.formatColumns) {
                return;
            }
            if (sheet.protectSettings.formatRows) {
                if (closest(trgt, '.e-colhdr-table')) {
                    return;
                }
            }
            if (sheet.protectSettings.formatColumns) {
                if (closest(trgt, '.e-rowhdr-table')) {
                    return;
                }
            }
        }
        var newTrgt;
        var tOffsetV;
        var eOffsetV;
        var tClass;
        if (closest(trgt, '.e-header-row')) {
            eOffsetV = e.offsetX;
            tOffsetV = trgt.offsetWidth;
            tClass = 'e-colresize';
            var prevSibling = this.getColPrevSibling(trgt);
            if (prevSibling && !prevSibling.classList.contains('e-select-all-cell')) {
                newTrgt = prevSibling;
            }
            else {
                if (Number(trgt.getAttribute('aria-colindex')) > 1) {
                    newTrgt = trgt;
                }
            }
        }
        else if (closest(trgt, '.e-row')) {
            eOffsetV = e.offsetY;
            tOffsetV = trgt.offsetHeight;
            tClass = 'e-rowresize';
            var prevSibling = this.getRowPrevSibling(trgt);
            if (prevSibling) {
                newTrgt = prevSibling.firstElementChild;
            }
            else {
                if (Number(trgt.parentElement.getAttribute('aria-rowindex')) > 1) {
                    newTrgt = trgt;
                }
            }
        }
        if (tOffsetV - 2 < 8 && eOffsetV !== Math.ceil((tOffsetV - 2) / 2)) {
            if (eOffsetV < Math.ceil((tOffsetV - 2) / 2)) {
                trgt.classList.add(tClass);
                newTrgt.classList.add(tClass);
            }
            else if (eOffsetV > Math.ceil((tOffsetV - 2) / 2)) {
                trgt.classList.add(tClass);
            }
        }
        else if (tOffsetV - 5 < eOffsetV && eOffsetV <= tOffsetV && tOffsetV >= 10) {
            trgt.classList.add(tClass);
        }
        else if (eOffsetV < 5 && newTrgt && tOffsetV >= 10) {
            trgt.classList.add(tClass);
            newTrgt.classList.add(tClass);
        }
        else {
            var resEle = this.parent.element.getElementsByClassName(tClass);
            for (var index = 0; index < resEle.length; index++) {
                resEle[index].classList.remove(tClass);
            }
        }
    };
    Resize.prototype.getColPrevSibling = function (trgt) {
        var frozenCol = this.parent.frozenColCount(this.parent.getActiveSheet());
        return trgt.previousElementSibling || (frozenCol && closest(trgt, '.e-column-header') ?
            this.parent.getSelectAllContent().querySelector('.e-header-row').lastElementChild : null);
    };
    Resize.prototype.getRowPrevSibling = function (trgt) {
        var frozenRow = this.parent.frozenRowCount(this.parent.getActiveSheet());
        return trgt.parentElement.previousElementSibling || (frozenRow && closest(trgt, '.e-row-header') ?
            this.parent.getSelectAllContent().querySelector('tbody').lastElementChild : null);
    };
    Resize.prototype.updateTarget = function (e, trgt) {
        if (closest(trgt, '.e-header-row')) {
            if ((trgt.offsetWidth < 10 && e.offsetX < Math.ceil((trgt.offsetWidth - 2) / 2)) || (e.offsetX < 5 &&
                trgt.offsetWidth >= 10) && trgt.classList.contains('e-colresize')) {
                var sheet = this.parent.getActiveSheet();
                var prevIdx = Number(this.trgtEle.getAttribute('aria-colindex')) - 2;
                var prevSibling = this.getColPrevSibling(trgt);
                if (prevSibling && !isHiddenCol(sheet, prevIdx)) {
                    this.trgtEle = prevSibling;
                }
                else {
                    if (prevIdx > -1) {
                        this.trgtEle.classList.add('e-unhide-column');
                    }
                }
            }
        }
        else {
            if ((trgt.offsetHeight < 10 && e.offsetY < Math.ceil((trgt.offsetHeight - 2) / 2)) || (e.offsetY < 5 &&
                trgt.offsetHeight >= 10) && trgt.classList.contains('e-rowresize')) {
                var sheet = this.parent.getActiveSheet();
                var prevIdx = Number(trgt.parentElement.getAttribute('aria-rowindex')) - 2;
                var prevSibling = this.getRowPrevSibling(trgt);
                if (prevSibling || isHiddenRow(sheet, prevIdx)) {
                    if (e.type === 'dblclick' && isHiddenRow(sheet, prevIdx)) {
                        var selectRange = getSwapRange(getRangeIndexes(sheet.selectedRange));
                        var eventArgs = void 0;
                        if (prevIdx <= selectRange[2] && prevIdx > selectRange[0]) {
                            eventArgs = { startIndex: selectRange[0], endIndex: selectRange[2], hide: false, autoFit: true };
                        }
                        else {
                            eventArgs = { startIndex: prevIdx, endIndex: prevIdx, hide: false, autoFit: true };
                        }
                        this.parent.notify(hideShow, eventArgs);
                    }
                    else {
                        if (!isHiddenRow(sheet, prevIdx)) {
                            this.trgtEle = prevSibling.getElementsByClassName('e-header-cell')[0];
                        }
                    }
                }
            }
        }
    };
    Resize.prototype.setAutoFitHandler = function (args) {
        this.setAutofit(args.idx, args.isCol);
    };
    Resize.prototype.setAutofit = function (idx, isCol, prevData) {
        var index = 0;
        var sheet = this.parent.getActiveSheet();
        var mainContent = this.parent.getMainContent();
        var oldValue = isCol ? getColumnWidth(this.parent.getActiveSheet(), idx) + "px" :
            getRowHeight(this.parent.getActiveSheet(), idx) + "px";
        var contentClone = [];
        var oldHeight = 0;
        var contentTable = mainContent.getElementsByClassName('e-content-table')[0];
        if (this.parent.getActiveSheet().showHeaders) {
            var headerTable = isCol ? this.parent.getColHeaderTable() : this.parent.getRowHeaderTable();
            headerTable.getElementsByTagName('tr');
        }
        var isWrap = false;
        var wrapCount = 0;
        if (isCol) {
            var rowLength = sheet.rows.length;
            for (var rowIdx = 0; rowIdx < rowLength; rowIdx++) {
                if (sheet.rows[rowIdx] && sheet.rows[rowIdx].cells && sheet.rows[rowIdx].cells[idx]) {
                    if (getCell(rowIdx, idx, sheet).wrap) {
                        isWrap = true;
                        wrapCount++;
                    }
                    var td = this.parent.createElement('td', { className: 'e-cell' });
                    td.textContent = this.parent.getDisplayText(sheet.rows[rowIdx].cells[idx]);
                    if (sheet.rows[rowIdx].cells[idx].style) {
                        var style = sheet.rows[rowIdx].cells[idx].style;
                        if (style.fontFamily) {
                            td.style.fontFamily = style.fontFamily;
                        }
                        if (style.fontSize) {
                            td.style.fontSize = style.fontSize;
                        }
                    }
                    contentClone[index] = td;
                    index++;
                }
            }
        }
        else {
            var colLength = sheet.rows[idx] && sheet.rows[idx].cells ? sheet.rows[idx].cells.length : 0;
            for (var colIdx = 0; colIdx < colLength; colIdx++) {
                if (sheet.rows[idx] && sheet.rows[idx].cells[colIdx]) {
                    if (getCell(idx, colIdx, sheet).wrap) {
                        isWrap = true;
                        wrapCount++;
                    }
                    var td = this.parent.createElement('td');
                    td.textContent = this.parent.getDisplayText(sheet.rows[idx].cells[colIdx]);
                    if (sheet.rows[idx].cells[colIdx].style) {
                        var style = sheet.rows[idx].cells[colIdx].style;
                        if (style.fontFamily) {
                            td.style.fontFamily = style.fontFamily;
                        }
                        if (style.fontSize) {
                            td.style.fontSize = style.fontSize;
                        }
                    }
                    contentClone[index] = td;
                    index++;
                }
            }
        }
        if (wrapCount === 0) {
            var contentFit = findMaxValue(contentTable, contentClone, isCol, this.parent, prevData, isWrap);
            if (isCol) {
                contentFit = this.getFloatingElementWidth(contentFit, idx);
            }
            var autofitValue = contentFit === 0 ? parseInt(oldValue, 10) : contentFit;
            var threshold = parseInt(oldValue, 10) > autofitValue ?
                -(parseInt(oldValue, 10) - autofitValue) : autofitValue - parseInt(oldValue, 10);
            if (isCol) {
                if (idx >= this.parent.viewport.leftIndex && idx <= this.parent.viewport.rightIndex) {
                    getColumn(sheet, idx).width = autofitValue > 0 ? autofitValue : 0;
                    this.resizeStart(idx, this.parent.getViewportIndex(idx, true), autofitValue + 'px', isCol, true, prevData);
                    this.parent.notify(colWidthChanged, { threshold: threshold, colIdx: idx });
                }
                else {
                    var oldWidth = getColumnWidth(sheet, idx);
                    var threshold_1;
                    if (autofitValue > 0) {
                        threshold_1 = -(oldWidth - autofitValue);
                    }
                    else {
                        threshold_1 = -oldWidth;
                    }
                    this.parent.notify(colWidthChanged, { threshold: threshold_1, colIdx: idx });
                    getColumn(sheet, idx).width = autofitValue > 0 ? autofitValue : 0;
                }
            }
            else if (!isCol) {
                if (idx >= this.parent.viewport.topIndex && idx <= this.parent.viewport.bottomIndex) {
                    autofitValue = autofitValue > 20 ? autofitValue : 20;
                    oldHeight = getRowHeight(sheet, idx);
                    if (autofitValue > 0) {
                        threshold = -(oldHeight - autofitValue);
                    }
                    else {
                        threshold = -oldHeight;
                    }
                    setRowHeight(sheet, idx, autofitValue > 0 ? autofitValue : 0);
                    setRow(sheet, idx, { customHeight: false });
                    this.resizeStart(idx, this.parent.getViewportIndex(idx), autofitValue + 'px', isCol, true, prevData);
                    this.parent.notify(rowHeightChanged, { threshold: threshold, rowIdx: idx });
                }
                else {
                    oldHeight = getRowHeight(sheet, idx);
                    var threshold_2;
                    if (autofitValue > 0) {
                        threshold_2 = -(oldHeight - autofitValue);
                    }
                    else {
                        threshold_2 = -oldHeight;
                    }
                    this.parent.notify(rowHeightChanged, { threshold: threshold_2, rowIdx: idx });
                    setRowHeight(sheet, idx, autofitValue > 0 ? autofitValue : 0);
                }
            }
        }
        this.parent.selectRange(this.parent.getActiveSheet().selectedRange);
    };
    Resize.prototype.createResizeHandler = function (trgt, className) {
        var editor = this.parent.createElement('div', { className: className });
        editor.classList.add('e-resize-handle');
        var sheet = document.getElementById(this.parent.element.id + '_sheet');
        if (trgt.classList.contains('e-colresize')) {
            editor.style.height = this.parent.getMainContent().parentElement.clientHeight + this.parent.getColumnHeaderContent().offsetHeight + 'px';
            editor.style.left = this.event.clientX - sheet.getBoundingClientRect().left + 'px';
            editor.style.top = '0px';
        }
        else if (trgt.classList.contains('e-rowresize')) {
            editor.style.width = this.parent.getMainContent().parentElement.clientWidth + 'px';
            editor.style.left = '0px';
            editor.style.top = this.event.clientY - sheet.getBoundingClientRect().top + 'px';
        }
        sheet.appendChild(editor);
        this.resizeTooltip(trgt, false);
        this.updateCursor();
    };
    Resize.prototype.resizeTooltip = function (trgt, isResize, e) {
        if (isResize) {
            var HeaderTolltip = document.querySelector('.e-header-tooltip');
            var colResizeHandler = this.parent.element.getElementsByClassName('e-colresize-handler')[0];
            var rowResizeHandler = this.parent.element.getElementsByClassName('e-rowresize-handler')[0];
            if (colResizeHandler) {
                var trgtWidth = (e.clientX) - Math.round(this.trgtEle.getBoundingClientRect().left);
                if (HeaderTolltip) {
                    HeaderTolltip.firstChild.textContent = trgtWidth > 0 ? ('Width:(' + trgtWidth.toString() + ' pixels)') : ('Width: 0.00');
                }
            }
            else if (rowResizeHandler) {
                var trgtHeight = (e.clientY) - Math.round(this.trgtEle.getBoundingClientRect().top);
                if (HeaderTolltip) {
                    HeaderTolltip.firstChild.textContent = trgtHeight > 0 ? ('Height:(' + trgtHeight.toString() + ' pixels)') : ('Height: 0.00');
                }
            }
        }
        else {
            var isColResize = trgt.classList.contains('e-colresize');
            var isRowResize = trgt.classList.contains('e-rowresize');
            if (isColResize || isRowResize) {
                var className = isColResize ? 'e-colresize-handler' : 'e-rowresize-handler';
                var tooltip = new Tooltip({
                    cssClass: 'e-header-tooltip',
                    showTipPointer: false
                });
                if (isColResize) {
                    tooltip.content = 'Width:(' + Math.round(trgt.getBoundingClientRect().width).toString() + ' pixels)';
                }
                else if (isRowResize) {
                    tooltip.content = 'Height:(' + Math.round(trgt.getBoundingClientRect().height).toString() + ' pixels)';
                    tooltip.offsetX = -((this.parent.getMainContent().parentElement.clientWidth / 2) -
                        Math.round(trgt.getBoundingClientRect().width));
                }
                tooltip.appendTo('.' + className);
                tooltip.open();
                tooltip.refresh();
            }
        }
    };
    Resize.prototype.setColWidth = function (index, viewportIdx, width, curWidth) {
        var sheet = this.parent.getActiveSheet();
        var threshold = getDPRValue(width) - curWidth;
        if (threshold < 0 && curWidth < -(threshold)) {
            threshold = -curWidth;
        }
        if (width > 0) {
            if (this.isMouseMoved && this.trgtEle.classList.contains('e-unhide-column')) {
                this.showHiddenColumns(index, width);
                this.parent.notify(completeAction, {
                    eventArgs: {
                        index: index, width: 0 + "px", isCol: true, sheetIdx: this.parent.activeSheetIndex, oldWidth: curWidth + "px",
                        hide: false
                    }, action: 'resize'
                });
                return;
            }
            this.resizeStart(index, viewportIdx, width + "px", true, false, curWidth + "px");
            setColumn(sheet, index, { width: width, customWidth: true });
            this.parent.notify(colWidthChanged, { threshold: threshold, colIdx: index, checkWrapCell: true });
        }
        else {
            if (this.isMouseMoved) {
                this.parent.hideColumn(index);
                this.showHideCopyIndicator();
                this.parent.notify(completeAction, {
                    eventArgs: {
                        index: index, width: 0 + "px", isCol: true, sheetIdx: this.parent.activeSheetIndex, oldWidth: curWidth + "px",
                        hide: true
                    }, action: 'resize'
                });
            }
        }
    };
    Resize.prototype.showHideCopyIndicator = function () {
        var copyIndicator = this.parent.element.getElementsByClassName('e-copy-indicator')[0];
        var isIndicator = false;
        if (copyIndicator) {
            detach(copyIndicator);
            this.parent.notify(hideAutoFillElement, null);
            isIndicator = true;
        }
        if (isIndicator) {
            this.parent.notify(contentLoaded, {});
        }
    };
    Resize.prototype.showHiddenColumns = function (index, width) {
        var sheet = this.parent.getActiveSheet();
        var selectedRange = getRangeIndexes(sheet.selectedRange);
        var startIdx;
        var endIdx;
        var colgroup;
        if (index >= selectedRange[1] && index <= selectedRange[3] && selectedRange[2] === sheet.rowCount - 1 &&
            getCellIndexes(sheet.activeCell)[0] === getCellIndexes(sheet.topLeftCell)[0]) {
            startIdx = selectedRange[1];
            endIdx = selectedRange[3];
            colgroup = this.parent.getMainContent().querySelector('colgroup');
        }
        else {
            startIdx = endIdx = index;
        }
        if (width !== undefined) {
            for (var i = startIdx; i <= endIdx; i++) {
                setColumn(sheet, i, { width: width, customWidth: true });
                if (i >= this.parent.viewport.leftIndex && i <= this.parent.viewport.rightIndex && !isHiddenCol(sheet, i)) {
                    colgroup.children[this.parent.getViewportIndex(i, true)].style.width = width + "px";
                }
            }
        }
        this.trgtEle.classList.remove('e-unhide-column');
        this.parent.hideColumn(startIdx, endIdx, false);
        this.showHideCopyIndicator();
        if (width === undefined) {
            this.autoFit({ isRow: false, startIndex: startIdx, endIndex: endIdx });
        }
    };
    Resize.prototype.setRowHeight = function (rowIdx, viewportIdx, height, prevData) {
        var sheet = this.parent.getActiveSheet();
        var frozenCol = this.parent.frozenColCount(sheet);
        var eleHeight = parseInt(this.parent.getRow(rowIdx, null, frozenCol).style.height, 10);
        var rowHeight = height;
        var threshold = getDPRValue(parseInt(rowHeight, 10)) - eleHeight;
        if (threshold < 0 && eleHeight < -(threshold)) {
            threshold = -eleHeight;
        }
        this.resizeStart(rowIdx, viewportIdx, rowHeight, false, false, prevData);
        setRow(sheet, rowIdx, { height: parseInt(rowHeight, 10) > 0 ? parseInt(rowHeight, 10) : 0, customHeight: true });
        this.parent.notify(rowHeightChanged, { threshold: threshold, rowIdx: rowIdx, isCustomHgt: true });
    };
    Resize.prototype.resizeOn = function (e) {
        var _this = this;
        var idx;
        var actualIdx;
        var sheet = this.parent.getActiveSheet();
        var activeCell = getRangeIndexes(sheet.activeCell);
        var CellElem = getCell(activeCell[0], activeCell[1], sheet);
        if (this.trgtEle.classList.contains('e-rowresize')) {
            var prevIdx = Number(this.trgtEle.parentElement.getAttribute('aria-rowindex')) - 2;
            if (this.isMouseMoved && isHiddenRow(sheet, prevIdx) && this.trgtEle.classList.contains('e-skip-resize') &&
                e.clientY > this.trgtEle.getBoundingClientRect().top) {
                this.trgtEle.classList.remove('e-skip-resize');
                var eventArgs = { startIndex: prevIdx, endIndex: prevIdx, hide: false, skipAppend: true };
                this.parent.notify(hideShow, eventArgs);
                var rTbody = this.parent.getRowHeaderTable().tBodies[0];
                var tbody = this.parent.getContentTable().tBodies[0];
                eventArgs.hdrRow.style.display = 'none';
                eventArgs.row.style.display = 'none';
                rTbody.insertBefore(eventArgs.hdrRow, rTbody.children[eventArgs.insertIdx]);
                tbody.insertBefore(eventArgs.row, tbody.children[eventArgs.insertIdx]);
                this.trgtEle = eventArgs.hdrRow.firstElementChild;
                eventArgs.hdrRow.nextElementSibling.classList.remove('e-hide-end');
                eventArgs.mergeCollection.forEach(function (mergeArgs) { _this.parent.notify(setMerge, mergeArgs); });
            }
            else {
                if (this.trgtEle.classList.contains('e-skip-resize')) {
                    this.trgtEle.classList.remove('e-skip-resize');
                    if ((!this.isMouseMoved && isHiddenRow(sheet, prevIdx)) || !this.trgtEle.parentElement.previousElementSibling) {
                        return;
                    }
                    this.trgtEle = this.trgtEle.parentElement.previousElementSibling.getElementsByClassName('e-header-cell')[0];
                }
            }
            actualIdx = idx = parseInt(this.trgtEle.parentElement.getAttribute('aria-rowindex'), 10) - 1;
            idx = this.parent.getViewportIndex(actualIdx);
            var frozenCol = this.parent.frozenColCount(sheet);
            var prevData = this.parent.getRow(actualIdx, null, frozenCol).style.height;
            var rowHeight = e.clientY - this.event.clientY + parseInt(prevData, 10);
            if (rowHeight <= 0) {
                this.parent.hideRow(actualIdx);
                this.showHideCopyIndicator();
                setRow(sheet, actualIdx, { height: 0, customHeight: true });
                this.parent.notify(completeAction, {
                    eventArgs: { index: actualIdx, height: '0px', isCol: false, sheetIdx: this.parent.activeSheetIndex, oldHeight: prevData },
                    action: 'resize'
                });
                return;
            }
            this.setRowHeight(actualIdx, idx, rowHeight + "px", prevData);
            if (CellElem && CellElem.rowSpan) {
                var td = this.parent.getCell(activeCell[0], activeCell[1]);
                this.parent.element.querySelector('.e-active-cell').style.height = td.offsetHeight + 'px';
            }
            if (this.trgtEle.parentElement.style.display === 'none') {
                var sheet_1 = this.parent.getActiveSheet();
                var selectedRange = getSwapRange(getRangeIndexes(sheet_1.selectedRange));
                if (actualIdx <= selectedRange[2] && actualIdx > selectedRange[0]) {
                    rowHeight = getRowHeight(sheet_1, actualIdx);
                    var count$$1 = void 0;
                    for (var i = selectedRange[0]; i <= selectedRange[2]; i++) {
                        if (i === actualIdx) {
                            continue;
                        }
                        prevData = getRowHeight(sheet_1, i) + "px";
                        setRow(sheet_1, i, { customHeight: true, height: rowHeight });
                        if (isHiddenRow(sheet_1, i)) {
                            if (!count$$1) {
                                count$$1 = i;
                            }
                        }
                        else {
                            this.parent.getRow(i).style.height = rowHeight + "px";
                            if (sheet_1.showHeaders) {
                                this.parent.getRow(i, this.parent.getRowHeaderTable()).style.height = rowHeight + "px";
                            }
                        }
                        this.parent.notify(completeAction, {
                            eventArgs: {
                                index: i, height: rowHeight + "px", isCol: false,
                                sheetIdx: this.parent.activeSheetIndex, oldHeight: prevData
                            },
                            action: 'resize'
                        });
                    }
                    this.parent.hideRow(selectedRange[0], actualIdx - 1, false);
                    this.showHideCopyIndicator();
                    idx += Math.abs(actualIdx - count$$1);
                }
                else {
                    if (idx !== 0 && !isHiddenRow(sheet_1, actualIdx - 1)) {
                        this.trgtEle.parentElement.previousElementSibling.classList.remove('e-hide-start');
                    }
                    else {
                        if (idx !== 0) {
                            this.trgtEle.parentElement.classList.add('e-hide-end');
                        }
                    }
                    this.parent.selectRange(sheet_1.selectedRange);
                }
                this.trgtEle.parentElement.style.display = '';
                this.parent.getContentTable().rows[idx].style.display = '';
            }
        }
        else if (this.trgtEle.classList.contains('e-colresize')) {
            if (this.isMouseMoved && this.trgtEle.classList.contains('e-unhide-column') &&
                e.clientX < this.trgtEle.getBoundingClientRect().left) {
                this.trgtEle.classList.remove('e-unhide-column');
                if (this.trgtEle.previousElementSibling) {
                    this.trgtEle = this.trgtEle.previousElementSibling;
                }
            }
            idx = parseInt(this.trgtEle.getAttribute('aria-colindex'), 10) - 1;
            var curWidth = void 0;
            if (this.trgtEle.classList.contains('e-unhide-column')) {
                idx -= 1;
                curWidth = 0;
            }
            else {
                curWidth = getColumnWidth(this.parent.getActiveSheet(), idx);
            }
            this.setColWidth(idx, this.parent.getViewportIndex(idx, true), (e.clientX - this.event.clientX) + curWidth, curWidth);
            if (CellElem && CellElem.colSpan) {
                var td = this.parent.getCell(activeCell[0], activeCell[1]);
                this.parent.element.querySelector('.e-active-cell').style.width = td.offsetWidth + 'px';
            }
        }
        if (CellElem && CellElem.format && CellElem.format.indexOf('*') > -1) {
            this.parent.notify(rowFillHandler, { cell: CellElem, value: CellElem.format[CellElem.format.indexOf('*') + 1].toString(),
                rowIdx: activeCell[0], colIdx: activeCell[1] });
        }
    };
    Resize.prototype.resizeStart = function (idx, viewportIdx, value, isCol, isFit, prevData) {
        setResize(idx, viewportIdx, value, isCol, this.parent);
        var action = isFit ? 'resizeToFit' : 'resize';
        var eventArgs;
        var isAction;
        if (isCol) {
            eventArgs = { index: idx, width: value, isCol: isCol, sheetIdx: this.parent.activeSheetIndex, oldWidth: prevData };
            isAction = prevData !== value;
        }
        else {
            eventArgs = { index: idx, height: value, isCol: isCol, sheetIdx: this.parent.activeSheetIndex, oldHeight: prevData };
            isAction = prevData !== value;
        }
        if (isAction) {
            this.parent.notify(completeAction, { eventArgs: eventArgs, action: action });
        }
    };
    Resize.prototype.updateCursor = function () {
        if (this.parent.element.getElementsByClassName('e-colresize-handler')[0]) {
            this.parent.element.classList.add('e-col-resizing');
        }
        else if (this.parent.element.classList.contains('e-col-resizing')) {
            this.parent.element.classList.remove('e-col-resizing');
        }
        if (this.parent.element.getElementsByClassName('e-rowresize-handler')[0]) {
            this.parent.element.classList.add('e-row-resizing');
        }
        else if (this.parent.element.classList.contains('e-row-resizing')) {
            this.parent.element.classList.remove('e-row-resizing');
        }
    };
    // To get the floating element width like filter
    Resize.prototype.getFloatingElementWidth = function (oldWidth, colIdx) {
        var floatingWidth = oldWidth;
        var eventArgs = { filterRange: [], hasFilter: false };
        this.parent.notify(getFilterRange, eventArgs);
        if (eventArgs.hasFilter && eventArgs.filterRange) {
            if (eventArgs.filterRange[1] <= colIdx && eventArgs.filterRange[3] >= colIdx) {
                floatingWidth = oldWidth + 22; // default width and padding for button
            }
        }
        return floatingWidth;
    };
    /**
     * To destroy the resize module.
     *
     * @returns {void} - To destroy the resize module.
     */
    Resize.prototype.destroy = function () {
        this.unwireEvents();
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * Get the module name.
     *
     * @returns {string} - Get the module name.
     */
    Resize.prototype.getModuleName = function () {
        return 'resize';
    };
    return Resize;
}());

/**
 * Collaborative Editing module for real time changes in the Spreadsheet.
 */
var CollaborativeEditing = /** @__PURE__ @class */ (function () {
    function CollaborativeEditing(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    CollaborativeEditing.prototype.refreshClients = function (options) {
        updateAction(options, this.parent);
    };
    CollaborativeEditing.prototype.addEventListener = function () {
        this.parent.on(collaborativeUpdate, this.refreshClients, this);
    };
    CollaborativeEditing.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(collaborativeUpdate, this.refreshClients);
        }
    };
    /**
     * Destroy collaborative editing module.
     *
     * @returns {void} - Destroy collaborative editing module.
     */
    CollaborativeEditing.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * Get the collaborative editing module name.
     *
     * @returns {string} - Get the collaborative editing module name.
     */
    CollaborativeEditing.prototype.getModuleName = function () {
        return 'collaborativeEditing';
    };
    return CollaborativeEditing;
}());

/**
 * The `ShowHide` module is used to perform hide/show the rows and columns.
 *
 * @hidden
 */
var ShowHide = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for the Spreadsheet show hide module.
     *
     * @param {Spreadsheet} parent - Specify the spreadsheet instance.
     * @private
     */
    function ShowHide(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    ShowHide.prototype.hideShow = function (args) {
        var sheet = this.parent.getActiveSheet();
        if (sheet.frozenRows || sheet.frozenColumns) {
            return;
        }
        if (args.startIndex > args.endIndex) {
            var temp = args.startIndex;
            args.startIndex = args.endIndex;
            args.endIndex = temp;
        }
        if (args.actionUpdate) {
            args.cancel = false;
            this.parent.notify(beginAction, { eventArgs: args, action: 'hideShow' });
            if (args.cancel) {
                return;
            }
        }
        if (args.isCol) {
            this.hideCol(args);
        }
        else {
            this.hideRow(args);
        }
        if (args.actionUpdate) {
            this.parent.notify(completeAction, { eventArgs: args, action: 'hideShow' });
        }
    };
    ShowHide.prototype.hideRow = function (eventArgs) {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        var cell;
        var count = 0;
        var idx;
        var nextIdx;
        var merge$$1;
        var model;
        var args = Object.assign({}, eventArgs);
        var isFinite = this.parent.scrollSettings.isFinite;
        var height;
        if (isFinite) {
            if (args.startIndex >= sheet.rowCount) {
                return;
            }
            if (args.endIndex >= sheet.rowCount) {
                args.endIndex = sheet.rowCount - 1;
            }
            height = 0;
        }
        if (args.hide) {
            var content = void 0;
            var rowHdr_1;
            var row = void 0;
            var updateBtmIdx = isFinite && args.endIndex === skipHiddenIdx(sheet, sheet.rowCount - 1, false);
            for (var i = args.startIndex; i <= args.endIndex; i++) {
                if (isHiddenRow(sheet, i)) {
                    continue;
                }
                if (idx === undefined) {
                    if (sheet.showHeaders) {
                        rowHdr_1 = this.parent.getRowHeaderTable();
                    }
                    content = this.parent.getContentTable();
                    idx = this.parent.getViewportIndex(i);
                    count = 0;
                }
                model = { hidden: true };
                if (args.isFiltering) {
                    model.isFiltered = true;
                }
                setRow(sheet, i, model);
                if (isFinite) {
                    height += getRowHeight(sheet, i, true, true);
                }
                this.refreshChart(i, 'rows');
                row = content && content.rows[idx];
                if (row) {
                    if (!merge$$1) {
                        for (var j = 0; j <= sheet.usedRange.colIndex; j++) {
                            cell = getCell(i, j, sheet) || {};
                            if ((cell.colSpan || cell.rowSpan) && (args.startIndex >= this.parent.viewport.topIndex ||
                                this.parent.scrollSettings.enableVirtualization)) {
                                merge$$1 = true;
                                break;
                            }
                        }
                    }
                    if (merge$$1) {
                        continue;
                    }
                    if (sheet.showHeaders) {
                        detach(rowHdr_1.rows[idx]);
                    }
                    detach(row);
                    count++;
                    row = content.rows[idx];
                    if (row && i === args.endIndex) {
                        var cell_1 = void 0;
                        nextIdx = skipHiddenIdx(sheet, i + 1, true);
                        var first = nextIdx !== skipHiddenIdx(sheet, 0, true) && nextIdx ===
                            (this.parent.viewport.topIndex >= args.startIndex ? args.endIndex + 1 : this.parent.viewport.topIndex) ? 'Row' : '';
                        for (var j = this.parent.viewport.leftIndex; j <= this.parent.viewport.rightIndex; j++) {
                            var borderTop = this.parent.getCellStyleValue(['borderTop'], [nextIdx, j]).borderTop;
                            if (borderTop !== '') {
                                cell_1 = row.cells[j];
                                this.parent.notify(applyCellFormat, { onActionUpdate: false, rowIdx: nextIdx, colIdx: j,
                                    style: { borderTop: borderTop }, row: row, pRow: row.previousElementSibling,
                                    first: first, cell: cell_1 });
                            }
                        }
                    }
                }
                else {
                    if (i <= this.parent.viewport.bottomIndex) {
                        count++;
                    }
                    else {
                        count--;
                    }
                }
            }
            if (merge$$1 && (args.startIndex >= this.parent.viewport.topIndex || !this.parent.scrollSettings.enableVirtualization)) {
                this.parent.selectRange(sheet.selectedRange);
                this.parent.renderModule.refreshUI({
                    rowIndex: this.parent.viewport.topIndex, colIndex: this.parent.viewport.leftIndex, refresh: 'Row'
                });
                return;
            }
            if (!count) {
                return;
            }
            this.parent.selectRange(sheet.selectedRange);
            var updateHideClass = function () {
                if (sheet.showHeaders) {
                    if (idx === 0) {
                        if (rowHdr_1.rows[0]) {
                            rowHdr_1.rows[0].classList.add('e-hide-end');
                        }
                    }
                    else {
                        if (rowHdr_1 && rowHdr_1.rows[idx - 1]) {
                            rowHdr_1.rows[idx - 1].classList.add('e-hide-start');
                        }
                        if (rowHdr_1 && rowHdr_1.rows[idx]) {
                            rowHdr_1.rows[idx].classList.add('e-hide-end');
                        }
                    }
                }
            };
            if (this.parent.scrollSettings.enableVirtualization) {
                var startIndex_1 = args.startIndex;
                var endIndex = args.startIndex;
                if (this.parent.viewport.topIndex >= args.startIndex) {
                    if (!args.isFiltering || this.parent.viewport.topIndex === args.startIndex) {
                        this.parent.viewport.topIndex = args.endIndex + 1;
                    }
                    else {
                        args.aboveViewport = true;
                        return;
                    }
                }
                args.startIndex = this.parent.viewport.bottomIndex + 1;
                args.endIndex = args.startIndex + count - 1;
                var indexes = this.parent.skipHidden(args.startIndex, args.endIndex, 'rows', false);
                args.startIndex = indexes[0];
                args.endIndex = indexes[1];
                if (isFinite) {
                    var refreshSheet = function () {
                        var prevTop = _this.parent.viewport.topIndex;
                        _this.parent.viewport.bottomIndex = args.endIndex = skipHiddenIdx(sheet, sheet.rowCount - 1, false);
                        startIndex_1 = _this.parent.viewport.topIndex = _this.parent.renderModule.decreaseHidden(args.endIndex - (_this.parent.viewport.rowCount + (_this.parent.getThreshold('row') * 2)), args.endIndex);
                        _this.parent.notify(setScrollEvent, { set: false });
                        _this.parent.notify(updateTranslate, { isHide: true, height: height, prevSize: prevTop });
                        var eventArgs = { skipRowVirualScroll: true };
                        eventArgs.scrollTop = _this.parent.getMainContent().parentElement.scrollTop;
                        _this.parent.notify(onContentScroll, eventArgs);
                        getUpdateUsingRaf(function () { return _this.parent.notify(setScrollEvent, { set: true }); });
                        _this.parent.renderModule.refreshUI({ rowIndex: _this.parent.viewport.topIndex, colIndex: _this.parent.viewport.leftIndex, refresh: 'Row',
                            skipTranslate: true });
                    };
                    if (args.startIndex >= sheet.rowCount) {
                        if (this.parent.viewport.topIndex === skipHiddenIdx(sheet, 0, true)) {
                            updateHideClass();
                            this.parent.notify(updateTranslate, { isHide: true, height: height });
                            if (updateBtmIdx) {
                                this.parent.viewport.bottomIndex = skipHiddenIdx(sheet, sheet.rowCount - 1, false);
                            }
                            return;
                        }
                        refreshSheet();
                        return;
                    }
                    else if (args.endIndex >= sheet.rowCount) {
                        refreshSheet();
                        return;
                    }
                    else {
                        this.parent.notify(updateTranslate, { isHide: true, height: height });
                    }
                }
                this.parent.viewport.bottomIndex = args.endIndex;
                if (count > this.parent.viewport.rowCount + (this.parent.getThreshold('row') * 2)) {
                    startIndex_1 = startIndex_1 < 1 ? endIndex + 1 : startIndex_1 - 1;
                    this.parent.updateTopLeftCell(startIndex_1, null);
                    this.parent.renderModule.refreshSheet();
                }
                else {
                    this.parent.renderModule.refreshUI({ colIndex: this.parent.viewport.leftIndex, direction: '', refresh: 'RowPart' }, getCellAddress(args.startIndex, this.parent.viewport.leftIndex) + ":" + getCellAddress(args.endIndex, this.parent.viewport.rightIndex));
                }
            }
            updateHideClass();
        }
        else {
            var hFrag = void 0;
            var frag = void 0;
            var hRow = void 0;
            var row = void 0;
            var rowRenderer = void 0;
            var rTBody = void 0;
            var tBody = void 0;
            var startRow = void 0;
            var endRow = args.startIndex - 1;
            var newStartRow = void 0;
            var mergeCollection = [];
            var skipDetach = void 0;
            var direction = 'lastElementChild';
            var detachedHeight = 0;
            if (isFinite) {
                var lastIdx = skipHiddenIdx(sheet, sheet.rowCount - 1, false);
                if (this.parent.viewport.bottomIndex === lastIdx) {
                    if (this.parent.viewport.topIndex === skipHiddenIdx(sheet, 0, true)) {
                        skipDetach = true;
                    }
                    else {
                        var topLeftCell = getRangeIndexes(sheet.topLeftCell)[0];
                        var count_1 = (((sheet.rowCount - 1) - topLeftCell) + 1) -
                            this.parent.hiddenCount(topLeftCell, sheet.rowCount - 1);
                        if (count_1 < this.parent.viewport.rowCount + Math.round(this.parent.getThreshold('row') / 2)) {
                            direction = 'firstElementChild';
                        }
                    }
                }
            }
            for (var i = args.startIndex, len = args.endIndex; i <= len; i++) {
                if (!isHiddenRow(sheet, i)) {
                    if (args.startIndex === args.endIndex) {
                        for (var j = 0; j <= sheet.usedRange.colIndex; j++) {
                            this.parent.notify(addHighlight, { range: getRangeAddress([args.startIndex, j]), td: undefined });
                        }
                        return;
                    }
                    if (idx === undefined) {
                        endRow++;
                    }
                    else {
                        newStartRow = i;
                    }
                    continue;
                }
                if (newStartRow !== undefined) {
                    len = i;
                    continue;
                }
                model = { hidden: false };
                if (args.isFiltering) {
                    model.isFiltered = false;
                }
                if (!skipDetach && i > this.parent.viewport.bottomIndex) {
                    setRow(sheet, i, model);
                    if (startRow === undefined) {
                        return;
                    }
                    continue;
                }
                if (startRow === undefined) {
                    startRow = i;
                }
                setRow(sheet, i, model);
                if (isFinite) {
                    height += getRowHeight(sheet, i, true, true);
                }
                this.refreshChart(i, 'rows');
                if (idx === undefined) {
                    hFrag = document.createDocumentFragment();
                    frag = document.createDocumentFragment();
                    rowRenderer = this.parent.serviceLocator.getService('row');
                    if (sheet.showHeaders && this.parent.getRowHeaderTable()) {
                        rTBody = this.parent.getRowHeaderTable().tBodies[0];
                    }
                    tBody = this.parent.getContentTable() ? this.parent.getContentTable().tBodies[0] : this.parent.getContentTable();
                    if (i < this.parent.viewport.topIndex) {
                        this.parent.viewport.topIndex = i;
                    }
                    if (i === 0) {
                        idx = 0;
                    }
                    else {
                        idx = this.parent.getViewportIndex(i);
                    }
                }
                endRow++;
                if (sheet.showHeaders) {
                    hRow = rowRenderer.refresh(i, null, null, true);
                    hFrag.appendChild(hRow);
                    if (rTBody && rTBody.childElementCount && !skipDetach) {
                        detach(rTBody[direction]);
                    }
                }
                row = frag.appendChild(rowRenderer.refresh(i, row, hRow));
                if (tBody && tBody.childElementCount && !skipDetach) {
                    detach(tBody[direction]);
                    if (direction === 'firstElementChild') {
                        if (idx !== undefined && idx - 1 > -1) {
                            idx -= 1;
                        }
                        detachedHeight += getRowHeight(sheet, this.parent.viewport.topIndex, true);
                        this.parent.viewport.topIndex = skipHiddenIdx(sheet, this.parent.viewport.topIndex + 1, true);
                    }
                }
                for (var j = this.parent.viewport.leftIndex; j <= this.parent.viewport.rightIndex; j++) {
                    cell = getCell(i, j, sheet) || {};
                    if (cell.rowSpan !== undefined) {
                        var mergeArgs = { range: [i, j, i, j], isAction: false, merge: true,
                            type: 'All', skipChecking: true };
                        this.parent.notify(activeCellMergedRange, mergeArgs);
                        if (!mergeCollection.length || mergeArgs.range[1] !== mergeCollection[mergeCollection.length - 1].range[1]) {
                            mergeCollection.push(mergeArgs);
                        }
                    }
                }
            }
            if (idx === undefined) {
                return;
            }
            this.parent.viewport.bottomIndex = this.parent.viewport.topIndex + this.parent.viewport.rowCount +
                (this.parent.getThreshold('row') * 2);
            count = this.parent.hiddenCount(this.parent.viewport.topIndex, args.startIndex) +
                this.parent.hiddenCount(args.endIndex + 1, this.parent.viewport.bottomIndex);
            this.parent.viewport.bottomIndex += count;
            if (isFinite && this.parent.viewport.bottomIndex >= sheet.rowCount) {
                this.parent.viewport.bottomIndex = skipHiddenIdx(sheet, sheet.rowCount - 1, false);
            }
            args.insertIdx = eventArgs.insertIdx = idx;
            args.row = eventArgs.row = frag.querySelector('.e-row');
            args.mergeCollection = eventArgs.mergeCollection = mergeCollection;
            if (sheet.showHeaders) {
                eventArgs.hdrRow = args.hdrRow = hFrag.querySelector('.e-row');
                if (idx !== 0 && !isHiddenRow(sheet, endRow - 1) && rTBody.children[idx - 1]) {
                    rTBody.children[idx - 1].classList.remove('e-hide-start');
                }
                if (args.startIndex !== 0 && isHiddenRow(sheet, args.startIndex - 1)) {
                    args.hdrRow.classList.add('e-hide-end');
                }
                if (isHiddenRow(sheet, endRow + 1)) {
                    hFrag.lastElementChild.classList.add('e-hide-start');
                }
                else {
                    if (rTBody.children[idx]) {
                        rTBody.children[idx].classList.remove('e-hide-end');
                    }
                }
            }
            if (row && tBody && tBody.children[idx]) {
                nextIdx = skipHiddenIdx(sheet, endRow + 1, true);
                for (var i = this.parent.viewport.leftIndex; i <= this.parent.viewport.rightIndex; i++) {
                    var borderTop = this.parent.getCellStyleValue(['borderTop'], [nextIdx, i]).borderTop;
                    if (borderTop !== '') {
                        this.parent.notify(applyCellFormat, { onActionUpdate: false, rowIdx: nextIdx, colIdx: i,
                            style: { borderTop: borderTop }, pRow: row, cell: tBody.children[idx].children[i],
                            first: '' });
                        var prevIdx = skipHiddenIdx(sheet, startRow - 1, false);
                        if (prevIdx > -1) {
                            if (tBody.children[idx - 1] && !this.parent.getCellStyleValue(['borderBottom'], [prevIdx, i]).borderBottom &&
                                !this.parent.getCellStyleValue(['borderTop'], [startRow, i]).borderTop) {
                                tBody.children[idx - 1].children[i].style.borderBottom = '';
                            }
                        }
                        else {
                            tBody.children[idx].children[i].style.borderTop = '';
                        }
                    }
                }
            }
            if (args.skipAppend) {
                return;
            }
            if (isFinite) {
                this.parent.notify(updateTranslate, { height: height, size: detachedHeight });
            }
            if (Math.abs(endRow - startRow) > this.parent.viewport.rowCount + (this.parent.getThreshold('row') * 2)) {
                this.parent.renderModule.refreshSheet();
            }
            else {
                if (sheet.showHeaders && rTBody) {
                    rTBody.insertBefore(hFrag, rTBody.children[idx]);
                }
                if (tBody) {
                    tBody.insertBefore(frag, tBody.children[idx]);
                }
                this.parent.selectRange(sheet.selectedRange);
                if (args.autoFit && sheet.showHeaders) {
                    this.parent.notify(autoFit, { startIndex: args.startIndex, endIndex: args.endIndex, isRow: true });
                }
                mergeCollection.forEach(function (mergeArgs) { _this.parent.notify(setMerge, mergeArgs); });
                if (newStartRow !== undefined && newStartRow !== args.endIndex) {
                    args.startIndex = newStartRow;
                    this.hideRow(args);
                }
            }
        }
    };
    ShowHide.prototype.hideCol = function (args) {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        var hiddenIndex = [];
        var beforeViewportIdx = [];
        var topLeftCell = getCellIndexes(sheet.topLeftCell);
        var scrollable;
        for (var i = args.startIndex; i <= args.endIndex; i++) {
            if (args.hide ? isHiddenCol(sheet, i) : !isHiddenCol(sheet, i)) {
                continue;
            }
            setColumn(sheet, i, { hidden: args.hide });
            this.refreshChart(i, 'columns');
            if (this.parent.scrollSettings.enableVirtualization && (i < this.parent.viewport.leftIndex ||
                i > this.parent.viewport.rightIndex)) {
                if (i < this.parent.viewport.leftIndex) {
                    beforeViewportIdx.push(i);
                }
                continue;
            }
            hiddenIndex.push(i);
            if (args.hide && topLeftCell[1] === i) {
                scrollable = true;
            }
        }
        if (!beforeViewportIdx.length && !hiddenIndex.length) {
            return;
        }
        if (args.hide) {
            if (!hiddenIndex.length) {
                return;
            }
            if (hiddenIndex.length <= this.parent.getThreshold('col') || !this.parent.scrollSettings.enableVirtualization) {
                this.removeCell(sheet, hiddenIndex);
            }
            if (this.parent.scrollSettings.enableVirtualization) {
                if (hiddenIndex[0] === this.parent.viewport.leftIndex) {
                    this.parent.viewport.leftIndex = skipHiddenIdx(sheet, hiddenIndex[hiddenIndex.length - 1] + 1, true, 'columns');
                }
                if (scrollable) {
                    var scrollWidth_1 = 0;
                    hiddenIndex.slice(0, hiddenIndex.indexOf(topLeftCell[1])).forEach(function (colIdx) {
                        scrollWidth_1 += getColumnWidth(sheet, colIdx, true);
                    });
                    if (scrollWidth_1) {
                        this.parent.notify(setScrollEvent, { set: false });
                        var content = this.parent.getMainContent();
                        content.scrollLeft -= scrollWidth_1;
                        this.parent.notify(onContentScroll, { scrollLeft: content.scrollLeft, preventScroll: true, skipHidden: true });
                        getUpdateUsingRaf(function () { return _this.parent.notify(setScrollEvent, { set: true }); });
                    }
                }
                if (this.parent.scrollSettings.isFinite) {
                    var colCount = skipHiddenIdx(sheet, sheet.colCount - 1, false, 'columns');
                    var startIdx = this.parent.viewport.leftIndex;
                    var endIndex = this.parent.viewport.rightIndex;
                    if (endIndex + hiddenIndex.length >= colCount) {
                        var index = skipHiddenIdx(sheet, startIdx - ((endIndex + hiddenIndex.length) - colCount), false, 'columns');
                        if (index > -1) {
                            this.parent.viewport.leftIndex = index;
                            this.parent.viewport.leftIndex -= this.parent.hiddenCount(endIndex, colCount);
                        }
                        this.parent.viewport.rightIndex = colCount;
                        if (startIdx !== this.parent.viewport.leftIndex || endIndex !== this.parent.viewport.rightIndex) {
                            this.parent.renderModule.refreshUI({ skipUpdateOnFirst: this.parent.viewport.leftIndex === skipHiddenIdx(sheet, 0, true, 'columns'), rowIndex: this.parent.viewport.topIndex, colIndex: this.parent.viewport.leftIndex, refresh: 'Column' });
                        }
                        else {
                            this.parent.notify(updateTableWidth, { refresh: 'Column', isUpdate: true });
                        }
                        this.parent.selectRange(sheet.selectedRange);
                        return;
                    }
                }
                if (hiddenIndex.length <= this.parent.getThreshold('col')) {
                    var indexes = this.parent.skipHidden(this.parent.viewport.rightIndex + 1, this.parent.viewport.rightIndex + hiddenIndex.length, 'columns');
                    this.parent.viewport.rightIndex = indexes[1];
                    this.parent.renderModule.refreshUI({ rowIndex: this.parent.viewport.topIndex, colIndex: indexes[0], direction: '', refresh: 'ColumnPart' }, "" + getRangeAddress([this.parent.viewport.topIndex, indexes[0], this.parent.viewport.bottomIndex, indexes[1]]));
                }
                else {
                    this.parent.renderModule.refreshUI({ skipUpdateOnFirst: this.parent.viewport.leftIndex === skipHiddenIdx(sheet, 0, true, 'columns'), rowIndex: this.parent.viewport.topIndex, colIndex: this.parent.viewport.leftIndex,
                        refresh: 'Column' });
                }
            }
            this.parent.selectRange(sheet.selectedRange);
        }
        else {
            if (beforeViewportIdx.length) {
                beforeViewportIdx.sort(function (i, j) { return i - j; });
                if (this.parent.scrollSettings.enableVirtualization && beforeViewportIdx[0] < this.parent.getThreshold('col')) {
                    var rowIdx = getCellIndexes(sheet.topLeftCell)[0] + 1;
                    this.parent.setSheetPropertyOnMute(sheet, 'topLeftCell', "A" + rowIdx);
                    this.parent.renderModule.refreshUI({ skipUpdateOnFirst: true, rowIndex: this.parent.viewport.topIndex, colIndex: 0,
                        refresh: 'Column' });
                    this.parent.selectRange(sheet.selectedRange);
                }
                else {
                    this.parent.goTo(getCellAddress(this.parent.viewport.topIndex, beforeViewportIdx[0]));
                }
                return;
            }
            if (hiddenIndex.length <= this.parent.getThreshold('col') || !this.parent.scrollSettings.enableVirtualization) {
                this.appendCell(sheet, hiddenIndex);
                if (this.parent.scrollSettings.enableVirtualization) {
                    this.parent.notify(virtualContentLoaded, { refresh: 'Column',
                        prevRowColCnt: { rowCount: sheet.rowCount, colCount: sheet.colCount } });
                }
            }
            else {
                this.parent.renderModule.refreshUI({ skipUpdateOnFirst: this.parent.viewport.leftIndex === skipHiddenIdx(sheet, 0, true, 'columns'), rowIndex: this.parent.viewport.topIndex, colIndex: this.parent.viewport.leftIndex,
                    refresh: 'Column' });
            }
            this.parent.selectRange(sheet.selectedRange);
        }
    };
    ShowHide.prototype.removeCell = function (sheet, indexes) {
        var _this = this;
        var startIdx;
        var endIdx;
        var hRow;
        var row;
        var hColgrp;
        var rowIdx = 0;
        var cellIdx = this.parent.getViewportIndex(indexes[0], true) + 1;
        var cell;
        if (this.parent.scrollSettings.enableVirtualization) {
            startIdx = this.parent.viewport.topIndex;
            endIdx = this.parent.viewport.bottomIndex;
        }
        else {
            startIdx = 0;
            endIdx = sheet.rowCount - 1;
        }
        var table = this.parent.getContentTable();
        var nextIdx;
        var colgrp = table.getElementsByTagName('colgroup')[0];
        if (sheet.showHeaders) {
            var hTable = this.parent.getColHeaderTable();
            hColgrp = hTable.getElementsByTagName('colgroup')[0];
            hRow = hTable.rows[0];
        }
        var modelLen = indexes.length - 1;
        while (startIdx <= endIdx) {
            if (isHiddenRow(sheet, startIdx)) {
                startIdx++;
                continue;
            }
            row = table.rows[rowIdx];
            indexes.forEach(function (idx, index) {
                detach(row.cells[cellIdx]);
                if (rowIdx === 0) {
                    if (sheet.showHeaders) {
                        detach(hRow.cells[cellIdx]);
                        detach(hColgrp.children[cellIdx]);
                    }
                    detach(colgrp.children[cellIdx]);
                }
                if (index === 0) {
                    cell = getCell(startIdx, idx, sheet) || {};
                    if (cell.colSpan !== undefined && (cell.rowSpan === undefined || cell.colSpan > 1)) {
                        _this.parent.notify(hiddenMerge, { rowIdx: startIdx, colIdx: idx, model: 'col',
                            start: indexes[0], end: indexes[modelLen] });
                    }
                }
                if (index === modelLen) {
                    nextIdx = skipHiddenIdx(sheet, idx + 1, true, 'columns');
                    var borderLeft = _this.parent.getCellStyleValue(['borderLeft'], [rowIdx, nextIdx]).borderLeft;
                    if (borderLeft !== '') {
                        _this.parent.notify(applyCellFormat, { onActionUpdate: false, rowIdx: rowIdx, colIdx: nextIdx,
                            style: { borderLeft: borderLeft }, row: row, first: '' });
                    }
                    cell = getCell(startIdx, idx, sheet) || {};
                    if (cell.colSpan !== undefined && (cell.rowSpan === undefined || cell.colSpan > 1)) {
                        _this.parent.notify(hiddenMerge, { rowIdx: startIdx, colIdx: idx, model: 'col',
                            start: indexes[0], end: indexes[modelLen], isEnd: true });
                    }
                }
            });
            startIdx++;
            rowIdx++;
        }
        if (cellIdx - 1 > -1) {
            if (sheet.showHeaders && hRow.cells[cellIdx - 1]) {
                hRow.cells[cellIdx - 1].classList.add('e-hide-start');
            }
        }
        if (sheet.showHeaders && hRow.cells[cellIdx]) {
            hRow.cells[cellIdx].classList.add('e-hide-end');
        }
    };
    ShowHide.prototype.appendCell = function (sheet, indexes) {
        var _this = this;
        var startIdx;
        var endIdx;
        var hRow;
        var row;
        var hColgrp;
        var rowIdx = 0;
        var prevIdx;
        if (this.parent.scrollSettings.enableVirtualization) {
            startIdx = this.parent.viewport.topIndex;
            endIdx = this.parent.viewport.bottomIndex;
        }
        else {
            startIdx = 0;
            endIdx = sheet.rowCount - 1;
        }
        var table = this.parent.getContentTable();
        var hTable = this.parent.getColHeaderTable();
        var colgrp = table.getElementsByTagName('colgroup')[0];
        if (sheet.showHeaders) {
            hColgrp = hTable.getElementsByTagName('colgroup')[0];
            hRow = hTable.rows[0];
        }
        var cellRenderer = this.parent.serviceLocator.getService('cell');
        indexes.sort(function (i, j) { return i - j; });
        var cellModel;
        var mergeCollection = [];
        var cellIdx = [];
        var cell;
        var refCell;
        var modelLen = indexes.length - 1;
        while (startIdx <= endIdx) {
            if (isHiddenRow(sheet, startIdx)) {
                startIdx++;
                continue;
            }
            row = table.rows[rowIdx];
            indexes.forEach(function (idx, index) {
                if (rowIdx === 0) {
                    cellIdx[index] = _this.parent.getViewportIndex(idx, true);
                    if (colgrp.children[cellIdx[index]]) {
                        colgrp.insertBefore(_this.parent.sheetModule.updateCol(sheet, idx), colgrp.children[cellIdx[index]]);
                        if (sheet.showHeaders) {
                            refCell = hRow.cells[cellIdx[index]];
                            if (index === 0 && indexes[index] && !isHiddenCol(sheet, indexes[index] - 1)) {
                                refCell.previousElementSibling.classList.remove('e-hide-start');
                            }
                            hRow.insertBefore(cellRenderer.renderColHeader(idx), refCell);
                            if (index === modelLen) {
                                refCell.classList.remove('e-hide-end');
                            }
                        }
                    }
                    else {
                        colgrp.appendChild(_this.parent.sheetModule.updateCol(sheet, idx));
                        if (sheet.showHeaders) {
                            hRow.appendChild(cellRenderer.renderColHeader(idx));
                        }
                    }
                    detach(colgrp.lastChild);
                    if (sheet.showHeaders) {
                        detach(hRow.lastChild);
                        if (index === modelLen) {
                            detach(hColgrp);
                            hTable.insertBefore(colgrp.cloneNode(true), hTable.tHead[0]);
                        }
                    }
                }
                detach(row.lastChild);
                refCell = row.cells[cellIdx[index]];
                cell = cellRenderer.render({ rowIdx: startIdx, colIdx: idx, cell: getCell(startIdx, idx, sheet),
                    address: getCellAddress(startIdx, idx), lastCell: idx === modelLen, isHeightCheckNeeded: true,
                    first: idx !== skipHiddenIdx(sheet, 0, true, 'columns') && idx === _this.parent.viewport.leftIndex ? 'Column' : '',
                    checkNextBorder: index === modelLen ? 'Column' : '' });
                if (refCell) {
                    row.insertBefore(cell, refCell);
                }
                else {
                    row.appendChild(cell);
                }
                if (index === 0 && cell.previousSibling) {
                    var borderLeft = _this.parent.getCellStyleValue(['borderLeft'], [rowIdx, skipHiddenIdx(sheet, indexes[indexes.length - 1] + 1, true, 'columns')]).borderLeft;
                    if (borderLeft !== '') {
                        prevIdx = skipHiddenIdx(sheet, indexes[0] - 1, false, 'columns');
                        if (prevIdx > -1 && !_this.parent.getCellStyleValue(['borderRight'], [rowIdx, prevIdx]).borderRight &&
                            !_this.parent.getCellStyleValue(['borderLeft'], [rowIdx, indexes[0]]).borderLeft) {
                            cell.previousSibling.style.borderRight = '';
                        }
                    }
                }
                cellModel = getCell(rowIdx, idx, sheet) || {};
                if (cellModel.colSpan !== undefined && (cellModel.rowSpan === undefined || cellModel.colSpan > 1)) {
                    var mergeArgs = { range: [rowIdx, idx, rowIdx, idx], isAction: false, merge: true,
                        type: 'All', skipChecking: true };
                    _this.parent.notify(activeCellMergedRange, mergeArgs);
                    if (!mergeCollection.length || mergeArgs.range[1] !== mergeCollection[mergeCollection.length - 1].range[1]) {
                        mergeCollection.push(mergeArgs);
                    }
                }
            });
            startIdx++;
            rowIdx++;
        }
        mergeCollection.forEach(function (mergeArgs) { _this.parent.notify(setMerge, mergeArgs); });
        this.parent.viewport.rightIndex = skipHiddenIdx(sheet, this.parent.viewport.rightIndex - indexes.length, false, 'columns');
    };
    ShowHide.prototype.refreshChart = function (index, showHide) {
        this.parent.notify(refreshChart, { rIdx: index, showHide: showHide });
    };
    ShowHide.prototype.addEventListener = function () {
        this.parent.on(hideShow, this.hideShow, this);
        this.parent.on(spreadsheetDestroyed, this.destroy, this);
    };
    ShowHide.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    ShowHide.prototype.removeEventListener = function () {
        this.parent.off(hideShow, this.hideShow);
        this.parent.off(spreadsheetDestroyed, this.destroy);
    };
    return ShowHide;
}());

/**
 * `Hyperlink` module
 */
var SpreadsheetHyperlink = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for Hyperlink module.
     *
     * @param {Spreadsheet} parent - Constructor for Hyperlink module.
     */
    function SpreadsheetHyperlink(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the Hyperlink module.
     *
     * @returns {void} - To destroy the Hyperlink module.
     */
    SpreadsheetHyperlink.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    SpreadsheetHyperlink.prototype.addEventListener = function () {
        this.parent.on(initiateHyperlink, this.initiateHyperlinkHandler, this);
        this.parent.on(editHyperlink, this.editHyperlinkHandler, this);
        this.parent.on(openHyperlink, this.openHyperlinkHandler, this);
        this.parent.on(click, this.hyperlinkClickHandler, this);
        this.parent.on(createHyperlinkElement, this.createHyperlinkElementHandler, this);
        this.parent.on(keyUp, this.keyUpHandler, this);
        this.parent.on(deleteHyperlink, this.removeHyperlink, this);
    };
    SpreadsheetHyperlink.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(initiateHyperlink, this.initiateHyperlinkHandler);
            this.parent.off(editHyperlink, this.editHyperlinkHandler);
            this.parent.off(openHyperlink, this.openHyperlinkHandler);
            this.parent.off(click, this.hyperlinkClickHandler);
            this.parent.off(createHyperlinkElement, this.createHyperlinkElementHandler);
            this.parent.off(keyUp, this.keyUpHandler);
            this.parent.off(deleteHyperlink, this.removeHyperlink);
        }
    };
    /**
     * Gets the module name.
     *
     * @returns {string} - Gets the module name.
     */
    SpreadsheetHyperlink.prototype.getModuleName = function () {
        return 'spreadsheetHyperlink';
    };
    SpreadsheetHyperlink.prototype.keyUpHandler = function (e) {
        var trgt = e.target;
        if (closest(trgt, '.e-document')) {
            var hyperlinkText = document.querySelector('.e-hyp-text');
            var hyperlinkSpan = this.parent.element.querySelector('.e-hyperlink-alert-span');
            var dlgElement = closest(trgt, '.e-hyperlink-dlg') || closest(trgt, '.e-edithyperlink-dlg');
            var footerEle = dlgElement.getElementsByClassName('e-footer-content')[0];
            var insertBut = footerEle.firstChild;
            if (hyperlinkText && hyperlinkText.value) {
                if (!isCellReference(hyperlinkText.value.toUpperCase())) {
                    this.showDialog();
                    insertBut.setAttribute('disabled', 'true');
                }
                else if (hyperlinkSpan) {
                    hyperlinkSpan.remove();
                    insertBut.removeAttribute('disabled');
                }
            }
        }
        if (trgt.classList.contains('e-text') && closest(trgt, '.e-cont')) {
            if (closest(trgt, '.e-webpage') && closest(trgt, '.e-webpage').getElementsByClassName('e-cont')[1] === trgt.parentElement) {
                var dlgEle = closest(trgt, '.e-hyperlink-dlg') || closest(trgt, '.e-edithyperlink-dlg');
                var ftrEle = dlgEle.getElementsByClassName('e-footer-content')[0];
                var insertBut = ftrEle.firstChild;
                if (trgt.value !== '') {
                    insertBut.removeAttribute('disabled');
                }
                else {
                    var linkDialog = closest(trgt, '.e-link-dialog');
                    var webPage = linkDialog.querySelector('.e-webpage');
                    var isUrl = webPage.querySelectorAll('.e-cont')[1].querySelector('.e-text').value ? true : false;
                    if (!isUrl) {
                        insertBut.setAttribute('disabled', 'true');
                    }
                }
            }
        }
    };
    SpreadsheetHyperlink.prototype.initiateHyperlinkHandler = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var sheet = this.parent.getActiveSheet();
        if (sheet.isProtected && !sheet.protectSettings.insertLink) {
            this.parent.notify(editAlert, null);
            return;
        }
        if (!this.parent.element.querySelector('.e-hyperlink-dlg')) {
            var dialogInst_1 = this.parent.serviceLocator.getService(dialog);
            dialogInst_1.show({
                width: 323, isModal: true, showCloseIcon: true, cssClass: 'e-hyperlink-dlg',
                header: l10n.getConstant('InsertLink'),
                beforeOpen: function (args) {
                    var dlgArgs = {
                        dialogName: 'InsertLinkDialog',
                        element: args.element, target: args.target, cancel: args.cancel
                    };
                    _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                    if (dlgArgs.cancel) {
                        args.cancel = true;
                    }
                    dialogInst_1.dialogInstance.content = _this.hyperlinkContent();
                    dialogInst_1.dialogInstance.dataBind();
                    focus(_this.parent.element);
                },
                open: function () {
                    setTimeout(function () {
                        focus(dialogInst_1.dialogInstance.element.querySelectorAll('.e-webpage input')[1]);
                    });
                },
                buttons: [{
                        buttonModel: {
                            content: l10n.getConstant('Insert'), isPrimary: true, disabled: true
                        },
                        click: function () {
                            _this.dlgClickHandler();
                            dialogInst_1.hide();
                        }
                    }]
            });
        }
    };
    SpreadsheetHyperlink.prototype.dlgClickHandler = function () {
        var value;
        var address;
        //const spreadsheetInst: Spreadsheet = this.parent;
        var item = this.parent.element.querySelector('.e-link-dialog').
            getElementsByClassName('e-content')[0].querySelector('.e-item.e-active');
        if (item) {
            if (item.querySelector('.e-webpage')) {
                value = item.getElementsByClassName('e-cont')[0].querySelector('.e-text').value;
                address = item.getElementsByClassName('e-cont')[1].querySelector('.e-text').value;
                var args = { address: address };
                this.parent.insertHyperlink(args, this.parent.getActiveSheet().activeCell, value, false);
            }
            else {
                value = item.getElementsByClassName('e-cont')[0].querySelector('.e-text').value;
                address = item.getElementsByClassName('e-cont')[1].querySelector('.e-text').value;
                var dlgContent = item.getElementsByClassName('e-cont')[2];
                if (dlgContent.getElementsByClassName('e-list-item')[0].querySelector('.e-active')) {
                    var sheetName = item.getElementsByClassName('e-cont')[2].querySelector('.e-active').textContent;
                    // const sheets: SheetModel[] = spreadsheetInst.sheets;
                    // for (let idx: number = 0; idx < sheets.length; idx++) {
                    //     if (sheets[idx].name === sheetName) {
                    //         const sheetIdx: number = idx + 1;
                    //     }
                    // }
                    address = sheetName + '!' + address.toUpperCase();
                    var args = { address: address };
                    this.parent.insertHyperlink(args, this.parent.getActiveSheet().activeCell, value, false);
                }
                else if (dlgContent.querySelector('.e-active')) {
                    var definedName = item.getElementsByClassName('e-cont')[2].querySelector('.e-active').textContent;
                    for (var idx = 0; idx < this.parent.definedNames.length; idx++) {
                        if (this.parent.definedNames[idx].name === definedName) {
                            var args = {
                                address: this.parent.definedNames[idx].name
                            };
                            this.parent.insertHyperlink(args, this.parent.getActiveSheet().activeCell, value, false);
                        }
                    }
                }
            }
        }
    };
    SpreadsheetHyperlink.prototype.showDialog = function () {
        if (this.parent.element.querySelector('.e-hyperlink-alert-span')) {
            this.parent.element.querySelector('.e-hyperlink-alert-span').remove();
        }
        var l10n = this.parent.serviceLocator.getService(locale);
        var hyperlinkSpan = this.parent.createElement('span', {
            className: 'e-hyperlink-alert-span',
            innerHTML: l10n.getConstant('HyperlinkAlert')
        });
        var dlgEle = this.parent.element.querySelector('.e-hyperlink-dlg') || this.parent.element.querySelector('.e-edithyperlink-dlg');
        (dlgEle.querySelector('.e-dlg-content')).appendChild(hyperlinkSpan);
    };
    SpreadsheetHyperlink.prototype.editHyperlinkHandler = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            width: 323, isModal: true, showCloseIcon: true, cssClass: 'e-edithyperlink-dlg',
            header: l10n.getConstant('EditLink'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'EditLinkDialog',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                dialogInst.dialogInstance.content = _this.hyperEditContent();
                dialogInst.dialogInstance.dataBind();
                focus(_this.parent.element);
            },
            open: function () {
                setTimeout(function () {
                    if (dialogInst.dialogInstance.element.querySelector('.e-webpage')) {
                        focus(dialogInst.dialogInstance.element.querySelectorAll('.e-webpage input')[1]);
                    }
                    else {
                        focus(dialogInst.dialogInstance.element.querySelectorAll('.e-document input')[1]);
                    }
                });
            },
            buttons: [{
                    buttonModel: {
                        content: l10n.getConstant('Update'), isPrimary: true
                    },
                    click: function () {
                        _this.dlgClickHandler();
                        dialogInst.hide();
                    }
                }]
        });
    };
    SpreadsheetHyperlink.prototype.openHyperlinkHandler = function () {
        var cellIndexes = getCellIndexes(this.parent.getActiveSheet().activeCell);
        var trgt = this.parent.getCell(cellIndexes[0], cellIndexes[1]);
        if (trgt.getElementsByClassName('e-hyperlink')[0]) {
            trgt = trgt.querySelector('.e-hyperlink');
        }
        this.hlOpenHandler(trgt);
    };
    SpreadsheetHyperlink.prototype.hlOpenHandler = function (trgt) {
        var _this = this;
        if (trgt.classList.contains('e-hyperlink')) {
            var range = ['', ''];
            // let selRange: string;
            var rangeIndexes = void 0;
            var isEmpty = true;
            trgt.style.color = '#551A8B';
            if (closest(trgt, '.e-cell')) {
                closest(trgt, '.e-cell').style.color = '#551A8B';
            }
            var sheet = this.parent.getActiveSheet();
            var colIdx = parseInt(trgt.parentElement.getAttribute('aria-colindex'), 10) - 1;
            var rowIdx = parseInt(trgt.parentElement.parentElement.getAttribute('aria-rowindex'), 10) - 1;
            var rangeAddr = sheet.rows[rowIdx].cells[colIdx].hyperlink;
            var address = void 0;
            var befArgs = { hyperlink: rangeAddr, cell: this.parent.getActiveSheet().activeCell, target: '_blank', cancel: false };
            this.parent.trigger(beforeHyperlinkClick, befArgs);
            if (befArgs.cancel) {
                return;
            }
            rangeAddr = befArgs.hyperlink;
            var aftArgs = { hyperlink: rangeAddr, cell: this.parent.getActiveSheet().activeCell };
            if (typeof (rangeAddr) === 'string') {
                address = rangeAddr;
            }
            if (typeof (rangeAddr) === 'object') {
                address = rangeAddr.address;
            }
            var definedNameCheck = address;
            if (address.indexOf('http://') === -1 && address.indexOf('https://') === -1 && address.indexOf('ftp://') === -1) {
                if (!isNullOrUndefined(address)) {
                    if (this.parent.definedNames) {
                        for (var idx = 0; idx < this.parent.definedNames.length; idx++) {
                            if (this.parent.definedNames[idx].name === address) {
                                address = this.parent.definedNames[idx].refersTo;
                                address = address.slice(1);
                                break;
                            }
                        }
                    }
                    if (address.indexOf('!') !== -1) {
                        range = address.split('!');
                        if (range[0].indexOf(' ') !== -1) {
                            range[0] = range[0].slice(1, range[0].length - 1);
                        }
                    }
                    else {
                        range[0] = this.parent.getActiveSheet().name;
                        range[1] = address;
                    }
                    // selRange = range[1];
                    var sheetIdx_1;
                    for (var idx = 0; idx < this.parent.sheets.length; idx++) {
                        if (this.parent.sheets[idx].name === range[0]) {
                            sheetIdx_1 = idx;
                        }
                    }
                    sheet = this.parent.sheets[sheetIdx_1];
                    if (range[1].indexOf(':') !== -1) {
                        var colIndex = range[1].indexOf(':');
                        var left = range[1].substr(0, colIndex);
                        var right = range[1].substr(colIndex + 1, range[1].length);
                        left = left.replace('$', '');
                        right = right.replace('$', '');
                        if (right.match(/\D/g) && !right.match(/[0-9]/g) && left.match(/\D/g) && !left.match(/[0-9]/g)) {
                            // selRange = left + '1' + ':' + right + sheet.rowCount;
                            left = left + '1';
                            right = right + sheet.rowCount;
                            range[1] = left + ':' + right;
                        }
                        else if (!right.match(/\D/g) && right.match(/[0-9]/g) && !left.match(/\D/g) && left.match(/[0-9]/g)) {
                            // selRange = getCellAddress(parseInt(left, 10) - 1, 0) + ':' +
                            //     getCellAddress(parseInt(right, 10) - 1, sheet.colCount - 1);
                            rangeIndexes = [parseInt(left, 10) - 1, 0, parseInt(right, 10) - 1, sheet.colCount - 1];
                            isEmpty = false;
                        }
                    }
                    var isDefinedNamed = void 0;
                    var definedname = this.parent.definedNames;
                    if (!isNullOrUndefined(definedname)) {
                        for (var idx = 0; idx < definedname.length; idx++) {
                            if (definedname[idx].name === definedNameCheck) {
                                isDefinedNamed = true;
                                break;
                            }
                        }
                    }
                    if (isCellReference(range[1]) || isDefinedNamed) {
                        rangeIndexes = isEmpty ? getRangeIndexes(range[1]) : rangeIndexes;
                        if (this.parent.scrollSettings.enableVirtualization) {
                            rangeIndexes[0] = rangeIndexes[0] >= this.parent.viewport.topIndex ?
                                rangeIndexes[0] - this.parent.viewport.topIndex : rangeIndexes[0];
                            rangeIndexes[1] = rangeIndexes[1] >= this.parent.viewport.leftIndex ?
                                rangeIndexes[1] - this.parent.viewport.leftIndex : rangeIndexes[1];
                        }
                        if (!isNullOrUndefined(sheet)) {
                            var rangeAddr_1 = getRangeAddress(rangeIndexes);
                            if (sheet === this.parent.getActiveSheet()) {
                                getUpdateUsingRaf(function () { _this.parent.goTo(rangeAddr_1); });
                            }
                            else {
                                if (rangeAddr_1.indexOf(':') >= 0) {
                                    var addArr = rangeAddr_1.split(':');
                                    rangeAddr_1 = addArr[0] === addArr[1] ? addArr[0] : rangeAddr_1;
                                }
                                getUpdateUsingRaf(function () { _this.parent.goTo(_this.parent.sheets[sheetIdx_1].name + '!' + rangeAddr_1); });
                            }
                        }
                    }
                    else {
                        this.showInvalidHyperlinkDialog();
                    }
                }
            }
            else {
                if (this.isValidUrl(address)) {
                    window.open(address, befArgs.target);
                }
                else {
                    this.showInvalidHyperlinkDialog();
                }
            }
            this.parent.trigger(afterHyperlinkClick, aftArgs);
        }
    };
    SpreadsheetHyperlink.prototype.isValidUrl = function (url) {
        // eslint-disable-next-line no-useless-escape
        return /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/.test(url);
    };
    SpreadsheetHyperlink.prototype.showInvalidHyperlinkDialog = function () {
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        var l10n = this.parent.serviceLocator.getService(locale);
        dialogInst.show({
            width: 323, isModal: true, showCloseIcon: true,
            header: l10n.getConstant('Hyperlink'),
            content: l10n.getConstant('InvalidHyperlinkAlert'),
            buttons: [{
                    buttonModel: {
                        content: l10n.getConstant('Ok'), isPrimary: true
                    },
                    click: function () {
                        dialogInst.hide();
                    }
                }]
        }, false);
    };
    SpreadsheetHyperlink.prototype.hyperlinkClickHandler = function (e) {
        var trgt = e.target;
        if (closest(trgt, '.e-link-dialog') && closest(trgt, '.e-toolbar-item')) {
            var dlgEle = closest(trgt, '.e-hyperlink-dlg') || closest(trgt, '.e-edithyperlink-dlg');
            var ftrEle = dlgEle.getElementsByClassName('e-footer-content')[0];
            var insertBut = ftrEle.firstChild;
            var docEle = dlgEle.querySelector('.e-document');
            var webEle = dlgEle.querySelector('.e-webpage');
            var webEleText = webEle ? webEle.querySelectorAll('.e-cont')[0].querySelector('.e-text').value :
                docEle.querySelectorAll('.e-cont')[0].querySelector('.e-text').value;
            var docEleText = docEle ? docEle.querySelectorAll('.e-cont')[0].querySelector('.e-text').value :
                webEleText;
            var toolbarItems = closest(trgt, '.e-toolbar-items');
            if (toolbarItems.getElementsByClassName('e-toolbar-item')[1].classList.contains('e-active')) {
                var actEle = docEle.querySelectorAll('.e-cont')[2].querySelector('.e-active');
                docEle.querySelectorAll('.e-cont')[0].querySelector('.e-text').value = webEleText;
                if (closest(actEle, '.e-list-item').classList.contains('e-level-2') && insertBut.hasAttribute('disabled')) {
                    insertBut.removeAttribute('disabled');
                }
                else if (closest(actEle, '.e-list-item').classList.contains('e-level-1') && !insertBut.hasAttribute('disabled')) {
                    insertBut.setAttribute('disabled', 'true');
                }
            }
            else {
                var isEmpty = webEle.querySelectorAll('.e-cont')[1].querySelector('.e-text').value ? false : true;
                webEle.querySelectorAll('.e-cont')[0].querySelector('.e-text').value = docEleText;
                if (isEmpty && !insertBut.hasAttribute('disabled')) {
                    insertBut.setAttribute('disabled', 'true');
                }
                else if (!isEmpty && insertBut.hasAttribute('disabled')) {
                    insertBut.removeAttribute('disabled');
                }
            }
        }
        if (closest(trgt, '.e-list-item') && trgt.classList.contains('e-fullrow')) {
            var item = this.parent.element.getElementsByClassName('e-link-dialog')[0].
                getElementsByClassName('e-content')[0].getElementsByClassName('e-active')[0];
            var cellRef = item.getElementsByClassName('e-cont')[1].getElementsByClassName('e-text')[0];
            var dlgEle = closest(trgt, '.e-hyperlink-dlg') || closest(trgt, '.e-edithyperlink-dlg');
            var ftrEle = dlgEle.getElementsByClassName('e-footer-content')[0];
            var insertBut = ftrEle.firstChild;
            if (closest(trgt, '.e-list-item').classList.contains('e-level-2')) {
                if (closest(trgt, '.e-list-item').getAttribute('data-uid') === 'defName') {
                    if (!cellRef.classList.contains('e-disabled') && !cellRef.hasAttribute('readonly')) {
                        cellRef.setAttribute('readonly', 'true');
                        cellRef.classList.add('e-disabled');
                        cellRef.setAttribute('disabled', 'true');
                    }
                }
                else if (closest(trgt, '.e-list-item').getAttribute('data-uid') === 'sheet') {
                    if (cellRef.classList.contains('e-disabled') && cellRef.hasAttribute('readonly')) {
                        cellRef.removeAttribute('readonly');
                        cellRef.classList.remove('e-disabled');
                        cellRef.removeAttribute('disabled');
                    }
                }
                if (insertBut.hasAttribute('disabled')) {
                    insertBut.removeAttribute('disabled');
                }
            }
            else if (closest(trgt, '.e-list-item').classList.contains('e-level-1')) {
                insertBut.setAttribute('disabled', 'true');
            }
        }
        else {
            this.hlOpenHandler(trgt);
        }
    };
    SpreadsheetHyperlink.prototype.createHyperlinkElementHandler = function (args) {
        var cell = args.cell;
        var td = args.td;
        var hyperEle = this.parent.createElement('a', { className: 'e-hyperlink e-hyperlink-style' });
        hyperEle.style.color = '#00e';
        if (!isNullOrUndefined(cell.hyperlink)) {
            var hyperlink = cell.hyperlink;
            if (typeof (hyperlink) === 'string') {
                if (hyperlink.indexOf('http://') === -1 && hyperlink.indexOf('https://') === -1 &&
                    hyperlink.indexOf('ftp://') === -1 && hyperlink.indexOf('www.') !== -1) {
                    hyperlink = 'http://' + hyperlink;
                }
                if (hyperlink.indexOf('http://') === 0 || hyperlink.indexOf('https://') === 0 || hyperlink.indexOf('ftp://') === 0) {
                    hyperEle.setAttribute('href', hyperlink);
                    hyperEle.setAttribute('target', '_blank');
                }
                else if (hyperlink.includes('=') || hyperlink.includes('!')) {
                    hyperEle.setAttribute('ref', hyperlink);
                }
                hyperEle.innerText = td.innerText !== '' ? td.innerText : hyperlink;
                td.textContent = '';
                td.innerText = '';
                td.appendChild(hyperEle);
            }
            else if (typeof (hyperlink) === 'object') {
                if (hyperlink.address.indexOf('http://') === 0 || hyperlink.address.indexOf('https://') === 0 ||
                    hyperlink.address.indexOf('ftp://') === 0) {
                    hyperEle.setAttribute('href', hyperlink.address);
                    hyperEle.setAttribute('target', '_blank');
                }
                else if (hyperlink.address.includes('=') || hyperlink.address.includes('!')) {
                    hyperEle.setAttribute('ref', hyperlink.address);
                }
                if (getTypeFromFormat(cell.format) === 'Accounting') {
                    hyperEle.innerHTML = td.innerHTML;
                }
                else {
                    hyperEle.innerText = td.innerText !== '' ? td.innerText : hyperlink.address;
                }
                td.textContent = '';
                td.innerText = '';
                td.appendChild(hyperEle);
            }
        }
        else if (td.querySelector('a') && cell.hyperlink) {
            if (typeof (cell.hyperlink) === 'string') {
                td.querySelector('a').setAttribute('href', cell.hyperlink);
            }
        }
    };
    SpreadsheetHyperlink.prototype.hyperEditContent = function () {
        var isWeb = true;
        var dialog = this.hyperlinkContent();
        var indexes = getRangeIndexes(this.parent.getActiveSheet().activeCell);
        var cell = this.parent.sheets[this.parent.getActiveSheet().id - 1].rows[indexes[0]].cells[indexes[1]];
        if (this.parent.scrollSettings.enableVirtualization) {
            indexes[0] = indexes[0] - this.parent.viewport.topIndex;
            indexes[1] = indexes[1] - this.parent.viewport.leftIndex;
        }
        var value = this.parent.getDisplayText(cell);
        var address;
        var hyperlink = cell.hyperlink;
        if (typeof (hyperlink) === 'string') {
            address = hyperlink;
            value = value || address;
            if (address.indexOf('http://') === -1 && address.indexOf('https://') === -1 && address.indexOf('ftp://') === -1) {
                isWeb = false;
            }
        }
        else if (typeof (hyperlink) === 'object') {
            address = hyperlink.address;
            value = value || address;
            if (address.indexOf('http://') === -1 && address.indexOf('https://') === -1 && address.indexOf('ftp://') === -1) {
                isWeb = false;
            }
        }
        var definedNamesCount = 0;
        var rangeCount = 0;
        var definedNames = this.parent.definedNames;
        var sheets = this.parent.sheets;
        for (var idx = 0, len = definedNames.length; idx < len; idx++) {
            if (definedNames[idx].name === address) {
                definedNamesCount++;
            }
        }
        for (var idx = 0, len = sheets.length; idx < len; idx++) {
            if (address.includes(sheets[idx].name)) {
                rangeCount++;
            }
        }
        if (definedNamesCount === 0 && rangeCount === 0) {
            isWeb = true;
        }
        var item = dialog.querySelector('.e-content');
        if (isWeb) {
            var webContElem = item.querySelector('.e-webpage');
            webContElem.getElementsByClassName('e-cont')[0].getElementsByClassName('e-text')[0].setAttribute('value', value);
            if (typeof (hyperlink) === 'string') {
                webContElem.getElementsByClassName('e-cont')[1].querySelector('.e-text').setAttribute('value', hyperlink);
            }
            else {
                var address_1 = webContElem.getElementsByClassName('e-cont')[1].querySelector('.e-text');
                address_1.setAttribute('value', hyperlink.address);
            }
        }
        else {
            var isDefinedNamed = void 0;
            var docContElem = item.querySelector('.e-document');
            docContElem.getElementsByClassName('e-cont')[0].getElementsByClassName('e-text')[0].setAttribute('value', value);
            var rangeArr = void 0;
            // let sheet: SheetModel = this.parent.getActiveSheet();
            // let sheetIdx: number;
            if (this.parent.definedNames) {
                for (var idx = 0; idx < this.parent.definedNames.length; idx++) {
                    if (this.parent.definedNames[idx].name === address) {
                        isDefinedNamed = true;
                        break;
                    }
                }
            }
            if (isDefinedNamed) {
                var cellRef = docContElem.getElementsByClassName('e-cont')[1].getElementsByClassName('e-text')[0];
                cellRef.setAttribute('readonly', 'true');
                cellRef.classList.add('e-disabled');
                cellRef.setAttribute('disabled', 'true');
                var treeCont = docContElem.getElementsByClassName('e-cont')[2];
                var listEle = treeCont.querySelectorAll('.e-list-item.e-level-1')[1];
                for (var idx = 0; idx < listEle.getElementsByTagName('li').length; idx++) {
                    if (listEle.getElementsByTagName('li')[idx].innerText === address) {
                        listEle.getElementsByTagName('li')[idx].classList.add('e-active');
                    }
                }
            }
            else {
                if (address && address.indexOf('!') !== -1) {
                    rangeArr = address.split('!');
                    // sheetIdx = parseInt(rangeArr[0].replace(/\D/g, ''), 10) - 1;
                    // sheet = this.parent.sheets[sheetIdx];
                }
                var sheetName = rangeArr[0];
                docContElem.getElementsByClassName('e-cont')[1].querySelector('.e-text').setAttribute('value', rangeArr[1]);
                var treeCont = docContElem.getElementsByClassName('e-cont')[2];
                var listEle = treeCont.querySelectorAll('.e-list-item.e-level-1')[0];
                for (var idx = 0; idx < listEle.getElementsByTagName('li').length; idx++) {
                    if (listEle.getElementsByTagName('li')[idx].innerText === sheetName) {
                        if (listEle.getElementsByTagName('li')[idx].classList.contains('e-active')) {
                            break;
                        }
                        else {
                            listEle.getElementsByTagName('li')[idx].classList.add('e-active');
                        }
                    }
                    else {
                        if (listEle.getElementsByTagName('li')[idx].classList.contains('e-active')) {
                            listEle.getElementsByTagName('li')[idx].classList.remove('e-active');
                        }
                    }
                }
            }
        }
        return dialog;
    };
    SpreadsheetHyperlink.prototype.hyperlinkContent = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var idx = 0;
        var selIdx = 0;
        var isWeb = true;
        var isDefinedName;
        var isCellRef = true;
        var address;
        var indexes = getRangeIndexes(this.parent.getActiveSheet().activeCell);
        var sheet = this.parent.getActiveSheet();
        var cell = getCell(indexes[0], indexes[1], sheet);
        var isEnable = true;
        if (cell) {
            if ((cell.value && typeof (cell.value) === 'string' && cell.value.match('[A-Za-z]+') !== null) ||
                cell.value === '' || isNullOrUndefined(cell.value)) {
                isEnable = true;
            }
            else {
                isEnable = false;
            }
            var hyperlink = cell.hyperlink;
            if (typeof (hyperlink) === 'string') {
                var hl = hyperlink;
                if (hl.indexOf('http://') === -1 && hl.indexOf('https://') === -1 && hl.indexOf('ftp://') === -1) {
                    address = hyperlink;
                    isWeb = false;
                }
            }
            else if (typeof (hyperlink) === 'object') {
                var hl = hyperlink.address;
                if (hl.indexOf('http://') === -1 && hl.indexOf('https://') === -1 && hl.indexOf('ftp://') === -1) {
                    address = hyperlink.address;
                    isWeb = false;
                }
            }
            if (address) {
                var defNamesCnt = 0;
                var rangeCnt = 0;
                var definedNames = this.parent.definedNames;
                var sheets_1 = this.parent.sheets;
                for (var idx_1 = 0, len = sheets_1.length; idx_1 < len; idx_1++) {
                    if (address.includes(sheets_1[idx_1].name)) {
                        rangeCnt++;
                    }
                }
                for (var idx_2 = 0, len = definedNames.length; idx_2 < len; idx_2++) {
                    if (definedNames[idx_2].name === address) {
                        defNamesCnt++;
                    }
                }
                if (defNamesCnt === 0 && rangeCnt === 0) {
                    isWeb = true;
                }
            }
            if (isWeb) {
                selIdx = 0;
            }
            else {
                selIdx = 1;
            }
            if (this.parent.definedNames) {
                for (var idx_3 = 0; idx_3 < this.parent.definedNames.length; idx_3++) {
                    if (this.parent.definedNames[idx_3].name === address) {
                        isDefinedName = true;
                        isCellRef = false;
                        break;
                    }
                }
            }
        }
        var dialogElem = this.parent.createElement('div', { className: 'e-link-dialog' });
        var webContElem = this.parent.createElement('div', { className: 'e-webpage' });
        var docContElem = this.parent.createElement('div', { className: 'e-document' });
        var headerTabs = new Tab({
            selectedItem: selIdx,
            items: [
                {
                    header: { 'text': l10n.getConstant('WebPage') },
                    content: webContElem
                },
                {
                    header: { 'text': l10n.getConstant('ThisDocument') },
                    content: docContElem
                }
            ]
        });
        headerTabs.appendTo(dialogElem);
        if (isWeb) {
            dialogElem.querySelector('.e-toolbar-items').querySelector('.e-indicator').setAttribute('style', 'left: 0; right: 136px');
        }
        else {
            dialogElem.querySelector('.e-toolbar-items').querySelector('.e-indicator').setAttribute('style', 'left: 136px; right: 0');
        }
        var textCont = this.parent.createElement('div', { className: 'e-cont' });
        var urlCont = this.parent.createElement('div', { className: 'e-cont' });
        var textH = this.parent.createElement('div', { className: 'e-header', innerHTML: l10n.getConstant('DisplayText') });
        var urlH = this.parent.createElement('div', { className: 'e-header', innerHTML: l10n.getConstant('Url') });
        var textInput = this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'Text' } });
        if (!isEnable) {
            textInput.classList.add('e-disabled');
            textInput.setAttribute('readonly', 'true');
            textInput.setAttribute('disabled', 'true');
        }
        if (cell && isNullOrUndefined(cell.hyperlink)) {
            textInput.setAttribute('value', this.parent.getDisplayText(cell));
        }
        var urlInput = this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'Text' } });
        textInput.setAttribute('placeholder', l10n.getConstant('EnterTheTextToDisplay'));
        urlInput.setAttribute('placeholder', l10n.getConstant('EnterTheUrl'));
        textCont.appendChild(textInput);
        textCont.insertBefore(textH, textInput);
        urlCont.appendChild(urlInput);
        urlCont.insertBefore(urlH, urlInput);
        webContElem.appendChild(urlCont);
        webContElem.insertBefore(textCont, urlCont);
        var cellRef = [];
        var definedName = [];
        var sheets = this.parent.sheets;
        for (idx; idx < this.parent.sheets.length; idx++) {
            var sheetName = this.parent.sheets[idx].name;
            if (this.parent.sheets[idx].state === 'Visible') {
                if (sheets[idx] === this.parent.getActiveSheet()) {
                    cellRef.push({
                        nodeId: 'sheet',
                        nodeText: sheetName.indexOf(' ') !== -1 ? '\'' + sheetName + '\'' : sheetName,
                        selected: true
                    });
                }
                else {
                    cellRef.push({
                        nodeId: 'sheet',
                        nodeText: sheetName.indexOf(' ') !== -1 ? '\'' + sheetName + '\'' : sheetName
                    });
                }
            }
        }
        for (idx = 0; idx < this.parent.definedNames.length; idx++) {
            definedName.push({
                nodeId: 'defName',
                nodeText: this.parent.definedNames[idx].name
            });
        }
        var data = [
            {
                nodeId: '01', nodeText: l10n.getConstant('CellReference'), expanded: isCellRef,
                nodeChild: cellRef
            },
            {
                nodeId: '02', nodeText: l10n.getConstant('DefinedNames'), expanded: isDefinedName,
                nodeChild: definedName
            }
        ];
        var treeObj = new TreeView({
            fields: { dataSource: data, id: 'nodeId', text: 'nodeText', child: 'nodeChild' }
        });
        var cellrefCont = this.parent.createElement('div', { className: 'e-cont' });
        var cellrefH = this.parent.createElement('div', { className: 'e-header', innerHTML: l10n.getConstant('CellReference') });
        var cellrefInput = this.parent.createElement('input', {
            className: 'e-input e-text e-hyp-text',
            attrs: { 'type': 'Text' }
        });
        cellrefInput.setAttribute('value', 'A1');
        cellrefCont.appendChild(cellrefInput);
        cellrefCont.insertBefore(cellrefH, cellrefInput);
        var textCont1 = this.parent.createElement('div', { className: 'e-cont' });
        var textH1 = this.parent.createElement('div', { className: 'e-header', innerHTML: l10n.getConstant('DisplayText') });
        var textInput1 = this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'Text' } });
        if (!isEnable) {
            textInput1.classList.add('e-disabled');
            textInput1.setAttribute('readonly', 'true');
            textInput1.setAttribute('disabled', 'true');
        }
        if (cell && isNullOrUndefined(cell.hyperlink)) {
            textInput1.setAttribute('value', this.parent.getDisplayText(cell));
        }
        textInput1.setAttribute('placeholder', l10n.getConstant('EnterTheTextToDisplay'));
        textCont1.appendChild(textInput1);
        textCont1.insertBefore(textH1, textInput1);
        var sheetCont = this.parent.createElement('div', { className: 'e-cont' });
        var sheetH = this.parent.createElement('div', { className: 'e-header', innerHTML: l10n.getConstant('Sheet') });
        var refCont = this.parent.createElement('div', { className: 'e-refcont' });
        sheetCont.appendChild(refCont);
        sheetCont.insertBefore(sheetH, refCont);
        docContElem.appendChild(cellrefCont);
        docContElem.insertBefore(textCont1, cellrefCont);
        treeObj.appendTo(refCont);
        docContElem.appendChild(sheetCont);
        return dialogElem;
    };
    SpreadsheetHyperlink.prototype.removeHyperlink = function (args) {
        var cell = getCell(args.rowIdx, args.colIdx, args.sheet);
        if (cell && cell.hyperlink) {
            if (typeof (cell.hyperlink) === 'string') {
                cell.value = cell.value ? cell.value : cell.hyperlink;
            }
            else {
                cell.value = cell.value ? cell.value : cell.hyperlink.address;
            }
            delete (cell.hyperlink);
            if (cell.style) {
                delete cell.style.textDecoration;
                delete cell.style.color;
            }
            if (cell.validation) {
                if (cell.validation.isHighlighted) {
                    if (cell.style.backgroundColor) {
                        cell.style.color = '#ff0000';
                    }
                }
            }
            if (args.sheet === this.parent.getActiveSheet()) {
                if (cell.style) {
                    this.parent.notify(refreshRibbonIcons, null);
                }
                if (!args.preventRefresh) {
                    this.parent.serviceLocator.getService('cell').refreshRange([args.rowIdx, args.colIdx, args.rowIdx, args.colIdx]);
                }
            }
        }
    };
    return SpreadsheetHyperlink;
}());

/**
 * UndoRedo module allows to perform undo redo functionalities.
 */
var UndoRedo = /** @__PURE__ @class */ (function () {
    function UndoRedo(parent) {
        this.undoCollection = [];
        this.redoCollection = [];
        this.isUndo = false;
        this.undoRedoStep = 100;
        this.parent = parent;
        this.addEventListener();
    }
    UndoRedo.prototype.setActionData = function (options) {
        var sheet = this.parent.getActiveSheet();
        var address;
        var cells = [];
        var cutCellDetails = [];
        var args = options.args;
        var eventArgs = args.eventArgs;
        var copiedInfo = {};
        switch (args.action) {
            case 'format':
                address = getRangeIndexes(args.eventArgs.range);
                break;
            case 'clipboard':
                copiedInfo = eventArgs.copiedInfo;
                address = getRangeIndexes(getRangeFromAddress(eventArgs.pastedRange));
                if (copiedInfo && copiedInfo.isCut) {
                    cutCellDetails = this.getCellDetails(copiedInfo.range, getSheet(this.parent, getSheetIndexFromId(this.parent, copiedInfo.sId)), 'clipboard');
                }
                break;
            case 'beforeSort':
                address = getRangeIndexes(args.eventArgs.range);
                if (address[0] === address[2] && (address[2] - address[0]) === 0) { //if selected range is a single cell
                    address[0] = 0;
                    address[1] = 0;
                    address[2] = sheet.usedRange.rowIndex;
                    address[3] = sheet.usedRange.colIndex;
                }
                break;
            case 'beforeCellSave':
            case 'cellDelete':
                address = getRangeIndexes(eventArgs.address);
                break;
            case 'beforeWrap':
                address = this.parent.getAddressInfo(eventArgs.address).indices;
                break;
            case 'beforeReplace':
                address = this.parent.getAddressInfo(eventArgs.address).indices;
                break;
            case 'beforeClear':
                address = getRangeIndexes(eventArgs.range);
                break;
            case 'beforeInsertImage':
                address = getRangeIndexes(eventArgs.range);
                break;
            case 'beforeInsertChart':
                address = getRangeIndexes(eventArgs.range);
                break;
            case 'filter':
                address = getRangeIndexes(eventArgs.range);
                break;
            case 'autofill':
                address = getRangeIndexes(eventArgs.fillRange);
                break;
            case 'removeValidation':
                address = getRangeIndexes(eventArgs.range);
                break;
        }
        cells = this.getCellDetails(address, sheet, args.action);
        this.beforeActionData = { cellDetails: cells, cutCellDetails: cutCellDetails };
    };
    UndoRedo.prototype.getBeforeActionData = function (args) {
        args.beforeDetails = this.beforeActionData;
    };
    UndoRedo.prototype.performUndoRedo = function (args) {
        var undoRedoArgs = args.isUndo ? this.undoCollection.pop() : this.redoCollection.pop();
        this.isUndo = args.isUndo;
        var preventEvent;
        if (undoRedoArgs) {
            switch (undoRedoArgs.action) {
                case 'cellSave':
                case 'format':
                case 'sorting':
                case 'wrap':
                case 'cellDelete':
                case 'autofill':
                case 'removeValidation':
                    undoRedoArgs = this.performOperation(undoRedoArgs, args.preventEvt, args.preventReSelect);
                    preventEvent = !undoRedoArgs.preventEvent;
                    delete undoRedoArgs.preventEvent;
                    break;
                case 'clipboard':
                    undoRedoArgs = this.undoForClipboard(undoRedoArgs, args.isUndo);
                    preventEvent = true;
                    break;
                case 'resize':
                    undoRedoArgs = this.undoForResize(undoRedoArgs);
                    break;
                case 'hideShow':
                    undoRedoArgs.eventArgs.hide = !undoRedoArgs.eventArgs.hide;
                    updateAction(undoRedoArgs, this.parent);
                    break;
                case 'replace':
                    undoRedoArgs = this.performOperation(undoRedoArgs);
                    break;
                case 'insert':
                case 'filter':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    preventEvent = undoRedoArgs.action === 'filter';
                    break;
                case 'delete':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    break;
                case 'validation':
                case 'addHighlight':
                case 'removeHighlight':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    break;
                case 'merge':
                    undoRedoArgs.eventArgs.merge = !undoRedoArgs.eventArgs.merge;
                    updateAction(undoRedoArgs, this.parent);
                    break;
                case 'clear':
                    undoRedoArgs = this.performOperation(undoRedoArgs);
                    break;
                case 'conditionalFormat':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo, this.undoCollection);
                    break;
                case 'clearCF':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    break;
                case 'insertImage':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    break;
                case 'imageRefresh':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    break;
                case 'insertChart':
                case 'deleteChart':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    break;
                case 'chartRefresh':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    break;
                case 'addDefinedName':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    break;
            }
            if (args.isUndo) {
                this.redoCollection.push(undoRedoArgs);
            }
            else {
                this.undoCollection.push(undoRedoArgs);
            }
            if (this.undoCollection.length > this.undoRedoStep) {
                this.undoCollection.splice(0, 1);
            }
            if (this.redoCollection.length > this.undoRedoStep) {
                this.redoCollection.splice(0, 1);
            }
            this.updateUndoRedoIcons();
            if (!args.isPublic && !preventEvent) {
                this.parent.notify(triggerDataChange, extend({ isUndo: args.isUndo }, undoRedoArgs, null, true));
                var completeArgs = Object.assign({}, undoRedoArgs.eventArgs);
                completeArgs.requestType = args.isUndo ? 'undo' : 'redo';
                delete completeArgs.beforeActionData;
                this.parent.notify(completeAction, { eventArgs: completeArgs, action: 'undoRedo' });
            }
            this.parent.notify(refreshRibbonIcons, null);
        }
    };
    UndoRedo.prototype.updateUndoRedoCollection = function (options) {
        var actionList = ['clipboard', 'format', 'sorting', 'cellSave', 'resize', 'resizeToFit', 'wrap', 'hideShow', 'replace',
            'validation', 'merge', 'clear', 'conditionalFormat', 'clearCF', 'insertImage', 'imageRefresh', 'insertChart', 'deleteChart',
            'chartRefresh', 'filter', 'cellDelete', 'autofill', 'addDefinedName', 'removeValidation', 'removeHighlight', 'addHighlight'];
        if ((options.args.action === 'insert' || options.args.action === 'delete') && options.args.eventArgs.modelType !== 'Sheet') {
            actionList.push(options.args.action);
        }
        var action = options.args.action;
        if (actionList.indexOf(action) === -1 && !options.isPublic) {
            return;
        }
        var eventArgs = options.args.eventArgs;
        if (action === 'clipboard' || action === 'sorting' || action === 'format' || action === 'cellSave' ||
            action === 'wrap' || action === 'replace' || action === 'validation' || action === 'clear' || action === 'conditionalFormat' ||
            action === 'clearCF' || action === 'insertImage' || action === 'imageRefresh' || action === 'insertChart' ||
            action === 'chartRefresh' || action === 'filter' || action === 'cellDelete' || action === 'autofill' || action === 'removeValidation' ||
            action === 'addDefinedName') {
            var beforeActionDetails = { beforeDetails: { cellDetails: [] } };
            this.parent.notify(getBeforeActionData, beforeActionDetails);
            eventArgs.beforeActionData = beforeActionDetails.beforeDetails;
        }
        if (action === 'clipboard' && eventArgs.copiedInfo && eventArgs.copiedInfo.isExternal) {
            var addressInfo = this.parent.getAddressInfo(eventArgs.pastedRange);
            eventArgs.copiedInfo.cellDetails = this.getCellDetails(addressInfo.indices, getSheet(this.parent, addressInfo.sheetIndex), action);
        }
        this.undoCollection.push(options.args);
        this.redoCollection = [];
        if (this.undoCollection.length > this.undoRedoStep) {
            this.undoCollection.splice(0, 1);
        }
        this.updateUndoRedoIcons();
    };
    UndoRedo.prototype.clearUndoRedoCollection = function () {
        this.undoCollection = [];
        this.redoCollection = [];
        this.updateUndoRedoIcons();
    };
    UndoRedo.prototype.updateUndoRedoIcons = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        this.parent.notify(enableToolbarItems, [{
                tab: l10n.getConstant('Home'), items: [this.parent.element.id + '_undo'],
                enable: this.undoCollection.length > 0
            }]);
        this.parent.notify(enableToolbarItems, [{
                tab: l10n.getConstant('Home'), items: [this.parent.element.id + '_redo'],
                enable: this.redoCollection.length > 0
            }]);
    };
    UndoRedo.prototype.undoForClipboard = function (args, isUndo) {
        var _this = this;
        var eventArgs = args.eventArgs;
        var address = eventArgs.pastedRange.split('!');
        var range = getRangeIndexes(address[1]);
        var sheetIndex = getSheetIndex(this.parent, address[0]);
        var sheet = getSheet(this.parent, sheetIndex);
        var copiedInfo = eventArgs.copiedInfo;
        var actionData = eventArgs.beforeActionData;
        var isRefresh = this.checkRefreshNeeded(sheetIndex);
        var pictureElem;
        if (args.eventArgs.requestType === 'imagePaste') {
            var copiedShapeInfo = eventArgs.copiedShapeInfo;
            if (this.isUndo) {
                pictureElem = copiedShapeInfo.pictureElem;
                if (copiedShapeInfo.isCut) {
                    this.parent.notify(deleteImage, {
                        id: pictureElem.id, sheetIdx: eventArgs.pasteSheetIndex + 1
                    });
                    this.parent.notify(createImageElement, {
                        options: {
                            src: pictureElem.style.backgroundImage.replace(/url\((['"])?(.*?)\1\)/gi, '$2'),
                            height: copiedShapeInfo.height, width: copiedShapeInfo.width, imageId: pictureElem.id
                        },
                        range: copiedShapeInfo.copiedRange, isPublic: false, isUndoRedo: true
                    });
                }
                else {
                    this.parent.notify(deleteImage, {
                        id: eventArgs.pastedPictureElement.id, sheetIdx: eventArgs.pasteSheetIndex + 1
                    });
                }
            }
            else {
                if (copiedShapeInfo.isCut) {
                    pictureElem = copiedShapeInfo.pictureElem;
                    this.parent.notify(deleteImage, {
                        id: pictureElem.id, sheetIdx: copiedShapeInfo.sId
                    });
                    this.parent.notify(createImageElement, {
                        options: {
                            src: pictureElem.style.backgroundImage.replace(/url\((['"])?(.*?)\1\)/gi, '$2'),
                            height: copiedShapeInfo.height, width: copiedShapeInfo.width, imageId: pictureElem.id
                        },
                        range: copiedShapeInfo.pastedRange, isPublic: false, isUndoRedo: true
                    });
                }
                else {
                    pictureElem = eventArgs.pastedPictureElement;
                    this.parent.notify(createImageElement, {
                        options: {
                            src: pictureElem.style.backgroundImage.replace(/url\((['"])?(.*?)\1\)/gi, '$2'),
                            height: pictureElem.offsetHeight, width: pictureElem.offsetWidth, imageId: pictureElem.id
                        },
                        range: copiedShapeInfo.pastedRange, isPublic: false, isUndoRedo: true
                    });
                }
            }
        }
        else {
            var pasteEventArgs_1 = extend({}, eventArgs, null, true);
            if (this.isUndo) {
                if (!pasteEventArgs_1.copiedInfo.isExternal) {
                    if (!pasteEventArgs_1.copiedInfo.isCut) {
                        pasteEventArgs_1.copiedInfo.isCut = true;
                    }
                    pasteEventArgs_1.copiedInfo.sId = sheet.id;
                    pasteEventArgs_1.copiedInfo.range = range;
                }
                pasteEventArgs_1.copiedRange = pasteEventArgs_1.pastedRange;
                pasteEventArgs_1.pastedRange = eventArgs.copiedRange;
                this.parent.notify(beginAction, { eventArgs: pasteEventArgs_1, action: 'clipboard', preventAction: true });
                if (copiedInfo.isCut) {
                    var cells = actionData.cutCellDetails;
                    this.updateCellDetails(cells, getSheet(this.parent, getSheetIndexFromId(this.parent, copiedInfo.sId)), getSwapRange(copiedInfo.range), isRefresh, args);
                }
                if (actionData) {
                    this.updateCellDetails(actionData.cellDetails, sheet, range, isRefresh, args);
                }
                setMaxHgt(sheet, range[0], range[1], getRowHeight(sheet, range[0]));
                var hgt = getMaxHgt(sheet, range[0]);
                setRowEleHeight(this.parent, sheet, hgt, range[0]);
                eventArgs.mergeCollection.forEach(function (mergeArgs) {
                    mergeArgs.merge = !mergeArgs.merge;
                    _this.parent.notify(setMerge, mergeArgs);
                    mergeArgs.merge = !mergeArgs.merge;
                });
                delete pasteEventArgs_1.beforeActionData;
                this.parent.notify(completeAction, { eventArgs: pasteEventArgs_1, action: 'clipboard', preventAction: true });
            }
            else {
                if (copiedInfo.isExternal) {
                    this.parent.notify(beginAction, { eventArgs: pasteEventArgs_1, action: 'clipboard', preventAction: true });
                    var addressInfo = this.parent.getAddressInfo(eventArgs.pastedRange);
                    this.updateCellDetails(copiedInfo.cellDetails, getSheet(this.parent, addressInfo.sheetIndex), addressInfo.indices, true, args);
                    delete pasteEventArgs_1.beforeActionData;
                    this.parent.notify(completeAction, { eventArgs: pasteEventArgs_1, action: 'clipboard', preventAction: true });
                }
                else {
                    var clipboardPromise = eventArgs.copiedInfo.isCut ? this.parent.cut(eventArgs.copiedRange) :
                        this.parent.copy(eventArgs.copiedRange);
                    clipboardPromise.then(function () {
                        _this.parent.notify(beginAction, { eventArgs: pasteEventArgs_1, action: 'clipboard', preventAction: true });
                        _this.parent.notify(paste, {
                            range: address ? getIndexesFromAddress(eventArgs.pastedRange) : address,
                            sIdx: address ? getSheetIndex(_this.parent, getSheetNameFromAddress(eventArgs.pastedRange)) : address,
                            type: eventArgs.type, isAction: false, isInternal: true
                        });
                        delete pasteEventArgs_1.beforeActionData;
                        _this.parent.notify(completeAction, { eventArgs: pasteEventArgs_1, action: 'clipboard', preventAction: true });
                    });
                }
            }
            if (isRefresh) {
                this.parent.notify(selectRange, { address: address[1] });
                this.parent.notify(positionAutoFillElement, {});
            }
        }
        return args;
    };
    UndoRedo.prototype.undoForResize = function (args) {
        var eventArgs = args.eventArgs;
        if (eventArgs.hide === undefined) {
            if (eventArgs.isCol) {
                var temp = eventArgs.oldWidth;
                eventArgs.oldWidth = eventArgs.width;
                eventArgs.width = temp;
            }
            else {
                var temp = eventArgs.oldHeight;
                eventArgs.oldHeight = eventArgs.height;
                eventArgs.height = temp;
            }
        }
        else {
            eventArgs.hide = !eventArgs.hide;
        }
        updateAction(args, this.parent);
        var sheet = this.parent.getActiveSheet();
        var activeCell = getRangeIndexes(sheet.activeCell);
        var CellElem = getCell(activeCell[0], activeCell[1], sheet);
        if (CellElem && CellElem.rowSpan) {
            var td = this.parent.getCell(activeCell[0], activeCell[1]);
            this.parent.element.querySelector('.e-active-cell').style.height = td.offsetHeight + 'px';
        }
        else if (CellElem && CellElem.colSpan) {
            var td = this.parent.getCell(activeCell[0], activeCell[1]);
            this.parent.element.querySelector('.e-active-cell').style.width = td.offsetWidth + 'px';
        }
        return args;
    };
    UndoRedo.prototype.performOperation = function (args, preventEvt, preventReSelect) {
        var _this = this;
        var eventArgs = args.eventArgs;
        var actionEventArgs = { eventArgs: Object.assign({}, eventArgs), action: args.action, preventAction: true };
        if (args.action !== 'cellSave') {
            if (args.action === 'cellDelete' && this.isUndo) {
                args.preventEvent = true;
            }
            else {
                this.parent.notify(beginAction, actionEventArgs);
            }
        }
        var address = [];
        if (args.action === 'autofill') {
            address = eventArgs.fillRange.split('!');
        }
        else {
            address = (args.action === 'cellSave' || args.action === 'wrap' || args.action === 'replace'
                || args.action === 'cellDelete') ? eventArgs.address.split('!') : eventArgs.range.split('!');
        }
        var range = getRangeIndexes(address[1]);
        var indexes = range;
        var sheetIndex = getSheetIndex(this.parent, address[0]);
        var sheet = getSheet(this.parent, sheetIndex);
        var actionData = eventArgs.beforeActionData;
        var isRefresh = this.checkRefreshNeeded(sheetIndex);
        var uniqueArgs = { cellIdx: [range[0], range[1]], isUnique: false, uniqueRange: '' };
        this.parent.notify(checkUniqueRange, uniqueArgs);
        var updateSortIcon = function (idx, add) {
            if (sheetIndex === _this.parent.activeSheetIndex) {
                var td = _this.parent.getCell(range[0] - 1, _this.parent.sortCollection[idx].columnIndex);
                if (td) {
                    td = select('.e-filter-icon', td);
                    if (td) {
                        add ? td.classList.add("e-sort" + (_this.parent.sortCollection[idx].order === 'Ascending' ? 'asc' : 'desc') + "-filter") :
                            td.classList.remove("e-sort" + (_this.parent.sortCollection[idx].order === 'Ascending' ? 'asc' : 'desc') + "-filter");
                    }
                }
            }
        };
        if (this.isUndo) {
            if (uniqueArgs.isUnique && eventArgs.formula && eventArgs.formula.indexOf('UNIQUE') > -1) {
                var rangeIdx = getRangeIndexes(uniqueArgs.uniqueRange);
                if (getCell(rangeIdx[0], rangeIdx[1], this.parent.getActiveSheet()).value !== '#SPILL!') {
                    for (var j = rangeIdx[0]; j <= rangeIdx[2]; j++) {
                        for (var k = rangeIdx[1]; k <= rangeIdx[3]; k++) {
                            if (j === rangeIdx[0] && k === rangeIdx[1]) {
                                k = k + 1;
                            }
                            this.parent.updateCell({ value: '' }, getRangeAddress([j, k]));
                        }
                    }
                }
            }
            this.updateCellDetails(actionData.cellDetails, sheet, range, isRefresh, args, preventEvt, actionEventArgs);
            if (uniqueArgs.isUnique && args.action === 'cellDelete' && eventArgs.isSpill) {
                var rangeIdx = getRangeIndexes(uniqueArgs.uniqueRange);
                var cell = getCell(rangeIdx[0], rangeIdx[1], this.parent.getActiveSheet());
                for (var i = rangeIdx[0]; i <= rangeIdx[2]; i++) {
                    for (var j = rangeIdx[1]; j <= rangeIdx[3]; j++) {
                        for (var k = range[0]; k <= range[2]; k++) {
                            for (var l = range[1]; l <= range[3]; l++) {
                                if (i !== k || j !== l) {
                                    this.parent.updateCell({ value: '' }, getCellAddress(i, j));
                                }
                            }
                        }
                    }
                }
                cell.value = '#SPILL!';
                this.parent.updateCell(cell, getCellAddress(rangeIdx[0], rangeIdx[1]));
            }
            if (!eventArgs.isSpill && uniqueArgs.uniqueRange !== '') {
                var indexes_1 = getRangeIndexes(uniqueArgs.uniqueRange);
                for (var j = indexes_1[0]; j <= indexes_1[2]; j++) {
                    for (var k = indexes_1[1]; k <= indexes_1[3]; k++) {
                        if (j === indexes_1[0] && k === indexes_1[1]) {
                            k = k + 1;
                        }
                        this.parent.updateCell({ value: '' }, getRangeAddress([j, k]));
                    }
                }
                this.parent.notify(reApplyFormula, null);
            }
            if (args.action === 'sorting' && this.parent.sortCollection && eventArgs.previousSort) {
                for (var i = 0; i < this.parent.sortCollection.length; i++) {
                    if (this.parent.sortCollection[i].sheetIndex === sheetIndex) {
                        updateSortIcon(i, false);
                        this.parent.sortCollection.splice(i, 1);
                        if (eventArgs.previousSort.order) {
                            this.parent.sortCollection.splice(i, 0, eventArgs.previousSort);
                            updateSortIcon(i, true);
                        }
                        else if (!this.parent.sortCollection.length) {
                            this.parent.sortCollection = undefined;
                        }
                        break;
                    }
                }
            }
        }
        else {
            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
            var argsEventArgs = args.eventArgs;
            var activeCellIndexes = getRangeIndexes(sheet.activeCell);
            var cellValue = this.parent.getCellStyleValue(['textDecoration'], activeCellIndexes).textDecoration;
            if (argsEventArgs && argsEventArgs.style && argsEventArgs.style.textDecoration) {
                var value = argsEventArgs.style.textDecoration;
                var changedValue = value;
                var changedStyle = void 0;
                var removeProp = false;
                if (cellValue === 'underline') {
                    changedValue = value === 'underline' ? 'none' : 'underline line-through';
                }
                else if (cellValue === 'line-through') {
                    changedValue = value === 'line-through' ? 'none' : 'underline line-through';
                }
                else if (cellValue === 'underline line-through') {
                    changedValue = value === 'underline' ? 'line-through' : 'underline';
                    removeProp = true;
                }
                if (changedValue === 'none') {
                    removeProp = true;
                }
                argsEventArgs.style.textDecoration = changedValue;
                args.eventArgs = argsEventArgs;
                this.parent.notify(setCellFormat, {
                    style: { textDecoration: changedValue }, range: activeCellIndexes, refreshRibbon: true,
                    onActionUpdate: true
                });
                for (var i = indexes[0]; i <= indexes[2]; i++) {
                    for (var j = indexes[1]; j <= indexes[3]; j++) {
                        if (i === activeCellIndexes[0] && j === activeCellIndexes[1]) {
                            continue;
                        }
                        changedStyle = {};
                        cellValue = this.parent.getCellStyleValue(['textDecoration'], [i, j]).textDecoration;
                        if (cellValue === 'none') {
                            if (removeProp) {
                                continue;
                            }
                            changedStyle.textDecoration = value;
                        }
                        else if (cellValue === 'underline' || cellValue === 'line-through') {
                            if (removeProp) {
                                if (value === cellValue) {
                                    changedStyle.textDecoration = 'none';
                                }
                                else {
                                    continue;
                                }
                            }
                            else {
                                changedStyle.textDecoration = value !== cellValue ? 'underline line-through' : value;
                            }
                        }
                        else if (cellValue === 'underline line-through') {
                            if (removeProp) {
                                changedStyle.textDecoration = value === 'underline' ? 'line-through' : 'underline';
                            }
                            else {
                                continue;
                            }
                        }
                        this.parent.notify(setCellFormat, {
                            style: { textDecoration: changedStyle.textDecoration }, range: [i, j, i, j], refreshRibbon: true,
                            onActionUpdate: true
                        });
                    }
                }
                argsEventArgs.style.textDecoration = value;
                args.eventArgs = argsEventArgs;
            }
            else {
                if (!isNullOrUndefined(eventArgs.oldValue) && eventArgs.oldValue !== eventArgs.value && uniqueArgs.isUnique) {
                    var indexes_2 = getRangeIndexes(uniqueArgs.uniqueRange);
                    if (getCell(indexes_2[0], indexes_2[1], this.parent.getActiveSheet()).value !== '#SPILL!') {
                        for (var j = indexes_2[0]; j <= indexes_2[2]; j++) {
                            for (var k = indexes_2[1]; k <= indexes_2[3]; k++) {
                                if (j === indexes_2[0] && k === indexes_2[1]) {
                                    this.parent.updateCell({ value: '#SPILL!' }, getRangeAddress([indexes_2[0], indexes_2[1]]));
                                    k = k + 1;
                                }
                                this.parent.updateCell({ value: '' }, getRangeAddress([j, k]));
                            }
                        }
                    }
                }
                updateAction(args, this.parent, true, null, actionEventArgs);
                if (uniqueArgs.isUnique && args.action === 'cellDelete' && eventArgs.isSpill) {
                    var indexes_3 = getRangeIndexes(uniqueArgs.uniqueRange);
                    var Skip = false;
                    for (var i = indexes_3[0]; i <= indexes_3[1]; i++) {
                        for (var j = indexes_3[1]; j <= indexes_3[3]; j++) {
                            if (i === indexes_3[0] && j === indexes_3[1]) {
                                j++;
                            }
                            if (getCell(i, j, sheet) && !isNullOrUndefined(getCell(i, j, sheet).value)
                                && getCell(i, j, sheet).value !== '') {
                                Skip = true;
                            }
                        }
                    }
                    if (!Skip) {
                        var cell = getCell(indexes_3[0], indexes_3[1], this.parent.getActiveSheet());
                        cell.value = '';
                        this.parent.updateCell(cell, getCellAddress(indexes_3[0], indexes_3[1]));
                        this.parent.notify(reApplyFormula, null);
                    }
                }
            }
            if (args.action === 'sorting' && eventArgs.previousSort) {
                var idx = void 0;
                if (this.parent.sortCollection) {
                    for (var i = 0; i < this.parent.sortCollection.length; i++) {
                        if (this.parent.sortCollection[i].sheetIndex === sheetIndex) {
                            updateSortIcon(i, false);
                            idx = i;
                            this.parent.sortCollection.splice(i, 1);
                            break;
                        }
                    }
                }
                else {
                    this.parent.sortCollection = [];
                    idx = 0;
                }
                this.parent.sortCollection.splice(idx, 0, { sortRange: address[1], sheetIndex: sheetIndex, columnIndex: getColIndex(eventArgs.sortOptions.sortDescriptors.field), order: eventArgs.sortOptions.sortDescriptors.order });
                updateSortIcon(idx, true);
            }
        }
        if (args.action === 'autofill') {
            address[1] = this.isUndo ? args.eventArgs.dataRange : args.eventArgs.selectedRange;
        }
        if (isRefresh && !preventReSelect) {
            this.parent.notify(selectRange, { address: address[1] });
        }
        this.parent.notify(showAggregate, {});
        if (!args.preventEvent) {
            this.parent.notify(completeAction, actionEventArgs);
        }
        return args;
    };
    UndoRedo.prototype.getCellDetails = function (address, sheet, action) {
        var cells = [];
        var cell;
        var filterCheck = action === 'cellDelete';
        address = getSwapRange(address);
        for (var i = address[0]; i <= address[2]; i++) {
            if (filterCheck && (getRow(sheet, i) || {}).isFiltered) {
                continue;
            }
            for (var j = address[1]; j <= address[3]; j++) {
                cell = getCell(i, j, sheet);
                cells.push({
                    rowIndex: i, colIndex: j, format: cell ? cell.format : null, isLocked: cell ? cell.isLocked : null,
                    style: cell && cell.style ? Object.assign({}, cell.style) : null, value: cell ? cell.value : '', formula: cell ?
                        cell.formula : '', wrap: cell && cell.wrap, rowSpan: cell && cell.rowSpan, colSpan: cell && cell.colSpan,
                    hyperlink: cell && cell.hyperlink, image: cell && cell.image && cell.chart, validation: cell && cell.validation
                });
            }
        }
        return cells;
    };
    UndoRedo.prototype.updateCellDetails = function (cells, sheet, range, isRefresh, args, preventEvt, actionEventArgs) {
        var _this = this;
        var len = cells.length;
        var triggerEvt = args && !preventEvt && (args.action === 'cellSave' || args.action === 'cellDelete' ||
            args.action === 'autofill' || args.action === 'clipboard');
        var cellElem;
        var prevCell;
        var eventArgs;
        var select$$1;
        for (var i = 0; i < len; i++) {
            prevCell = getCell(cells[i].rowIndex, cells[i].colIndex, sheet, false, true);
            if (prevCell.style && args && args.action === 'format') {
                if (prevCell.style.borderTop && (!cells[i].style || !cells[i].style.borderTop)) {
                    this.parent.setBorder({ borderTop: '' }, sheet.name + '!' + getCellAddress(cells[i].rowIndex, cells[i].colIndex));
                }
                if (prevCell.style.borderLeft && (!cells[i].style || !cells[i].style.borderLeft)) {
                    this.parent.setBorder({ borderLeft: '' }, sheet.name + '!' + getCellAddress(cells[i].rowIndex, cells[i].colIndex));
                }
                if (prevCell.style.fontSize && (!cells[i].style || !cells[i].style.fontSize)) {
                    prevCell.style.fontSize = '11pt';
                    select$$1 = true;
                    this.parent.notify(applyCellFormat, { style: { fontSize: '11pt' }, rowIdx: cells[i].rowIndex, colIdx: cells[i].colIndex, lastCell: true, isHeightCheckNeeded: true, manualUpdate: true, onActionUpdate: true });
                }
                if (prevCell.style.fontFamily && (!cells[i].style || !cells[i].style.fontFamily)) {
                    select$$1 = true;
                    prevCell.style.fontFamily = 'Calibri';
                    this.parent.notify(applyCellFormat, { style: { fontFamily: 'Calibri' }, rowIdx: cells[i].rowIndex, colIdx: cells[i].colIndex, lastCell: true, isHeightCheckNeeded: true, manualUpdate: true, onActionUpdate: true });
                }
            }
            eventArgs = { element: null, value: cells[i].value, oldValue: prevCell.value, address: sheet.name + "!" + getCellAddress(cells[i].rowIndex, cells[i].colIndex), displayText: this.parent.getDisplayText(cells[i]), formula: cells[i].formula };
            if (i === 0 && triggerEvt && args.action === 'cellSave') {
                actionEventArgs.eventArgs = eventArgs;
                this.parent.notify(beginAction, actionEventArgs);
            }
            setCell(cells[i].rowIndex, cells[i].colIndex, sheet, {
                value: cells[i].value, format: cells[i].format, isLocked: cells[i].isLocked,
                style: cells[i].style && Object.assign({}, cells[i].style), formula: cells[i].formula,
                wrap: cells[i].wrap, rowSpan: cells[i].rowSpan,
                colSpan: cells[i].colSpan, hyperlink: cells[i].hyperlink
            });
            this.parent.notify(workbookEditOperation, {
                action: 'updateCellValue', address: [cells[i].rowIndex, cells[i].colIndex, cells[i].rowIndex,
                    cells[i].colIndex], value: cells[i].formula ? cells[i].formula : cells[i].value
            });
            if ((args && args.action === 'wrap' && args.eventArgs.wrap) || (prevCell.wrap && args && args.action === 'autofill')) {
                this.parent.notify(wrapEvent, {
                    range: [cells[i].rowIndex, cells[i].colIndex, cells[i].rowIndex,
                        cells[i].colIndex], wrap: false, sheet: sheet
                });
            }
            if (args && args.action === 'removeValidation' && cells[i].validation) {
                var rules = {
                    type: cells[i].validation.type, operator: cells[i].validation.operator, value1: cells[i].validation.value1,
                    value2: cells[i].validation.value2, ignoreBlank: cells[i].validation.ignoreBlank,
                    inCellDropDown: cells[i].validation.inCellDropDown
                };
                this.parent.notify(cellValidation, { rules: rules, range: args.eventArgs.range });
            }
            if (args && cells[i].hyperlink && args.action === 'clear') {
                args.eventArgs.range = sheet.name + '!' + getRangeAddress([cells[i].rowIndex, cells[i].colIndex, cells[i].rowIndex,
                    cells[i].colIndex]);
                cellElem = this.parent.getCell(cells[i].rowIndex, cells[i].colIndex);
                if (args.eventArgs.type === 'Clear All' || args.eventArgs.type === 'Clear Hyperlinks') {
                    this.parent.addHyperlink(cells[i].hyperlink, args.eventArgs.range);
                }
                else if (args.eventArgs.type === 'Clear Formats') {
                    addClass(cellElem.querySelectorAll('.e-hyperlink'), 'e-hyperlink-style');
                }
            }
            if (triggerEvt && cells[i].value !== prevCell.value) {
                this.parent.trigger('cellSave', eventArgs);
            }
        }
        if (isRefresh) {
            this.parent.serviceLocator.getService('cell').refreshRange(range, false, false, true);
            if (select$$1) {
                getUpdateUsingRaf(function () { return _this.parent.selectRange(sheet.selectedRange); });
            }
        }
    };
    UndoRedo.prototype.checkRefreshNeeded = function (sheetIndex) {
        var isRefresh = true;
        if (sheetIndex !== this.parent.activeSheetIndex) {
            this.parent.activeSheetIndex = sheetIndex;
            this.parent.dataBind();
            isRefresh = false;
        }
        return isRefresh;
    };
    UndoRedo.prototype.addEventListener = function () {
        this.parent.on(performUndoRedo, this.performUndoRedo, this);
        this.parent.on(updateUndoRedoCollection, this.updateUndoRedoCollection, this);
        this.parent.on(setActionData, this.setActionData, this);
        this.parent.on(getBeforeActionData, this.getBeforeActionData, this);
        this.parent.on(clearUndoRedoCollection, this.clearUndoRedoCollection, this);
        this.parent.on(setUndoRedo, this.updateUndoRedoIcons, this);
    };
    UndoRedo.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(performUndoRedo, this.performUndoRedo);
            this.parent.off(updateUndoRedoCollection, this.updateUndoRedoCollection);
            this.parent.off(setActionData, this.setActionData);
            this.parent.off(getBeforeActionData, this.getBeforeActionData);
            this.parent.off(clearUndoRedoCollection, this.clearUndoRedoCollection);
            this.parent.off(setUndoRedo, this.updateUndoRedoIcons);
        }
    };
    /**
     * Destroy undo redo module.
     *
     * @returns {void} - Destroy undo redo module.
     */
    UndoRedo.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * Get the undo redo module name.
     *
     * @returns {string} - Get the undo redo module name.
     */
    UndoRedo.prototype.getModuleName = function () {
        return 'undoredo';
    };
    return UndoRedo;
}());

/**
 * Represents Wrap Text support for Spreadsheet.
 */
var WrapText = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for the Spreadsheet Wrap Text module.
     *
     * @param {Spreadsheet} parent - Specifies the Spreadsheet.
     * @private
     */
    function WrapText(parent) {
        this.parent = parent;
        this.wrapCell = this.parent.createElement('span', { className: 'e-wrap-content' });
        this.addEventListener();
    }
    WrapText.prototype.addEventListener = function () {
        this.parent.on(ribbonClick, this.ribbonClickHandler, this);
        this.parent.on(wrapEvent, this.wrapTextHandler, this);
        this.parent.on(rowHeightChanged, this.rowHeightChangedHandler, this);
        this.parent.on(colWidthChanged, this.colWidthChanged, this);
    };
    WrapText.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(ribbonClick, this.ribbonClickHandler);
            this.parent.off(wrapEvent, this.wrapTextHandler);
            this.parent.off(rowHeightChanged, this.rowHeightChangedHandler);
            this.parent.off(colWidthChanged, this.colWidthChanged);
        }
    };
    WrapText.prototype.wrapTextHandler = function (args) {
        if (args.initial || inView(this.parent, args.range, true)) {
            var ele = void 0;
            var cell = void 0;
            var colwidth = void 0;
            var maxHgt = void 0;
            var hgt = void 0;
            var isCustomHgt = void 0;
            var rowCustomHeight = void 0;
            var lineHgt = void 0;
            for (var i = args.range[0]; i <= args.range[2]; i++) {
                maxHgt = 0;
                rowCustomHeight = getRow(args.sheet, i).customHeight;
                isCustomHgt = rowCustomHeight || args.isCustomHgt;
                for (var j = args.range[1]; j <= args.range[3]; j++) {
                    cell = getCell(i, j, args.sheet, null, true);
                    if (cell.rowSpan < 0 || cell.colSpan < 0) {
                        continue;
                    }
                    var isMerge = (cell.rowSpan > 1 || cell.colSpan > 1);
                    ele = (args.initial ? args.td : this.parent.getCell(i, j));
                    if (ele) {
                        if (args.wrap) {
                            lineHgt = getLineHeight(cell.style && cell.style.fontFamily ? cell.style : this.parent.cellStyle);
                            ele.classList.add(WRAPTEXT);
                        }
                        else {
                            ele.classList.remove(WRAPTEXT);
                            lineHgt = null;
                        }
                        if (isCustomHgt || isMerge) {
                            this.updateWrapCell(i, j, args.sheet, ele);
                        }
                    }
                    else {
                        lineHgt = null;
                    }
                    if (Browser.isIE) {
                        ele.classList.add('e-ie-wrap');
                    }
                    if (!(isCustomHgt || isMerge)) {
                        colwidth = getExcludedColumnWidth(args.sheet, i, j, cell.colSpan > 1 ? j + cell.colSpan - 1 : j);
                        var displayText = this.parent.getDisplayText(cell).toString();
                        if (displayText.indexOf('\n') < 0) {
                            var editElem = this.parent.element.querySelector('.e-spreadsheet-edit');
                            if (editElem) {
                                if (editElem.textContent.indexOf('\n') > -1) {
                                    displayText = editElem.textContent;
                                }
                            }
                        }
                        if (displayText) {
                            if (args.wrap) {
                                if (ele && ele.classList.contains('e-alt-unwrap')) {
                                    ele.classList.remove('e-alt-unwrap');
                                }
                                var lines = void 0;
                                var n = 0;
                                var p = void 0;
                                if (displayText.indexOf('\n') > -1) {
                                    var splitVal = displayText.split('\n');
                                    var valLength = splitVal.length;
                                    for (p = 0; p < valLength; p++) {
                                        lines = getLines(splitVal[p], colwidth, cell.style, this.parent.cellStyle);
                                        if (lines === 0) {
                                            lines = 1; // for empty new line
                                        }
                                        n = n + lines;
                                    }
                                    lines = n;
                                }
                                else {
                                    lines = getLines(displayText, colwidth, cell.style, this.parent.cellStyle);
                                }
                                hgt = getTextHeightWithBorder(this.parent, i, j, args.sheet, cell.style || this.parent.cellStyle, lines, lineHgt);
                                maxHgt = Math.max(maxHgt, hgt);
                                if (cell.rowSpan > 1) {
                                    var prevHeight = getRowsHeight(args.sheet, i, i + (cell.rowSpan - 1));
                                    if (prevHeight >= maxHgt) {
                                        return;
                                    }
                                    hgt = maxHgt = getRowHeight(args.sheet, i) + (maxHgt - prevHeight);
                                }
                                setMaxHgt(args.sheet, i, j, hgt);
                            }
                            else {
                                if (displayText.indexOf('\n') > -1) {
                                    ele.classList.add('e-alt-unwrap');
                                }
                                hgt = getTextHeightWithBorder(this.parent, i, j, args.sheet, cell.style || this.parent.cellStyle, 1, lineHgt);
                                setMaxHgt(args.sheet, i, j, hgt);
                                maxHgt = Math.max(getMaxHgt(args.sheet, i), 20);
                            }
                        }
                        else if (!args.wrap || !displayText) {
                            setMaxHgt(args.sheet, i, j, 20);
                            maxHgt = Math.max(getMaxHgt(args.sheet, i), 20);
                        }
                        if (j === args.range[3] && ((args.wrap && maxHgt > 20 && getMaxHgt(args.sheet, i) <= maxHgt) || ((!args.wrap ||
                            !displayText) && getMaxHgt(args.sheet, i) < getRowHeight(args.sheet, i) && getRowHeight(args.sheet, i) > 20))) {
                            setRowEleHeight(this.parent, args.sheet, maxHgt, i, args.row, args.hRow);
                        }
                    }
                    if (isCustomHgt && !isMerge) {
                        var displayText = this.parent.getDisplayText(cell);
                        if (args.wrap) {
                            if (ele && ele.classList.contains('e-alt-unwrap')) {
                                ele.classList.remove('e-alt-unwrap');
                            }
                        }
                        else {
                            if (displayText.indexOf('\n') > -1) {
                                ele.classList.add('e-alt-unwrap');
                            }
                        }
                    }
                    if (args.wrap && ele) {
                        if (!rowCustomHeight) {
                            ele.style.lineHeight = (parseFloat((cell.style && cell.style.fontSize) || this.parent.cellStyle.fontSize) *
                                lineHgt) + 'pt';
                        }
                        else if (ele.style.lineHeight) {
                            ele.style.lineHeight = '';
                        }
                    }
                    else if (ele) {
                        ele.style.lineHeight = '';
                    }
                }
            }
            if (!args.initial) {
                this.parent.notify(positionAutoFillElement, null);
            }
        }
    };
    WrapText.prototype.ribbonClickHandler = function (args) {
        var target = closest(args.originalEvent.target, '.e-btn');
        if (target && target.id === this.parent.element.id + '_wrap') {
            var wrap$$1 = target.classList.contains('e-active');
            var address = getAddressFromSelectedRange(this.parent.getActiveSheet());
            var eventArgs = { address: address, wrap: wrap$$1, cancel: false };
            this.parent.notify(beginAction, { action: 'beforeWrap', eventArgs: eventArgs });
            if (!eventArgs.cancel) {
                wrap(this.parent.getActiveSheet().selectedRange, wrap$$1, this.parent);
                this.parent.notify(completeAction, { action: 'wrap', eventArgs: { address: address, wrap: wrap$$1 } });
            }
        }
    };
    WrapText.prototype.rowHeightChangedHandler = function (args) {
        if (args.isCustomHgt) {
            var sheet = this.parent.getActiveSheet();
            var ele = void 0;
            for (var i = this.parent.viewport.leftIndex, len = this.parent.viewport.rightIndex; i <= len; i++) {
                if (getCell(args.rowIdx, i, sheet, false, true).wrap) {
                    ele = this.parent.getCell(args.rowIdx, i);
                    this.updateWrapCell(args.rowIdx, i, sheet, ele);
                    if (ele.style.lineHeight) {
                        ele.style.lineHeight = '';
                    }
                }
            }
        }
    };
    WrapText.prototype.colWidthChanged = function (args) {
        if (args.checkWrapCell) {
            var sheet = this.parent.getActiveSheet();
            for (var i = this.parent.viewport.topIndex, len = this.parent.viewport.bottomIndex; i <= len; i++) {
                if (getCell(i, args.colIdx, sheet, false, true).wrap) {
                    this.updateWrapCell(i, args.colIdx, sheet, this.parent.getCell(i, args.colIdx));
                }
            }
        }
    };
    WrapText.prototype.updateWrapCell = function (rowIdx, colIdx, sheet, ele) {
        if (ele && !ele.querySelector('.e-wrap-content')) {
            var wrapSpan = this.wrapCell.cloneNode();
            var filterBtn = ele.querySelector('.e-filter-btn');
            while (ele.childElementCount) {
                wrapSpan.appendChild(ele.firstElementChild);
            }
            if (filterBtn) {
                if (ele.firstChild) {
                    ele.insertBefore(filterBtn, ele.firstChild);
                }
                else {
                    ele.appendChild(filterBtn);
                }
            }
            if (!getCell(rowIdx, colIdx, sheet, false, true).hyperlink) {
                var node = ele.lastChild;
                if (node && node.nodeType === 3) {
                    wrapSpan.appendChild(document.createTextNode(node.textContent));
                    node.textContent = '';
                }
                else {
                    wrapSpan.appendChild(document.createTextNode(ele.textContent));
                    ele.textContent = '';
                }
            }
            ele.appendChild(wrapSpan);
        }
    };
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} - Get the module name.
     * @private
     */
    WrapText.prototype.getModuleName = function () {
        return 'wrapText';
    };
    WrapText.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    return WrapText;
}());

/**
 * The `Insert` module is used to insert cells, rows, columns and sheets in to the spreadsheet.
 */
var Insert = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for the Spreadsheet insert module.
     *
     * @param {Spreadsheet} parent - Specify the spreadsheet instance.
     * @private
     */
    function Insert(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    Insert.prototype.insert = function (args) {
        var isAction;
        if (args.isAction) {
            isAction = true;
            delete args.isAction;
        }
        if (isAction) {
            this.parent.notify(beginAction, { eventArgs: args, action: 'insert' });
        }
        this.parent.notify(beforeInsert, args);
        switch (args.modelType) {
            case 'Sheet':
                this.parent.notify(insertSheetTab, { startIdx: args.index, endIdx: args.index + (args.model.length - 1), preventUpdate: !isAction });
                this.parent.renderModule.refreshSheet();
                focus(this.parent.element);
                break;
            case 'Row':
                if (!this.parent.scrollSettings.enableVirtualization || args.index <= this.parent.viewport.bottomIndex) {
                    if (this.parent.scrollSettings.enableVirtualization) {
                        if (args.freezePane) {
                            this.parent.renderModule.refreshSheet();
                            break;
                        }
                        var sheet = getSheet(this.parent, args.activeSheetIndex);
                        if (args.index >= this.parent.viewport.topIndex) {
                            this.parent.renderModule.refreshUI({ skipUpdateOnFirst: this.parent.viewport.topIndex === skipHiddenIdx(this.parent.getActiveSheet(), 0, true),
                                rowIndex: this.parent.viewport.topIndex, colIndex: this.parent.viewport.leftIndex, refresh: 'Row' });
                        }
                        var topIdx = getCellIndexes(sheet.topLeftCell)[0];
                        if (args.index < topIdx) {
                            this.parent.notify(updateScrollValue, { scrollTop: getRowsHeight(sheet, 0, topIdx - 1, true) });
                            this.parent.goTo(getCellAddress(args.index, 0));
                        }
                    }
                    else {
                        this.parent.renderModule.refreshUI({ skipUpdateOnFirst: true, rowIndex: this.parent.viewport.topIndex, colIndex: 0, refresh: 'Row' });
                    }
                    this.parent.selectRange(this.parent.getActiveSheet().selectedRange);
                }
                break;
            case 'Column':
                if (!this.parent.scrollSettings.enableVirtualization || args.index <= this.parent.viewport.rightIndex) {
                    if (args.freezePane) {
                        this.parent.renderModule.refreshSheet();
                        break;
                    }
                    if (this.parent.scrollSettings.enableVirtualization) {
                        var sheet = getSheet(this.parent, args.activeSheetIndex);
                        if (args.index >= this.parent.viewport.topIndex) {
                            this.parent.renderModule.refreshUI({ skipUpdateOnFirst: this.parent.viewport.leftIndex === skipHiddenIdx(this.parent.getActiveSheet(), 0, true, 'columns'), rowIndex: this.parent.viewport.topIndex, colIndex: this.parent.viewport.leftIndex, refresh: 'Column' });
                        }
                        var leftIdx = getCellIndexes(sheet.topLeftCell)[1];
                        if (args.index < leftIdx) {
                            this.parent.notify(updateScrollValue, { scrollLeft: getColumnsWidth(sheet, 0, leftIdx - 1, true) });
                            this.parent.goTo(getCellAddress(0, args.index));
                        }
                    }
                    else {
                        this.parent.renderModule.refreshUI({
                            skipUpdateOnFirst: true, rowIndex: 0, colIndex: this.parent.viewport.leftIndex, refresh: 'Column'
                        });
                    }
                    this.parent.selectRange(this.parent.getActiveSheet().selectedRange);
                }
                break;
        }
        this.refreshImgElement(args.model.length, this.parent.activeSheetIndex, args.modelType, args.index);
        if (isAction) {
            this.parent.notify(completeAction, { eventArgs: args, action: 'insert' });
        }
        else if (!args.isUndoRedo) {
            args.isMethod = true;
            this.parent.notify(triggerDataChange, { eventArgs: args, action: 'insert' });
        }
    };
    Insert.prototype.refreshImgElement = function (count, sheetIdx, modelType, index) {
        var sheet = this.parent.sheets[sheetIdx];
        var cellObj;
        var indexes = [0, 0, sheet.usedRange.rowIndex, sheet.usedRange.colIndex];
        for (var i = 0; i <= indexes[2]; i++) {
            for (var j = indexes[1]; j <= indexes[3]; j++) {
                cellObj = getCell(i, j, sheet);
                if (cellObj && cellObj.image && cellObj.image.length > 0) {
                    if ((modelType === 'Row' && i >= index) || (modelType === 'Column' && j >= index)) {
                        this.parent.notify(refreshImagePosition, {
                            rowIdx: i, colIdx: j, sheetIdx: sheetIdx, type: modelType, count: count, status: 'insert'
                        });
                    }
                }
            }
        }
    };
    Insert.prototype.addEventListener = function () {
        this.parent.on(insert, this.insert, this);
    };
    /**
     * Destroy insert module.
     *
     * @returns {void} - Destroy insert module.
     */
    Insert.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    Insert.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(insert, this.insert);
        }
    };
    /**
     * Get the insert module name.
     *
     * @returns {string} - Get the insert module name.
     */
    Insert.prototype.getModuleName = function () {
        return 'insert';
    };
    return Insert;
}());

/**
 * The `Delete` module is used to delete cells, rows, columns and sheets from the spreadsheet.
 */
var Delete = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for the Spreadsheet insert module.
     *
     * @param {Spreadsheet} parent - Constructor for the Spreadsheet insert module.
     * @private
     */
    function Delete(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    Delete.prototype.delete = function (args) {
        var isAction;
        if (args.isAction) {
            isAction = true;
            delete args.isAction;
        }
        if (isAction) {
            this.parent.notify(beginAction, { eventArgs: args, action: 'delete' });
        }
        if (args.modelType === 'Sheet') {
            var activeSheetDeleted = args.activeSheetIndex >= args.startIndex && args.activeSheetIndex <= args.endIndex;
            if (activeSheetDeleted) {
                this.parent.setProperties({ activeSheetIndex: this.parent.skipHiddenSheets(args.startIndex < this.parent.sheets.length ? args.startIndex :
                        (args.startIndex ? args.startIndex - 1 : 0)) }, true);
            }
            this.parent.notify(refreshSheetTabs, null);
            if (activeSheetDeleted) {
                this.parent.renderModule.refreshSheet(false, false, true);
            }
        }
        else if (args.modelType === 'Row') {
            if (!this.parent.scrollSettings.enableVirtualization || args.startIndex <= this.parent.viewport.bottomIndex) {
                if (args.freezePane) {
                    this.parent.renderModule.refreshSheet(false, false, true);
                }
                else if (this.parent.scrollSettings.enableVirtualization) {
                    if (args.startIndex < getCellIndexes(this.parent.getActiveSheet().topLeftCell)[0]) {
                        this.parent.updateTopLeftCell(args.startIndex - 1 < 0 ? 0 : args.startIndex - 1, null);
                        this.parent.renderModule.refreshSheet(false, false, true);
                    }
                    else {
                        this.parent.renderModule.refreshUI({
                            skipUpdateOnFirst: this.parent.viewport.topIndex === skipHiddenIdx(this.parent.getActiveSheet(), 0, true), rowIndex: this.parent.viewport.topIndex, refresh: 'Row',
                            colIndex: this.parent.viewport.leftIndex
                        });
                        this.parent.selectRange(this.parent.getActiveSheet().selectedRange);
                    }
                }
                else {
                    this.parent.renderModule.refreshUI({ skipUpdateOnFirst: true, refresh: 'Row', rowIndex: this.parent.viewport.topIndex, colIndex: 0 });
                    this.parent.selectRange(this.parent.getActiveSheet().selectedRange);
                }
            }
        }
        else {
            if (args.refreshSheet !== false && (!this.parent.scrollSettings.enableVirtualization ||
                args.startIndex <= this.parent.viewport.rightIndex)) {
                if (args.freezePane || args.refreshSheet === true) {
                    this.parent.renderModule.refreshSheet(false, false, true);
                }
                else if (this.parent.scrollSettings.enableVirtualization) {
                    if (args.startIndex < getCellIndexes(this.parent.getActiveSheet().topLeftCell)[1]) {
                        this.parent.updateTopLeftCell(null, args.startIndex - 1 < 0 ? 0 : args.startIndex - 1);
                        this.parent.renderModule.refreshSheet(false, false, true);
                    }
                    else {
                        this.parent.renderModule.refreshUI({
                            skipUpdateOnFirst: this.parent.viewport.leftIndex === skipHiddenIdx(this.parent.getActiveSheet(), 0, true, 'columns'), rowIndex: this.parent.viewport.topIndex, refresh: 'Column', colIndex: this.parent.viewport.leftIndex, insertDelete: true
                        });
                        this.parent.selectRange(this.parent.getActiveSheet().selectedRange);
                    }
                }
                else {
                    this.parent.renderModule.refreshUI({
                        skipUpdateOnFirst: true, refresh: 'Column', rowIndex: 0,
                        colIndex: this.parent.viewport.leftIndex, insertDelete: true
                    });
                    this.parent.selectRange(this.parent.getActiveSheet().selectedRange);
                }
            }
            delete args.refreshSheet;
        }
        this.refreshImgElement(args.deletedModel.length, this.parent.activeSheetIndex, args.modelType, args.startIndex);
        if (isAction) {
            this.parent.notify(completeAction, { eventArgs: args, action: 'delete' });
        }
        else if (!args.isUndoRedo) {
            args.isMethod = true;
            this.parent.notify(triggerDataChange, { eventArgs: args, action: 'delete' });
        }
    };
    Delete.prototype.refreshImgElement = function (count, sheetIdx, modelType, index) {
        var sheet = this.parent.sheets[sheetIdx];
        var cell;
        var address = [0, 0, sheet.usedRange.rowIndex, sheet.usedRange.colIndex];
        for (var i = 0; i <= address[2]; i++) {
            for (var j = address[1]; j <= address[3]; j++) {
                cell = getCell(i, j, sheet);
                if (cell && cell.image && cell.image.length > 0) {
                    if ((modelType === 'Row' && i >= index) || (modelType === 'Column' && j >= index)) {
                        this.parent.notify(refreshImagePosition, {
                            rowIdx: i, colIdx: j, sheetIdx: sheetIdx, type: modelType, count: count, status: 'delete'
                        });
                    }
                }
            }
        }
    };
    Delete.prototype.addEventListener = function () {
        this.parent.on(deleteAction, this.delete, this);
    };
    /**
     * Destroy delete module.
     *
     * @returns {void} - Destroy delete module.
     */
    Delete.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    Delete.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(deleteAction, this.delete);
        }
    };
    /**
     * Get the delete module name.
     *
     * @returns {string} - Get the delete module name.
     */
    Delete.prototype.getModuleName = function () {
        return 'delete';
    };
    return Delete;
}());

/**
 * Represents Data Validation support for Spreadsheet.
 */
var DataValidation = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for the Spreadsheet Data Validation module.
     *
     * @param {Spreadsheet} parent - Constructor for the Spreadsheet Data Validation module.
     */
    function DataValidation(parent) {
        this.data = [];
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the Data Validation module.
     *
     * @returns {void}
     */
    DataValidation.prototype.destroy = function () {
        this.removeEventListener();
        var dataValPopup = select('#' + this.parent.element.id + '_datavalidation-popup');
        if (dataValPopup) {
            dataValPopup.remove();
        }
        this.parent = null;
    };
    DataValidation.prototype.addEventListener = function () {
        EventHandler.add(this.parent.element, 'dblclick', this.listOpen, this);
        this.parent.on(initiateDataValidation, this.initiateDataValidationHandler, this);
        this.parent.on(invalidData, this.invalidDataHandler, this);
        this.parent.on(isValidation, this.checkDataValidation, this);
        this.parent.on(activeCellChanged, this.listHandler, this);
        this.parent.on(keyUp, this.keyUpHandler, this);
        this.parent.on(removeDataValidation, this.removeValidationHandler, this);
        this.parent.on(validationHighlight, this.InvalidElementHandler, this);
    };
    DataValidation.prototype.removeEventListener = function () {
        EventHandler.remove(this.parent.element, 'dblclick', this.listOpen);
        if (!this.parent.isDestroyed) {
            this.parent.off(initiateDataValidation, this.initiateDataValidationHandler);
            this.parent.off(invalidData, this.invalidDataHandler);
            this.parent.off(isValidation, this.checkDataValidation);
            this.parent.off(activeCellChanged, this.listHandler);
            this.parent.off(keyUp, this.keyUpHandler);
            this.parent.off(removeDataValidation, this.removeValidationHandler);
            this.parent.off(validationHighlight, this.InvalidElementHandler);
        }
    };
    DataValidation.prototype.removeValidationHandler = function () {
        var sheet = this.parent.getActiveSheet();
        var range = this.getRange(sheet.selectedRange);
        var args = { range: sheet.name + '!' + range, cancel: false };
        this.parent.notify(beginAction, { eventArgs: args, action: 'removeValidation' });
        if (!args.cancel) {
            var indexes = getRangeIndexes(range);
            var cell = getCell(indexes[0], indexes[1], sheet, false, true);
            var isListValidation = cell.validation && cell.validation.type === 'List';
            this.parent.notify(cellValidation, { range: range, isRemoveValidation: true });
            if (isListValidation && !cell.validation) {
                var td = this.parent.getCell(indexes[0], indexes[1]);
                if (td && td.getElementsByClassName('e-validation-list')[0]) {
                    this.listObj.destroy();
                    td.removeChild(td.getElementsByClassName('e-validation-list')[0]);
                }
            }
            this.parent.notify(completeAction, { eventArgs: args, action: 'removeValidation' });
        }
    };
    DataValidation.prototype.keyUpHandler = function (e) {
        var target = e.target;
        var dlgEle = this.parent.element.querySelector('.e-datavalidation-dlg');
        if (closest(target, '.e-values') && dlgEle && e.keyCode !== 13) {
            var valuesCont = dlgEle.querySelector('.e-values');
            var errorEle = valuesCont.querySelector('.e-dlg-error');
            var footerCont = dlgEle.querySelector('.e-footer-content');
            var primaryBut = footerCont.querySelector('.e-primary');
            if (primaryBut.hasAttribute('disabled')) {
                primaryBut.removeAttribute('disabled');
            }
            if (errorEle) {
                valuesCont.removeChild(errorEle);
            }
        }
    };
    DataValidation.prototype.listOpen = function (e) {
        var target = e.target;
        if (this.listObj && target.classList.contains('e-cell') && target.querySelector('.e-validation-list')) {
            this.listObj.showPopup();
        }
    };
    DataValidation.prototype.invalidDataHandler = function (args) {
        if (args.isRemoveHighlight) {
            this.parent.notify(beginAction, { eventArgs: { range: this.parent.dataValidationRange }, action: 'removeHighlight' });
            this.parent.removeInvalidHighlight();
            this.parent.notify(completeAction, { eventArgs: { range: this.parent.dataValidationRange }, action: 'removeHighlight' });
        }
        else {
            this.parent.notify(beginAction, { eventArgs: { range: this.parent.dataValidationRange }, action: 'addHighlight' });
            this.parent.addInvalidHighlight();
            this.parent.notify(completeAction, { eventArgs: { range: this.parent.dataValidationRange }, action: 'addHighlight' });
        }
    };
    DataValidation.prototype.listHandler = function () {
        var _this = this;
        if (this.parent.allowDataValidation) {
            var sheet_1 = this.parent.getActiveSheet();
            var indexes = getCellIndexes(sheet_1.activeCell);
            var cell = getCell(indexes[0], indexes[1], sheet_1);
            var tdEle_1 = this.parent.getCell(indexes[0], indexes[1]);
            if (!tdEle_1) {
                return;
            }
            if (document.getElementsByClassName('e-validation-list')[0]) {
                remove(document.getElementsByClassName('e-validation-list')[0]);
                this.data = [];
            }
            var validation = (cell && cell.validation) || (sheet_1.columns && sheet_1.columns[indexes[1]] &&
                sheet_1.columns[indexes[1]].validation);
            if (validation && validation.type === 'List') {
                validation.ignoreBlank = !isNullOrUndefined(validation.ignoreBlank) ? validation.ignoreBlank : true;
                validation.inCellDropDown = !isNullOrUndefined(validation.inCellDropDown) ?
                    validation.inCellDropDown : true;
                if (validation.inCellDropDown) {
                    var ddlCont = this.parent.createElement('div', { className: 'e-validation-list' });
                    var ddlEle = this.parent.createElement('input', { id: this.parent.element.id + 'listValid' });
                    ddlCont.appendChild(ddlEle);
                    if (!validation.inCellDropDown) {
                        ddlCont.style.display = 'none';
                    }
                    var parent_1 = tdEle_1.getElementsByClassName('e-wrap-content')[0] || tdEle_1;
                    parent_1.insertBefore(ddlCont, parent_1.firstChild);
                    var dataSource = this.updateDataSource(cell, validation);
                    this.listObj = new DropDownList({
                        index: this.setDropDownListIndex(dataSource, cell),
                        dataSource: dataSource,
                        fields: { text: 'text', value: 'id' },
                        width: '0px',
                        popupHeight: '200px',
                        change: function () { return _this.listValueChange(_this.listObj.text); },
                        open: function (args) {
                            args.popup.offsetX = -(tdEle_1.offsetWidth - 20) + 4;
                            args.popup.offsetY = -13;
                            args.popup.element.style.width = tdEle_1.offsetWidth - 1 + 'px';
                            // Positioning popup in mobile device based on transform css applied on virtual element as suggested by dropdown team
                            if (Browser.isDevice && _this.parent.scrollModule) {
                                var offset = _this.parent.scrollModule.offset;
                                var viewport = _this.parent.viewport;
                                args.popup.offsetY += viewport.topIndex ? offset.top.size -
                                    getRowsHeight(sheet_1, viewport.topIndex + 1, offset.top.idx, true) : 0;
                                args.popup.offsetX += viewport.leftIndex ? offset.left.size -
                                    getColumnsWidth(sheet_1, viewport.leftIndex + 1, offset.left.idx, true) : 0;
                                args.popup.refresh();
                            }
                        }
                    });
                    this.listObj.appendTo('#' + this.parent.element.id + 'listValid');
                }
            }
            if (cell && cell.validation) {
                cell.validation = validation;
            }
        }
    };
    DataValidation.prototype.setDropDownListIndex = function (dataSource, cell) {
        if (cell && cell.value) {
            for (var dataIdx = 0, len = dataSource.length; dataIdx < len; dataIdx++) {
                if (dataSource[dataIdx].text === cell.value.toString()) {
                    return dataIdx;
                }
            }
        }
        return null;
    };
    DataValidation.prototype.updateDataSource = function (cell, validation) {
        var _this = this;
        this.data = [];
        var count$$1 = 0;
        var definedNames = this.parent.definedNames;
        var value = validation.value1;
        var isRange = value.indexOf('=') !== -1;
        if (definedNames.length > 0 && isRange) {
            var listValue = value.split('=')[1];
            for (var idx = 0, len = definedNames.length; idx < len; idx++) {
                if (definedNames[idx].name === listValue) {
                    var definedNameRange = definedNames[idx].refersTo;
                    // eslint-disable-next-line
                    while (definedNameRange.includes("'")) {
                        // eslint-disable-next-line
                        definedNameRange = definedNameRange.replace("'", '');
                    }
                    value = definedNameRange;
                }
            }
        }
        if (isRange) {
            var sheet = value.indexOf('!') > -1 ?
                getSheet(this.parent, getSheetIndex(this.parent, value.split('=')[1].split('!')[0])) : this.parent.getActiveSheet();
            var address = value.indexOf('!') > -1 ? value.split('!')[1] : value.split('=')[1];
            var activeSheet_1 = this.parent.getActiveSheet();
            if (sheet.name !== activeSheet_1.name) {
                var isNotLoaded_1;
                var selectedRange_1 = getRangeIndexes(activeSheet_1.selectedRange);
                sheet.ranges.forEach(function (range) {
                    if (!range.info || !range.info.loadedRange || !range.info.loadedRange.length) {
                        isNotLoaded_1 = true;
                        return;
                    }
                });
                if (isNotLoaded_1) {
                    this.parent.showSpinner();
                    getData(this.parent, sheet.name + "!" + address).then(function () {
                        _this.parent.hideSpinner();
                        if (activeSheet_1.name === _this.parent.getActiveSheet().name) {
                            var curRange = getRangeIndexes(_this.parent.getActiveSheet().selectedRange);
                            if (curRange[0] === selectedRange_1[0] && curRange[1] === selectedRange_1[1]) {
                                _this.listObj.dataSource = _this.updateDataSource(cell, validation);
                                _this.listObj.dataBind();
                            }
                        }
                    });
                }
            }
            var indexes = void 0;
            var range = address.split(':');
            if ((range[0].match(/[a-z]+$/ig) && range[1].match(/[a-z]+$/ig)) || (range[0].match(/^[0-9]/g) && range[1].match(/^[0-9]/g))) {
                var addressInfo = this.parent.getIndexes(address);
                if (addressInfo.isCol) {
                    indexes = [0, addressInfo.startIdx, sheet.usedRange.rowIndex, addressInfo.startIdx];
                }
                else {
                    indexes = [addressInfo.startIdx, 0, addressInfo.startIdx, sheet.usedRange.colIndex];
                }
            }
            else {
                indexes = getRangeIndexes(address);
            }
            for (var rowIdx = indexes[0]; rowIdx <= indexes[2]; rowIdx++) {
                if (!sheet.rows[rowIdx]) {
                    setRow(sheet, rowIdx, {});
                }
                for (var colIdx = indexes[1]; colIdx <= indexes[3]; colIdx++) {
                    if (!sheet.rows[rowIdx].cells) {
                        setCell(rowIdx, colIdx, sheet, {});
                    }
                    count$$1 += 1;
                    cell = sheet.rows[rowIdx].cells[colIdx];
                    var data = this.parent.getDisplayText(cell) || '';
                    if (validation.ignoreBlank && data === '') {
                        continue;
                    }
                    this.data.push({ text: data, id: 'list-' + count$$1 });
                }
            }
        }
        else {
            var listValues = value.split(',');
            for (var idx = 0; idx < listValues.length; idx++) {
                count$$1 += 1;
                this.data.push({ text: listValues[idx], id: 'list-' + count$$1 });
            }
        }
        return this.data;
    };
    DataValidation.prototype.listValueChange = function (value) {
        this.parent.notify(formulaBarOperation, { action: 'refreshFormulabar', value: value });
        var sheet = this.parent.getActiveSheet();
        var cellIdx = getIndexesFromAddress(sheet.activeCell);
        var cellObj = Object.assign({}, getCell(cellIdx[0], cellIdx[1], sheet));
        if (sheet.isProtected && isLocked(cellObj, getColumn(sheet, cellIdx[1]))) {
            this.parent.notify(editAlert, null);
        }
        else {
            this.parent.notify(workbookEditOperation, { action: 'updateCellValue', address: sheet.activeCell, value: value });
            this.parent.serviceLocator.getService('cell').refreshRange(cellIdx);
            this.parent.trigger('cellSave', {
                value: value, oldValue: cellObj && cellObj.value, address: sheet.name + '!' + sheet.activeCell,
                displayText: this.parent.getDisplayText(getCell(cellIdx[0], cellIdx[1], sheet))
            });
        }
    };
    DataValidation.prototype.getRange = function (range) {
        var sheet = this.parent.getActiveSheet();
        var indexes = getRangeIndexes(range);
        var maxRowCount = sheet.rowCount;
        var maxColCount = sheet.colCount;
        if (indexes[2] === maxRowCount - 1 && indexes[0] === 0) {
            range = range.replace(/[0-9]/g, '');
        }
        else if (indexes[3] === maxColCount - 1 && indexes[2] === 0) {
            range = range.replace(/\D/g, '');
        }
        return range;
    };
    DataValidation.prototype.initiateDataValidationHandler = function (okClick, noClick) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var type;
        var operator;
        var value1;
        var value2;
        var ignoreBlank = true;
        var inCellDropDown = true;
        var isNew = true;
        var sheet = this.parent.getActiveSheet();
        var cell;
        var range = sheet.selectedRange;
        var indexes = getRangeIndexes(range);
        range = this.getRange(range);
        var validationArgs = this.validateRange(indexes, sheet);
        if (!validationArgs.extendValidation && !validationArgs.moreValidation || okClick) {
            for (var rowIdx = indexes[0]; rowIdx <= indexes[2]; rowIdx++) {
                if (sheet.rows[rowIdx]) {
                    for (var colIdx = indexes[1]; colIdx <= indexes[3]; colIdx++) {
                        if (sheet.rows[rowIdx].cells && sheet.rows[rowIdx].cells[colIdx]) {
                            cell = sheet.rows[rowIdx].cells[colIdx];
                            if (cell.validation) {
                                isNew = false;
                                type = cell.validation.type;
                                operator = cell.validation.operator;
                                value1 = cell.validation.value1;
                                value2 = cell.validation.value2;
                                ignoreBlank = !isNullOrUndefined(cell.validation.ignoreBlank) ?
                                    cell.validation.ignoreBlank : ignoreBlank;
                                inCellDropDown = !isNullOrUndefined(cell.validation.inCellDropDown) ?
                                    cell.validation.inCellDropDown : inCellDropDown;
                            }
                        }
                    }
                }
            }
            if (isNew) {
                for (var i = indexes[1]; i <= indexes[3]; i++) {
                    var column = getColumn(sheet, i);
                    if (column && column.validation) {
                        isNew = false;
                        type = column.validation.type;
                        operator = column.validation.operator;
                        value1 = column.validation.value1;
                        value2 = column.validation.value2;
                        ignoreBlank = !isNullOrUndefined(column.validation.ignoreBlank) ?
                            column.validation.ignoreBlank : ignoreBlank;
                        inCellDropDown = !isNullOrUndefined(column.validation.inCellDropDown) ?
                            column.validation.inCellDropDown : inCellDropDown;
                    }
                }
            }
            if (!this.parent.element.querySelector('.e-datavalidation-dlg')) {
                var dialogInst_1 = this.parent.serviceLocator.getService(dialog);
                dialogInst_1.show({
                    width: 375, showCloseIcon: true, isModal: true, cssClass: 'e-datavalidation-dlg',
                    header: l10n.getConstant('DataValidation'),
                    target: document.querySelector('.e-control.e-spreadsheet'),
                    beforeOpen: function (args) {
                        var dlgArgs = {
                            dialogName: 'ValidationDialog', element: args.element,
                            target: args.target, cancel: args.cancel
                        };
                        _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                        if (dlgArgs.cancel) {
                            args.cancel = true;
                        }
                        if (noClick) {
                            isNew = true;
                        }
                        dialogInst_1.dialogInstance.content =
                            _this.dataValidationContent(isNew, type, operator, value1, value2, ignoreBlank, inCellDropDown, range);
                        dialogInst_1.dialogInstance.dataBind();
                        focus(_this.parent.element);
                    },
                    buttons: [{
                            buttonModel: {
                                content: l10n.getConstant('CLEARALL'),
                                cssClass: 'e-btn e-clearall-btn e-flat'
                            },
                            click: function () {
                                dialogInst_1.dialogInstance.content =
                                    _this.dataValidationContent(true, type, operator, value1, value2, ignoreBlank, inCellDropDown, range);
                                dialogInst_1.dialogInstance.dataBind();
                                focus(_this.parent.element);
                            }
                        },
                        {
                            buttonModel: {
                                content: l10n.getConstant('APPLY'), isPrimary: true
                            },
                            click: function () {
                                _this.dlgClickHandler(dialogInst_1);
                            }
                        }]
                });
                dialogInst_1.dialogInstance.refresh();
            }
        }
        else {
            if (validationArgs.moreValidation) {
                this.moreValidationDlg();
            }
            if (validationArgs.extendValidation) {
                this.extendValidationDlg();
            }
        }
    };
    DataValidation.prototype.dataValidationContent = function (isNew, type, operator, val1, val2, ignoreBlank, inCellDropDown, range) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var value1 = isNew ? '0' : val1;
        var value2 = isNew ? '0' : val2;
        var dlgContent = this.parent.createElement('div', { className: 'e-validation-dlg' });
        var cellRangeCont = this.parent.createElement('div', { className: 'e-cellrange' });
        var allowDataCont = this.parent.createElement('div', { className: 'e-allowdata' });
        var valuesCont = this.parent.createElement('div', { className: 'e-values' });
        var ignoreBlankCont = this.parent.createElement('div', { className: 'e-ignoreblank' });
        dlgContent.appendChild(cellRangeCont);
        dlgContent.appendChild(allowDataCont);
        dlgContent.appendChild(valuesCont);
        dlgContent.appendChild(ignoreBlankCont);
        var cellRangeText = this.parent.createElement('span', { className: 'e-header', innerHTML: l10n.getConstant('CellRange') });
        var cellRangeEle = this.parent.createElement('input', {
            className: 'e-input',
            attrs: { value: range }
        });
        cellRangeCont.appendChild(cellRangeText);
        cellRangeCont.appendChild(cellRangeEle);
        var allowCont = this.parent.createElement('div', { className: 'e-allow' });
        var dataCont = this.parent.createElement('div', { className: 'e-data' });
        allowDataCont.appendChild(allowCont);
        allowDataCont.appendChild(dataCont);
        var allowText = this.parent.createElement('span', { className: 'e-header', innerHTML: l10n.getConstant('Allow') });
        this.typeData = [
            { text: l10n.getConstant('WholeNumber'), id: 'type-1' },
            { text: l10n.getConstant('Decimal'), id: 'type-2' },
            { text: l10n.getConstant('Date'), id: 'type-3' },
            { text: l10n.getConstant('Time'), id: 'type-4' },
            { text: l10n.getConstant('TextLength'), id: 'type-5' },
            { text: l10n.getConstant('List'), id: 'type-6' }
        ];
        this.operatorData = [
            { text: l10n.getConstant('Between'), id: 'operator-1' },
            { text: l10n.getConstant('NotBetween'), id: 'operator-2' },
            { text: l10n.getConstant('EqualTo'), id: 'operator-3' },
            { text: l10n.getConstant('NotEqualTo'), id: 'operator-4' },
            { text: l10n.getConstant('Greaterthan'), id: 'operator-5' },
            { text: l10n.getConstant('Lessthan'), id: 'operator-6' },
            { text: l10n.getConstant('GreaterThanOrEqualTo'), id: 'operator-7' },
            { text: l10n.getConstant('LessThanOrEqualTo'), id: 'operator-8' }
        ];
        var allowSelectEle = this.parent.createElement('input', { className: 'e-select' });
        var allowIdx = 0;
        if (!isNew) {
            for (var idx = 0; idx < this.typeData.length; idx++) {
                if (type === this.typeData[idx].text.replace(' ', '')) {
                    allowIdx = idx;
                    break;
                }
            }
        }
        if (isNew || type !== 'List') {
            var dataIdx = 0;
            var dataText = this.parent.createElement('span', { className: 'e-header', innerHTML: l10n.getConstant('Data') });
            var dataSelectEle = this.parent.createElement('input', { className: 'e-select' });
            if (!isNew) {
                for (var idx = 0; idx < this.operatorData.length; idx++) {
                    if (operator === this.FormattedValue(this.operatorData[idx].text)) {
                        dataIdx = idx;
                        break;
                    }
                }
            }
            dataCont.appendChild(dataText);
            dataCont.appendChild(dataSelectEle);
            this.dataList = new DropDownList({
                dataSource: this.operatorData,
                index: dataIdx,
                popupHeight: '200px',
                change: function () { _this.userInput(listObj, _this.dataList); }
            });
            this.dataList.appendTo(dataSelectEle);
        }
        else {
            var ignoreBlankEle_1 = this.parent.createElement('input', { className: 'e-checkbox' });
            dataCont.appendChild(ignoreBlankEle_1);
            var ignoreBlankObj_1 = new CheckBox({ label: l10n.getConstant('InCellDropDown'), checked: inCellDropDown });
            ignoreBlankObj_1.appendTo(ignoreBlankEle_1);
        }
        allowCont.appendChild(allowText);
        allowCont.appendChild(allowSelectEle);
        var listObj = new DropDownList({
            dataSource: this.typeData,
            index: allowIdx,
            popupHeight: '200px',
            change: function () { _this.userInput(listObj, _this.dataList); }
        });
        listObj.appendTo(allowSelectEle);
        if (isNew || (listObj.value !== 'List' && (this.dataList.value === 'Between' || this.dataList.value === 'Not between'))) {
            var minimumCont = this.parent.createElement('div', { className: 'e-minimum' });
            var maximumCont = this.parent.createElement('div', { className: 'e-maximum' });
            valuesCont.appendChild(minimumCont);
            valuesCont.appendChild(maximumCont);
            var minimumText = this.parent.createElement('span', { className: 'e-header', innerHTML: l10n.getConstant('Minimum') });
            var maximumText = this.parent.createElement('span', { className: 'e-header', innerHTML: l10n.getConstant('Maximum') });
            var minimumInp = this.parent.createElement('input', {
                id: 'minvalue',
                className: 'e-input', attrs: { value: value1 }
            });
            var maximumInp = this.parent.createElement('input', {
                id: 'maxvalue',
                className: 'e-input', attrs: { value: value2 }
            });
            minimumCont.appendChild(minimumText);
            minimumCont.appendChild(minimumInp);
            maximumCont.appendChild(maximumText);
            maximumCont.appendChild(maximumInp);
            var numericMin = new NumericTextBox({
                value: 0
            });
            numericMin.appendTo('#minvalue');
            var numericMax = new NumericTextBox({
                value: 0
            });
            numericMax.appendTo('#maxvalue');
        }
        else if (!isNew && type === ' List') {
            var valueText = this.parent.createElement('span', {
                className: 'e-header', innerHTML: l10n.getConstant('Sources')
            });
            var valueEle = this.parent.createElement('input', { className: 'e-input', attrs: { value: value1 } });
            valuesCont.appendChild(valueText);
            valuesCont.appendChild(valueEle);
        }
        else {
            var valueText = this.parent.createElement('span', {
                className: 'e-header', innerHTML: l10n.getConstant('Value')
            });
            var valueEle = this.parent.createElement('input', { className: 'e-input', attrs: { value: value1 } });
            valuesCont.appendChild(valueText);
            valuesCont.appendChild(valueEle);
        }
        var isChecked = ignoreBlank;
        var ignoreBlankEle = this.parent.createElement('input', { className: 'e-checkbox' });
        ignoreBlankCont.appendChild(ignoreBlankEle);
        var ignoreBlankObj = new CheckBox({ label: l10n.getConstant('IgnoreBlank'), checked: isChecked });
        ignoreBlankObj.appendTo(ignoreBlankEle);
        return dlgContent;
    };
    DataValidation.prototype.validateRange = function (indexes, sheet) {
        var moreValidation = false;
        var extendValidation = false;
        var type = [];
        var operator = [];
        var value1 = [];
        var value2 = [];
        for (var rowIndex = indexes[0]; rowIndex <= indexes[2]; rowIndex++) {
            if (sheet.rows[rowIndex]) {
                for (var colIdx = indexes[1]; colIdx <= indexes[3]; colIdx++) {
                    if (sheet.rows[rowIndex].cells && sheet.rows[rowIndex].cells[colIdx]) {
                        var cell = sheet.rows[rowIndex].cells[colIdx];
                        if (cell.validation) {
                            type.push(cell.validation.type);
                            operator.push(cell.validation.operator);
                            value1.push(cell.validation.value1);
                            value2.push(cell.validation.value2);
                        }
                    }
                }
            }
        }
        for (var i = indexes[1]; i <= indexes[3]; i++) {
            var column = getColumn(sheet, i);
            if (column && column.validation) {
                type.push(column.validation.type);
                operator.push(column.validation.operator);
                value1.push(column.validation.value1);
                value2.push(column.validation.value2);
            }
        }
        var tmp = [];
        for (var i = 0; i < type.length; i++) {
            if (tmp.indexOf(type[i]) === -1) {
                tmp.push(type[i]);
            }
        }
        if (tmp.length > 1) {
            moreValidation = true;
        }
        if (!moreValidation) {
            tmp = [];
            for (var j = 0; j < operator.length; j++) {
                if (tmp.indexOf(operator[j]) === -1) {
                    tmp.push(operator[j]);
                }
            }
            if (tmp.length > 1) {
                moreValidation = true;
            }
        }
        if (!moreValidation) {
            tmp = [];
            for (var j = 0; j < value1.length; j++) {
                if (tmp.indexOf(value1[j]) === -1) {
                    tmp.push(value1[j]);
                }
            }
            if (tmp.length > 1) {
                moreValidation = true;
            }
        }
        if (!moreValidation) {
            tmp = [];
            for (var j = 0; j < value2.length; j++) {
                if (tmp.indexOf(value2[j]) === -1) {
                    tmp.push(value2[j]);
                }
            }
            if (tmp.length > 1) {
                moreValidation = true;
            }
        }
        if (!moreValidation) {
            var count$$1 = 0;
            var cellCount = 0;
            for (var startRow = indexes[0]; startRow <= indexes[2]; startRow++) {
                if (sheet.rows[startRow]) {
                    for (var colIdx = indexes[1]; colIdx <= indexes[3]; colIdx++) {
                        if (sheet.rows[startRow].cells && sheet.rows[startRow].cells[colIdx]) {
                            var cell = sheet.rows[startRow].cells[colIdx];
                            cellCount++;
                            if (cell.validation) {
                                count$$1++;
                            }
                        }
                    }
                }
            }
            if (count$$1 === 0) {
                for (var i = indexes[1]; i <= indexes[3]; i++) {
                    var column = getColumn(sheet, i);
                    if (column && column.validation) {
                        count$$1++;
                    }
                }
            }
            if (count$$1 > 0 && cellCount > 1 && count$$1 !== cellCount) {
                extendValidation = true;
            }
        }
        return { moreValidation: moreValidation, extendValidation: extendValidation };
    };
    DataValidation.prototype.moreValidationDlg = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        var skip = false;
        var dlg = {
            width: 350, isModal: true, showCloseIcon: true, cssClass: 'e-goto-dlg',
            header: l10n.getConstant('Spreadsheet'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'MoreValidation',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                dialogInst.dialogInstance.content = l10n.getConstant('MoreValidation');
                dialogInst.dialogInstance.dataBind();
                focus(_this.parent.element);
            },
            buttons: [{
                    buttonModel: {
                        content: l10n.getConstant('Ok'), isPrimary: true, cssClass: 'e-btn-goto-ok'
                    },
                    click: function () {
                        dialogInst.hide();
                        skip = true;
                    }
                }], close: function () {
                if (skip) {
                    _this.initiateDataValidationHandler(true);
                    skip = false;
                }
                else {
                    dialogInst.hide();
                }
            }
        };
        dialogInst.show(dlg);
    };
    DataValidation.prototype.extendValidationDlg = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        var skip = false;
        var noClick = false;
        var dlg = {
            width: 550, isModal: true, showCloseIcon: true, cssClass: 'e-goto-dlg',
            header: l10n.getConstant('Spreadsheet'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'ExtendValidation',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                dialogInst.dialogInstance.content = l10n.getConstant('ExtendValidation');
                dialogInst.dialogInstance.dataBind();
                focus(_this.parent.element);
            },
            buttons: [{
                    buttonModel: {
                        content: l10n.getConstant('Yes'), isPrimary: true, cssClass: 'e-btn-goto-ok'
                    },
                    click: function () {
                        dialogInst.hide();
                        skip = true;
                    }
                },
                {
                    buttonModel: {
                        content: l10n.getConstant('No'), isPrimary: true, cssClass: 'e-btn-goto-ok'
                    },
                    click: function () {
                        dialogInst.hide();
                        skip = true;
                        noClick = true;
                    }
                }], close: function () {
                if (skip) {
                    _this.initiateDataValidationHandler(true, noClick);
                    skip = false;
                }
                else {
                    dialogInst.hide();
                }
            }
        };
        dialogInst.show(dlg);
    };
    DataValidation.prototype.userInput = function (listObj, listObj1) {
        var dlgEle = this.parent.element.querySelector('.e-datavalidation-dlg');
        var dlgCont = dlgEle.querySelector('.e-validation-dlg');
        var allowDataCont = dlgCont.querySelector('.e-allowdata');
        var valuesCont = dlgCont.querySelector('.e-values');
        var l10n = this.parent.serviceLocator.getService(locale);
        var dataCont = allowDataCont.querySelector('.e-data');
        while (valuesCont.lastChild) {
            valuesCont.removeChild(valuesCont.lastChild);
        }
        if (listObj.value === 'List') {
            while (dataCont.lastChild) {
                dataCont.removeChild(dataCont.lastChild);
            }
            var ignoreBlankEle = this.parent.createElement('input', { className: 'e-checkbox' });
            dataCont.appendChild(ignoreBlankEle);
            var ignoreBlankObj = new CheckBox({ label: l10n.getConstant('InCellDropDown'), checked: true });
            ignoreBlankObj.appendTo(ignoreBlankEle);
        }
        else {
            if (dataCont.getElementsByClassName('e-checkbox-wrapper')[0]) {
                while (dataCont.lastChild) {
                    dataCont.removeChild(dataCont.lastChild);
                }
                var dataText = this.parent.createElement('span', { className: 'e-header', innerHTML: 'Data' });
                var dataSelectEle = this.parent.createElement('input', { className: 'e-select' });
                dataCont.appendChild(dataText);
                dataCont.appendChild(dataSelectEle);
                listObj1.appendTo(dataSelectEle);
            }
        }
        if (listObj.value !== 'List' && (listObj1.value === 'Between' || listObj1.value === 'Not between')) {
            var minimumCont = this.parent.createElement('div', { className: 'e-minimum' });
            var maximumCont = this.parent.createElement('div', { className: 'e-maximum' });
            valuesCont.appendChild(minimumCont);
            valuesCont.appendChild(maximumCont);
            var minimumText = this.parent.createElement('span', { className: 'e-header', innerHTML: l10n.getConstant('Minimum') });
            var maximumText = this.parent.createElement('span', { className: 'e-header', innerHTML: l10n.getConstant('Maximum') });
            var minimumInp = this.parent.createElement('input', { id: 'min', className: 'e-input', attrs: { value: '0' } });
            var maximumInp = this.parent.createElement('input', { id: 'max', className: 'e-input', attrs: { value: '0' } });
            var numericMin = new NumericTextBox({
                value: 0
            });
            numericMin.appendTo('min');
            var numericMax = new NumericTextBox({
                value: 0
            });
            numericMax.appendTo('max');
            minimumCont.appendChild(minimumText);
            minimumCont.appendChild(minimumInp);
            maximumCont.appendChild(maximumText);
            maximumCont.appendChild(maximumInp);
        }
        else {
            var text = listObj.value === 'List' ? l10n.getConstant('Sources') : l10n.getConstant('Value');
            var valueText = this.parent.createElement('span', { className: 'e-header', innerHTML: text });
            var valueEle = listObj.value === 'List' ? this.parent.createElement('input', {
                className: 'e-input',
                attrs: { placeholder: 'Enter value' }
            }) :
                this.parent.createElement('input', { className: 'e-input', attrs: { value: '0' } });
            valuesCont.appendChild(valueText);
            valuesCont.appendChild(valueEle);
        }
    };
    DataValidation.prototype.dlgClickHandler = function (dialogInst) {
        this.parent.dataValidationRange = this.parent.dataValidationRange + this.parent.getActiveSheet().selectedRange + ',';
        var l10n = this.parent.serviceLocator.getService(locale);
        var errorMsg;
        var dlgEle = this.parent.element.querySelector('.e-datavalidation-dlg');
        var dlgFooter = dlgEle.querySelector('.e-footer-content');
        var dlgContEle = dlgEle.getElementsByClassName('e-dlg-content')[0].
            getElementsByClassName('e-validation-dlg')[0];
        var allowData = dlgContEle.getElementsByClassName('e-allowdata')[0];
        var allowEle = allowData.getElementsByClassName('e-allow')[0].getElementsByTagName('input')[0];
        var dataEle = allowData.getElementsByClassName('e-data')[0].getElementsByTagName('input')[0];
        var values = dlgContEle.getElementsByClassName('e-values')[0];
        var value1 = values.getElementsByTagName('input')[0].value;
        var value2 = values.getElementsByTagName('input')[1] ? values.getElementsByTagName('input')[1].value : '';
        var ignoreBlank = dlgContEle.querySelector('.e-ignoreblank').querySelector('.e-checkbox-wrapper').
            getAttribute('aria-checked') === 'true' ? true : false;
        var inCellDropDown = allowData.querySelector('.e-data').querySelector('.e-checkbox-wrapper') ?
            allowData.querySelector('.e-data').querySelector('.e-checkbox-wrapper').querySelector('.e-check') ? true : false : null;
        var range = dlgContEle.querySelector('.e-cellrange').getElementsByTagName('input')[0].value;
        var operator;
        var type = allowEle.value;
        if (dataEle) {
            operator = dataEle.value;
            operator = this.FormattedValue(operator);
        }
        if (type) {
            type = type.replace(' ', '');
        }
        var rangeAdd = [];
        var valArr = [];
        if (value1 !== '') {
            valArr.push(value1);
        }
        if (value2 !== '') {
            valArr.push(value2);
        }
        var isValid = true;
        if (type === 'List') {
            if (value1.indexOf('=') !== -1) {
                if (value1.indexOf(':') !== -1) {
                    var address = value1.indexOf('!') > -1 ? value1.split('!')[1] : value1.split('=')[1];
                    var isSheetNameValid = value1.indexOf('!') > -1 ?
                        getSheetIndex(this.parent, value1.split('=')[1].split('!')[0]) > -1 : true;
                    rangeAdd = address.split(':');
                    var isSingleCol = address.match(/[a-z]/gi) ?
                        rangeAdd[0].replace(/[0-9]/g, '') === rangeAdd[1].replace(/[0-9]/g, '') : false;
                    var isSingleRow = address.match(/\d/g) ?
                        rangeAdd[0].replace(/\D/g, '') === rangeAdd[1].replace(/\D/g, '') : false;
                    isValid = isSheetNameValid ? (isSingleCol ? true : isSingleRow ? true : false) : false;
                    if (!isValid) {
                        errorMsg = l10n.getConstant('DialogError');
                    }
                }
            }
            else if (value1.length > 256) {
                isValid = false;
                errorMsg = l10n.getConstant('ListLengthError');
            }
        }
        if (isValid) {
            var sheet = this.parent.getActiveSheet();
            var format = type;
            var validDlg = this.isDialogValidator(valArr, format, operator);
            if (operator === 'Between') {
                if (!isNaN(parseFloat(value1)) && !isNaN(parseFloat(value2)) && parseFloat(value1) > parseFloat(value2)) {
                    validDlg.isValidate = false;
                    validDlg.errorMsg = l10n.getConstant('MinMaxError');
                }
            }
            errorMsg = validDlg.errorMsg;
            isValid = validDlg.isValidate;
            if (isValid) {
                var indexes = getCellIndexes(sheet.activeCell);
                var cell = getCell(indexes[0], indexes[1], sheet, false, true);
                var isListValidationApplied = cell.validation && cell.validation.type === 'List';
                var args = { range: range, value1: value1, value2: value2, ignoreBlank: ignoreBlank,
                    type: type, operator: operator, inCellDropDown: inCellDropDown, cancel: false };
                this.parent.notify(beginAction, { eventArgs: args, action: 'validation' });
                if (!args.cancel) {
                    this.parent.notify(cellValidation, { rules: { type: args.type, operator: args.operator, value1: args.value1, value2: value2,
                            ignoreBlank: args.ignoreBlank, inCellDropDown: args.inCellDropDown }, range: args.range });
                    cell = getCell(indexes[0], indexes[1], sheet, false, true);
                    if (cell.validation) {
                        if (isListValidationApplied) {
                            var tdEle = this.parent.getCell(indexes[0], indexes[1]);
                            if (tdEle && tdEle.getElementsByClassName('e-validation-list')[0]) {
                                this.listObj.destroy();
                                tdEle.removeChild(tdEle.getElementsByClassName('e-validation-list')[0]);
                            }
                        }
                        if (cell.validation.type === 'List') {
                            this.listHandler();
                        }
                    }
                    delete args.cancel;
                    this.parent.notify(completeAction, { eventArgs: args, action: 'validation' });
                    if (!document.getElementsByClassName('e-validationerror-dlg')[0]) {
                        if (dialogInst.dialogInstance) {
                            dialogInst.dialogInstance.hide();
                        }
                        else {
                            dialogInst.hide();
                        }
                    }
                }
            }
        }
        if (!isValid) {
            var errorEle = this.parent.createElement('div', {
                className: 'e-dlg-error', id: 'e-invalid', innerHTML: errorMsg
            });
            values.appendChild(errorEle);
            dlgFooter.querySelector('.e-primary').setAttribute('disabled', 'true');
        }
    };
    DataValidation.prototype.FormattedValue = function (value) {
        switch (value) {
            case 'Between':
                value = 'Between';
                break;
            case 'Not between':
                value = 'NotBetween';
                break;
            case 'Equal to':
                value = 'EqualTo';
                break;
            case 'Not equal to':
                value = 'NotEqualTo';
                break;
            case 'Greater than':
                value = 'GreaterThan';
                break;
            case 'Less than':
                value = 'LessThan';
                break;
            case 'Greater than or equal to':
                value = 'GreaterThanOrEqualTo';
                break;
            case 'Less than or equal to':
                value = 'LessThanOrEqualTo';
                break;
            default:
                value = 'Between';
                break;
        }
        return value;
    };
    DataValidation.prototype.isDialogValidator = function (values, type, operator) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var count$$1 = 0;
        var isEmpty = false;
        var formValidation;
        if (type === 'List') {
            isEmpty = values.length > 0 ? false : true;
        }
        else {
            if (operator === 'Between' || operator === 'NotBetween') {
                isEmpty = values.length === 2 ? false : true;
            }
            else {
                isEmpty = values.length > 0 ? false : true;
            }
        }
        if (!isEmpty) {
            for (var idx = 0; idx < values.length; idx++) {
                var value = checkIsFormula(values[idx]) ? this.parent.computeExpression(values[idx]).toString() : values[idx];
                formValidation = this.formatValidation(value, type);
                if (formValidation.isValidate) {
                    count$$1 = count$$1 + 1;
                }
                else {
                    break;
                }
            }
            formValidation.isValidate = count$$1 === values.length ? true : false;
        }
        else {
            formValidation = { isValidate: false, errorMsg: l10n.getConstant('EmptyError') };
        }
        return { isValidate: formValidation.isValidate, errorMsg: formValidation.errorMsg };
    };
    DataValidation.prototype.isValidationHandler = function (args) {
        var l10n = this.parent.serviceLocator.getService(locale);
        args.value = args.value ? args.value : '';
        var isValidate;
        var errorMsg;
        var enterValue = args.value;
        var sheet = this.parent.sheets[args.sheetIdx];
        var validation;
        var cell = getCell(args.range[0], args.range[1], sheet);
        var column = getColumn(sheet, args.range[1]);
        if (cell && cell.validation) {
            validation = cell.validation;
        }
        else if (column && column.validation) {
            validation = column.validation;
        }
        if (validation) {
            var value1 = validation.value1;
            var value2 = validation.value2;
            if (checkIsFormula(value1) && validation.type !== 'List') {
                value1 = this.parent.computeExpression(value1).toString();
            }
            if (checkIsFormula(value2) && validation.type !== 'List') {
                value2 = this.parent.computeExpression(value2).toString();
            }
            if (checkIsFormula(args.value) && validation.type !== 'List') {
                args.value = this.parent.computeExpression(args.value).toString();
            }
            var value = args.value;
            var opt = validation.operator || 'Between';
            var type = validation.type || 'WholeNumber';
            var ignoreBlank = isNullOrUndefined(validation.ignoreBlank) ? true : validation.ignoreBlank;
            var formValidation = this.formatValidation(args.value, type);
            isValidate = formValidation.isValidate;
            errorMsg = formValidation.errorMsg;
            if (isValidate) {
                isValidate = false;
                if (type === 'Date' || type === 'Time') {
                    args.value = args.value.toString().slice(args.value.toString().indexOf(' ') + 1, args.value.length);
                    for (var idx = 0; idx < 3; idx++) {
                        args.value = idx === 0 ? args.value : idx === 1 ? value1 : value2;
                        var dateEventArgs = {
                            value: args.value,
                            rowIndex: args.range[0],
                            colIndex: args.range[1],
                            sheetIndex: args.sheetIdx,
                            updatedVal: ''
                        };
                        if (args.value !== '') {
                            this.parent.notify(checkDateFormat, dateEventArgs);
                        }
                        var updatedVal = dateEventArgs.updatedVal;
                        if (idx === 0 && updatedVal === '') {
                            value = args.value;
                        }
                        else if (idx === 0) {
                            value = updatedVal;
                        }
                        else if (idx === 1) {
                            value1 = updatedVal;
                        }
                        else {
                            value2 = updatedVal;
                        }
                    }
                }
                else if (validation.type === 'TextLength') {
                    var dateEventArgs = {
                        value: args.value,
                        rowIndex: args.range[0],
                        colIndex: args.range[1],
                        sheetIndex: args.sheetIdx,
                        updatedVal: ''
                    };
                    this.parent.notify(checkDateFormat, dateEventArgs);
                    var updatedVal = dateEventArgs.updatedVal;
                    if (updatedVal !== '') {
                        value = updatedVal.toString().length.toString();
                    }
                    else {
                        value = args.value.toString().length.toString();
                    }
                }
                if (type === 'List') {
                    if (value1.indexOf('=') !== -1) {
                        for (var idx = 0; idx < this.data.length; idx++) {
                            if (args.value.toString() === this.data[idx].text) {
                                isValidate = true;
                            }
                        }
                    }
                    else {
                        var values = value1.split(',');
                        for (var idx = 0; idx < values.length; idx++) {
                            if (args.value.toString() === values[idx]) {
                                isValidate = true;
                            }
                        }
                    }
                }
                else {
                    if (type === 'Decimal' || type === 'Time') {
                        value = parseFloat(value.toString());
                        value1 = parseFloat(value1.toString());
                        value2 = value2 ? parseFloat(value2.toString()) : null;
                    }
                    else {
                        value = parseInt(value.toString(), 10);
                        value1 = parseInt(value1.toString(), 10);
                        value2 = value2 ? parseInt(value2.toString(), 10) : null;
                    }
                    switch (opt) {
                        case 'EqualTo':
                            if (value === value1) {
                                isValidate = true;
                            }
                            else if (ignoreBlank && enterValue === '') {
                                isValidate = true;
                            }
                            else {
                                isValidate = false;
                            }
                            break;
                        case 'NotEqualTo':
                            if (value !== value1) {
                                isValidate = true;
                            }
                            else if (ignoreBlank && enterValue === '') {
                                isValidate = true;
                            }
                            else {
                                isValidate = false;
                            }
                            break;
                        case 'Between':
                            if (value >= value1 && value <= value2) {
                                isValidate = true;
                            }
                            else if (ignoreBlank && enterValue === '') {
                                isValidate = true;
                            }
                            else {
                                isValidate = false;
                            }
                            break;
                        case 'NotBetween':
                            if (value >= value1 && value <= value2) {
                                isValidate = false;
                            }
                            else if (ignoreBlank && enterValue === '') {
                                isValidate = true;
                            }
                            else {
                                isValidate = true;
                            }
                            break;
                        case 'GreaterThan':
                            if (value > value1) {
                                isValidate = true;
                            }
                            else if (ignoreBlank && enterValue === '') {
                                isValidate = true;
                            }
                            else {
                                isValidate = false;
                            }
                            break;
                        case 'LessThan':
                            if (value < value1) {
                                isValidate = true;
                            }
                            else if (ignoreBlank && enterValue === '') {
                                isValidate = true;
                            }
                            else {
                                isValidate = false;
                            }
                            break;
                        case 'GreaterThanOrEqualTo':
                            if (value >= value1) {
                                isValidate = true;
                            }
                            else if (ignoreBlank && enterValue === '') {
                                isValidate = true;
                            }
                            else {
                                isValidate = false;
                            }
                            break;
                        case 'LessThanOrEqualTo':
                            if (value <= value1) {
                                isValidate = true;
                            }
                            else if (ignoreBlank && enterValue === '') {
                                isValidate = true;
                            }
                            else {
                                isValidate = false;
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
        }
        errorMsg = l10n.getConstant('ValidationError');
        if (isValidate) {
            var style = this.parent.getCellStyleValue(['backgroundColor', 'color'], [args.range[0], args.range[1]]);
            if (!isHiddenRow(sheet, args.range[0])) {
                this.parent.notify(applyCellFormat, {
                    style: style, rowIdx: args.range[0],
                    colIdx: args.range[1], isHeightCheckNeeded: true, manualUpdate: true,
                    onActionUpdate: true
                });
            }
        }
        return { isValidate: isValidate, errorMsg: errorMsg };
    };
    DataValidation.prototype.checkDataValidation = function (args) {
        var cell = getCell(args.range[0], args.range[1], this.parent.getActiveSheet());
        var formulaArgs = { skip: false, value: '' };
        if (cell.validation) {
            if (checkIsFormula(cell.validation.value1) &&
                !isCellReference(cell.validation.value1.substring(1, cell.validation.value1.length)) &&
                cell.validation.value1.indexOf('(') > -1) {
                var val = cell.validation.value1;
                val = val.substring(val.indexOf('=') + 1, val.indexOf('('));
                formulaArgs.value = val.toUpperCase();
                this.parent.notify(formulaInValidation, formulaArgs);
            }
            if (!formulaArgs.skip && checkIsFormula(cell.validation.value2) &&
                !isCellReference(cell.validation.value2.substring(1, cell.validation.value2.length)) &&
                cell.validation.value1.indexOf('(') > -1) {
                var val2 = cell.validation.value2;
                val2 = val2.substring(val2.indexOf('=') + 1, val2.indexOf('('));
                formulaArgs.value = val2.toUpperCase();
                this.parent.notify(formulaInValidation, formulaArgs);
            }
        }
        if (!formulaArgs.skip) {
            var isValid = this.isValidationHandler({
                value: args.value, range: args.range, sheetIdx: args.sheetIdx
            });
            if (!isValid.isValidate && args.isCell) {
                this.validationErrorHandler(isValid.errorMsg);
            }
            this.parent.allowDataValidation = isValid.isValidate;
        }
    };
    DataValidation.prototype.formatValidation = function (value, type) {
        var sheetPanel = this.parent.element.getElementsByClassName('e-sheet-panel')[0];
        var errorMsg;
        var formEle = this.parent.createElement('form', {
            id: 'formId',
            className: 'form-horizontal'
        });
        var inputEle = this.parent.createElement('input', {
            id: 'e-validation', innerHTML: value
        });
        inputEle.setAttribute('name', 'validation');
        inputEle.setAttribute('type', 'text');
        inputEle.setAttribute('value', value);
        formEle.appendChild(inputEle);
        sheetPanel.appendChild(formEle);
        var options;
        switch (type) {
            case 'Date':
                options = {
                    rules: {
                        'validation': { date: true }
                    },
                    customPlacement: function (inputElement, error) {
                        errorMsg = error.innerText;
                    }
                };
                break;
            case 'Decimal':
                options = {
                    rules: {
                        'validation': { number: true }
                    },
                    customPlacement: function (inputElement, error) {
                        errorMsg = error.innerText;
                    }
                };
                break;
            case 'WholeNumber':
                options = {
                    rules: {
                        'validation': { regex: /^\d*\.?[0]*$/ }
                    },
                    customPlacement: function (inputElement, error) {
                        errorMsg = error.innerText;
                    }
                };
                break;
            default:
                break;
        }
        var formObj = new FormValidator('#formId', options);
        var isValidate = formObj.validate();
        sheetPanel.removeChild(sheetPanel.getElementsByClassName('form-horizontal')[0]);
        return { isValidate: isValidate, errorMsg: errorMsg };
    };
    DataValidation.prototype.InvalidElementHandler = function (args) {
        var rowIdx = args.rowIdx;
        var colIdx = args.colIdx;
        var isRemoveHighlightedData = args.isRemoveHighlightedData;
        if (!isRemoveHighlightedData) {
            this.parent.notify(applyCellFormat, {
                style: { backgroundColor: '#ffff00', color: '#ff0000' }, rowIdx: rowIdx, colIdx: colIdx, cell: args.td
            });
        }
        else if (isRemoveHighlightedData) {
            var style = this.parent.getCellStyleValue(['backgroundColor', 'color'], [rowIdx, colIdx]);
            this.parent.notify(applyCellFormat, {
                style: style, rowIdx: rowIdx, colIdx: colIdx, cell: args.td
            });
        }
    };
    DataValidation.prototype.validationErrorHandler = function (error) {
        var _this = this;
        var el = document.getElementsByClassName('e-spreadsheet-edit')[0];
        var l10n = this.parent.serviceLocator.getService(locale);
        if (!this.parent.element.querySelector('.e-validationerror-dlg')) {
            var erroDialogInst_1 = this.parent.serviceLocator.getService(dialog);
            var disableCancel = false;
            var dlgModel = {
                width: 400, height: 200, isModal: true, showCloseIcon: true, cssClass: 'e-validationerror-dlg',
                target: document.querySelector('.e-control.e-spreadsheet'),
                beforeOpen: function (args) {
                    var dlgArgs = {
                        dialogName: 'ValidationErrorDialog',
                        element: args.element, target: args.target, cancel: args.cancel, content: error
                    };
                    _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                    if (dlgArgs.cancel) {
                        _this.errorDlgHandler(erroDialogInst_1, 'Cancel');
                        args.cancel = true;
                    }
                    el.focus();
                    erroDialogInst_1.dialogInstance.content = dlgArgs.content;
                    erroDialogInst_1.dialogInstance.dataBind();
                },
                buttons: [{
                        buttonModel: {
                            content: l10n.getConstant('Retry'), isPrimary: true
                        },
                        click: function () {
                            _this.errorDlgHandler(erroDialogInst_1, 'Retry');
                        }
                    },
                    {
                        buttonModel: {
                            content: l10n.getConstant('Cancel')
                        },
                        click: function () {
                            _this.errorDlgHandler(erroDialogInst_1, 'Cancel');
                        }
                    }]
            };
            erroDialogInst_1.show(dlgModel, disableCancel);
        }
    };
    DataValidation.prototype.errorDlgHandler = function (errorDialogInst, buttonName) {
        if (buttonName === 'Retry') {
            var el = document.getElementsByClassName('e-spreadsheet-edit')[0];
            errorDialogInst.hide();
            if (el.innerText) {
                window.getSelection().selectAllChildren(el);
                if (this.listObj) {
                    this.listObj.showPopup();
                }
            }
        }
        else {
            var indexes = getCellIndexes(this.parent.getActiveSheet().activeCell);
            var cell = getCell(indexes[0], indexes[1], this.parent.getActiveSheet());
            var value = cell ? this.parent.getDisplayText(cell) : '';
            this.parent.notify(editOperation, {
                action: 'cancelEdit', value: value, refreshFormulaBar: true,
                refreshEditorElem: true, isAppend: false, trigEvent: true
            });
            errorDialogInst.hide();
        }
    };
    /**
     * Gets the module name.
     *
     * @returns {string} - Gets the module name.
     */
    DataValidation.prototype.getModuleName = function () {
        return 'dataValidation';
    };
    return DataValidation;
}());

/**
 * The `Protect-sheet` module is used to handle the Protecting functionalities in Spreadsheet.
 */
var ProtectSheet = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for protectSheet module in Spreadsheet.
     *
     * @param {Spreadsheet} parent - Specify the spreadsheet.
     * @private
     */
    function ProtectSheet(parent) {
        this.password = '';
        this.parent = parent;
        this.init();
    }
    ProtectSheet.prototype.init = function () {
        this.addEventListener();
    };
    /**
     * To destroy the protectSheet module.
     *
     * @returns {void} - To destroy the protectSheet module.
     * @hidden
     */
    ProtectSheet.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    ProtectSheet.prototype.addEventListener = function () {
        this.parent.on(applyProtect, this.protect, this);
        this.parent.on(protectSheet, this.protectSheetHandler, this);
        this.parent.on(editAlert, this.editProtectedAlert, this);
        this.parent.on(applyLockCells, this.lockCellsHandler, this);
        this.parent.on(protectWorkbook, this.protectWorkbook, this);
        this.parent.on(keyUp, this.KeyUpHandler, this);
        this.parent.on(unProtectWorkbook, this.unProtectWorkbook, this);
        this.parent.on(UnProtectWorksheet, this.unProtectsheet, this);
        this.parent.on(unProtectSheetPassword, this.unProtectSheetPassword, this);
        this.parent.on(getPassWord, this.getPassWord, this);
        this.parent.on(importProtectWorkbook, this.importProtectWorkbook, this);
    };
    ProtectSheet.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(applyProtect, this.protect);
            this.parent.off(protectSheet, this.protectSheetHandler);
            this.parent.off(editAlert, this.editProtectedAlert);
            this.parent.off(applyLockCells, this.lockCellsHandler);
            this.parent.off(protectWorkbook, this.protectWorkbook);
            this.parent.off(keyUp, this.KeyUpHandler);
            this.parent.off(unProtectWorkbook, this.unProtectWorkbook);
            this.parent.off(UnProtectWorksheet, this.unProtectsheet);
            this.parent.off(unProtectSheetPassword, this.unProtectSheetPassword);
            this.parent.off(getPassWord, this.getPassWord);
            this.parent.off(importProtectWorkbook, this.importProtectWorkbook);
        }
    };
    ProtectSheet.prototype.protect = function (args) {
        this.parent.notify(clearCopy, null);
        if (!args.isActive) {
            this.createDialogue();
        }
        else {
            this.parent.setSheetPropertyOnMute(this.parent.getActiveSheet(), 'isProtected', false);
            this.parent.notify(updateToggleItem, { props: 'Protect' });
            this.parent.notify(protectSheet, { isActive: args.isActive });
            this.parent.notify(protectSelection, null);
        }
    };
    ProtectSheet.prototype.createDialogue = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var listData = [
            { text: l10n.getConstant('SelectCells'), id: '1' },
            { text: l10n.getConstant('FormatCells'), id: '2' },
            { text: l10n.getConstant('FormatRows'), id: '3' },
            { text: l10n.getConstant('FormatColumns'), id: '4' },
            { text: l10n.getConstant('InsertLinks'), id: '5' }
        ];
        this.optionList = new ListView({
            width: '250px',
            dataSource: listData,
            showCheckBox: true,
            select: this.dialogOpen.bind(this)
        });
        var dialogElem = this.parent.createElement('div', { className: 'e-sheet-password-dialog' });
        var pwdCont = this.parent.createElement('div', { className: 'e-sheet-password-content' });
        var textH = this.parent.createElement('div', { className: 'e-header', innerHTML: l10n.getConstant('SheetPassword') });
        var pwdInput = this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'password' } });
        pwdInput.setAttribute('placeholder', l10n.getConstant('EnterThePassword'));
        pwdCont.appendChild(pwdInput);
        pwdCont.insertBefore(textH, pwdInput);
        dialogElem.appendChild(pwdCont);
        var protectHeaderCntent = this.parent.createElement('div', {
            className: 'e-protect-content',
            innerHTML: l10n.getConstant('ProtectAllowUser')
        });
        this.parent.setSheetPropertyOnMute(this.parent.getActiveSheet(), 'isProtected', false);
        var checkbox = new CheckBox({ checked: true, label: l10n.getConstant('ProtectContent'), cssClass: 'e-protect-checkbox' });
        var listViewElement = this.parent.createElement('div', {
            className: 'e-protect-option-list',
            id: this.parent.element.id + '_option_list'
        });
        var headerContent = this.parent.createElement('div', { className: 'e-header-content', innerHTML: l10n.getConstant('ProtectSheet') });
        var checkBoxElement = this.parent.createElement('input', { id: this.parent.element.id + '_protect_check', attrs: { type: 'checkbox' } });
        this.dialog = this.parent.serviceLocator.getService('dialog');
        this.dialog.show({
            header: headerContent.outerHTML,
            content: dialogElem.outerHTML + checkBoxElement.outerHTML + protectHeaderCntent.outerHTML + listViewElement.outerHTML,
            showCloseIcon: true, isModal: true,
            cssClass: 'e-protect-dlg',
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'ProtectSheetDialog',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                focus(_this.parent.element);
            },
            open: function () {
                _this.okBtnFocus();
            },
            beforeClose: function () {
                var checkboxElement = document.getElementById(_this.parent.element.id + '_protect_check');
                EventHandler.remove(checkboxElement, 'focus', _this.okBtnFocus);
                EventHandler.remove(checkbox.element, 'click', _this.checkBoxClickHandler);
                focus(_this.parent.element);
            },
            buttons: [{
                    click: (this.selectOption.bind(this, this.dialog, this)),
                    buttonModel: { content: l10n.getConstant('Ok'), isPrimary: true }
                },
                {
                    click: (this.cancelClick.bind(this, this.dialog, this)),
                    buttonModel: { content: l10n.getConstant('Cancel') }
                }]
        }, false);
        checkbox.appendTo('#' + this.parent.element.id + '_protect_check');
        this.optionList.appendTo('#' + this.parent.element.id + '_option_list');
        this.optionList.selectMultipleItems([{ id: '1' }]);
        EventHandler.add(checkbox.element, 'click', this.checkBoxClickHandler, this);
    };
    ProtectSheet.prototype.okBtnFocus = function () {
        var _this = this;
        var checkboxElement = document.getElementById(this.parent.element.id + '_protect_check');
        checkboxElement.addEventListener('focus', function () {
            _this.dialog.dialogInstance.element.getElementsByClassName('e-footer-content')[0].querySelector('button').focus();
        });
    };
    ProtectSheet.prototype.cancelClick = function () {
        var sheetDlgPopup = document.querySelector('.e-protect-dlg');
        var sheetDlg = getComponent(sheetDlgPopup, 'dialog');
        sheetDlg.destroy();
    };
    ProtectSheet.prototype.checkBoxClickHandler = function () {
        var ch = document.getElementById(this.parent.element.id + '_protect_check');
        if (ch.checked === false) {
            this.dialog.dialogInstance.element.getElementsByClassName('e-footer-content')[0].querySelector('button').disabled = true;
        }
        else {
            this.dialog.dialogInstance.element.getElementsByClassName('e-footer-content')[0].querySelector('button').disabled = false;
            this.dialog.dialogInstance.element.getElementsByClassName('e-footer-content')[0].querySelector('button').focus();
        }
    };
    ProtectSheet.prototype.dialogOpen = function () {
        this.dialog.dialogInstance.element.getElementsByClassName('e-footer-content')[0].querySelector('button').focus();
    };
    ProtectSheet.prototype.selectOption = function () {
        var actSheet = this.parent.getActiveSheet();
        var pwd = this.parent.element.querySelector('.e-sheet-password-dialog').
            getElementsByClassName('e-sheet-password-content')[0].querySelector('.e-input');
        if (pwd.value.length === 0) {
            this.parent.setSheetPropertyOnMute(actSheet, 'isProtected', true);
            this.parent.setSheetPropertyOnMute(actSheet, 'password', pwd.value);
            this.updateProtectSheet(pwd.value);
            this.dialog.hide();
            if (!actSheet.protectSettings.selectCells) {
                this.parent.notify(hideAutoFillElement, null);
            }
        }
        else {
            this.reEnterSheetPassword();
        }
    };
    ProtectSheet.prototype.selectSheetPassword = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var actSheet = this.parent.getActiveSheet();
        var pwd = this.parent.element.querySelector('.e-sheet-password-dialog').
            getElementsByClassName('e-sheet-password-content')[0].querySelector('.e-input');
        var cnfrmPwd = this.parent.element.querySelector('.e-reenterpwd-dialog').
            getElementsByClassName('e-reenterpwd-content')[0].querySelector('.e-input');
        var pwdSpan = this.parent.createElement('span', {
            className: 'e-reenterpwd-alert-span'
        });
        if (pwd.value === cnfrmPwd.value) {
            this.parent.setSheetPropertyOnMute(actSheet, 'isProtected', true);
            this.parent.setSheetPropertyOnMute(actSheet, 'password', pwd.value);
            this.updateProtectSheet(pwd.value);
            this.dialog.hide();
            var sheetDlgPopup = document.querySelector('.e-protect-dlg');
            var sheetDlg = getComponent(sheetDlgPopup, 'dialog');
            sheetDlg.destroy();
            if (!actSheet.protectSettings.selectCells) {
                this.parent.notify(hideAutoFillElement, null);
            }
        }
        else {
            if (pwd.value === '') {
                pwdSpan.textContent = l10n.getConstant('PasswordAlertMsg');
            }
            else if (cnfrmPwd.value === '') {
                pwdSpan.textContent = l10n.getConstant('ConfirmPasswordAlertMsg');
            }
            else if (pwd.value !== cnfrmPwd.value) {
                pwdSpan.textContent = l10n.getConstant('PasswordAlert');
            }
            (this.parent.element.querySelector('.e-reenterpwd-dlg').querySelector('.e-reenterpwd-dialog')).appendChild(pwdSpan);
        }
    };
    ProtectSheet.prototype.updateProtectSheet = function (password) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var selectedItems = this.optionList.getSelectedItems();
        var protectSettings = {
            selectCells: selectedItems.text.indexOf(l10n.getConstant('SelectCells')) > -1,
            formatCells: selectedItems.text.indexOf(l10n.getConstant('FormatCells')) > -1,
            formatRows: selectedItems.text.indexOf(l10n.getConstant('FormatRows')) > -1,
            formatColumns: selectedItems.text.indexOf(l10n.getConstant('FormatColumns')) > -1,
            insertLink: selectedItems.text.indexOf(l10n.getConstant('InsertLinks')) > -1
        };
        this.parent.protectSheet(null, protectSettings, password);
        this.parent.notify(protectSelection, null);
        this.parent.notify(clearUndoRedoCollection, null);
    };
    ProtectSheet.prototype.protectSheetHandler = function () {
        var sheet = this.parent.getActiveSheet();
        var id = this.parent.element.id;
        var disableHomeBtnId = [id + '_undo', id + '_redo', id + '_cut', id + '_copy', id + '_paste', id + '_number_format',
            id + '_font_name', id + '_font_size', id + '_bold', id + '_italic', id + '_line-through', id + '_underline',
            id + '_font_color_picker', id + '_fill_color_picker', id + '_borders', id + '_merge_cells', id + '_text_align',
            id + '_vertical_align', id + '_wrap', id + '_sorting', id + '_clear', id + '_conditionalformatting'];
        var enableHomeBtnId = [id + '_cut', id + '_copy', id + '_number_format', id + '_font_name', id + '_font_size',
            id + '_bold', id + '_italic', id + '_line-through', id + '_underline', id + '_font_color_picker', id + '_fill_color_picker',
            id + '_borders', id + '_text_align', id + '_vertical_align', id + '_wrap', id + '_sorting',
            id + '_clear', id + '_conditionalformatting'];
        var enableFrmlaBtnId = [id + '_insert_function'];
        var enableInsertBtnId = [id + '_hyperlink', id + '_', id + '_chart'];
        var imageBtnId = [id + '_image'];
        var findBtnId = [id + '_find'];
        var dataValidationBtnId = [id + '_datavalidation'];
        var chartBtnId = [id + '_chart'];
        var sheetElement = document.getElementById(this.parent.element.id + '_sheet_panel');
        if (sheetElement) {
            if ((sheet.isProtected && sheet.protectSettings.selectCells)) {
                {
                    sheetElement.classList.remove('e-protected');
                }
            }
            else {
                sheetElement.classList.add('e-protected');
            }
            if (!sheet.isProtected) {
                sheetElement.classList.remove('e-protected');
            }
        }
        this.parent.dataBind();
        this.parent.notify(protectCellFormat, {
            disableHomeBtnId: disableHomeBtnId,
            enableHomeBtnId: enableHomeBtnId, enableFrmlaBtnId: enableFrmlaBtnId, enableInsertBtnId: enableInsertBtnId,
            findBtnId: findBtnId, dataValidationBtnId: dataValidationBtnId, imageBtnId: imageBtnId, chartBtnId: chartBtnId
        });
        this.parent.notify(enableFormulaInput, null);
        if (sheet.isProtected) {
            this.parent.notify(updateToggleItem, { props: 'Protect' });
        }
    };
    ProtectSheet.prototype.editProtectedAlert = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        this.dialog = this.parent.serviceLocator.getService('dialog');
        this.dialog.show({
            content: l10n.getConstant('EditAlert'),
            isModal: true,
            closeOnEscape: true,
            showCloseIcon: true,
            width: '400px',
            cssClass: 'e-editAlert-dlg',
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'EditAlertDialog',
                    content: l10n.getConstant('EditAlert'),
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                    getUpdateUsingRaf(function () { return _this.dialog.destroyDialog(); });
                }
                _this.dialog.dialogInstance.content = dlgArgs.content;
                focus(_this.parent.element);
            },
            close: function () { return focus(_this.parent.element); }
        });
    };
    ProtectSheet.prototype.lockCellsHandler = function (args) {
        var sheet = this.parent.getActiveSheet();
        var cellObj = { isLocked: args.isLocked ? args.isLocked : false };
        setCell(args.rowIdx, args.colIdx, sheet, cellObj, true);
    };
    ProtectSheet.prototype.protectWorkbook = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            width: 323, isModal: true, showCloseIcon: true, cssClass: 'e-protectworkbook-dlg',
            header: l10n.getConstant('ProtectWorkbook'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'ProtectWorkbook',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                dialogInst.dialogInstance.content = _this.passwordProtectContent();
                dialogInst.dialogInstance.dataBind();
                _this.parent.element.focus();
            },
            buttons: [{
                    buttonModel: {
                        content: l10n.getConstant('Ok'), isPrimary: true
                    },
                    click: function () {
                        _this.alertMessage();
                        _this.dlgClickHandler(dialogInst);
                    }
                }]
        });
    };
    ProtectSheet.prototype.passwordProtectContent = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogElem = this.parent.createElement('div', { className: 'e-password-dialog' });
        var pwdCont = this.parent.createElement('div', { className: 'e-password-content' });
        var cnfrmPwdCont = this.parent.createElement('div', { className: 'e-password-content' });
        var textH = this.parent.createElement('div', { className: 'e-header', innerHTML: l10n.getConstant('Password') });
        var urlH = this.parent.createElement('div', { className: 'e-header', innerHTML: l10n.getConstant('ConfirmPassword') });
        var pwdInput = this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'password' } });
        var cnfrmPwdInput = this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'password' } });
        pwdInput.setAttribute('placeholder', l10n.getConstant('EnterThePassword'));
        cnfrmPwdInput.setAttribute('placeholder', l10n.getConstant('EnterTheConfirmPassword'));
        pwdCont.appendChild(pwdInput);
        pwdCont.insertBefore(textH, pwdInput);
        cnfrmPwdCont.appendChild(cnfrmPwdInput);
        cnfrmPwdCont.insertBefore(urlH, cnfrmPwdInput);
        dialogElem.appendChild(cnfrmPwdCont);
        dialogElem.insertBefore(pwdCont, cnfrmPwdCont);
        return dialogElem;
    };
    ProtectSheet.prototype.KeyUpHandler = function (e) {
        var trgt = e.target;
        if (trgt.classList.contains('e-text') && closest(trgt, '.e-password-content')) {
            if (closest(trgt, '.e-password-dialog') && closest(trgt, '.e-password-dialog').
                getElementsByClassName('e-password-content')[1] === trgt.parentElement) {
                var dlgEle = closest(trgt, '.e-protectworkbook-dlg');
                var ftrEle = dlgEle.getElementsByClassName('e-footer-content')[0];
                var okBtn = ftrEle.firstChild;
                if (trgt.value !== '') {
                    okBtn.removeAttribute('disabled');
                }
                else {
                    okBtn.setAttribute('disabled', 'true');
                }
            }
        }
        if (trgt.classList.contains('e-text') && closest(trgt, '.e-unprotectpwd-content')) {
            if (closest(trgt, '.e-unprotectpwd-dialog') && closest(trgt, '.e-unprotectpwd-dialog').
                getElementsByClassName('e-unprotectpwd-content')[0] === trgt.parentElement) {
                var dlgElement = closest(trgt, '.e-unprotectworkbook-dlg');
                var ftrElement = dlgElement.getElementsByClassName('e-footer-content')[0];
                var okButton = ftrElement.firstChild;
                if (trgt.value !== '') {
                    okButton.removeAttribute('disabled');
                }
                else {
                    okButton.setAttribute('disabled', 'true');
                }
            }
        }
        if (trgt.classList.contains('e-text') && closest(trgt, '.e-reenterpwd-content')) {
            if (closest(trgt, '.e-reenterpwd-dialog') && closest(trgt, '.e-reenterpwd-dialog').
                getElementsByClassName('e-reenterpwd-content')[0] === trgt.parentElement) {
                var dlgCnt = closest(trgt, '.e-reenterpwd-dlg');
                var ftrCnt = dlgCnt.getElementsByClassName('e-footer-content')[0];
                var okBtnElem = ftrCnt.firstChild;
                if (trgt.value !== '') {
                    okBtnElem.removeAttribute('disabled');
                }
                else {
                    okBtnElem.setAttribute('disabled', 'true');
                }
            }
        }
        if (trgt.classList.contains('e-text') && closest(trgt, '.e-unprotectsheetpwd-content')) {
            if (closest(trgt, '.e-unprotectsheetpwd-dialog') && closest(trgt, '.e-unprotectsheetpwd-dialog').
                getElementsByClassName('e-unprotectsheetpwd-content')[0] === trgt.parentElement) {
                var dlg = closest(trgt, '.e-unprotectworksheet-dlg');
                var ftr = dlg.getElementsByClassName('e-footer-content')[0];
                var btn = ftr.firstChild;
                if (trgt.value !== '') {
                    btn.removeAttribute('disabled');
                }
                else {
                    btn.setAttribute('disabled', 'true');
                }
            }
        }
        if (trgt.classList.contains('e-text') && closest(trgt, '.e-importprotectpwd-content')) {
            if (closest(trgt, '.e-importprotectpwd-dialog') && closest(trgt, '.e-importprotectpwd-dialog').
                getElementsByClassName('e-importprotectpwd-content')[0] === trgt.parentElement) {
                var dlgElem = closest(trgt, '.e-importprotectworkbook-dlg');
                var ftrElem = dlgElem.getElementsByClassName('e-footer-content')[0];
                var btn = ftrElem.firstChild;
                if (trgt.value !== '') {
                    btn.removeAttribute('disabled');
                }
                else {
                    btn.setAttribute('disabled', 'true');
                }
            }
        }
    };
    ProtectSheet.prototype.alertMessage = function () {
        var spanElem = this.parent.element.querySelector('.e-pwd-alert-span');
        var unpotectSpanElem = this.parent.element.querySelector('.e-unprotectpwd-alert-span');
        var importpotectSpanElem = this.parent.element.querySelector('.e-importprotectpwd-alert-span');
        var protectSheetSpanElem = this.parent.element.querySelector('.e-reenterpwd-alert-span');
        var unProtectSheetSpanElem = this.parent.element.querySelector('.e-unprotectsheetpwd-alert-span');
        if (spanElem) {
            spanElem.remove();
        }
        if (unpotectSpanElem) {
            unpotectSpanElem.remove();
        }
        if (importpotectSpanElem) {
            importpotectSpanElem.remove();
        }
        if (protectSheetSpanElem) {
            protectSheetSpanElem.remove();
        }
        if (unProtectSheetSpanElem) {
            unProtectSheetSpanElem.remove();
        }
    };
    ProtectSheet.prototype.dlgClickHandler = function (dialogInst) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var pwdVal = this.parent.element.querySelector('.e-password-dialog').
            getElementsByClassName('e-password-content')[0].querySelector('.e-input');
        var cnfrmPwd = this.parent.element.querySelector('.e-password-dialog').
            getElementsByClassName('e-password-content')[1].querySelector('.e-input');
        var pwdSpan = this.parent.createElement('span', {
            className: 'e-pwd-alert-span'
        });
        if (pwdVal.value === cnfrmPwd.value) {
            this.parent.password = pwdVal.value;
            this.parent.isProtected = true;
            dialogInst.hide();
            if (this.parent.showSheetTabs) {
                this.parent.element.querySelector('.e-add-sheet-tab').setAttribute('disabled', 'true');
                this.parent.element.querySelector('.e-add-sheet-tab').classList.add('e-disabled');
            }
            this.parent.notify(updateToggleItem, { props: 'Protectworkbook' });
        }
        else if (pwdVal.value === '') {
            pwdSpan.textContent = l10n.getConstant('PasswordAlertMsg');
        }
        else if (cnfrmPwd.value === '') {
            pwdSpan.textContent = l10n.getConstant('ConfirmPasswordAlertMsg');
        }
        else if (pwdVal.value !== cnfrmPwd.value) {
            pwdSpan.textContent = l10n.getConstant('PasswordAlert');
        }
        (this.parent.element.querySelector('.e-protectworkbook-dlg').querySelector('.e-dlg-content')).appendChild(pwdSpan);
    };
    ProtectSheet.prototype.unProtectWorkbook = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            width: 323, isModal: true, showCloseIcon: true, cssClass: 'e-unprotectworkbook-dlg',
            header: l10n.getConstant('UnProtectWorkbook'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'UnProtectWorkbook',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                dialogInst.dialogInstance.content = _this.unProtectPasswordContent();
                dialogInst.dialogInstance.dataBind();
                _this.parent.element.focus();
            },
            buttons: [{
                    buttonModel: {
                        content: l10n.getConstant('Ok'), isPrimary: true, disabled: true
                    },
                    click: function () {
                        _this.alertMessage();
                        _this.unprotectdlgOkClick(dialogInst);
                    }
                }]
        });
    };
    ProtectSheet.prototype.unProtectsheet = function (args) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            width: 323, isModal: true, showCloseIcon: true, cssClass: 'e-unprotectworksheet-dlg',
            header: l10n.getConstant('UnProtectWorksheet'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'UnProtectSheet',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                dialogInst.dialogInstance.content = _this.unProtectSheetPasswordContent();
                dialogInst.dialogInstance.dataBind();
                _this.parent.element.focus();
            },
            buttons: [{
                    buttonModel: {
                        content: l10n.getConstant('Ok'), isPrimary: true, disabled: this.parent.openModule.isImportedFile &&
                            (this.parent.openModule.unProtectSheetIdx.indexOf(this.parent.activeSheetIndex) === -1) ? false : true
                    },
                    click: function () {
                        _this.alertMessage();
                        _this.unprotectSheetdlgOkClick(dialogInst, args && args.isImportedSheet);
                    }
                }]
        });
    };
    ProtectSheet.prototype.reEnterSheetPassword = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            width: 323, isModal: true, showCloseIcon: true, cssClass: 'e-reenterpwd-dlg',
            header: l10n.getConstant('ConfirmPassword'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'Re-enterPassword',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                dialogInst.dialogInstance.content = _this.reEnterSheetPasswordContent();
                dialogInst.dialogInstance.dataBind();
                _this.parent.element.focus();
            },
            buttons: [{
                    buttonModel: {
                        content: l10n.getConstant('Ok'), isPrimary: true, disabled: true
                    },
                    click: function () {
                        _this.alertMessage();
                        _this.selectSheetPassword();
                    }
                }]
        });
    };
    ProtectSheet.prototype.unProtectPasswordContent = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var dlgElem = this.parent.createElement('div', { className: 'e-unprotectpwd-dialog' });
        var pwdCont = this.parent.createElement('div', { className: 'e-unprotectpwd-content' });
        var textHeader = this.parent.createElement('div', { className: 'e-header', innerHTML: l10n.getConstant('EnterThePassword') });
        var pwdInputElem = this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'password' } });
        pwdCont.appendChild(pwdInputElem);
        pwdCont.insertBefore(textHeader, pwdInputElem);
        dlgElem.appendChild(pwdCont);
        return dlgElem;
    };
    ProtectSheet.prototype.reEnterSheetPasswordContent = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogElem = this.parent.createElement('div', { className: 'e-reenterpwd-dialog' });
        var pwdCont = this.parent.createElement('div', { className: 'e-reenterpwd-content' });
        var textH = this.parent.createElement('div', { className: 'e-header', innerHTML: l10n.getConstant('ReEnterPassword') });
        var pwdInput = this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'password' } });
        pwdCont.appendChild(pwdInput);
        pwdCont.insertBefore(textH, pwdInput);
        dialogElem.appendChild(pwdCont);
        return dialogElem;
    };
    ProtectSheet.prototype.unProtectSheetPasswordContent = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogCnt = this.parent.createElement('div', { className: 'e-unprotectsheetpwd-dialog' });
        var pwdCnt = this.parent.createElement('div', { className: 'e-unprotectsheetpwd-content' });
        var textH = this.parent.createElement('div', { className: 'e-header', innerHTML: l10n.getConstant('EnterThePassword') });
        var pwdInput = this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'password' } });
        pwdCnt.appendChild(pwdInput);
        pwdCnt.insertBefore(textH, pwdInput);
        dialogCnt.appendChild(pwdCnt);
        return dialogCnt;
    };
    ProtectSheet.prototype.unprotectdlgOkClick = function (dialogInst) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var pwd = this.parent.element.querySelector('.e-unprotectpwd-dialog').
            getElementsByClassName('e-unprotectpwd-content')[0].querySelector('.e-input');
        if (this.parent.password === pwd.value) {
            dialogInst.hide();
            this.parent.password = '';
            this.parent.isProtected = false;
            if (this.parent.showSheetTabs) {
                this.parent.element.querySelector('.e-add-sheet-tab').removeAttribute('disabled');
                this.parent.element.querySelector('.e-add-sheet-tab').classList.remove('e-disabled');
            }
            document.getElementById(this.parent.element.id + '_protectworkbook').classList.remove('e-active');
            this.parent.notify(updateToggleItem, { props: 'Protectworkbook' });
        }
        else {
            var pwdSpan = this.parent.createElement('span', {
                className: 'e-unprotectpwd-alert-span',
                innerHTML: l10n.getConstant('UnProtectPasswordAlert')
            });
            (this.parent.element.querySelector('.e-unprotectworkbook-dlg').querySelector('.e-dlg-content')).appendChild(pwdSpan);
        }
    };
    ProtectSheet.prototype.unprotectSheetdlgOkClick = function (dialogInst, isImportedSheet) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var sheet = this.parent.getActiveSheet();
        var pwd = this.parent.element.querySelector('.e-unprotectsheetpwd-dialog').
            getElementsByClassName('e-unprotectsheetpwd-content')[0].querySelector('.e-input');
        if (isImportedSheet && sheet.password.length === 0) {
            var impArgs = {
                sheetPassword: pwd.value,
                sheetIndex: this.parent.activeSheetIndex
            };
            this.parent.open(impArgs);
        }
        else {
            if (sheet.password === pwd.value) {
                dialogInst.hide();
                this.unProtectSheetPassword();
            }
            else {
                var pwdSpan = this.parent.createElement('span', {
                    className: 'e-unprotectsheetpwd-alert-span',
                    innerHTML: l10n.getConstant('UnProtectPasswordAlert')
                });
                (this.parent.element.querySelector('.e-unprotectworksheet-dlg').querySelector('.e-dlg-content')).appendChild(pwdSpan);
            }
        }
    };
    ProtectSheet.prototype.unProtectSheetPassword = function () {
        var sheet = this.parent.getActiveSheet();
        var sheetIdx = this.parent.activeSheetIndex;
        this.parent.setSheetPropertyOnMute(sheet, 'isProtected', !sheet.isProtected);
        this.parent.setSheetPropertyOnMute(sheet, 'password', '');
        var isActive = sheet.isProtected ? false : true;
        this.parent.notify(applyProtect, { isActive: isActive, id: this.parent.element.id + '_protect' });
        if (this.parent.openModule.isImportedFile && this.parent.openModule.unProtectSheetIdx.indexOf(sheetIdx) === -1) {
            this.parent.openModule.unProtectSheetIdx.push(sheetIdx);
        }
    };
    ProtectSheet.prototype.getPassWord = function (args) {
        args.passWord = this.password;
    };
    ProtectSheet.prototype.importProtectWorkbook = function (fileArgs) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            width: 323, isModal: true, showCloseIcon: true, cssClass: 'e-importprotectworkbook-dlg',
            header: l10n.getConstant('UnProtectWorkbook'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'ImportProtectWorkbook',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                dialogInst.dialogInstance.content = _this.importProtectPasswordContent(fileArgs);
                dialogInst.dialogInstance.dataBind();
                _this.parent.element.focus();
            },
            buttons: [{
                    buttonModel: {
                        content: l10n.getConstant('Ok'), isPrimary: true, disabled: true
                    },
                    click: function () {
                        _this.alertMessage();
                        _this.importOkClick(fileArgs);
                    }
                }]
        });
    };
    ProtectSheet.prototype.importProtectPasswordContent = function (args) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogElem = this.parent.createElement('div', { className: 'e-importprotectpwd-dialog' });
        var pwdCont = this.parent.createElement('div', { className: 'e-importprotectpwd-content' });
        var textSpan = this.parent.createElement('span', {
            className: 'e-header',
            innerHTML: '"' + args.file.name + '"' + ' ' + l10n.getConstant('IsProtected')
        });
        var pwdInput = this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'password' } });
        pwdInput.setAttribute('placeholder', l10n.getConstant('EnterThePassword'));
        pwdCont.appendChild(textSpan);
        pwdCont.appendChild(pwdInput);
        dialogElem.appendChild(pwdCont);
        return dialogElem;
    };
    ProtectSheet.prototype.importOkClick = function (args) {
        var pwd = this.parent.element.querySelector('.e-importprotectpwd-dialog').
            getElementsByClassName('e-importprotectpwd-content')[0].querySelector('.e-input');
        this.parent.password = pwd.value;
        var impArgs = {
            file: args.file,
            password: pwd.value
        };
        this.parent.open(impArgs);
    };
    /**
     * Get the module name.
     *
     * @returns {string} - Get the module name.
     *
     * @private
     */
    ProtectSheet.prototype.getModuleName = function () {
        return 'protectSheet';
    };
    return ProtectSheet;
}());

/**
 * `FindAndReplace` module is used to handle the search action in Spreadsheet.
 */
var FindAndReplace = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for FindAndReplace module.
     *
     * @param {Spreadsheet} parent - Constructor for FindAndReplace module.
     */
    function FindAndReplace(parent) {
        this.shortValue = '';
        this.parent = parent;
        this.addEventListener();
    }
    FindAndReplace.prototype.addEventListener = function () {
        this.parent.on(findDlg, this.renderFindDlg, this);
        this.parent.on(gotoDlg, this.renderGotoDlg, this);
        this.parent.on(goto, this.gotoHandler, this);
        this.parent.on(findHandler, this.findHandler, this);
        this.parent.on(replace, this.replaceHandler, this);
        this.parent.on(showDialog, this.showDialog, this);
        this.parent.on(replaceAllDialog, this.replaceAllDialog, this);
        this.parent.on(findKeyUp, this.findKeyUp, this);
    };
    FindAndReplace.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(findDlg, this.renderFindDlg);
            this.parent.off(gotoDlg, this.renderGotoDlg);
            this.parent.off(goto, this.gotoHandler);
            this.parent.off(findHandler, this.findHandler);
            this.parent.off(replace, this.replaceHandler);
            this.parent.off(showDialog, this.showDialog);
            this.parent.off(replaceAllDialog, this.replaceAllDialog);
            this.parent.off(findKeyUp, this.findKeyUp);
        }
    };
    FindAndReplace.prototype.renderFindDlg = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        var cancelButton = false;
        if (isNullOrUndefined(this.parent.element.querySelector('.e-find-dlg'))) {
            var dlg = {
                isModal: false, showCloseIcon: true, cssClass: 'e-find-dlg', allowDragging: true,
                header: l10n.getConstant('FindAndReplace'), closeOnEscape: false,
                beforeOpen: function (args) {
                    var dlgArgs = {
                        dialogName: 'FindAndReplaceDialog',
                        element: args.element, target: args.target, cancel: args.cancel
                    };
                    _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                    if (dlgArgs.cancel) {
                        args.cancel = true;
                    }
                    dialogInst.dialogInstance.content = _this.findandreplaceContent();
                    dialogInst.dialogInstance.dataBind();
                    focus(_this.parent.element);
                },
                buttons: [{
                        buttonModel: {
                            content: l10n.getConstant('FindPreviousBtn'), isPrimary: true, cssClass: 'e-btn-findPrevious', disabled: true
                        },
                        click: function (e) {
                            _this.dialogMessage();
                            if (e && e.keyCode === 13) {
                                _this.findDlgClick('next');
                                return;
                            }
                            _this.findDlgClick('prev');
                        }
                    }, {
                        buttonModel: {
                            content: l10n.getConstant('FindNextBtn'), isPrimary: true, cssClass: 'e-btn-findNext', disabled: true
                        },
                        click: function () {
                            _this.dialogMessage();
                            _this.findDlgClick('next');
                        }
                    }, {
                        buttonModel: {
                            content: l10n.getConstant('ReplaceBtn'), isPrimary: true, cssClass: 'e-btn-replace', disabled: true
                        },
                        click: function () {
                            _this.dialogMessage();
                            _this.findDlgClick('replace');
                        }
                    }, {
                        buttonModel: {
                            content: l10n.getConstant('ReplaceAllBtn'), isPrimary: true, cssClass: 'e-btn-replaceAll', disabled: true
                        },
                        click: function () {
                            _this.dialogMessage();
                            _this.findDlgClick('replaceAll');
                        }
                    }], open: function () {
                    var findInput = _this.parent.element.querySelector('.e-text-findNext').value;
                    if (findInput) {
                        var prevButton = _this.parent.element.querySelector('.e-btn-findPrevious');
                        var prevButtonObj = getComponent(prevButton, 'btn');
                        prevButtonObj.disabled = false;
                        getComponent(_this.parent.element.querySelector('.e-btn-findNext'), 'btn').disabled = false;
                    }
                }, close: function () {
                    dialogInst.hide();
                }
            };
            dialogInst.show(dlg, cancelButton);
        }
        else {
            dialogInst.hide();
        }
    };
    FindAndReplace.prototype.dialogMessage = function () {
        if (this.parent.element.querySelector('.e-replace-alert-span')) {
            this.parent.element.querySelector('.e-replace-alert-span').remove();
        }
        else if (this.parent.element.querySelector('.e-find-alert-span')) {
            this.parent.element.querySelector('.e-find-alert-span').remove();
        }
    };
    FindAndReplace.prototype.renderGotoDlg = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        var cancelBtn = false;
        if (isNullOrUndefined(this.parent.element.querySelector('.e-find-dlg'))) {
            var dlg = {
                width: 300, isModal: false, showCloseIcon: true, cssClass: 'e-goto-dlg', allowDragging: true,
                header: l10n.getConstant('GotoHeader'),
                beforeOpen: function (args) {
                    var dlgArgs = {
                        dialogName: 'GoToDialog',
                        element: args.element, target: args.target, cancel: args.cancel
                    };
                    _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                    if (dlgArgs.cancel) {
                        args.cancel = true;
                    }
                    dialogInst.dialogInstance.content = _this.GotoContent();
                    dialogInst.dialogInstance.dataBind();
                    focus(_this.parent.element);
                },
                buttons: [{
                        buttonModel: {
                            content: l10n.getConstant('Ok'), isPrimary: true, cssClass: 'e-btn-goto-ok'
                        },
                        click: function () {
                            _this.gotoHandler();
                        }
                    }], close: function () {
                    dialogInst.hide();
                }, open: function () {
                    _this.textFocus();
                }
            };
            dialogInst.show(dlg, cancelBtn);
        }
        else {
            dialogInst.hide();
        }
    };
    FindAndReplace.prototype.textFocus = function () {
        var _this = this;
        var element = this.parent.element.querySelector('.e-text-goto');
        element.addEventListener('focus', function () {
            if (_this.parent.element.querySelector('.e-goto-alert-span')) {
                _this.parent.element.querySelector('.e-goto-alert-span').remove();
            }
        });
    };
    FindAndReplace.prototype.findDlgClick = function (findDlgArgs) {
        if (findDlgArgs === 'prev') {
            this.findHandler({ findOption: findDlgArgs });
        }
        else if (findDlgArgs === 'next') {
            this.findHandler({ findOption: findDlgArgs });
        }
        else {
            this.replaceHandler({ findDlgArgs: findDlgArgs });
        }
    };
    FindAndReplace.prototype.findHandler = function (findOpt) {
        var findInput = this.parent.element.querySelector('.e-text-findNext');
        if (!findInput) {
            findInput = this.parent.element.querySelector('.e-text-findNext-short');
            if (!findInput) {
                this.gotoAlert();
            }
        }
        var value = findInput.value;
        if (findInput.value !== '') {
            var sheetIndex = this.parent.activeSheetIndex;
            var checkCase = this.parent.element.querySelector('.e-findnreplace-checkcase');
            var isCSen = void 0;
            if (!checkCase) {
                isCSen = false;
            }
            else {
                var caseCheckbox = getComponent(checkCase, 'checkbox');
                isCSen = caseCheckbox.checked;
            }
            var checkmatch = this.parent.element.querySelector('.e-findnreplace-checkmatch');
            var isEMatch = void 0;
            if (!checkmatch) {
                isEMatch = false;
            }
            else {
                var entireMatchCheckbox = getComponent(checkmatch, 'checkbox');
                isEMatch = entireMatchCheckbox.checked;
            }
            var searchitem = this.parent.element.querySelector('.e-findnreplace-searchby');
            var searchBy = void 0;
            if (!searchitem) {
                searchBy = 'By Row';
            }
            else {
                var searchDDL = getComponent(searchitem, 'dropdownlist');
                searchBy = searchDDL.value.toString();
            }
            var modeitem = this.parent.element.querySelector('.e-findnreplace-searchwithin');
            var mode = void 0;
            if (!modeitem) {
                mode = 'Sheet';
            }
            else {
                var modeDDL = getComponent(modeitem, 'dropdownlist');
                mode = modeDDL.value.toString();
            }
            var args = {
                value: value, sheetIndex: sheetIndex, findOpt: findOpt.findOption, mode: mode, isCSen: isCSen,
                isEMatch: isEMatch, searchBy: searchBy, isAction: true
            };
            if (findOpt.findOption === 'next' || findOpt.findOption === 'prev') {
                this.parent.find(args);
            }
            else if (findOpt.countArgs.countOpt === 'count') {
                this.parent.notify(count, args);
                findOpt.countArgs.findCount = args.findCount;
            }
        }
    };
    FindAndReplace.prototype.replaceHandler = function (replace) {
        var sheetIndex = this.parent.activeSheetIndex;
        var findInput = this.parent.element.querySelector('.e-text-findNext');
        var replaceWith = this.parent.element.querySelector('.e-text-replaceInp');
        var checkCase = this.parent.element.querySelector('.e-findnreplace-checkcase');
        var caseCheckbox = getComponent(checkCase, 'checkbox');
        var checkmatch = this.parent.element.querySelector('.e-findnreplace-checkmatch');
        var eMatchCheckbox = getComponent(checkmatch, 'checkbox');
        var searchitem = this.parent.element.querySelector('.e-findnreplace-searchby');
        var searchDDL = getComponent(searchitem, 'dropdownlist');
        var modeitem = this.parent.element.querySelector('.e-findnreplace-searchwithin');
        var modeDDL = getComponent(modeitem, 'dropdownlist');
        var findOption = 'next';
        var args = {
            value: findInput.value, mode: modeDDL.value.toString(), isCSen: caseCheckbox.checked,
            isEMatch: eMatchCheckbox.checked, searchBy: searchDDL.value.toString(), findOpt: findOption, replaceValue: replaceWith.value,
            replaceBy: replace.findDlgArgs ? replace.findDlgArgs : replace.replaceMode, sheetIndex: sheetIndex
        };
        this.parent.replace(args);
    };
    FindAndReplace.prototype.gotoHandler = function (address) {
        if (address) {
            this.parent.goTo(address.address);
        }
        else {
            var item = this.parent.element.querySelector('.e-text-goto');
            var gotoaddress = item.value;
            var splitAddress = gotoaddress.split('');
            if ((gotoaddress === '') || isNaN(parseInt(splitAddress[1], 10))) {
                this.gotoAlert();
                return;
            }
            else {
                var address_1 = gotoaddress.toString().toUpperCase();
                this.parent.goTo(address_1);
            }
        }
    };
    FindAndReplace.prototype.gotoAlert = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var gotoSpan = this.parent.createElement('span', {
            className: 'e-goto-alert-span',
            innerHTML: l10n.getConstant('InsertingEmptyValue')
        });
        if (this.parent.element.querySelector('.e-goto-alert-span')) {
            this.parent.element.querySelector('.e-goto-alert-span').remove();
        }
        (this.parent.element.querySelector('.e-goto-dlg').querySelector('.e-dlg-content')).appendChild(gotoSpan);
    };
    FindAndReplace.prototype.showDialog = function () {
        if (this.parent.element.querySelector('.e-replace-alert-span')) {
            this.parent.element.querySelector('.e-replace-alert-span').remove();
        }
        var l10n = this.parent.serviceLocator.getService(locale);
        var findSpan = this.parent.createElement('span', {
            className: 'e-find-alert-span',
            innerHTML: l10n.getConstant('NoElements')
        });
        if (this.parent.element.querySelector('.e-find-dlg')) {
            (this.parent.element.querySelector('.e-find-dlg').querySelector('.e-dlg-content')).appendChild(findSpan);
        }
    };
    FindAndReplace.prototype.replaceAllDialog = function (options) {
        if (this.parent.element.querySelector('.e-find-alert-span')) {
            this.parent.element.querySelector('.e-find-alert-span').remove();
        }
        var l10n = (this.parent.serviceLocator.getService(locale));
        var replaceSpan = this.parent.createElement('span', {
            className: 'e-replace-alert-span',
            innerHTML: options.count + l10n.getConstant('ReplaceAllEnd') + options.replaceValue
        });
        if (this.parent.element.querySelector('.e-find-dlg')) {
            (this.parent.element.querySelector('.e-find-dlg').querySelector('.e-dlg-content')).appendChild(replaceSpan);
        }
    };
    FindAndReplace.prototype.findKeyUp = function (e) {
        if (e.target.classList.contains('e-text-findNext')) {
            var findValue_1 = this.parent.element.querySelector('.e-text-findNext').value;
            if (!isNullOrUndefined(findValue_1) && findValue_1 !== '') {
                var prevButton = this.parent.element.querySelector('.e-btn-findPrevious');
                var prevButtonObj = getComponent(prevButton, 'btn');
                prevButtonObj.disabled = false;
                getComponent(this.parent.element.querySelector('.e-btn-findNext'), 'btn').disabled = false;
            }
            else {
                getComponent(this.parent.element.querySelector('.e-btn-findPrevious'), 'btn').disabled = true;
                getComponent(this.parent.element.querySelector('.e-btn-findNext'), 'btn').disabled = true;
                this.dialogMessage();
            }
        }
        var findValue = this.parent.element.querySelector('.e-text-findNext').value;
        var replaceValue = this.parent.element.querySelector('.e-text-replaceInp').value;
        if (!isNullOrUndefined(findValue) && !isNullOrUndefined(replaceValue) && (findValue !== '') && (replaceValue !== '')) {
            if (this.parent.getActiveSheet().isProtected === false) {
                getComponent(this.parent.element.querySelector('.e-btn-replace'), 'btn').disabled = false;
                getComponent(this.parent.element.querySelector('.e-btn-replaceAll'), 'btn').disabled = false;
            }
        }
        else {
            getComponent(this.parent.element.querySelector('.e-btn-replace'), 'btn').disabled = true;
            getComponent(this.parent.element.querySelector('.e-btn-replaceAll'), 'btn').disabled = true;
        }
    };
    FindAndReplace.prototype.findandreplaceContent = function () {
        if (this.parent.element.querySelector('.e-text-findNext-short')) {
            this.shortValue = this.parent.element.querySelector('.e-text-findNext-short').value;
        }
        var dialogElem = this.parent.createElement('div', { className: 'e-link-dialog' });
        var findElem = this.parent.createElement('div', { className: 'e-find' });
        var findCheck = this.parent.createElement('div', { className: 'e-findCheck' });
        var l10n = this.parent.serviceLocator.getService(locale);
        dialogElem.appendChild(findElem);
        var findTextE = this.parent.createElement('div', { className: 'e-cont' });
        var findTextH = this.parent.createElement('p', { className: 'e-header', innerHTML: l10n.getConstant('FindWhat') });
        var findTextIp = this.parent.createElement('input', {
            className: 'e-input e-text-findNext', attrs: {
                'type': 'Text', 'placeholder': l10n.getConstant('FindValue'),
                'value': this.shortValue
            }
        });
        findTextE.appendChild(findTextIp);
        findTextE.insertBefore(findTextH, findTextIp);
        findElem.appendChild(findTextE);
        var findTextBox = new TextBox({ width: '70%' });
        findTextBox.createElement = this.parent.createElement;
        findTextBox.appendTo(findTextIp);
        var replaceTextE = this.parent.createElement('div', { className: 'e-cont' });
        var replaceTextH = this.parent.createElement('p', { className: 'e-header', innerHTML: l10n.getConstant('ReplaceWith') });
        var replaceTextIp = this.parent.createElement('input', {
            className: 'e-input e-text-replaceInp', attrs: { 'type': 'Text', 'placeholder': l10n.getConstant('ReplaceValue') }
        });
        replaceTextE.appendChild(replaceTextIp);
        replaceTextE.insertBefore(replaceTextH, replaceTextIp);
        findElem.appendChild(replaceTextE);
        var replaceTextBox = new TextBox({ width: '70%' });
        replaceTextBox.createElement = this.parent.createElement;
        replaceTextBox.appendTo(replaceTextIp);
        var withinData = [
            { Id: 'Sheet', Within: l10n.getConstant('Sheet') },
            { Id: 'Workbook', Within: l10n.getConstant('Workbook') }
        ];
        var withInDDL = new DropDownList({
            dataSource: withinData,
            cssClass: 'e-searchby',
            fields: { value: 'Id', text: 'Within' }, width: '50%', index: 0
        });
        var withIn = this.parent.createElement('input', {
            className: 'e-findnreplace-searchwithin', attrs: { type: 'select', label: l10n.getConstant('SearchBy') }
        });
        var withinTextH = this.parent.createElement('p', { className: 'e-header', innerHTML: l10n.getConstant('SearchWithin') });
        findElem.appendChild(withinTextH);
        findElem.appendChild(withIn);
        withInDDL.createElement = this.parent.createElement;
        withInDDL.appendTo(withIn);
        var searchData = [
            { Id: 'By Row', Search: l10n.getConstant('ByRow') },
            { Id: 'By Column', Search: l10n.getConstant('ByColumn') }
        ];
        var searchDDL = new DropDownList({
            dataSource: searchData,
            cssClass: 'e-searchby',
            fields: { value: 'Id', text: 'Search' }, width: '50%', index: 0
        });
        var searchIn = this.parent.createElement('input', {
            className: 'e-findnreplace-searchby', attrs: { type: 'select', label: l10n.getConstant('SearchBy') }
        });
        var searchTextH = this.parent.createElement('p', { className: 'e-header', innerHTML: l10n.getConstant('SearchBy') });
        findElem.appendChild(searchTextH);
        findElem.appendChild(searchIn);
        searchDDL.createElement = this.parent.createElement;
        searchDDL.appendTo(searchIn);
        var isCSen = new CheckBox({
            label: l10n.getConstant('MatchCase'), checked: false,
            cssClass: 'e-findnreplace-casecheckbox'
        });
        var caaseCheckbox = this.parent.createElement('input', {
            className: 'e-findnreplace-checkcase', attrs: { type: 'checkbox' }
        });
        findCheck.appendChild(caaseCheckbox);
        isCSen.createElement = this.parent.createElement;
        isCSen.appendTo(caaseCheckbox);
        var isEMatch = new CheckBox({
            label: l10n.getConstant('MatchExactCellElements'), checked: false,
            cssClass: 'e-findnreplace-exactmatchcheckbox'
        });
        var entirematchCheckbox = this.parent.createElement('input', {
            className: 'e-findnreplace-checkmatch', attrs: { type: 'checkbox' }
        });
        findCheck.appendChild(entirematchCheckbox);
        isEMatch.createElement = this.parent.createElement;
        isEMatch.appendTo(entirematchCheckbox);
        findElem.appendChild(findCheck);
        return dialogElem;
    };
    FindAndReplace.prototype.GotoContent = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogElem = this.parent.createElement('div', { className: 'e-link-dialog' });
        var gotoElem = this.parent.createElement('div', { className: 'e-goto' });
        dialogElem.appendChild(gotoElem);
        var gotoTextE = this.parent.createElement('div', { className: 'e-cont' });
        var gotoTextH = this.parent.createElement('p', { className: 'e-header', innerHTML: l10n.getConstant('Reference') });
        var gotoTextBox = new TextBox({
            placeholder: l10n.getConstant('EntercellAddress')
        });
        var gotoTextIp = this.parent.createElement('input', { className: 'e-text-goto', attrs: { 'type': 'Text' } });
        gotoTextE.appendChild(gotoTextIp);
        gotoTextE.insertBefore(gotoTextH, gotoTextIp);
        gotoElem.appendChild(gotoTextE);
        gotoTextBox.createElement = this.parent.createElement;
        gotoTextBox.appendTo(gotoTextIp);
        return dialogElem;
    };
    /**
     * To destroy the find-and-replace module.
     *
     * @returns {void} - To destroy the find-and-replace module.
     */
    FindAndReplace.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * Gets the module name.
     *
     * @returns {string} - Gets the module name.
     */
    FindAndReplace.prototype.getModuleName = function () {
        return 'findAndReplace';
    };
    return FindAndReplace;
}());

/**
 * The `Merge` module is used to to merge the range of cells.
 */
var Merge = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for the Spreadsheet merge module.
     *
     * @param {Spreadsheet} parent - Specify the spreadsheet.
     * @private
     */
    function Merge(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    Merge.prototype.merge = function (args) {
        var _this = this;
        if (args.showDialog) {
            this.parent.serviceLocator.getService(dialog).show({
                target: this.parent.element,
                height: 180, width: 400, isModal: true, showCloseIcon: true,
                content: this.parent.serviceLocator.getService(locale).getConstant('PasteMergeAlert'),
                beforeOpen: function (args) {
                    var dlgArgs = {
                        dialogName: 'MergeDialog',
                        element: args.element, target: args.target, cancel: args.cancel
                    };
                    _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                    if (dlgArgs.cancel) {
                        args.cancel = true;
                    }
                    focus(_this.parent.element);
                }
            });
            return;
        }
        this.parent.serviceLocator.getService('cell').refresh(args.rowIdx, args.colIdx, args.lastCell, args.element);
    };
    Merge.prototype.hideHandler = function (args) {
        var sheet = this.parent.getActiveSheet();
        var mergeArgs = { range: [args.rowIdx, args.colIdx, args.rowIdx, args.colIdx] };
        this.parent.notify(activeCellMergedRange, mergeArgs);
        mergeArgs.range = mergeArgs.range;
        var cell = getCell(mergeArgs.range[0], mergeArgs.range[1], sheet) || {};
        var startIdx = args.model === 'row' ? mergeArgs.range[0] : mergeArgs.range[1];
        var endIdx = startIdx + ((cell[args.model + "Span"] || 1) - 1);
        if ((!args.isEnd && (args.start === startIdx || isHiddenCol(sheet, startIdx))) || (args.isEnd && (args.start > startIdx &&
            !isHiddenCol(sheet, startIdx)))) {
            return;
        }
        if (cell[args.model + "Span"] > 1 && endIdx >= args.start) {
            if (args.model === 'row' ? isHiddenRow(sheet, startIdx) : isHiddenCol(sheet, startIdx)) {
                if (args.end < endIdx && (endIdx - args.end > 1 || cell.rowSpan > 1)) {
                    var cellEle = this.parent.getCell(args.rowIdx, args.end + 1);
                    if (cellEle) {
                        if (endIdx - args.end > 1) {
                            cellEle.colSpan = endIdx - args.end;
                        }
                        cellEle.style.display = '';
                    }
                    if (cell.rowSpan > 1) {
                        var rowSpan = cell.rowSpan - this.parent.hiddenCount(args.rowIdx, args.rowIdx + (cell.rowSpan - 1));
                        if (rowSpan > 1) {
                            cellEle.rowSpan = rowSpan;
                        }
                    }
                }
            }
            else {
                this.merge({ rowIdx: mergeArgs.range[0], colIdx: mergeArgs.range[1] });
            }
        }
    };
    Merge.prototype.checkPrevMerge = function (args) {
        var cell;
        var sheet = this.parent.getActiveSheet();
        var mergeArgs;
        var mergeCount;
        if (args.isRow) {
            if (args.rowIdx - 1 > -1 && isHiddenRow(sheet, args.rowIdx - 1)) {
                cell = getCell(args.rowIdx - 1, args.colIdx, sheet) || {};
                if ((cell.rowSpan !== undefined || cell.colSpan !== undefined) && (cell.colSpan === undefined || cell.colSpan > 1 ||
                    (args.colIdx - 1 > -1 && isHiddenCol(sheet, args.colIdx - 1)))) {
                    mergeArgs = { range: [args.rowIdx - 1, args.colIdx, args.rowIdx - 1, args.colIdx] };
                    this.parent.notify(activeCellMergedRange, mergeArgs);
                    mergeArgs.range = mergeArgs.range;
                    if (isHiddenRow(sheet, mergeArgs.range[0]) && mergeArgs.range[2] >= args.rowIdx) {
                        cell = getCell(mergeArgs.range[0], mergeArgs.range[1], sheet) || {};
                        if (cell.rowSpan > 1) {
                            mergeCount = (mergeArgs.range[2] - args.rowIdx) + 1 - this.parent.hiddenCount(args.rowIdx, args.rowIdx + (mergeArgs.range[2] - args.rowIdx));
                            if (mergeCount > 1) {
                                args.td.rowSpan = mergeCount;
                                args.td.style.display = '';
                            }
                            if (cell.colSpan > 1 && !(args.colIdx - 1 > -1 && isHiddenCol(sheet, args.colIdx - 1))) {
                                mergeCount = cell.colSpan - this.parent.hiddenCount(args.colIdx, args.colIdx + (cell.colSpan - 1), 'columns');
                                if (mergeCount > 1) {
                                    args.td.colSpan = mergeCount;
                                    args.td.style.display = '';
                                }
                            }
                        }
                    }
                }
            }
            return;
        }
        if (args.colIdx - 1 > -1 && isHiddenCol(sheet, args.colIdx - 1)) {
            cell = getCell(args.rowIdx, args.colIdx - 1, sheet) || {};
            if ((cell.colSpan !== undefined || cell.rowSpan !== undefined) && (cell.rowSpan === undefined || cell.rowSpan > 1 ||
                (args.rowIdx - 1 > -1 && isHiddenRow(sheet, args.rowIdx - 1)))) {
                mergeArgs = { range: [args.rowIdx, args.colIdx - 1, args.rowIdx, args.colIdx - 1] };
                this.parent.notify(activeCellMergedRange, mergeArgs);
                mergeArgs.range = mergeArgs.range;
                if (isHiddenCol(sheet, mergeArgs.range[1]) && mergeArgs.range[3] >= args.colIdx) {
                    cell = getCell(mergeArgs.range[0], mergeArgs.range[1], sheet) || {};
                    if (cell.colSpan > 1) {
                        mergeCount = (mergeArgs.range[3] - args.colIdx) + 1 - this.parent.hiddenCount(args.colIdx, args.colIdx + (cell.colSpan - 1), 'columns');
                        if (mergeCount > 1) {
                            args.td.colSpan = mergeCount;
                            args.td.style.display = '';
                        }
                        if (cell.rowSpan > 1 && !(args.rowIdx - 1 > -1 && isHiddenRow(sheet, args.rowIdx - 1))) {
                            mergeCount = cell.rowSpan - this.parent.hiddenCount(args.rowIdx, args.rowIdx + (cell.rowSpan - 1));
                            if (mergeCount > 1) {
                                args.td.rowSpan = mergeCount;
                                args.td.style.display = '';
                            }
                        }
                    }
                }
            }
        }
    };
    Merge.prototype.checkMerge = function (args) {
        var sheet = this.parent.getActiveSheet();
        var cell = getCell(args.rowIdx, args.colIdx, sheet) || {};
        if (args.isRow) {
            if (cell.colSpan === undefined || isHiddenCol(sheet, args.colIdx - 1)) {
                var mergeArgs = { range: [args.rowIdx, args.colIdx, args.rowIdx, args.colIdx] };
                mergeArgs.range = mergeArgs.range;
                this.parent.notify(activeCellMergedRange, mergeArgs);
                if ((isHiddenCol(sheet, args.colIdx - 1) && !isHiddenCol(sheet, mergeArgs.range[1])) || (args.isFreezePane &&
                    mergeArgs.range[0] < this.parent.frozenRowCount(sheet))) {
                    args.insideFreezePane = mergeArgs.range[0] < this.parent.frozenRowCount(sheet);
                    return;
                }
                cell = getCell(mergeArgs.range[0], mergeArgs.range[1], sheet);
                var mergeCount = (mergeArgs.range[2] - args.rowIdx) + 1 -
                    this.parent.hiddenCount(args.rowIdx, mergeArgs.range[2]);
                if (mergeCount > 1) {
                    this.merge({ rowIdx: mergeArgs.range[0], colIdx: mergeArgs.range[1], element: args.td });
                    args.td.rowSpan = mergeCount;
                    args.td.style.display = '';
                }
            }
        }
        else {
            if (cell.rowSpan === undefined || isHiddenRow(sheet, args.rowIdx - 1)) {
                var mergeArgs = { range: [args.rowIdx, args.colIdx, args.rowIdx, args.colIdx] };
                mergeArgs.range = mergeArgs.range;
                this.parent.notify(activeCellMergedRange, mergeArgs);
                if ((isHiddenRow(sheet, args.rowIdx - 1) && !isHiddenRow(sheet, mergeArgs.range[0])) || (args.isFreezePane &&
                    mergeArgs.range[1] < this.parent.frozenColCount(sheet))) {
                    args.insideFreezePane = mergeArgs.range[1] < this.parent.frozenColCount(sheet);
                    return;
                }
                cell = getCell(mergeArgs.range[0], mergeArgs.range[1], sheet);
                var mergeCount = (mergeArgs.range[3] - args.colIdx) + 1 - this.parent.hiddenCount(args.colIdx, mergeArgs.range[3], 'columns');
                if (mergeCount > 1) {
                    this.merge({ rowIdx: mergeArgs.range[0], colIdx: mergeArgs.range[1], element: args.td });
                    args.td.colSpan = mergeCount;
                    args.td.style.display = '';
                }
            }
        }
    };
    Merge.prototype.addEventListener = function () {
        this.parent.on(applyMerge, this.merge, this);
        this.parent.on(hiddenMerge, this.hideHandler, this);
        this.parent.on(checkPrevMerge, this.checkPrevMerge, this);
        this.parent.on(checkMerge, this.checkMerge, this);
    };
    /**
     * Destroy merge module.
     *
     * @returns {void} - Destroy merge module.
     */
    Merge.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    Merge.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(applyMerge, this.merge);
            this.parent.off(hiddenMerge, this.hideHandler);
            this.parent.off(checkPrevMerge, this.checkPrevMerge);
            this.parent.off(checkMerge, this.checkMerge);
        }
    };
    /**
     * Get the merge module name.
     *
     * @returns {string} - Get the merge module name.
     */
    Merge.prototype.getModuleName = function () {
        return 'merge';
    };
    return Merge;
}());

/**
 * Represents Conditional Formatting support for Spreadsheet.
 */
var ConditionalFormatting = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for the Spreadsheet Conditional Formatting module.
     *
     * @param {Spreadsheet} parent - Constructor for the Spreadsheet Conditional Formatting module.
     */
    function ConditionalFormatting(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the Conditional Formatting module.
     *
     * @returns {void} - To destroy the Conditional Formatting module.
     */
    ConditionalFormatting.prototype.destroy = function () {
        this.removeEventListener();
    };
    ConditionalFormatting.prototype.addEventListener = function () {
        this.parent.on(cFRender, this.cFInitialRender, this);
        this.parent.on(cFInitialCheck, this.cFInitialCheckHandler, this);
        this.parent.on(checkConditionalFormat, this.checkConditionalFormatHandler, this);
        this.parent.on(initiateConditionalFormat, this.initiateCFHandler, this);
        this.parent.on(setCF, this.setCFHandler, this);
        this.parent.on(clearCF, this.clearCFHandler, this);
        this.parent.on(clearCells, this.addClearCFHandler, this);
    };
    ConditionalFormatting.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(cFRender, this.cFInitialRender);
            this.parent.off(cFInitialCheck, this.cFInitialCheckHandler);
            this.parent.off(checkConditionalFormat, this.checkConditionalFormatHandler);
            this.parent.off(initiateConditionalFormat, this.initiateCFHandler);
            this.parent.off(setCF, this.setCFHandler);
            this.parent.off(clearCF, this.clearCFHandler);
        }
    };
    ConditionalFormatting.prototype.setCF = function (conditionalFormat) {
        conditionalFormat.range = conditionalFormat.range || this.parent.getActiveSheet().selectedRange;
        var eventArgs = {
            range: conditionalFormat.range, type: conditionalFormat.type, cFColor: conditionalFormat.cFColor,
            value: conditionalFormat.value, sheetIdx: this.parent.activeSheetIndex, cancel: false
        };
        this.parent.notify(beginAction, { eventArgs: eventArgs, action: 'conditionalFormat' });
        if (!eventArgs.cancel) {
            conditionalFormat.type = eventArgs.type;
            conditionalFormat.cFColor = eventArgs.cFColor;
            conditionalFormat.value = eventArgs.value;
            conditionalFormat.range = eventArgs.range;
            this.parent.notify(setCFRule, { conditionalFormat: conditionalFormat, isAction: true });
            delete eventArgs.cancel;
            this.parent.notify(completeAction, { eventArgs: eventArgs, action: 'conditionalFormat' });
        }
    };
    ConditionalFormatting.prototype.addClearCFHandler = function (args) {
        var sheet = this.parent.getActiveSheet();
        var clearCFormats = args.conditionalFormats;
        var oldRange = args.oldRange;
        var selectedRange = args.selectedRange;
        var conditionalFormats = sheet.conditionalFormats;
        for (var cCFIdx = clearCFormats.length - 1; cCFIdx >= 0; cCFIdx--) {
            var isApply = false;
            for (var cFIdx = 0; cFIdx < conditionalFormats.length; cFIdx++) {
                if (conditionalFormats[cFIdx].type === clearCFormats[cCFIdx].type &&
                    conditionalFormats[cFIdx].range === clearCFormats[cCFIdx].range) {
                    isApply = true;
                    conditionalFormats[cFIdx].range = oldRange[cCFIdx];
                    sheet.conditionalFormats[cFIdx].range = oldRange[cCFIdx];
                    var sRangeIdx = getRangeIndexes(selectedRange);
                    var cFRanges = oldRange[cCFIdx].split(',');
                    for (var cFRangeIdx = 0; cFRangeIdx < cFRanges.length; cFRangeIdx++) {
                        var newRangeIdxs = getRangeIndexes(cFRanges[cFRangeIdx]);
                        for (var cFRowIdx = newRangeIdxs[0]; cFRowIdx <= newRangeIdxs[2]; cFRowIdx++) {
                            for (var cFColIdx = newRangeIdxs[1]; cFColIdx <= newRangeIdxs[3]; cFColIdx++) {
                                for (var sRRowIdx = sRangeIdx[0]; sRRowIdx <= sRangeIdx[2]; sRRowIdx++) {
                                    for (var sRColIdx = sRangeIdx[1]; sRColIdx <= sRangeIdx[3]; sRColIdx++) {
                                        if (sRRowIdx === cFRowIdx && sRColIdx === cFColIdx) {
                                            var td = this.parent.getCell(cFRowIdx, cFColIdx);
                                            var cell = sheet.rows[cFRowIdx] ? sheet.rows[cFRowIdx].cells[cFColIdx] ?
                                                sheet.rows[cFRowIdx].cells[cFColIdx] : null : null;
                                            if (cell) {
                                                this.cFInitialCheckHandler({
                                                    rowIdx: cFRowIdx, colIdx: cFColIdx,
                                                    cell: cell, td: td, conditionalFormat: conditionalFormats[cFIdx]
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!isApply) {
                var conditionalFormat = clearCFormats[cCFIdx];
                conditionalFormat.range = oldRange[cCFIdx];
                this.parent.notify(setCFRule, { conditionalFormat: conditionalFormat });
            }
        }
    };
    ConditionalFormatting.prototype.clearCFHandler = function (args) {
        var sheet = this.parent.getActiveSheet();
        var tdEle = this.parent.getCell(args.rIdx, args.cIdx);
        var cell = getCell(args.rIdx, args.cIdx, sheet);
        if (!tdEle) {
            return;
        }
        tdEle.classList.remove('e-redft');
        tdEle.classList.remove('e-yellowft');
        tdEle.classList.remove('e-greenft');
        tdEle.classList.remove('e-redf');
        tdEle.classList.remove('e-redt');
        tdEle.classList.remove('e-iconset');
        if (tdEle.style) {
            if (tdEle.style.backgroundColor) {
                tdEle.style.backgroundColor = '';
                var style = this.parent.getCellStyleValue(['backgroundColor'], [args.rIdx, args.cIdx]);
                this.parent.notify(applyCellFormat, {
                    style: style, rowIdx: args.rIdx, colIdx: args.cIdx
                });
            }
            if (tdEle.style.color) {
                tdEle.style.color = '';
                var style = this.parent.getCellStyleValue(['color'], [args.rIdx, args.cIdx]);
                this.parent.notify(applyCellFormat, {
                    style: style, rowIdx: args.rIdx, colIdx: args.cIdx
                });
            }
        }
        if (tdEle.querySelector('.e-cf-databar')) {
            tdEle.removeChild(tdEle.querySelector('.e-cf-databar'));
            tdEle.textContent = this.parent.getDisplayText(cell);
        }
        if (tdEle.querySelector('.e-iconsetspan')) {
            tdEle.removeChild(tdEle.querySelector('.e-iconsetspan'));
            tdEle.textContent = this.parent.getDisplayText(cell);
        }
    };
    ConditionalFormatting.prototype.setCFHandler = function (args) {
        if (args.action === 'cf_databars') {
            this.setCF({ type: args.id });
        }
        else if (args.action === 'cf_colorscales') {
            this.setCF({ type: args.id });
        }
        else if (args.action === 'cf_iconsets') {
            this.setCF({ type: args.id });
        }
    };
    ConditionalFormatting.prototype.initiateCFHandler = function (args) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            width: 375, showCloseIcon: true, isModal: true, cssClass: 'e-conditionalformatting-dlg',
            header: args.action.replace('...', ''),
            target: document.querySelector('.e-control.e-spreadsheet'),
            beforeOpen: function () {
                dialogInst.dialogInstance.content = _this.cFDlgContent(args.action);
                dialogInst.dialogInstance.dataBind();
                focus(_this.parent.element);
            },
            buttons: [{
                    buttonModel: { content: l10n.getConstant('Ok'), isPrimary: true, cssClass: 'e-btn e-clearall-btn e-flat' },
                    click: function () {
                        if (!dialogInst.dialogInstance.element.getElementsByClassName('e-clearall-btn')[0].disabled) {
                            _this.dlgClickHandler(args.action);
                            dialogInst.hide();
                        }
                    }
                }]
        });
        dialogInst.dialogInstance.refresh();
    };
    ConditionalFormatting.prototype.dlgClickHandler = function (action) {
        var value1 = '';
        var value2 = '';
        var dlgCont = this.parent.element.querySelector('.e-conditionalformatting-dlg').
            getElementsByClassName('e-dlg-content')[0].querySelector('.e-cf-dlg');
        var mainCont = dlgCont.querySelector('.e-cfmain');
        if (mainCont) {
            var inpEle = mainCont.getElementsByTagName('input')[0];
            if (inpEle && inpEle.parentElement.classList.contains('e-cfmain')) {
                value1 = mainCont.getElementsByTagName('input')[0].value;
            }
            value2 = mainCont.getElementsByTagName('input')[1] ?
                dlgCont.querySelector('.e-cfmain').getElementsByTagName('input')[1].value : '';
            var currencySymbol = getNumberDependable(this.parent.locale, '');
            value1 = value1.split(currencySymbol).join('').split(',').join('');
            value2 = value2.split(currencySymbol).join('').split(',').join('');
        }
        var cFColor = this.getCFColor(dlgCont.querySelector('.e-cfsub').getElementsByTagName('input')[0].value);
        var cFType = action === 'Duplicate Values...' ?
            dlgCont.querySelector('.e-cfmain').getElementsByTagName('input')[0].value : this.getType(action);
        if (value1 !== '' && value2 !== '') {
            this.setCF({
                type: cFType,
                cFColor: cFColor, value: value1 + ',' + value2
            });
        }
        else if (value1 !== '') {
            this.setCF({
                type: cFType,
                cFColor: cFColor, value: value1
            });
        }
        else {
            this.setCF({
                type: cFType,
                cFColor: cFColor, value: value2
            });
        }
    };
    ConditionalFormatting.prototype.getType = function (action) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var result = '';
        switch (action) {
            case l10n.getConstant('GreaterThan') + '...':
                result = 'GreaterThan';
                break;
            case l10n.getConstant('LessThan') + '...':
                result = 'LessThan';
                break;
            case l10n.getConstant('Between') + '...':
                result = 'Between';
                break;
            case l10n.getConstant('CFEqualTo') + '...':
                result = 'EqualTo';
                break;
            case l10n.getConstant('TextThatContains') + '...':
                result = 'ContainsText';
                break;
            case l10n.getConstant('ADateOccuring') + '...':
                result = 'DateOccur';
                break;
            case l10n.getConstant('Top10Items') + '...':
                result = 'Top10Items';
                break;
            case l10n.getConstant('Bottom10Items') + '...':
                result = 'Bottom10Items';
                break;
            case l10n.getConstant('Top10') + ' %...':
                result = 'Top10Percentage';
                break;
            case l10n.getConstant('Bottom10') + ' %...':
                result = 'Bottom10Percentage';
                break;
            case l10n.getConstant('AboveAverage') + '...':
                result = 'AboveAverage';
                break;
            case l10n.getConstant('BelowAverage') + '...':
                result = 'BelowAverage';
                break;
        }
        return result;
    };
    ConditionalFormatting.prototype.getCFColor = function (value) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var result = 'RedFT';
        switch (value) {
            case l10n.getConstant('LightRedFillWithDarkRedText'):
                result = 'RedFT';
                break;
            case l10n.getConstant('YellowFillWithDarkYellowText'):
                result = 'YellowFT';
                break;
            case l10n.getConstant('GreenFillWithDarkGreenText'):
                result = 'GreenFT';
                break;
            case l10n.getConstant('RedFill'):
                result = 'RedF';
                break;
            case l10n.getConstant('RedText'):
                result = 'RedT';
                break;
        }
        return result;
    };
    ConditionalFormatting.prototype.cFDlgContent = function (action) {
        var dlgText = this.getDlgText(action);
        var l10n = this.parent.serviceLocator.getService(locale);
        var dlgContent = this.parent.createElement('div', { className: 'e-cf-dlg' });
        var mainDiv = this.parent.createElement('div', { className: 'e-cfmain' });
        var subDiv = this.parent.createElement('div', { className: 'e-cfsub' });
        var value1Text = this.parent.createElement('span', { className: 'e-header e-top-header', innerHTML: dlgText });
        var value1Inp = this.parent.createElement('input', { className: 'e-input', id: 'valueInput', attrs: { type: 'text' } });
        var duplicateSelectEle = this.parent.createElement('input', { className: 'e-select' });
        var subDivText = this.parent.createElement('span', { className: 'e-header', innerHTML: l10n.getConstant('With') });
        var colorSelectEle = this.parent.createElement('input', { className: 'e-select' });
        dlgContent.appendChild(mainDiv);
        dlgContent.appendChild(subDiv);
        mainDiv.appendChild(value1Text);
        var setValidation;
        if (action !== l10n.getConstant('DuplicateValues') + '...') {
            if (action !== l10n.getConstant('AboveAverage') + '...' && action !== l10n.getConstant('BelowAverage') + '...') {
                mainDiv.appendChild(value1Inp);
                setValidation = true;
                var percent = action === l10n.getConstant('Top10') + ' %...' || action === l10n.getConstant('Bottom10') + ' %...';
                if (action === l10n.getConstant('Top10Items') + '...' || action === l10n.getConstant('Bottom10Items') + '...' || percent) {
                    value1Inp.maxLength = percent ? 3 : 4;
                    var numeric = new NumericTextBox({ value: 10, min: 1, max: percent ? 100 : 1000, format: '###' });
                    numeric.appendTo(value1Inp);
                }
            }
        }
        else {
            mainDiv.appendChild(duplicateSelectEle);
            var dupData = [
                { text: l10n.getConstant('Duplicate'), id: 'duplicate' },
                { text: l10n.getConstant('Unique'), id: 'unique' }
            ];
            var dupList = new DropDownList({
                dataSource: dupData,
                index: 0,
                popupHeight: '200px'
            });
            dupList.appendTo(duplicateSelectEle);
        }
        if (action === l10n.getConstant('Between') + '...') {
            var value2Text = this.parent.createElement('span', { className: 'e-header e-header-2', innerHTML: l10n.getConstant('And') });
            var value2Inp = this.parent.createElement('input', { className: 'e-input e-between' });
            mainDiv.appendChild(value2Text);
            mainDiv.appendChild(value2Inp);
            value2Inp.addEventListener('input', this.validateCfInput.bind(this));
        }
        if (setValidation) {
            this.validateCfInput({ target: value1Inp });
            value1Inp.addEventListener('input', this.validateCfInput.bind(this));
        }
        subDiv.appendChild(subDivText);
        subDiv.appendChild(colorSelectEle);
        var colorData = [
            { text: l10n.getConstant('LightRedFillWithDarkRedText'), value: 'redft', id: 'redft' },
            { text: l10n.getConstant('YellowFillWithDarkYellowText'), id: 'yellowft' },
            { text: l10n.getConstant('GreenFillWithDarkGreenText'), id: 'greenft' },
            { text: l10n.getConstant('RedFill'), id: 'redf' },
            { text: l10n.getConstant('RedText'), id: 'redt' }
        ];
        var colorList = new DropDownList({
            dataSource: colorData,
            index: 0,
            popupHeight: '200px'
        });
        colorList.appendTo(colorSelectEle);
        return dlgContent;
    };
    ConditionalFormatting.prototype.validateCfInput = function (e) {
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        var text = e.target.value;
        var btn = dialogInst.dialogInstance.element.getElementsByClassName('e-clearall-btn')[0];
        if (text && (e.target.classList.contains('e-between') || e.target.parentElement.querySelector('.e-between'))) {
            text = e.target.parentElement.querySelector((e.target.classList.contains('e-between') ? '.e-input' : '.e-between')).value;
        }
        btn.disabled = !(text.trim());
    };
    ConditionalFormatting.prototype.checkCellHandler = function (rowIdx, colIdx, conditionalFormat) {
        var isApply = false;
        var ranges = conditionalFormat.range.trim().split(',');
        for (var rangeIdx = 0; rangeIdx < ranges.length; rangeIdx++) {
            var cFrange = ranges[rangeIdx];
            cFrange = cFrange.indexOf(':') > -1 ? cFrange : cFrange + ':' + cFrange;
            var indexes = getRangeIndexes(cFrange);
            if (rowIdx >= indexes[0] && rowIdx <= indexes[2] && colIdx >= indexes[1] && colIdx <= indexes[3]) {
                isApply = true;
                break;
            }
        }
        return isApply;
    };
    ConditionalFormatting.prototype.getDlgText = function (action) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var result = '';
        switch (action) {
            case l10n.getConstant('GreaterThan') + '...':
                result = l10n.getConstant('FormatCellsGreaterThan');
                break;
            case l10n.getConstant('LessThan') + '...':
                result = l10n.getConstant('FormatCellsLessThan');
                break;
            case l10n.getConstant('Between') + '...':
                result = l10n.getConstant('FormatCellsBetween');
                break;
            case l10n.getConstant('CFEqualTo') + '...':
                result = l10n.getConstant('FormatCellsEqualTo');
                break;
            case l10n.getConstant('TextThatContains') + '...':
                result = l10n.getConstant('FormatCellsThatContainTheText');
                break;
            case l10n.getConstant('ADateOccuring') + '...':
                result = l10n.getConstant('FormatCellsThatContainADateOccurring');
                break;
            case l10n.getConstant('DuplicateValues') + '...':
                result = l10n.getConstant('FormatCellsDuplicate');
                break;
            case l10n.getConstant('Top10Items') + '...':
                result = l10n.getConstant('FormatCellsTop');
                break;
            case l10n.getConstant('Top10') + ' %...':
                result = l10n.getConstant('FormatCellsTop');
                break;
            case l10n.getConstant('Bottom10Items') + '...':
                result = l10n.getConstant('FormatCellsBottom');
                break;
            case l10n.getConstant('Bottom10') + ' %...':
                result = l10n.getConstant('FormatCellsBottom');
                break;
            case l10n.getConstant('AboveAverage') + '...':
                result = l10n.getConstant('FormatCellsAbove');
                break;
            case l10n.getConstant('BelowAverage') + '...':
                result = l10n.getConstant('FormatCellsBelow');
                break;
        }
        return result;
    };
    ConditionalFormatting.prototype.cFInitialRender = function (args) {
        var cFRules = this.parent.getActiveSheet().conditionalFormats;
        if (cFRules) {
            for (var cFRIdx = 0; cFRIdx < cFRules.length; cFRIdx++) {
                var isApply = false;
                isApply = this.checkCellHandler(args.rowIdx, args.colIdx, cFRules[cFRIdx]);
                if (isApply) {
                    this.cFInitialCheckHandler({
                        rowIdx: args.rowIdx, colIdx: args.colIdx,
                        cell: args.cell, td: args.td, conditionalFormat: cFRules[cFRIdx]
                    });
                }
            }
        }
    };
    ConditionalFormatting.prototype.triggetConditionalFormatEvent = function (args, isAction) {
        if (isAction && (args.conditionalFormat.value || args.conditionalFormat.type === 'AboveAverage' || args.conditionalFormat.type ===
            'BelowAverage' || args.conditionalFormat.type === 'Duplicate')) {
            this.parent.trigger('beforeConditionalFormat', args);
        }
    };
    ConditionalFormatting.prototype.cFInitialCheckHandler = function (args) {
        var formatStyle;
        var isApply = false;
        var cFColors = ['e-redft', 'e-yellowft', 'e-greenft', 'e-redf', 'e-redt'];
        var value = args.cell.value || '';
        var td = args.td || this.parent.getCell(args.rowIdx, args.colIdx);
        if (!td) {
            return;
        }
        var cFRule = args.conditionalFormat;
        cFRule.type = cFRule.type || 'GreaterThan';
        cFRule.cFColor = cFRule.cFColor ? cFRule.cFColor : cFRule.format ? cFRule.cFColor : 'RedFT';
        isApply = this.cFRCheck(cFRule, value, td, args.rowIdx, args.colIdx, true);
        this.triggetConditionalFormatEvent({ conditionalFormat: cFRule, cell: args.cell, element: td, address: getCellAddress(args.rowIdx, args.colIdx), apply: isApply }, args.isAction);
        if (isApply) {
            for (var idx = 0; idx < cFColors.length; idx++) {
                if (td.classList.contains(cFColors[idx])) {
                    td.classList.remove(cFColors[idx]);
                    break;
                }
            }
            if (cFRule.format && cFRule.format.style) {
                formatStyle = cFRule.format.style;
            }
            var style = {};
            if (cFRule.cFColor) {
                td.classList.add('e-' + cFRule.cFColor.toLowerCase());
                style = this.setFormat(style, cFRule);
            }
            else {
                style = formatStyle;
            }
            if (style.backgroundColor) {
                td.style.setProperty('background-color', style.backgroundColor);
            }
            if (style.color) {
                td.style.setProperty('color', style.color);
            }
            if (style.fontWeight) {
                td.style.setProperty('font-weight', style.fontWeight);
            }
            if (style.fontStyle) {
                td.style.setProperty('font-style', style.fontStyle);
            }
            if (style.textDecoration) {
                td.style.setProperty('text-decoration', style.textDecoration);
            }
        }
    };
    ConditionalFormatting.prototype.checkConditionalFormatHandler = function (args) {
        if (args.preventIfSheetNotRendered && !closest(this.parent.getMainContent(), '.e-sheet')) {
            return;
        }
        var indexes;
        var isApply = false;
        var result = false;
        var sheet = this.parent.getActiveSheet();
        var cell = args.cell;
        var td = args.td || this.parent.getCell(args.rowIdx, args.colIdx);
        var cFRules = sheet.conditionalFormats;
        var value = !cell ? '' : !isNullOrUndefined(cell.value) ? cell.value : '';
        var cFColors = ['e-redft', 'e-yellowft', 'e-greenft', 'e-redf', 'e-redt'];
        if (!cFRules || cFRules.length < 1) {
            return;
        }
        for (var cFRuleIdx = cFRules.length - 1; cFRuleIdx >= 0; cFRuleIdx--) {
            var cFRanges = cFRules[cFRuleIdx].range.trim().split(',');
            for (var rangeIdx = 0; rangeIdx < cFRanges.length; rangeIdx++) {
                var range = cFRanges[rangeIdx];
                range = range.indexOf(':') > -1 ? range : range + ':' + range;
                indexes = getRangeIndexes(range);
                if (args.rowIdx >= indexes[0] && args.colIdx >= indexes[1] && args.rowIdx <= indexes[2] && args.colIdx <= indexes[3]) {
                    result = true;
                    break;
                }
            }
            if (result) {
                if (('GreaterThan' + 'LessThan' + 'EqualTo' + 'Between' + 'ContainsText' +
                    'DateOccur').includes(sheet.conditionalFormats[cFRuleIdx].type)) {
                    var cellVal = getCell(args.rowIdx, args.colIdx, sheet) && getCell(args.rowIdx, args.colIdx, sheet).value ?
                        getCell(args.rowIdx, args.colIdx, sheet).value : '';
                    if (isNullOrUndefined(cellVal) && cellVal === '') {
                        isApply = false;
                    }
                    else {
                        isApply = this.cFRCheck(sheet.conditionalFormats[cFRuleIdx], cellVal, td);
                    }
                    this.setColor(td, args.rowIdx, args.colIdx, cFRuleIdx, isApply, args.isAction);
                }
                else if (('Top10Items' + 'Bottom10Items' + 'Top10%' + 'Bottom10%' + 'AboveAverage' +
                    'BelowAverage' + 'Duplicate' + 'Unique').includes(sheet.conditionalFormats[cFRuleIdx].type)) {
                    for (var rangeIdx = 0; rangeIdx < cFRanges.length; rangeIdx++) {
                        var range = cFRanges[rangeIdx];
                        range = range.indexOf(':') > -1 ? range : range + ':' + range;
                        indexes = getRangeIndexes(range);
                        for (var rowIdx = indexes[0]; rowIdx <= indexes[2]; rowIdx++) {
                            if (!sheet.rows[rowIdx]) {
                                setRow(sheet, rowIdx, {});
                            }
                            for (var colIdx = indexes[1]; colIdx <= indexes[3]; colIdx++) {
                                if (!sheet.rows[rowIdx].cells || !sheet.rows[rowIdx].cells[colIdx]) {
                                    setCell(rowIdx, colIdx, sheet, {});
                                }
                                var cellVal = getCell(rowIdx, colIdx, sheet) && getCell(rowIdx, colIdx, sheet).value ?
                                    getCell(rowIdx, colIdx, sheet).value : '';
                                isApply = this.cFRCheck(sheet.conditionalFormats[cFRuleIdx], cellVal, td, rowIdx, colIdx, false);
                                td = this.parent.getCell(rowIdx, colIdx);
                                this.setColor(td, rowIdx, colIdx, cFRuleIdx, isApply, args.isAction);
                            }
                        }
                    }
                }
                else if (('BlueDataBar' + 'GreenDataBar' + 'RedDataBar' + 'OrangeDataBar' + 'LightBlueDataBar' + 'PurpleColorScale' +
                    'GYRColorScale' + 'RYGColorScale' + 'GWRColorScale' + 'RWGColorScale' + 'BWRColorScale' + 'RWBColorScale' +
                    'WRColorScale' + 'RWColorScale' + 'GWColorScale' + 'WGColorScale' + 'GYColorScale' + 'YGColorScale' + 'ThreeArrows' +
                    'ThreeArrowsGray' + 'FourArrowsGray' + 'FourArrows' + 'FiveArrowsGray' + 'FiveArrows' + 'ThreeTrafficLights1' +
                    'ThreeTrafficLights2' + 'ThreeSigns' + 'FourTrafficLights' + 'FourRedToBlack' + 'ThreeSymbols' + 'ThreeSymbols2' +
                    'ThreeFlags' + 'FourRating' + 'FiveQuarters' + 'FiveRating' + 'ThreeTriangles' + 'ThreeStars' + 'FiveBoxes').
                    includes(sheet.conditionalFormats[cFRuleIdx].type)) {
                    for (var idx = 0; idx < cFColors.length; idx++) {
                        if (td.classList.contains(cFColors[idx])) {
                            td.classList.remove(cFColors[idx]);
                        }
                    }
                    isApply = this.cFRCheck(sheet.conditionalFormats[cFRuleIdx], value, td, args.rowIdx, args.colIdx, false);
                }
                result = false;
            }
            if (isApply) {
                break;
            }
        }
    };
    ConditionalFormatting.prototype.setColor = function (td, rIdx, cIdx, cFRuleIdx, isApply, isAction) {
        var sheet = this.parent.getActiveSheet();
        var cFRules = sheet.conditionalFormats;
        this.triggetConditionalFormatEvent({ conditionalFormat: cFRules[cFRuleIdx], cell: getCell(rIdx, cIdx, sheet), element: td, address: getCellAddress(rIdx, cIdx),
            apply: isApply }, isAction);
        var cFColors = ['e-redft', 'e-yellowft', 'e-greenft', 'e-redf', 'e-redt'];
        var isActiveCF = false;
        if (cFRules[cFRuleIdx].cFColor) {
            if (td && td.classList.contains('e-' + cFRules[cFRuleIdx].cFColor.toLowerCase())) {
                isActiveCF = true;
            }
        }
        else if (cFRules[cFRuleIdx].format.style.backgroundColor && td.style.backgroundColor) {
            var rgb = this.hexToRgb(cFRules[cFRuleIdx].format.style.backgroundColor);
            if ('rgb(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ')' === td.style.backgroundColor) {
                isActiveCF = true;
            }
        }
        if (isApply) {
            if (isActiveCF) {
                for (var idx = 0; idx < cFColors.length; idx++) {
                    if (td.classList.contains(cFColors[idx])) {
                        td.classList.remove(cFColors[idx]);
                        break;
                    }
                }
            }
            var style = {};
            if (cFRules[cFRuleIdx].cFColor) {
                td && td.classList.add('e-' + cFRules[cFRuleIdx].cFColor.toLowerCase());
                style = this.setFormat(style, cFRules[cFRuleIdx]);
            }
            else {
                style = cFRules[cFRuleIdx].format.style;
            }
            this.parent.notify(applyCellFormat, {
                style: style, rowIdx: rIdx, colIdx: cIdx,
                lastCell: true, isHeightCheckNeeded: true, manualUpdate: true
            });
        }
        else {
            if (isActiveCF) {
                for (var idx = 0; idx < cFColors.length; idx++) {
                    if (td.classList.contains(cFColors[idx])) {
                        td.classList.remove(cFColors[idx]);
                        break;
                    }
                }
                td.removeAttribute('style');
            }
            var cell = getCell(rIdx, cIdx, this.parent.getActiveSheet(), null, true);
            var style = extend({}, this.parent.commonCellStyle, cell.style);
            this.parent.notify(applyCellFormat, {
                style: style, rowIdx: rIdx, colIdx: cIdx
            });
        }
    };
    ConditionalFormatting.prototype.hexToRgb = function (hex) {
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : null;
    };
    ConditionalFormatting.prototype.cFRCheck = function (cFRule, value, td, rIdx, cIdx, isInitial) {
        var cFRuleValue1 = '';
        var cFRuleValue2 = '';
        var cellValue = value.toString();
        if (cFRule.value) {
            var valueArr = cFRule.value.split(',').filter(function (value) { return !!value.trim(); });
            if (valueArr.length > 1) {
                if (valueArr[0].split('(').length > 1) {
                    var valueStr = '';
                    for (var idx = 0; idx < valueArr.length; idx++) {
                        valueStr += valueArr[idx] + ',';
                        if (valueStr.split('(').length === valueStr.split(')').length && cFRuleValue1 === '') {
                            cFRuleValue1 = valueStr.substring(0, valueStr.length - 1);
                            valueStr = '';
                        }
                    }
                    cFRuleValue2 = valueStr.substring(0, valueStr.length - 1);
                }
                else {
                    cFRuleValue1 = valueArr[0];
                    for (var idx = 1; idx < valueArr.length; idx++) {
                        cFRuleValue2 += idx + 1 === valueArr.length ? valueArr[idx] : valueArr[idx] + ',';
                    }
                }
            }
            else {
                cFRuleValue1 = valueArr.length === 1 ? valueArr[0] : cFRule.value;
            }
        }
        var isApply = false;
        var type = cFRule.type;
        if (('BlueDataBar' + 'GreenDataBar' + 'RedDataBar' + 'OrangeDataBar' + 'LightBlueDataBar' + 'PurpleDataBar').includes(type)) {
            type = 'DataBar';
        }
        if (('GYRColorScale' + 'RYGColorScale' + 'GWRColorScale' + 'RWGColorScale' + 'BWRColorScale' + 'RWBColorScale' + 'WRColorScale' +
            'RWColorScale' + 'GWColorScale' + 'WGColorScale' + 'GYColorScale' + 'YGColorScale').includes(type)) {
            type = 'ColorScale';
        }
        if (('ThreeArrows' + 'ThreeArrowsGray' + 'FourArrowsGray' + 'FourArrows' + 'FiveArrowsGray' +
            'FiveArrows' + 'ThreeTrafficLights1' + 'ThreeTrafficLights2' + 'ThreeSigns' + 'FourTrafficLights' +
            'FourRedToBlack' + 'ThreeSymbols' + 'ThreeSymbols2' + 'ThreeFlags' + 'FourRating' + 'FiveQuarters' +
            'FiveRating' + 'ThreeTriangles' + 'ThreeStars' + 'FiveBoxes').includes(type)) {
            type = 'IconSet';
        }
        var dateEventArgs = {};
        switch (type) {
            case 'GreaterThan':
                isApply = this.isGreaterThanLessThan(cFRule, cellValue, cFRuleValue1, true);
                break;
            case 'LessThan':
                isApply = this.isGreaterThanLessThan(cFRule, cellValue, cFRuleValue1, false);
                break;
            case 'Between':
                isApply = this.isBetWeen(cFRule, cellValue, cFRuleValue1, cFRuleValue2);
                break;
            case 'EqualTo':
                isApply = this.isEqualTo(cFRule, cellValue, cFRuleValue1);
                break;
            case 'ContainsText':
                isApply = this.isContainsText(cellValue, cFRuleValue1);
                break;
            case 'DateOccur':
                dateEventArgs = {
                    value: cFRuleValue1,
                    rowIndex: 0,
                    colIndex: 0,
                    sheetIndex: 0,
                    updatedVal: ''
                };
                this.parent.notify(checkDateFormat, dateEventArgs);
                if (cellValue === dateEventArgs.updatedVal) {
                    isApply = true;
                }
                break;
            case 'Unique':
            case 'Duplicate':
                isApply = this.isDuplicateUnique(cellValue, cFRule);
                break;
            case 'Top10Items':
                isApply = this.isTopBottomTenValue(cellValue, cFRuleValue1, cFRule, true);
                break;
            case 'Bottom10Items':
                isApply = this.isTopBottomTenValue(cellValue, cFRuleValue1, cFRule, false);
                break;
            case 'Top10Percentage':
                isApply = this.isTopBottomTenPercentage(cellValue, cFRuleValue1, cFRule, true);
                break;
            case 'Bottom10Percentage':
                isApply = this.isTopBottomTenPercentage(cellValue, cFRuleValue1, cFRule, false);
                break;
            case 'AboveAverage':
                isApply = this.isAboveBelowAverage(cellValue, cFRuleValue1, cFRule, true);
                break;
            case 'BelowAverage':
                isApply = this.isAboveBelowAverage(cellValue, cFRuleValue1, cFRule, false);
                break;
            case 'DataBar':
                this.isDataBarColorScalesIconSets(type, cellValue, cFRule, td, rIdx, cIdx, isInitial);
                break;
            case 'ColorScale':
                this.isDataBarColorScalesIconSets(type, cellValue, cFRule, td, rIdx, cIdx, isInitial);
                break;
            case 'IconSet':
                this.isDataBarColorScalesIconSets(type, cellValue, cFRule, td, rIdx, cIdx, isInitial);
                break;
        }
        return isApply;
    };
    ConditionalFormatting.prototype.isDataBarColorScalesIconSets = function (type, cellValue, cFRule, td, rIdx, cIdx, isInitial) {
        var sheet = this.parent.getActiveSheet();
        if (isInitial) {
            if (type === 'DataBar') {
                this.applyDataBars(cellValue, cFRule, td, rIdx, cIdx);
            }
            else if (type === 'ColorScale') {
                this.applyColorScale(cellValue, cFRule, td, rIdx, cIdx);
            }
            else {
                this.applyIconSet(cellValue, cFRule, td, rIdx, cIdx);
            }
        }
        else {
            td = null;
            var rangeArr = cFRule.range.split(',');
            for (var rangeIdx = 0; rangeIdx < rangeArr.length; rangeIdx++) {
                var selIndexes = getRangeIndexes(rangeArr[rangeIdx]);
                for (var rIdx_1 = selIndexes[0]; rIdx_1 <= selIndexes[2]; rIdx_1++) {
                    for (var cIdx_1 = selIndexes[1]; cIdx_1 <= selIndexes[3]; cIdx_1++) {
                        if (getCell(rIdx_1, cIdx_1, sheet)) {
                            var cellVal = getCell(rIdx_1, cIdx_1, sheet).value;
                            td = this.parent.getCell(rIdx_1, cIdx_1);
                            if (type === 'DataBar') {
                                this.applyDataBars(cellVal, cFRule, td, rIdx_1, cIdx_1);
                            }
                            else if (type === 'ColorScale') {
                                this.applyColorScale(cellVal, cFRule, td, rIdx_1, cIdx_1);
                            }
                            else {
                                this.applyIconSet(cellVal, cFRule, td, rIdx_1, cIdx_1);
                            }
                        }
                    }
                }
            }
        }
    };
    ConditionalFormatting.prototype.applyIconSet = function (val, cFRule, tdEle, rIdx, cIdx) {
        var value = parseInt(val, 10);
        var iconList = this.getIconList(cFRule.type).split(',');
        var valArr = [];
        var sheet = this.parent.getActiveSheet();
        var actCell = sheet.rows[rIdx] && sheet.rows[rIdx].cells[cIdx] ? sheet.rows[rIdx].cells[cIdx] : null;
        if (!actCell) {
            return;
        }
        var td = tdEle ||
            this.parent.getMainContent().getElementsByClassName('e-row')[rIdx].getElementsByClassName('e-cell')[cIdx];
        var rangeArr = cFRule.range.split(',');
        for (var rIdx_2 = 0; rIdx_2 < rangeArr.length; rIdx_2++) {
            var selIndexes = getRangeIndexes(rangeArr[rIdx_2]);
            valArr = this.getNumericArray(selIndexes, valArr);
        }
        valArr = valArr.sort(function (n1, n2) { return n1 - n2; });
        var min = valArr[0];
        var max = valArr[valArr.length - 1];
        var currentSymbol;
        if (iconList.length === 3) {
            var maxPercent = min + (0.67 * ((max) - (min)));
            var minPercent = min + (0.33 * ((max) - (min)));
            currentSymbol =
                'e-' + (value >= maxPercent ? iconList[0].trim() : value >= minPercent ? iconList[1].trim() : iconList[2].trim());
        }
        else if (iconList.length === 4) {
            var percent1 = min + (0.25 * ((max) - (min)));
            var percent2 = min + (0.50 * ((max) - (min)));
            var percent3 = min + (0.75 * ((max) - (min)));
            currentSymbol =
                'e-' + (value >= percent3 ? iconList[0].trim() : value >= percent2 ? iconList[1].trim() : value >= percent1 ?
                    iconList[2].trim() : iconList[3].trim());
        }
        else if (iconList.length === 5) {
            var percent1 = min + (0.20 * ((max) - (min)));
            var percent2 = min + (0.40 * ((max) - (min)));
            var percent3 = min + (0.60 * ((max) - (min)));
            var percent4 = min + (0.80 * ((max) - (min)));
            currentSymbol =
                'e-' + (value >= percent4 ? iconList[0].trim() : value >= percent3 ? iconList[1].trim() : value >= percent2 ?
                    iconList[2].trim() : value >= percent1 ? iconList[3].trim() : iconList[4].trim());
        }
        if (!isNullOrUndefined(actCell)) {
            var cfIcon = this.parent.createElement('span', { className: 'e-icon' });
            cfIcon.classList.add('e-iconsetspan');
            cfIcon.classList.add(currentSymbol);
            this.applyIconSetIcon({ rowIndex: rIdx, colIndex: cIdx }, cfIcon, td);
        }
    };
    ConditionalFormatting.prototype.applyIconSetIcon = function (activeObj, cfIcon, td) {
        var sheet = this.parent.getActiveSheet();
        var rowIdx = activeObj.rowIndex;
        var colIdx = activeObj.colIndex;
        var cellVal = getCell(rowIdx, colIdx, sheet).value;
        var activeEle = td;
        if (activeEle.classList.contains('e-iconset') && activeEle.querySelector('.e-iconsetspan')) {
            activeEle.removeChild(activeEle.querySelector('.e-iconsetspan'));
        }
        if (isNumber(cellVal)) {
            activeEle.insertBefore(cfIcon, activeEle.childNodes[0]);
            activeEle.classList.add('e-iconset');
        }
    };
    ConditionalFormatting.prototype.getIconList = function (iconName) {
        var result = '3arrows-1,3arrows-2,3arrows-3';
        switch (iconName) {
            case 'ThreeArrows':
                return '3arrows-1,3arrows-2,3arrows-3';
            case 'ThreeArrowsGray':
                return '3arrowsgray-1,3arrowsgray-2,3arrowsgray-3';
            case 'FourArrowsGray':
                return '4arrowsgray-1,4arrowsgray-2,4arrowsgray-3,4arrowsgray-4';
            case 'FourArrows':
                return '4arrows-1,4arrows-2,4arrows-3,4arrows-4';
            case 'FiveArrowsGray':
                return '5arrowsgray-1,5arrowsgray-2,5arrowsgray-3,5arrowsgray-4,5arrowsgray-5';
            case 'FiveArrows':
                return '5arrows-1,5arrows-2,5arrows-3,5arrows-4,5arrows-5';
            case 'ThreeTrafficLights1':
                return '3trafficlights-1,3trafficlights-2,3trafficlights-3';
            case 'ThreeTrafficLights2':
                return '3rafficlights2-1,3rafficlights2-2,3rafficlights2-3';
            case 'ThreeSigns':
                return '3signs-1,3signs-2,3signs-3';
            case 'FourTrafficLights':
                return '4trafficlights-1,4trafficlights-2,4trafficlights-3,4trafficlights-4';
            case 'FourRedToBlack':
                return '4redtoblack-1,4redtoblack-2,4redtoblack-3,4redtoblack-4';
            case 'ThreeSymbols':
                return '3symbols-1,3symbols-2,3symbols-3';
            case 'ThreeSymbols2':
                return '3symbols2-1,3symbols2-2,3symbols2-3';
            case 'ThreeFlags':
                return '3flags-1,3flags-2,3flags-3';
            case 'FourRating':
                return '4rating-1,4rating-2,4rating-3,4rating-4';
            case 'FiveQuarters':
                return '5quarters-1,5quarters-2,5quarters-3,5quarters-4,5quarters-5';
            case 'FiveRating':
                return '5rating-1,5rating-2,5rating-3,5rating-4,5rating-5';
            case 'ThreeTriangles':
                return '3triangles-1,3triangles-2,3triangles-3';
            case 'ThreeStars':
                return '3stars-1,3stars-2,3stars-3';
            case 'FiveBoxes':
                return '5boxes-1,5boxes-2,5boxes-3,5boxes-4,5boxes-5';
        }
        return result;
    };
    ConditionalFormatting.prototype.applyColorScale = function (val, cFRule, tdEle, rIdx, cIdx) {
        var sheet = this.parent.getActiveSheet();
        var value = parseInt(val, 10);
        var id;
        var valArr = [];
        var colors = this.getColor(cFRule.type);
        var actCell = sheet.rows[rIdx] && sheet.rows[rIdx].cells[cIdx] ? sheet.rows[rIdx].cells[cIdx] : null;
        if (!actCell) {
            return;
        }
        var rangeArr = cFRule.range.split(',');
        var td = tdEle ||
            this.parent.getMainContent().getElementsByClassName('e-row')[rIdx].getElementsByClassName('e-cell')[cIdx];
        for (var rIdx_3 = 0; rIdx_3 < rangeArr.length; rIdx_3++) {
            var selIndexes = getRangeIndexes(rangeArr[rIdx_3]);
            valArr = this.getNumericArray(selIndexes, valArr);
        }
        valArr = valArr.sort(function (n1, n2) { return n1 - n2; }).reverse();
        for (var i = 0; i < valArr.length; i++) {
            if (valArr[i] === value) {
                id = i;
                break;
            }
        }
        var hexcode = (id === 0) ? colors[0] : (id === valArr.length - 1) ? colors[colors.length - 1] :
            (valArr.length === 3 && id === 1) ? colors[1] : this.getGradient(id, colors[0], colors[1], colors[2], valArr.length);
        if (!isNullOrUndefined(actCell)) {
            var style = {};
            if (!isNullOrUndefined(id)) {
                style = { backgroundColor: hexcode };
                td.style.backgroundColor = hexcode;
            }
            else {
                style = this.parent.getCellStyleValue(['backgroundColor'], [rIdx, cIdx]);
                td.style.backgroundColor = style.backgroundColor;
            }
        }
    };
    ConditionalFormatting.prototype.applyDataBars = function (val, cFRule, tdEle, rIdx, cIdx) {
        var sheet = this.parent.getActiveSheet();
        var left = {};
        var right = {};
        var posColor = '';
        var negColor = '';
        var cFColor = cFRule.type;
        var actCell = sheet.rows[rIdx].cells && sheet.rows[rIdx].cells[cIdx] ? sheet.rows[rIdx].cells[cIdx] : null;
        if (!actCell) {
            return;
        }
        var valArr = [];
        var row = this.parent.getMainContent().getElementsByClassName('e-row')[rIdx];
        var td = tdEle ||
            this.parent.getMainContent().getElementsByClassName('e-row')[rIdx].getElementsByClassName('e-cell')[cIdx];
        var rowHeight = !row ? 20 : row.style ? parseInt(row.style.height, 10) : 20;
        var posArr = [];
        var negArr = [];
        var topVal;
        var leftStandardWidth = 0;
        var value = parseInt(val, 10);
        var rangeArr = cFRule.range.split(',');
        for (var rIdx_4 = 0; rIdx_4 < rangeArr.length; rIdx_4++) {
            var selIndexes = getRangeIndexes(rangeArr[rIdx_4]);
            valArr = this.getNumericArray(selIndexes, valArr);
        }
        for (var idx = 0; idx < valArr.length; idx++) {
            for (var idx_1 = 0; idx_1 < valArr.length; idx_1++) {
                if (valArr[idx_1] > 0) {
                    posArr.push(valArr[idx_1]);
                }
                else {
                    negArr.push(valArr[idx_1]);
                }
            }
        }
        cFColor = cFColor === 'BlueDataBar' ? 'B' : cFColor === 'GreenDataBar' ? 'G' : cFColor === 'RedDataBar' ? 'R' :
            cFColor === 'OrangeDataBar' ? 'O' : cFColor === 'LightBlueDataBar' ? 'LB' : cFColor === 'PurpleDataBar' ? 'P' : '';
        posColor = this.getColor(cFColor)[0];
        negColor = this.getColor('R')[0];
        posArr = posArr.sort(function (n1, n2) { return n1 - n2; }).reverse();
        negArr = negArr.sort(function (n1, n2) { return n1 - n2; });
        if (negArr.length && posArr.length) {
            topVal = posArr[0] + Math.abs(negArr[0]);
            leftStandardWidth = (Math.abs((negArr[0] / topVal) * 100));
        }
        else if (negArr.length || posArr.length) {
            topVal = negArr.length ? negArr[0] : posArr[0];
        }
        else {
            return;
        }
        if (td) {
            if (isNullOrUndefined(value) || val === '') {
                if (td.getElementsByClassName('e-cf-databar')[0]) {
                    td.removeChild(td.getElementsByClassName('e-cf-databar')[0]);
                }
            }
        }
        if (isNumber(value)) {
            var databar = this.parent.createElement('div', { id: 'spreadsheet-databar', className: 'e-cf-databar' });
            var leftSpan = this.parent.createElement('span', { id: 'spreadsheet-leftspan', className: 'e-databar' });
            var rightSpan = this.parent.createElement('span', { id: 'spreadsheet-rightspan', className: 'e-databar' });
            var dataSpan = this.parent.createElement('span', { id: 'spreadsheet-dataspan', className: 'e-databar-value' });
            var iconSetSpan = void 0;
            left = leftSpan.style;
            right = rightSpan.style;
            databar.appendChild(dataSpan);
            databar.insertBefore(rightSpan, dataSpan);
            databar.insertBefore(leftSpan, rightSpan);
            if (td.querySelector('.e-iconsetspan')) {
                iconSetSpan = td.querySelector('.e-iconsetspan');
            }
            td.textContent = '';
            td.appendChild(databar);
            if (iconSetSpan) {
                td.insertBefore(iconSetSpan, td.firstElementChild);
            }
            dataSpan.innerHTML = this.parent.getDisplayText(actCell);
            databar.style.height = rowHeight - 1 + 'px';
            dataSpan.style.fontSize = '11pt';
            if (!negArr.length) {
                right.width = '' + Math.ceil(Math.abs((value / topVal) * 100)) + '%';
                right.height = rowHeight - 3 + 'px';
                right.backgroundColor = cFColor = posColor;
                right.left = '0px';
            }
            else if (!posArr.length) {
                right.width = '' + Math.ceil(Math.abs((value / topVal) * 100)) + '%';
                right.height = rowHeight - 3 + 'px';
                right.backgroundColor = cFColor = negColor;
                right.left = '0px';
            }
            else {
                if (value > -1) {
                    left.width = leftStandardWidth + '%';
                    left.height = rowHeight - 3 + 'px'; // -3 buffer of data bar.
                    left.backgroundColor = 'transparent';
                    left.left = '0px';
                    right.width = '' + Math.ceil(Math.abs((value / topVal) * 100)) + '%';
                    right.height = rowHeight - 3 + 'px';
                    right.backgroundColor = cFColor = posColor;
                    right.left = leftStandardWidth + '%';
                }
                else if (value < 0) {
                    left.width = '' + Math.ceil(Math.abs((value / topVal) * 100)) + '%';
                    left.height = rowHeight - 3 + 'px';
                    left.backgroundColor = negColor;
                    if (left.width === leftStandardWidth + '%') {
                        left.left = '0px';
                    }
                    else {
                        left.right = (100 - leftStandardWidth) + '%';
                    }
                }
            }
        }
    };
    ConditionalFormatting.prototype.getNumericArray = function (selIndexes, valArr) {
        var sheet = this.parent.getActiveSheet();
        for (var rIdx = selIndexes[0]; rIdx <= selIndexes[2]; rIdx++) {
            for (var cIdx = selIndexes[1]; cIdx <= selIndexes[3]; cIdx++) {
                var cellVal = getCell(rIdx, cIdx, sheet) && getCell(rIdx, cIdx, sheet).value ? getCell(rIdx, cIdx, sheet).value : '';
                if (!isNullOrUndefined(cellVal) && !isNumber(cellVal) && !isDateTime(cellVal)) {
                    continue;
                }
                else {
                    var cellValue = parseInt(cellVal, 10);
                    if (!isNullOrUndefined(cellVal) && cellVal !== '') {
                        valArr.push(cellValue);
                    }
                }
            }
        }
        return valArr;
    };
    ConditionalFormatting.prototype.getColor = function (cfColor) {
        if (cfColor === 'LB') {
            return ['#008aef'];
        }
        var colorCodeArr = cfColor.split('');
        var colorArr = [];
        for (var i = 0; i < colorCodeArr.length; i++) {
            switch (colorCodeArr[i]) {
                case 'G':
                    colorArr.push('#63be7b');
                    break;
                case 'Y':
                    colorArr.push('#ffeb84');
                    break;
                case 'R':
                    colorArr.push('#f8696b');
                    break;
                case 'W':
                    colorArr.push('#ffffff');
                    break;
                case 'B':
                    colorArr.push('#5a8ac6');
                    break;
                case 'O':
                    colorArr.push('#ffb628');
                    break;
                case 'LB':
                    colorArr.push('#008aef');
                    break;
                case 'P':
                    colorArr.push('#d6007b');
                    break;
            }
        }
        return colorArr;
    };
    ConditionalFormatting.prototype.getGradient = function (t, start, middle, end, large) {
        if (isNullOrUndefined(end)) {
            return this.getLinear(start, middle, t / large);
        }
        else {
            var center = large / 2;
            return t >= center ? this.getLinear(middle, end, Math.abs((t - center) / center)) : this.getLinear(start, middle, t / center);
        }
    };
    ConditionalFormatting.prototype.getLinear = function (s, e, x) {
        var r = this.byteLinear(s[1] + s[2], e[1] + e[2], x);
        var g = this.byteLinear(s[3] + s[4], e[3] + e[4], x);
        var b = this.byteLinear(s[5] + s[6], e[5] + e[6], x);
        return '#' + r + g + b;
    };
    ConditionalFormatting.prototype.byteLinear = function (a, b, x) {
        var y = (parseInt(a, 16) * (1 - x) + parseInt(b, 16) * x) | 0;
        return Math.abs(y).toString(16);
    };
    ConditionalFormatting.prototype.isGreaterThanLessThan = function (cFRule, value, input, isGrearThan) {
        var txtRegx = new RegExp(/[^.-a-zA-Z 0-9]+/g);
        var isApply = false;
        if (isNumber(value)) {
            if (isNumber(input)) {
                isApply = isGrearThan ? parseFloat(value) > parseFloat(input.replace(txtRegx, '')) :
                    parseFloat(value) < parseFloat(input.replace(txtRegx, ''));
            }
            else {
                var dateEventArgs = {
                    value: input,
                    rowIndex: 0,
                    colIndex: 0,
                    sheetIndex: 0,
                    isDate: false,
                    updatedVal: '',
                    isTime: false
                };
                this.parent.notify(checkDateFormat, dateEventArgs);
                if (dateEventArgs.isDate || dateEventArgs.isTime) {
                    isApply = isGrearThan ? value > dateEventArgs.updatedVal : value < dateEventArgs.updatedVal;
                    cFRule.value = dateEventArgs.updatedVal.toString();
                }
                else {
                    isApply = isGrearThan ? value.toLowerCase() > input.toLowerCase() : value.toLowerCase() < input.toLowerCase();
                }
            }
        }
        else if (value === '' && Number(input) > 0 && !isGrearThan) {
            isApply = true;
        }
        return isApply;
    };
    ConditionalFormatting.prototype.isBetWeen = function (cFRule, value, input1, input2) {
        var txtRegx = new RegExp(/[^.-a-zA-Z 0-9]+/g);
        var isApply = false;
        input1 = input1.replace(txtRegx, '');
        input2 = input2.replace(txtRegx, '');
        if (isNumber(value)) {
            if (isNumber(input1)) {
                isApply = parseFloat(value) >= parseFloat(input1) && parseFloat(value) <= parseFloat(input2);
            }
            else {
                if (input1 && input2) {
                    var dateEventArgs1 = {
                        value: input1,
                        rowIndex: 0,
                        colIndex: 0,
                        sheetIndex: 0,
                        isDate: false,
                        updatedVal: '',
                        isTime: false
                    };
                    var dateEventArgs2 = {
                        value: input2,
                        rowIndex: 0,
                        colIndex: 0,
                        sheetIndex: 0,
                        isDate: false,
                        updatedVal: '',
                        isTime: false
                    };
                    this.parent.notify(checkDateFormat, dateEventArgs1);
                    this.parent.notify(checkDateFormat, dateEventArgs2);
                    if ((dateEventArgs1.isDate || dateEventArgs1.isTime) && (dateEventArgs2.isDate || dateEventArgs2.isTime)) {
                        isApply = value >= dateEventArgs1.updatedVal && value <= dateEventArgs2.updatedVal;
                        cFRule.value = dateEventArgs1.updatedVal.toString() + ',' + dateEventArgs2.updatedVal.toString();
                    }
                    else {
                        isApply = value.toLowerCase() >= input1.toLowerCase() && value.toLowerCase() <= input2.toLowerCase();
                    }
                }
            }
        }
        return isApply;
    };
    ConditionalFormatting.prototype.isEqualTo = function (cFRule, value, input) {
        var txtRegx = new RegExp(/[^.-a-zA-Z 0-9]+/g);
        var isApply = false;
        if (isNumber(value)) {
            if (isNumber(input)) {
                isApply = parseFloat(value) === parseFloat(input.replace(txtRegx, ''));
            }
            else {
                var dateTimeArgs = {
                    value: input,
                    rowIndex: 0,
                    colIndex: 0,
                    sheetIndex: 0,
                    isDate: false,
                    updatedVal: '',
                    isTime: false
                };
                this.parent.notify(checkDateFormat, dateTimeArgs);
                if (dateTimeArgs.isTime || dateTimeArgs.isDate) {
                    isApply = value === dateTimeArgs.updatedVal;
                    cFRule.value = dateTimeArgs.updatedVal.toString();
                }
                else {
                    isApply = value.toLowerCase() === input.toLowerCase();
                }
            }
        }
        return isApply;
    };
    ConditionalFormatting.prototype.isContainsText = function (value, input) {
        var txtRegx = new RegExp(/[^.-a-zA-Z 0-9]+/g);
        var isApply = false;
        if (isNullOrUndefined(value) || !value.length) {
            isApply = false;
        }
        else if (isNumber(input.replace(txtRegx, ''))) {
            input = input.replace(txtRegx, '');
            if (isDateTime(value)) {
                value = ((dateToInt(value))).toString();
            }
            isApply = value.indexOf(input) > -1;
        }
        else if (isDateTime(input)) {
            if (isDateTime(value)) {
                value = dateToInt(value).toString();
            }
            isApply = value.indexOf(dateToInt(input).toString()) > -1;
        }
        else {
            isApply = value.toLowerCase().indexOf(input.toLowerCase()) > -1;
        }
        return isApply;
    };
    ConditionalFormatting.prototype.isTopBottomTenValue = function (cellValue, inp, cFRule, isTop) {
        var sheet = this.parent.getActiveSheet();
        var txtRegx = new RegExp(/[^.-a-zA-Z 0-9]+/g);
        var value = parseInt(cellValue, 10);
        var input = parseInt(inp, 10);
        var result = false;
        if (isNumber(inp)) {
            if (isNumber(cellValue)) {
                value = parseFloat(cellValue);
                input = parseFloat(inp.replace(txtRegx, ''));
            }
            else if (isDateTime(cellValue)) {
                value = dateToInt(cellValue);
                input = parseFloat(inp);
            }
            var dataArray = [];
            var cellVal = void 0;
            var rangeArr = cFRule.range.split(',');
            for (var rangeIdx = 0; rangeIdx < rangeArr.length; rangeIdx++) {
                var cFRuleIndexes = getRangeIndexes(rangeArr[rangeIdx]);
                for (var rowIdx = cFRuleIndexes[0]; rowIdx <= cFRuleIndexes[2]; rowIdx++) {
                    for (var colIdx = cFRuleIndexes[1]; colIdx <= cFRuleIndexes[3]; colIdx++) {
                        cellVal = getCell(rowIdx, colIdx, sheet) && getCell(rowIdx, colIdx, sheet).value ?
                            getCell(rowIdx, colIdx, sheet).value : '';
                        if (cellVal && isNumber(cellVal)) {
                            cellVal = parseFloat(cellVal);
                            dataArray.push(cellVal);
                        }
                    }
                }
            }
            dataArray =
                isTop ? dataArray.sort(function (n1, n2) { return n1 - n2; }).reverse() : dataArray.sort(function (n1, n2) { return n1 - n2; });
            dataArray = dataArray.slice(0, input);
            result = (dataArray.indexOf(value) > -1);
        }
        return result;
    };
    ConditionalFormatting.prototype.isTopBottomTenPercentage = function (val, inp, cFRule, isTop) {
        var sheet = this.parent.getActiveSheet();
        var txtRegx = new RegExp(/[^.-a-zA-Z 0-9]+/g);
        var value = parseInt(val, 10);
        var input = parseInt(inp, 10);
        var result = false;
        if (isNumber(inp)) {
            if (isNumber(val)) {
                value = parseFloat(val);
                input = parseFloat(inp.replace(txtRegx, ''));
            }
            else if (isDateTime(val)) {
                value = dateToInt(val);
                input = parseFloat(inp);
            }
            var dataArr = [];
            var cellVal = void 0;
            var count = 0;
            var considerCount = void 0;
            var rangeArr = cFRule.range.split(',');
            for (var rangeIdx = 0; rangeIdx < rangeArr.length; rangeIdx++) {
                var cFRuleIndexes = getRangeIndexes(rangeArr[rangeIdx]);
                for (var rIdx = cFRuleIndexes[0]; rIdx <= cFRuleIndexes[2]; rIdx++) {
                    for (var cIdx = cFRuleIndexes[1]; cIdx <= cFRuleIndexes[3]; cIdx++) {
                        cellVal = getCell(rIdx, cIdx, sheet) && getCell(rIdx, cIdx, sheet).value ? getCell(rIdx, cIdx, sheet).value : '';
                        if (cellVal && isNumber(cellVal)) {
                            cellVal = parseFloat(cellVal);
                            dataArr.push(cellVal);
                        }
                        count++;
                    }
                }
            }
            var diff = 100 / count;
            considerCount = input / diff;
            considerCount = Math.ceil(considerCount);
            dataArr =
                isTop ? dataArr.sort(function (n1, n2) { return n1 - n2; }).reverse() : dataArr.sort(function (n1, n2) { return n1 - n2; });
            dataArr = dataArr.slice(0, considerCount ? considerCount : 1);
            result = (dataArr.indexOf(value) > -1);
        }
        return result;
    };
    ConditionalFormatting.prototype.isAboveBelowAverage = function (val, inp, cFRule, isAbove) {
        var sheet = this.parent.getActiveSheet();
        var value = parseFloat(val);
        var rangeColl = cFRule.range.split(',');
        var result = false;
        var dataArr = [];
        var cellValue;
        var average = 0;
        for (var rangeIdx = 0; rangeIdx < rangeColl.length; rangeIdx++) {
            var cFRuleIndexes = getRangeIndexes(rangeColl[rangeIdx]);
            for (var rIdx = cFRuleIndexes[0]; rIdx <= cFRuleIndexes[2]; rIdx++) {
                for (var cIdx = cFRuleIndexes[1]; cIdx <= cFRuleIndexes[3]; cIdx++) {
                    cellValue = getCell(rIdx, cIdx, sheet) && getCell(rIdx, cIdx, sheet).value ? getCell(rIdx, cIdx, sheet).value : '';
                    if (cellValue && isNumber(cellValue)) {
                        cellValue = parseFloat(cellValue);
                        dataArr.push(cellValue);
                    }
                }
            }
        }
        for (var idx = 0; idx < dataArr.length; idx++) {
            average += dataArr[idx];
        }
        average = average / dataArr.length;
        result = isAbove ? (value > average) : (value < average);
        return result;
    };
    ConditionalFormatting.prototype.isDuplicateUnique = function (val, cFRule) {
        var type = cFRule.type;
        var count = 0;
        var sheet = this.parent.getActiveSheet();
        var value = val;
        var rangeColl = cFRule.range.split(',');
        var cellValue;
        if (isNullOrUndefined(value) || value === '') {
            return false;
        }
        for (var rIdx = 0; rIdx < rangeColl.length; rIdx++) {
            var cFRuleIndexes = getRangeIndexes(rangeColl[rIdx]);
            for (var rowIdx = cFRuleIndexes[0]; rowIdx <= cFRuleIndexes[2]; rowIdx++) {
                for (var colIdx = cFRuleIndexes[1]; colIdx <= cFRuleIndexes[3]; colIdx++) {
                    cellValue = getCell(rowIdx, colIdx, sheet) && getCell(rowIdx, colIdx, sheet).value ?
                        getCell(rowIdx, colIdx, sheet).value.toString() : '';
                    if (cellValue && cellValue !== '') {
                        count = value.toLowerCase() === cellValue.toLowerCase() ? count + 1 : count;
                        if (count === 2) {
                            return type === 'Duplicate' ? true : false;
                        }
                    }
                }
            }
        }
        return type === 'Duplicate' ? false : true;
    };
    ConditionalFormatting.prototype.setFormat = function (style, cFRule) {
        switch (cFRule.cFColor) {
            case 'RedFT':
                style.backgroundColor = '#ffc7ce';
                style.color = '#9c0055';
                break;
            case 'YellowFT':
                style.backgroundColor = '#ffeb9c';
                style.color = '#9c6500';
                break;
            case 'GreenFT':
                style.backgroundColor = '#c6efce';
                style.color = '#006100';
                break;
            case 'RedF':
                style.backgroundColor = '#ffc7ce';
                break;
            case 'RedT':
                style.color = '#9c0055';
                break;
        }
        return style;
    };
    /**
     * Gets the module name.
     *
     * @returns {string} - Gets the module name.
     */
    ConditionalFormatting.prototype.getModuleName = function () {
        return 'conditionalFormatting';
    };
    return ConditionalFormatting;
}());

/**
 * AutoFill module allows to perform auto fill functionalities.
 */
var AutoFill = /** @__PURE__ @class */ (function () {
    function AutoFill(parent) {
        this.fillOptionIndex = 0;
        this.parent = parent;
        this.addEventListener();
    }
    AutoFill.prototype.getfillItems = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        return [
            { text: l10n.getConstant('CopyCells') },
            { text: l10n.getConstant('FillSeries') },
            { text: l10n.getConstant('FillFormattingOnly') },
            { text: l10n.getConstant('FillWithoutFormatting') }
        ];
    };
    AutoFill.prototype.init = function () {
        this.createAutoFillElement();
    };
    AutoFill.prototype.createAutoFillElement = function () {
        var element = this.parent.getMainContent();
        var ele = this.parent.createElement('div', { className: 'e-autofill' });
        element.appendChild(ele);
        this.autoFillElement = ele;
        this.getautofillDDB({ id: this.parent.element.id + '_autofilloptionbtn', appendElem: element });
    };
    AutoFill.prototype.getautofillDDB = function (args) {
        var _this = this;
        var splitBtnElem = this.parent.createElement('button', { id: args.id, className: 'e-filloption' });
        splitBtnElem.appendChild(this.parent.createElement('span', { className: 'e-tbar-btn-text' }));
        this.autoFillDropDown = new DropDownButton({
            cssClass: 'e-dragfill-ddb',
            iconCss: 'e-icons e-dragfill-icon',
            items: this.getfillItems(),
            createPopupOnClick: true,
            select: function (args) {
                _this.autoFillOptionClick({ type: _this.getFillType(args.item.text) });
            },
            beforeOpen: function () { return _this.autoFillClick(); }
        });
        this.autoFillDropDown.createElement = this.parent.createElement;
        this.autoFillDropDown.appendTo(splitBtnElem);
        args.appendElem.appendChild(splitBtnElem);
        return this.autoFillDropDown;
    };
    AutoFill.prototype.getFillType = function (text) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var type;
        if (text === l10n.getConstant('CopyCells')) {
            type = 'CopyCells';
        }
        else if (text === l10n.getConstant('FillSeries')) {
            type = 'FillSeries';
        }
        else if (text === l10n.getConstant('FillFormattingOnly')) {
            type = 'FillFormattingOnly';
        }
        else {
            type = 'FillWithoutFormatting';
        }
        return type;
    };
    AutoFill.prototype.autoFillClick = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var fillInfo = { fillType: 'FillSeries', disableItems: [''] };
        this.parent.notify(getFillInfo, fillInfo);
        this.autoFillDropDown.setProperties({ 'items': this.getfillItems() }, true);
        this.autoFillDropDown.removeItems(fillInfo.disableItems);
        this.refreshAutoFillOption(l10n.getConstant(fillInfo.fillType));
    };
    AutoFill.prototype.getFillRange = function (pStartCell, pEndCell, pFillCell, direction) {
        switch (direction) {
            case 'Up':
                return [pFillCell.rowIndex, pStartCell.colIndex, pStartCell.rowIndex - 1, pEndCell.colIndex];
            case 'Right':
                return [pStartCell.rowIndex, pEndCell.colIndex + 1, pEndCell.rowIndex, pFillCell.colIndex];
            case 'Down':
                return [pEndCell.rowIndex + 1, pStartCell.colIndex, pFillCell.rowIndex, pEndCell.colIndex];
            case 'Left':
                return [pStartCell.rowIndex, pFillCell.colIndex, pEndCell.rowIndex, pStartCell.colIndex - 1];
        }
    };
    AutoFill.prototype.autoFillOptionClick = function (args) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var sheet = this.parent.getActiveSheet();
        var range = getRangeIndexes(this.parent.selectionModule.dAutoFillCell);
        var currcell = getRangeIndexes(sheet.selectedRange);
        var minr = range[0];
        var minc = range[1];
        var maxr = range[2];
        var maxc = range[3];
        var dir = this.getDirection({ rowIndex: maxr, colIndex: maxc }, { rowIndex: currcell[2],
            colIndex: currcell[3] });
        var dataRange = getSwapRange([minr, minc, maxr, maxc]);
        var fillRange = this.getFillRange({ rowIndex: minr, colIndex: minc }, { rowIndex: maxr, colIndex: maxc }, { rowIndex: currcell[2], colIndex: currcell[3] }, dir);
        this.refreshAutoFillOption(l10n.getConstant(args.type));
        this.parent.notify(performUndoRedo, { isUndo: true, isPublic: true, preventEvt: args.type === 'FillWithoutFormatting',
            preventReSelect: true });
        var eventArgs = { dataRange: sheet.name + '!' + getRangeAddress(dataRange), fillRange: sheet.name + '!' + getRangeAddress(fillRange), direction: dir, fillType: args.type, isFillOptClick: true };
        this.isVerticalFill = eventArgs.direction === 'Down' || eventArgs.direction === 'Up';
        this.parent.notify(setAutoFill, eventArgs);
        this.positionAutoFillElement({ isautofill: true });
        var autoFillArgs = { dataRange: eventArgs.dataRange, fillRange: eventArgs.fillRange, fillType: eventArgs.fillType, direction: eventArgs.direction, selectedRange: sheet.name + '!' + getRangeAddress(currcell) };
        this.parent.notify(completeAction, { eventArgs: autoFillArgs, action: 'autofill' });
        this.parent.notify(showAggregate, {});
        this.autoFillClick();
    };
    AutoFill.prototype.refreshAutoFillOption = function (type) {
        for (var i = 0; i < this.autoFillDropDown.items.length; i++) {
            this.autoFillDropDown.items[i].iconCss = '';
        }
        for (var i = 0; i < this.autoFillDropDown.items.length; i++) {
            if (this.autoFillDropDown.items[i].text === type) {
                this.autoFillDropDown.items[i].iconCss = 'e-icons e-selected-icon';
            }
        }
        if (['Copy Cells', 'Fill Series', 'Fill Formatting Only', 'Fill Without Formatting'].indexOf(type) < 0) {
            this.autoFillDropDown.items[this.fillOptionIndex].iconCss = '';
        }
        this.autoFillDropDown.dataBind();
    };
    AutoFill.prototype.positionAutoFillElement = function (args) {
        var top = 0;
        var left = 0;
        var sheet = this.parent.getActiveSheet();
        var indexes = getSwapRange(getRangeIndexes(sheet.selectedRange));
        var tdiff = -5;
        var ldiff = -5;
        var otdiff = 6;
        var oldiff = 6;
        var isRowSelected = (indexes[1] === 0 && indexes[3] === sheet.colCount - 1);
        var isColSelected = (indexes[0] === 0 && indexes[2] === sheet.rowCount - 1);
        var rowIdx = indexes[2];
        var colIdx = indexes[3];
        var height;
        var width;
        var pos;
        var cell = this.parent.getCell(rowIdx, colIdx);
        if (isHiddenCol(sheet, indexes[3]) || isHiddenRow(sheet, indexes[2]) ||
            (cell && cell.classList.contains('e-formularef-selection'))) {
            this.hideAutoFillElement();
            return;
        }
        if ((!sheet.isProtected && !sheet.protectSettings.selectCells) || sheet.protectSettings.selectCells) {
            if (isRowSelected) {
                tdiff = -5;
                ldiff = -1;
                otdiff = 6;
                oldiff = 2;
                rowIdx = indexes[2];
                colIdx = indexes[1];
            }
            else if (isColSelected) {
                ldiff = -5;
                tdiff = 0;
                otdiff = 1;
                oldiff = 6;
                rowIdx = indexes[0];
                colIdx = indexes[3];
            }
            if (sheet.frozenColumns || sheet.frozenRows) {
                if (isColSelected || isRowSelected) {
                    setPosition(this.parent, this.autoFillElement, indexes, 'e-autofill', args && args.preventAnimation);
                    if (this.parent.autoFillSettings.showFillOptions && args && args.isautofill) {
                        setPosition(this.parent, this.autoFillDropDown.element, indexes, 'e-filloption');
                    }
                }
                else {
                    setPosition(this.parent, this.autoFillElement, [rowIdx, colIdx, rowIdx, colIdx], 'e-autofill', args && args.preventAnimation);
                    if (this.parent.autoFillSettings.showFillOptions && args && args.isautofill) {
                        setPosition(this.parent, this.autoFillDropDown.element, [rowIdx, colIdx, rowIdx, colIdx], 'e-filloption');
                    }
                }
                if (this.autoFillElement) {
                    this.autoFillCell = { rowIndex: rowIdx, colIndex: colIdx };
                    var element = this.parent.element.querySelectorAll('.e-autofill')[0];
                    if (element) {
                        var clientRect = element.getBoundingClientRect();
                        this.autoFillElementPosition = {
                            left: clientRect.left, top: clientRect.top
                        };
                    }
                }
            }
            else {
                pos = getCellPosition(sheet, [rowIdx, colIdx, rowIdx, colIdx], this.parent.frozenRowCount(sheet), this.parent.frozenColCount(sheet), this.parent.viewport.beforeFreezeHeight, this.parent.viewport.beforeFreezeWidth, this.parent.sheetModule.colGroupWidth);
                height = getRowsHeight(sheet, rowIdx, rowIdx, true);
                width = getColumnsWidth(sheet, colIdx, colIdx, true);
                if (!isColSelected) {
                    top += height;
                }
                if (!isRowSelected) {
                    left += width;
                }
                top += Math.round(pos.top) + tdiff;
                left += Math.round(pos.left) + ldiff;
                if (this.autoFillElement) {
                    removeClass([this.autoFillElement], 'e-hide');
                    this.autoFillElement.style.top = top + 'px';
                    this.autoFillElement.style.left = left + 'px';
                    this.autoFillCell = { rowIndex: rowIdx, colIndex: colIdx };
                    var clientRect = this.autoFillElement.getBoundingClientRect();
                    this.autoFillElementPosition = {
                        left: clientRect.left, top: clientRect.top
                    };
                    if (this.parent.autoFillSettings.showFillOptions && args && args.isautofill) {
                        removeClass([this.autoFillDropDown.element], 'e-hide');
                        this.autoFillDropDown.element.style.top = top + otdiff + 'px';
                        this.autoFillDropDown.element.style.left = left + oldiff + 'px';
                    }
                }
            }
        }
    };
    AutoFill.prototype.hideAutoFillElement = function () {
        var elem = this.parent.element;
        elem.querySelectorAll('.e-autofill').forEach(function (optElem) {
            if (elem) {
                addClass([optElem], 'e-hide');
            }
        });
    };
    AutoFill.prototype.hideAutoFillOptions = function () {
        var elem = this.parent.element;
        elem.querySelectorAll('.e-filloption').forEach(function (optElem) {
            if (elem) {
                addClass([optElem], 'e-hide');
            }
        });
    };
    AutoFill.prototype.selectAutoFillRange = function (args) {
        var rowObj = { clientY: getClientY(args.e), target: args.e.target };
        var colObj = { clientX: getClientX(args.e), target: args.e.target };
        var sheet = this.parent.getActiveSheet();
        this.parent.notify(getRowIdxFromClientY, rowObj);
        this.parent.notify(getColIdxFromClientX, colObj);
        var rangeIndexes;
        var autofillRange = this.getAutoFillRange({ rowIndex: rowObj.clientY, colIndex: colObj.clientX });
        if (autofillRange && autofillRange.fillRange) {
            rangeIndexes = [autofillRange.startCell.rowIndex, autofillRange.startCell.colIndex, autofillRange.endCell.rowIndex,
                autofillRange.endCell.colIndex];
        }
        else {
            rangeIndexes = getRangeIndexes(sheet.selectedRange);
        }
        args.indexes = rangeIndexes;
        return rangeIndexes;
    };
    AutoFill.prototype.getAutoFillRange = function (idx) {
        var sheet = this.parent.getActiveSheet();
        var aCell = this.autoFillCell;
        var range = getSwapRange(getRangeIndexes(sheet.selectedRange));
        var minr = range[0];
        var minc = range[1];
        var maxr = range[2];
        var maxc = range[3];
        var inRange = isInRange(range, [idx.rowIndex, idx.colIndex, idx.rowIndex, idx.colIndex], true);
        var minIdx = { rowIndex: minr, colIndex: minc };
        var scell = { rowIndex: range[0], colIndex: range[1] };
        var ecell = { rowIndex: range[2], colIndex: range[3] };
        var maxIdx = { rowIndex: maxr, colIndex: maxc };
        var modifiedIdx = this.modifyRangeForMerge(idx.rowIndex, idx.colIndex, aCell.rowIndex, aCell.colIndex, range);
        if (idx.rowIndex < aCell.rowIndex) { // up
            if ((minr - idx.rowIndex > idx.colIndex - maxc) && (minr - idx.rowIndex > minc - idx.colIndex)) {
                return inRange ? { startCell: minIdx, endCell: { rowIndex: idx.rowIndex, colIndex: maxc } } : { startCell: maxIdx, endCell: { rowIndex: modifiedIdx.rowIndex, colIndex: minc }, fillRange: [modifiedIdx.rowIndex, minc, minr - 1, maxc], direction: 'Up' };
            }
            else if (idx.colIndex > aCell.colIndex) {
                return { startCell: minIdx, endCell: { rowIndex: maxr, colIndex: idx.colIndex },
                    fillRange: [minr, maxc + 1, maxr, idx.colIndex], direction: 'Right' };
            }
            else if (idx.colIndex < aCell.colIndex) {
                return inRange ? { startCell: minIdx, endCell: maxIdx } : { startCell: maxIdx, endCell: { rowIndex: minr, colIndex: idx.colIndex }, fillRange: [minr, idx.colIndex, maxr, minc - 1], direction: 'Left' };
            }
            else {
                return { startCell: scell, endCell: ecell };
            }
        }
        else if (idx.colIndex > aCell.colIndex) { // right
            if ((idx.rowIndex - maxr > idx.colIndex - maxc)) {
                return { startCell: minIdx, endCell: { rowIndex: idx.rowIndex, colIndex: maxc },
                    fillRange: [maxr + 1, minc, idx.rowIndex, maxc], direction: 'Down' };
            }
            else {
                return { startCell: minIdx, endCell: { rowIndex: maxr, colIndex: modifiedIdx.colIndex },
                    fillRange: [minr, maxc + 1, maxr, modifiedIdx.colIndex], direction: 'Right' };
            }
        }
        else if (idx.colIndex < aCell.colIndex) { // left
            if ((idx.rowIndex - maxr > maxc - idx.colIndex) || ((idx.rowIndex - minr > maxc - idx.colIndex) && idx.rowIndex !== maxr)) {
                return { startCell: minIdx, endCell: { rowIndex: idx.rowIndex, colIndex: maxc },
                    fillRange: [maxr + 1, minc, idx.rowIndex, maxc], direction: 'Down' };
            }
            else {
                return inRange ? { startCell: minIdx, endCell: maxIdx } : { startCell: maxIdx, endCell: { rowIndex: minr, colIndex: modifiedIdx.colIndex }, fillRange: [minr, modifiedIdx.colIndex, maxr, minc - 1], direction: 'Left' };
            }
        }
        else if (idx.rowIndex > aCell.rowIndex) { // down
            return { startCell: minIdx, endCell: { rowIndex: modifiedIdx.rowIndex, colIndex: maxc },
                fillRange: [maxr + 1, minc, modifiedIdx.rowIndex, maxc], direction: 'Down' };
        }
        else if (idx.rowIndex === aCell.rowIndex && idx.colIndex === aCell.colIndex) {
            return { startCell: scell, endCell: ecell };
        }
        else {
            return { startCell: scell, endCell: ecell };
        }
    };
    AutoFill.prototype.modifyRangeForMerge = function (rowIdx, colIdx, autoFillRowIdx, autoFillColIdx, selRange) {
        var modifiedIdx = { rowIndex: rowIdx, colIndex: colIdx };
        if (this.isMergedRange(selRange)) {
            var selRowCount = selRange[2] - selRange[0] + 1;
            var selColCount = selRange[3] - selRange[1] + 1;
            var remainder = void 0;
            if (rowIdx < autoFillRowIdx) { // up
                remainder = (selRange[2] - rowIdx + 1) % selRowCount;
                if (remainder && rowIdx - (selRowCount - remainder) >= 0) {
                    modifiedIdx.rowIndex = rowIdx - (selRowCount - remainder);
                }
            }
            else if (colIdx > autoFillColIdx) { // right
                remainder = (colIdx - selRange[1] + 1) % selColCount;
                if (remainder) {
                    modifiedIdx.colIndex = colIdx + (selColCount - remainder);
                }
            }
            else if (colIdx < autoFillColIdx) { // left
                remainder = (selRange[3] - colIdx + 1) % selColCount;
                if (remainder && colIdx - (selColCount - remainder) >= 0) {
                    modifiedIdx.colIndex = colIdx - (selColCount - remainder);
                }
            }
            else if (rowIdx > autoFillRowIdx) { // down
                remainder = (rowIdx - selRange[0] + 1) % selRowCount;
                if (remainder) {
                    modifiedIdx.rowIndex = rowIdx + (selRowCount - remainder);
                }
            }
        }
        return modifiedIdx;
    };
    AutoFill.prototype.performAutoFill = function (args) {
        if (!(args.event.clientX > this.autoFillElementPosition.left && args.event.clientX < this.autoFillElementPosition.left + 10) ||
            !(args.event.clientY > this.autoFillElementPosition.top && args.event.clientY < this.autoFillElementPosition.top + 10)) {
            var rowObj = { clientY: getClientY(args.event), target: args.event.target };
            var colObj = { clientX: getClientX(args.event), target: args.event.target };
            var sheet = this.parent.getActiveSheet();
            this.parent.notify(getRowIdxFromClientY, rowObj);
            this.parent.notify(getColIdxFromClientX, colObj);
            var autofillRange = this.getAutoFillRange({ rowIndex: rowObj.clientY, colIndex: colObj.clientX });
            if (autofillRange && autofillRange.fillRange) {
                var eventArgs = {
                    dataRange: sheet.name + '!' + args.dAutoFillCell,
                    fillRange: sheet.name + '!' + getRangeAddress(autofillRange.fillRange), direction: autofillRange.direction,
                    fillType: this.parent.autoFillSettings.fillType, cancel: false
                };
                this.parent.notify(beginAction, { eventArgs: eventArgs, action: 'autofill' });
                if (eventArgs.cancel) {
                    return;
                }
                var isLockedCell = isLockedCells(this.parent, autofillRange.fillRange);
                if (sheet.isProtected && isLockedCell) {
                    this.parent.notify(editAlert, null);
                    return;
                }
                this.performAutoFillAction(eventArgs, autofillRange, isLockedCell);
                if (this.isMergedRange(getRangeIndexes(eventArgs.dataRange))) {
                    this.parent.renderModule.refreshSheet();
                }
                this.positionAutoFillElement({ isautofill: !this.isMergedRange(getRangeIndexes(eventArgs.fillRange)) });
            }
        }
        else {
            this.positionAutoFillElement({ isautofill: false });
        }
    };
    AutoFill.prototype.refreshCell = function (options) {
        this.parent.serviceLocator.getService('cell').refreshRange([options.rowIndex, options.colIndex, options.rowIndex, options.colIndex]);
    };
    AutoFill.prototype.isRange = function (range) {
        return range && (range[0] !== range[2] || range[1] !== range[3]);
    };
    AutoFill.prototype.fillRange = function (options) {
        var args = {
            dataRange: '',
            fillRange: '',
            direction: 'Down',
            fillType: 'CopyCells'
        };
        var sheet = this.parent.getActiveSheet();
        var range = getSwapRange(getRangeIndexes(sheet.selectedRange));
        var minr = range[0];
        var minc = range[1];
        var maxr = range[2];
        var maxc = range[3];
        var dirc = this.getDirection({ rowIndex: minr, colIndex: minc }, { rowIndex: maxr, colIndex: maxc }, options.verticalFill);
        var isProperKey = options.verticalFill ? dirc === 'Down' : dirc === 'Right';
        if (this.isRange(range) && isProperKey) {
            if (options.verticalFill) {
                args.dataRange = sheet.name + '!' + getRangeAddress([minr, minc, minr, maxc]);
                args.fillRange = sheet.name + '!' + getRangeAddress([minr + 1, minc, maxr, maxc]);
            }
            else {
                args.dataRange = sheet.name + '!' + getRangeAddress([minr, minc, maxr, minc]);
                args.fillRange = sheet.name + '!' + getRangeAddress([minr, minc + 1, maxr, maxc]);
            }
        }
        else {
            if (options.verticalFill) {
                if (!minr) {
                    return;
                }
                args.dataRange = sheet.name + '!' + getRangeAddress([minr - 1, minc, minr - 1, maxc]);
            }
            else {
                if (!minc) {
                    return;
                }
                args.dataRange = sheet.name + '!' + getRangeAddress([minr, minc - 1, maxr, minc - 1]);
            }
            args.fillRange = sheet.name + '!' + getRangeAddress(range);
        }
        args.direction = options.verticalFill ? 'Down' : 'Right';
        args.fillType = 'CopyCells';
        if (sheet.isProtected) {
            return;
        }
        this.performAutoFillAction(args);
    };
    AutoFill.prototype.getDirection = function (endCell, currcell, isVerticalFill) {
        isVerticalFill = isNullOrUndefined(isVerticalFill) ? this.isVerticalFill : isVerticalFill;
        if (isVerticalFill) {
            if (currcell.rowIndex < endCell.rowIndex) { // up
                return 'Up';
            }
            else if (currcell.rowIndex > endCell.rowIndex) { // down
                return 'Down';
            }
            else if (currcell.colIndex > endCell.colIndex) { // right
                return 'Right';
            }
            else if (currcell.colIndex < endCell.colIndex) { // left
                return 'Left';
            }
        }
        else {
            if (currcell.colIndex > endCell.colIndex) { // right
                return 'Right';
            }
            else if (currcell.colIndex < endCell.colIndex) { // left
                return 'Left';
            }
            else if (currcell.rowIndex < endCell.rowIndex) { // up
                return 'Up';
            }
            else if (currcell.rowIndex > endCell.rowIndex) { // down
                return 'Down';
            }
        }
        return null;
    };
    AutoFill.prototype.performAutoFillAction = function (args, autoFillRange, isLockedCell) {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        var l10n = this.parent.serviceLocator.getService(locale);
        if (this.isMergedRange(getRangeIndexes(args.fillRange))) {
            var dialogInst_1 = this.parent.serviceLocator.getService(dialog);
            dialogInst_1.show({
                target: this.parent.element, isModal: true, showCloseIcon: true, height: 180, width: 400, content: l10n.getConstant('AutoFillMergeAlertMsg'),
                buttons: [{
                        buttonModel: { content: this.parent.serviceLocator.getService(locale).getConstant('Ok'), isPrimary: true },
                        click: function () { dialogInst_1.hide(); _this.parent.selectRange(args.dataRange); }
                    }],
                close: function () { dialogInst_1.hide(); _this.parent.selectRange(args.dataRange); }
            }, false);
            return;
        }
        this.isVerticalFill = args.direction === 'Down' || args.direction === 'Up';
        this.parent.notify(setAutoFill, {
            dataRange: args.dataRange,
            fillRange: args.fillRange, direction: args.direction, fillType: args.fillType, isLockedCell: isLockedCell
        });
        var selRange = autoFillRange ? getRangeAddress([autoFillRange.startCell.rowIndex, autoFillRange.startCell.colIndex,
            autoFillRange.endCell.rowIndex, autoFillRange.endCell.colIndex]) : sheet.selectedRange;
        updateSelectedRange(this.parent, selRange, sheet);
        var autoFillArgs = { dataRange: args.dataRange, fillRange: args.fillRange, fillType: args.fillType, direction: args.direction,
            selectedRange: selRange };
        this.parent.notify(completeAction, { eventArgs: autoFillArgs, action: 'autofill' });
        this.parent.notify(showAggregate, {});
    };
    AutoFill.prototype.getRangeData = function (options) {
        var arr = [];
        var sheet = this.parent.getActiveSheet();
        var minr = options.range[0];
        var minc = options.range[1];
        var maxr = options.range[2];
        var maxc = options.range[3];
        var minCol = minc;
        var cell;
        while (minr <= maxr) {
            if (isHiddenRow(sheet, minr)) {
                minr++;
                continue;
            }
            minc = minCol;
            while (minc <= maxc) {
                if (isHiddenCol(sheet, minc)) {
                    minc++;
                    continue;
                }
                cell = getCell(minr, minc, sheet);
                arr.push(cell);
                minc++;
            }
            minr++;
        }
        return arr;
    };
    AutoFill.prototype.isMergedRange = function (range) {
        var i = 0;
        var data = this.getRangeData({ range: range, sheetIdx: this.parent.activeSheetIndex });
        for (i = 0; i < data.length; i++) {
            if (data[i] && (data[i].rowSpan || data[i].colSpan)) {
                return true;
            }
        }
        return false;
    };
    AutoFill.prototype.addEventListener = function () {
        this.parent.on(contentLoaded, this.init, this);
        this.parent.on(positionAutoFillElement, this.positionAutoFillElement, this);
        this.parent.on(hideAutoFillOptions, this.hideAutoFillOptions, this);
        this.parent.on(hideAutoFillElement, this.hideAutoFillElement, this);
        this.parent.on(performAutoFill, this.performAutoFill, this);
        this.parent.on(fillRange, this.fillRange, this);
        this.parent.on(selectAutoFillRange, this.selectAutoFillRange, this);
        this.parent.on(refreshCell, this.refreshCell, this);
        this.parent.on(getautofillDDB, this.getautofillDDB, this);
    };
    AutoFill.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(contentLoaded, this.init);
            this.parent.off(positionAutoFillElement, this.positionAutoFillElement);
            this.parent.off(hideAutoFillOptions, this.hideAutoFillOptions);
            this.parent.off(hideAutoFillElement, this.hideAutoFillElement);
            this.parent.off(performAutoFill, this.performAutoFill);
            this.parent.off(fillRange, this.fillRange);
            this.parent.off(selectAutoFillRange, this.selectAutoFillRange);
            this.parent.off(refreshCell, this.refreshCell);
            this.parent.off(getautofillDDB, this.getautofillDDB);
        }
    };
    /**
     * Destroy AutoFill module.
     *
     * @returns {void} - Destroy auto fill module.
     */
    AutoFill.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * Get the AutoFill module name.
     *
     * @returns {string} - Get the auto fill module name.
     */
    AutoFill.prototype.getModuleName = function () {
        return 'autofill';
    };
    return AutoFill;
}());

/**
 * Exporting Spreadsheet actions module
 */

var __extends$8 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign$1 = (undefined && undefined.__assign) || function () {
    __assign$1 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$1.apply(this, arguments);
};
var __decorate$7 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * Objects used for configuring the Ribbon tab header properties.
 */
var RibbonHeader = /** @__PURE__ @class */ (function (_super) {
    __extends$8(RibbonHeader, _super);
    function RibbonHeader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$7([
        Property('')
    ], RibbonHeader.prototype, "text", void 0);
    __decorate$7([
        Property('')
    ], RibbonHeader.prototype, "iconCss", void 0);
    __decorate$7([
        Property('left')
    ], RibbonHeader.prototype, "iconPosition", void 0);
    return RibbonHeader;
}(ChildProperty));
/**
 * An array of object that is used to configure the Tab.
 */
var RibbonItem = /** @__PURE__ @class */ (function (_super) {
    __extends$8(RibbonItem, _super);
    function RibbonItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$7([
        Complex({}, RibbonHeader)
    ], RibbonItem.prototype, "header", void 0);
    __decorate$7([
        Collection([], Item)
    ], RibbonItem.prototype, "content", void 0);
    __decorate$7([
        Property('')
    ], RibbonItem.prototype, "cssClass", void 0);
    __decorate$7([
        Property(false)
    ], RibbonItem.prototype, "disabled", void 0);
    return RibbonItem;
}(ChildProperty));
/**
 * Represents Ribbon component.
 */
var Ribbon$1 = /** @__PURE__ @class */ (function (_super) {
    __extends$8(Ribbon, _super);
    /**
     * Constructor for creating the widget.
     *
     * @param {RibbonModel} options - Specify the options
     * @param {string|HTMLDivElement} element -specify the element.
     */
    function Ribbon(options, element) {
        return _super.call(this, options) || this;
    }
    /**
     * For internal use only.
     *
     * @returns {void} - For internal use only.
     * @private
     */
    Ribbon.prototype.preRender = function () {
        /** */
    };
    /**
     * For internal use only.
     *
     * @returns {void} - For internal use only.
     * @private
     */
    Ribbon.prototype.render = function () {
        if (!this.element.id) {
            this.element.id = getUniqueID('ribbon');
        }
        this.renderRibbon();
    };
    /**
     * Destroys the component (detaches/removes all event handlers, attributes, classes, and empties the component element).
     *
     * {% codeBlock src='spreadsheet/destroy/index.md' %}{% endcodeBlock %}
     *
     * @function destroy
     * @returns {void} - Destroys the component
     */
    Ribbon.prototype.destroy = function () {
        var expandCollapseElem = this.element.querySelector('.e-drop-icon');
        if (expandCollapseElem) {
            expandCollapseElem.removeEventListener('click', this.ribbonExpandCollapse.bind(this));
        }
        if (this.menuItems.length) {
            var fileMenu = document.getElementById(this.element.id + "_menu");
            if (fileMenu) {
                getComponent(fileMenu, 'menu').destroy();
            }
        }
        this.toolbarObj.destroy();
        this.tabObj.destroy();
        this.element.innerHTML = '';
        this.toolbarObj = null;
        this.tabObj = null;
        _super.prototype.destroy.call(this);
    };
    Ribbon.prototype.getTabItems = function () {
        var _this = this;
        var tabItems = [];
        if (this.menuItems.length) {
            tabItems.push({
                header: { text: this.initMenu(this.menuItems) },
                content: this.toolbarObj.element,
                cssClass: 'e-menu-tab'
            });
        }
        this.items.forEach(function (item) {
            tabItems.push({
                header: item.header,
                content: _this.toolbarObj.element
            });
        });
        return tabItems;
    };
    Ribbon.prototype.initMenu = function (menuItems) {
        var _this = this;
        var menu = this.createElement('ul', { id: this.element.id + "_menu" });
        this.element.appendChild(menu);
        var menuObj = new Menu({
            cssClass: 'e-file-menu',
            items: menuItems,
            showItemOnClick: true,
            beforeOpen: function (args) {
                if (args.parentItem.text === menuItems[0].text) {
                    menuObj.showItemOnClick = false;
                }
                _this.trigger('beforeOpen', args);
            },
            select: function (args) {
                _this.trigger('fileMenuItemSelect', args);
            },
            beforeClose: function (args) {
                if (args.event.type === 'mouseover' && !closest(args.event.target, '.e-menu-popup')) {
                    args.cancel = true;
                    return;
                }
                _this.trigger('beforeClose', args);
                if (!args.parentItem || args.parentItem.text === menuItems[0].text) {
                    requestAnimationFrame(function () { return menuObj.setProperties({ showItemOnClick: true }, true); });
                }
            },
            beforeItemRender: function (args) {
                _this.trigger('beforeFileMenuItemRender', args);
            }
        });
        menuObj.createElement = this.createElement;
        menuObj.appendTo(menu);
        return menu.parentElement;
    };
    Ribbon.prototype.renderRibbon = function () {
        var _this = this;
        var tabElement = this.createElement('div');
        var tBarElement = this.createElement('div');
        this.toolbarObj = new Toolbar({
            items: this.items[this.selectedTab].content,
            clicked: function (args) { return _this.trigger('clicked', args); }
        });
        this.toolbarObj.createElement = this.createElement;
        this.toolbarObj.appendTo(tBarElement);
        this.tabObj = new Tab({
            selectedItem: this.getIndex(this.selectedTab),
            animation: { next: { duration: 0 }, previous: { duration: 0 } },
            items: this.getTabItems(),
            selecting: function (args) {
                if (_this.menuItems.length && args.selectingIndex === 0) {
                    args.cancel = true;
                }
                else {
                    if (args.selectingIndex === _this.getIndex(_this.selectedTab)) {
                        return;
                    }
                    _this.updateToolbar(_this.getIndex(args.selectingIndex, true));
                    _this.toolbarObj.dataBind();
                    if (_this.element.classList.contains('e-collapsed')) {
                        EventHandler.remove(args.selectedItem, 'click', _this.ribbonExpandCollapse);
                    }
                    var eventArgs = void 0;
                    if (_this.menuItems.length) {
                        eventArgs = __assign$1({}, args);
                        eventArgs.selectingIndex -= 1;
                        eventArgs.selectedIndex -= 1;
                    }
                    else {
                        eventArgs = args;
                    }
                    _this.trigger('selecting', eventArgs);
                }
            },
            selected: function (args) {
                if (args.selectedIndex === _this.getIndex(_this.selectedTab)) {
                    return;
                }
                _this.setProperties({ 'selectedTab': _this.getIndex(args.selectedIndex, true) }, true);
                if (_this.element.classList.contains('e-collapsed')) {
                    _this.element.classList.remove('e-collapsed');
                    _this.trigger('expandCollapse', { element: _this.toolbarObj.element, expanded: true });
                }
            },
            created: function () {
                _this.toolbarObj.refreshOverflow();
            }
        });
        this.element.appendChild(tabElement);
        this.tabObj.createElement = this.createElement;
        this.tabObj.appendTo(tabElement);
        var collapseBtn = this.createElement('span', { className: 'e-drop-icon e-icons' });
        collapseBtn.addEventListener('click', this.ribbonExpandCollapse.bind(this));
        this.element.appendChild(collapseBtn);
    };
    Ribbon.prototype.ribbonExpandCollapse = function (e) {
        var eventArgs = { element: this.toolbarObj.element, expanded: true };
        var activeTab;
        if (this.element.classList.contains('e-collapsed')) {
            activeTab = this.tabObj.element.querySelector('.e-tab-header').getElementsByClassName('e-toolbar-item')[this.tabObj.selectedItem];
            this.element.classList.remove('e-collapsed');
            activeTab.classList.add('e-active');
            EventHandler.remove(activeTab, 'click', this.ribbonExpandCollapse);
            this.trigger('expandCollapse', eventArgs);
        }
        else {
            activeTab = this.tabObj.element.querySelector('.e-tab-header .e-toolbar-item.e-active');
            this.element.classList.add('e-collapsed');
            eventArgs.expanded = false;
            activeTab.classList.remove('e-active');
            EventHandler.add(activeTab, 'click', this.ribbonExpandCollapse, this);
            this.trigger('expandCollapse', eventArgs);
        }
    };
    Ribbon.prototype.getIndex = function (index, decrement) {
        return this.menuItems.length ? (decrement ? index - 1 : index + 1) : index;
    };
    Ribbon.prototype.updateToolbar = function (index) {
        this.toolbarObj.items = this.items[index].content;
        this.toolbarObj.dataBind();
    };
    /**
     * To enable / disable the ribbon menu items.
     *
     * @param {string[]} items - Items that needs to be enabled / disabled.
     * @param {boolean} enable - Set `true` / `false` to enable / disable the menu items.
     * @param {boolean} isUniqueId - Set `true` if the given menu items `text` is a unique id.
     * @returns {void} - To enable / disable the ribbon menu items.
     */
    Ribbon.prototype.enableMenuItems = function (items, enable, isUniqueId) {
        if (enable === void 0) { enable = true; }
        if (!this.menuItems.length) {
            return;
        }
        getComponent(document.getElementById(this.element.id + "_menu"), 'menu').enableItems(items, enable, isUniqueId);
    };
    /**
     * To show/hide the menu items in Ribbon.
     *
     * @param {string[]} items - Specifies the menu items text which is to be show/hide.
     * @param {boolean} hide - Set `true` / `false` to hide / show the menu items.
     * @param {boolean} isUniqueId - Set `true` if the given menu items `text` is a unique id.
     * @returns {void} - To show/hide the menu items in Ribbon.
     */
    Ribbon.prototype.hideMenuItems = function (items, hide, isUniqueId) {
        if (hide === void 0) { hide = true; }
        if (!this.menuItems.length) {
            return;
        }
        var menuInstance = getComponent(document.getElementById(this.element.id + "_menu"), 'menu');
        if (hide) {
            menuInstance.hideItems(items, isUniqueId);
        }
        else {
            menuInstance.showItems(items, isUniqueId);
        }
    };
    /**
     * To add custom menu items.
     *
     * @param {MenuItemModel[]} items - Specifies the Ribbon menu items to be inserted.
     * @param {string} text - Specifies the existing file menu item text before / after which the new file menu items to be inserted.
     * @param {boolean} insertAfter - Set `false` if the `items` need to be inserted before the `text`.
     * By default, `items` are added after the `text`.
     * @param {boolean} isUniqueId - Set `true` if the given menu items `text` is a unique id.
     * @returns {void} - To add custom menu items.
     */
    Ribbon.prototype.addMenuItems = function (items, text, insertAfter, isUniqueId) {
        if (insertAfter === void 0) { insertAfter = true; }
        if (!this.menuItems.length) {
            return;
        }
        var menuInstance = getComponent(document.getElementById(this.element.id + "_menu"), 'menu');
        if (insertAfter) {
            menuInstance.insertAfter(items.reverse(), text, isUniqueId);
        }
        else {
            menuInstance.insertBefore(items, text, isUniqueId);
        }
    };
    /**
     * To show/hide the Ribbon tabs.
     *
     * @param {string[]} tabs - Specifies the tab header text which needs to be shown/hidden.
     * @param {boolean} hide - Set `true` / `false` to hide / show the ribbon tabs.
     * @returns {void} - To show/hide the Ribbon tabs.
     */
    Ribbon.prototype.hideTabs = function (tabs, hide) {
        var _this = this;
        if (hide === void 0) { hide = true; }
        var idx;
        var activeTab;
        var stateChanged;
        var isAllHidden;
        if (!hide) {
            isAllHidden = this.isAllHidden();
        }
        tabs.forEach(function (tab) {
            idx = _this.getTabIndex(tab, -1);
            if (idx > -1) {
                if (hide) {
                    if (!_this.items[idx].cssClass.includes(' e-hide')) {
                        _this.items[idx].cssClass = _this.items[idx].cssClass + " e-hide";
                        _this.tabObj.items[_this.getIndex(idx)].cssClass = _this.items[idx].cssClass;
                        if (activeTab === undefined && idx === _this.selectedTab) {
                            activeTab = true;
                        }
                        stateChanged = true;
                    }
                }
                else {
                    if (_this.items[idx].cssClass.includes(' e-hide')) {
                        _this.items[idx].cssClass = _this.items[idx].cssClass.replace(' e-hide', '');
                        _this.tabObj.items[_this.getIndex(idx)].cssClass = _this.items[idx].cssClass;
                        if (activeTab === undefined && idx === _this.selectedTab) {
                            activeTab = true;
                        }
                        stateChanged = true;
                    }
                }
            }
        });
        this.setProperties({ 'items': this.items }, true);
        // eslint-disable-next-line no-self-assign
        this.tabObj.items = this.tabObj.items;
        this.tabObj.dataBind();
        if (hide) {
            isAllHidden = this.isAllHidden();
            if (isAllHidden) {
                activeTab = false;
            }
        }
        if (!hide && isAllHidden) {
            activeTab = activeTab ? false : true;
        }
        if (stateChanged && isAllHidden) {
            if (this.element.classList.contains('e-collapsed')) {
                this.element.classList.remove('e-collapsed');
                this.element.querySelector('.e-drop-icon').classList.remove('e-hide');
            }
            else {
                this.element.classList.add('e-collapsed');
                this.element.querySelector('.e-drop-icon').classList.add('e-hide');
            }
        }
        if (activeTab) {
            for (var i = 0; i < this.items.length; i++) {
                if (!this.items[i].cssClass.includes(' e-hide')) {
                    this.tabObj.selectedItem = this.getIndex(i);
                    this.tabObj.dataBind();
                    break;
                }
            }
        }
    };
    Ribbon.prototype.isAllHidden = function () {
        var allHidden = true;
        for (var i = 0; i < this.items.length; i++) {
            if (!this.items[i].cssClass.includes(' e-hide')) {
                allHidden = false;
                break;
            }
        }
        return allHidden;
    };
    /**
     * To enable / disable the Ribbon tabs.
     *
     * @param {string[]} tabs - Specifies the tab header text which needs to be enabled / disabled.
     * @param {boolean} enable - Set `true` / `false` to enable / disable the ribbon tabs.
     * @returns {void} - To enable / disable the Ribbon tabs.
     */
    Ribbon.prototype.enableTabs = function (tabs, enable) {
        var _this = this;
        if (enable === void 0) { enable = true; }
        tabs.forEach(function (tab) {
            var idx = (_this.getTabIndex(tab, -1));
            if (idx > -1) {
                _this.items[idx].disabled = !enable;
                idx = _this.getIndex(idx);
                _this.tabObj.enableTab(idx, enable);
            }
        });
        this.setProperties({ 'items': this.items }, true);
    };
    /**
     * To add custom tabs.
     *
     * @param {RibbonItemModel[]} items - Specifies the Ribbon tab items to be inserted.
     * @param {string} insertBefore - Specifies the existing Ribbon header text before which the new tabs will be inserted.
     * If not specified, the new tabs will be inserted at the end.
     * @returns {void} - To add custom tabs.
     */
    Ribbon.prototype.addTabs = function (items, insertBefore) {
        var _this = this;
        var idx = this.getTabIndex(insertBefore);
        items.forEach(function (item) {
            item = new RibbonItem(_this.items[0], 'items', item, true);
            _this.items.splice(idx, 0, item);
            _this.tabObj.addTab([{ header: item.header, content: _this.toolbarObj.element }], _this.getIndex(idx));
            idx++;
        });
        this.setProperties({ 'items': this.items }, true);
        this.setProperties({ 'selectedTab': this.getIndex(this.tabObj.selectedItem, true) }, true);
    };
    Ribbon.prototype.getTabIndex = function (headerText, idx) {
        if (idx === void 0) { idx = this.items.length; }
        if (headerText) {
            for (var i = 0; i < this.items.length; i++) {
                if (this.items[i].header.text === headerText) {
                    idx = i;
                    break;
                }
            }
        }
        return idx;
    };
    /**
     * To add the custom items in Ribbon toolbar.
     *
     * @param {string} tab - Specifies the ribbon tab header text under which the specified items will be inserted..
     * @param {ItemModel[]} items - Specifies the ribbon toolbar items that needs to be inserted.
     * @param {number} index - Specifies the index text before which the new items will be inserted.
     * @returns {void} - To add the custom items in Ribbon toolbar.
     * If not specified, the new items will be inserted at the end of the toolbar.
     */
    Ribbon.prototype.addToolbarItems = function (tab, items, index) {
        var _this = this;
        var tabIdx = this.getTabIndex(tab);
        if (isNullOrUndefined(index)) {
            index = this.items[tabIdx].content.length;
        }
        items.forEach(function (item) {
            item = new Item(_this.items[tabIdx].content[0], 'content', item, true);
            _this.items[tabIdx].content.splice(index, 0, item);
            index++;
        });
        this.setProperties({ 'items': this.items }, true);
        if (tabIdx === this.selectedTab && items.length) {
            this.updateToolbar(tabIdx);
        }
    };
    /**
     * Enables or disables the specified Ribbon toolbar items or all ribbon items.
     *
     * @param {string} tab - Specifies the ribbon tab header text under which the toolbar items need to be enabled / disabled.
     * @param {number[]} items - Specifies the toolbar item indexes / unique id's which needs to be enabled / disabled.
     * If it is not specified the entire toolbar items will be enabled / disabled.
     * @param  {boolean} enable - Boolean value that determines whether the toolbar items should be enabled or disabled.
     * @returns {void} - Enables or disables the specified Ribbon toolbar items or all ribbon items.
     */
    Ribbon.prototype.enableItems = function (tab, items, enable) {
        if (enable === undefined) {
            enable = true;
        }
        if (items) {
            var tabIdx = this.getTabIndex(tab, -1);
            if (tabIdx < 0) {
                return;
            }
            for (var i = 0; i < items.length; i++) {
                if (typeof (items[i]) === 'string') {
                    for (var j = 0; j < this.items[tabIdx].content.length; j++) {
                        if (this.items[tabIdx].content[j].id === items[i]) {
                            items[i] = j;
                            break;
                        }
                    }
                }
                if (typeof (items[i]) === 'string') {
                    if (items.length - 1 > i) {
                        continue;
                    }
                    else {
                        return;
                    }
                }
                this.items[tabIdx].content[items[i]].disabled = !enable;
                if (tabIdx !== this.selectedTab) {
                    this.setProperties({ 'items': this.items }, true);
                }
            }
            if (tabIdx === this.selectedTab) {
                this.updateToolbar(tabIdx);
            }
        }
        else {
            this.toolbarObj.disable(!enable);
        }
    };
    /**
     * To show/hide the existing Ribbon toolbar items.
     *
     * @param {string} tab - Specifies the ribbon tab header text under which the specified items need to be hidden / shown.
     * @param {number[]} indexes - Specifies the toolbar indexes which needs to be shown/hidden from UI.
     * @param {boolean} hide - Set `true` / `false` to hide / show the toolbar items.
     * @returns {void} - To show/hide the existing Ribbon toolbar items.
     */
    Ribbon.prototype.hideToolbarItems = function (tab, indexes, hide) {
        var _this = this;
        if (hide === void 0) { hide = true; }
        var tabIdx;
        for (var i = 0; i < this.items.length; i++) {
            if (this.items[i].header.text === tab) {
                tabIdx = i;
                indexes.forEach(function (idx) {
                    if (_this.items[tabIdx].content[idx]) {
                        if (hide) {
                            if (!_this.items[tabIdx].content[idx].cssClass.includes(' e-hide')) {
                                _this.items[tabIdx].content[idx].cssClass = _this.items[tabIdx].content[idx].cssClass + ' e-hide';
                            }
                        }
                        else {
                            if (_this.items[tabIdx].content[idx].cssClass.includes(' e-hide')) {
                                _this.items[tabIdx].content[idx].cssClass = _this.items[tabIdx].content[idx].cssClass.replace(' e-hide', '');
                            }
                        }
                    }
                });
                break;
            }
        }
        this.setProperties({ 'items': this.items }, true);
        if (tabIdx !== undefined && tabIdx === this.selectedTab) {
            this.updateToolbar(tabIdx);
        }
    };
    /**
     * Get component name.
     *
     * @returns {string} - Get component name.
     * @private
     */
    Ribbon.prototype.getModuleName = function () {
        return 'ribbon';
    };
    /**
     * Get the properties to be maintained in the persisted state.
     *
     * @returns {string} - Get the properties to be maintained in the persisted state.
     * @private
     */
    Ribbon.prototype.getPersistData = function () {
        return this.addOnPersist([]);
    };
    /**
     * Called internally if any of the property value changed.
     *
     * @param {RibbonModel} newProp - Specify the new properties
     * @param {RibbonModel} oldProp - specify the old properties.
     * @returns {void} - if any of the property value changed.
     * @private
     */
    Ribbon.prototype.onPropertyChanged = function (newProp, oldProp) {
        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
            var prop = _a[_i];
            switch (prop) {
                case 'selectedTab':
                    this.tabObj.selectedItem = this.getIndex(newProp.selectedTab);
                    this.tabObj.dataBind();
                    break;
            }
        }
    };
    __decorate$7([
        Property('')
    ], Ribbon.prototype, "cssClass", void 0);
    __decorate$7([
        Property(true)
    ], Ribbon.prototype, "menuType", void 0);
    __decorate$7([
        Collection([], MenuItem)
    ], Ribbon.prototype, "menuItems", void 0);
    __decorate$7([
        Property(0)
    ], Ribbon.prototype, "selectedTab", void 0);
    __decorate$7([
        Collection([], RibbonItem)
    ], Ribbon.prototype, "items", void 0);
    __decorate$7([
        Event$1()
    ], Ribbon.prototype, "selecting", void 0);
    __decorate$7([
        Event$1()
    ], Ribbon.prototype, "fileMenuItemSelect", void 0);
    __decorate$7([
        Event$1()
    ], Ribbon.prototype, "beforeFileMenuItemRender", void 0);
    __decorate$7([
        Event$1()
    ], Ribbon.prototype, "beforeOpen", void 0);
    __decorate$7([
        Event$1()
    ], Ribbon.prototype, "beforeClose", void 0);
    __decorate$7([
        Event$1()
    ], Ribbon.prototype, "selectFormat", void 0);
    __decorate$7([
        Event$1()
    ], Ribbon.prototype, "clicked", void 0);
    __decorate$7([
        Event$1()
    ], Ribbon.prototype, "created", void 0);
    __decorate$7([
        Event$1()
    ], Ribbon.prototype, "expandCollapse", void 0);
    Ribbon = __decorate$7([
        NotifyPropertyChanges
    ], Ribbon);
    return Ribbon;
}(Component));

/**
 * Export Ribbon modules
 */

/**
 * `Color Picker` module is used to handle ColorPicker functionality.
 *
 * @hidden
 */
var ColorPicker$1 = /** @__PURE__ @class */ (function () {
    function ColorPicker$$1(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    ColorPicker$$1.prototype.render = function () {
        var _this = this;
        var id = this.parent.element.id;
        var input = this.parent.createElement('input', { attrs: { 'type': 'color' } });
        this.fontColorPicker = new ColorPicker({
            value: '#000000ff',
            mode: 'Palette',
            showButtons: false,
            presetColors: fontColor,
            enableOpacity: false,
            beforeClose: function () { return _this.beforeCloseHandler(_this.fontColorPicker); },
            open: this.openHandler.bind(this),
            beforeModeSwitch: function (args) { return _this.beforeModeSwitch(_this.fontColorPicker, args); },
            change: function (args) {
                var color = _this.fontColorPicker.getValue(args.currentValue.rgba);
                var eventArgs = { style: { color: color }, onActionUpdate: true };
                _this.parent.notify(setCellFormat, eventArgs);
                if (eventArgs.cancel) {
                    _this.fontColorPicker.setProperties({ 'value': _this.fontColorPicker.getValue(args.previousValue.rgba, 'HEXA') }, true);
                }
                else {
                    _this.updateSelectedColor(eventArgs.style.color, _this.fontColorPicker.element);
                }
                focus(_this.parent.element);
            },
            created: function () { return _this.wireFocusEvent(_this.fontColorPicker.element, '#000000'); }
        });
        this.fontColorPicker.createElement = this.parent.createElement;
        this.parent.element.appendChild(input);
        this.fontColorPicker.appendTo(input);
        input.parentElement.id = id + "_font_color_picker";
        addClass([input.nextElementSibling.getElementsByClassName('e-selected-color')[0]], ['e-icons', 'e-font-color']);
        input = this.parent.createElement('input', { attrs: { 'type': 'color' } });
        this.filColorPicker = new ColorPicker({
            value: '#ffff00ff',
            mode: 'Palette',
            presetColors: fillColor,
            showButtons: false,
            enableOpacity: false,
            open: this.openHandler.bind(this),
            beforeClose: function () { return _this.beforeCloseHandler(_this.filColorPicker); },
            beforeModeSwitch: function (args) { return _this.beforeModeSwitch(_this.filColorPicker, args); },
            change: function (args) {
                var color = _this.filColorPicker.getValue(args.currentValue.rgba);
                var eventArgs = { style: { backgroundColor: color }, onActionUpdate: true };
                _this.parent.notify(setCellFormat, eventArgs);
                if (eventArgs.cancel) {
                    _this.filColorPicker.setProperties({ 'value': _this.filColorPicker.getValue(args.previousValue.rgba, 'HEXA') }, true);
                }
                else {
                    _this.updateSelectedColor(eventArgs.style.backgroundColor, _this.filColorPicker.element);
                }
                focus(_this.parent.element);
            },
            created: function () { return _this.wireFocusEvent(_this.filColorPicker.element, '#ffff00'); }
        });
        this.filColorPicker.createElement = this.parent.createElement;
        this.parent.element.appendChild(input);
        this.filColorPicker.appendTo(input);
        input.parentElement.id = id + "_fill_color_picker";
        addClass([input.nextElementSibling.getElementsByClassName('e-selected-color')[0]], ['e-icons', 'e-fill-color']);
    };
    ColorPicker$$1.prototype.updateSelectedColor = function (color, ele) {
        ele.nextElementSibling.querySelector('.e-selected-color').style.borderBottomColor = color;
    };
    ColorPicker$$1.prototype.wireFocusEvent = function (element, color) {
        var _this = this;
        this.updateSelectedColor(color, element);
        element = element.parentElement.querySelector('.e-split-colorpicker');
        element.addEventListener('focus', function () {
            focus(_this.parent.element);
        });
    };
    ColorPicker$$1.prototype.openHandler = function (args) {
        args.element.querySelector('.e-mode-switch-btn').title =
            this.parent.serviceLocator.getService(locale).getConstant('MoreColors');
    };
    ColorPicker$$1.prototype.beforeCloseHandler = function (inst) {
        if (!inst.modeSwitcher) {
            inst.setProperties({ modeSwitcher: true }, true);
        }
        if (inst.showButtons) {
            inst.setProperties({ showButtons: false }, true);
        }
    };
    ColorPicker$$1.prototype.beforeModeSwitch = function (inst, args) {
        var l10n = this.parent.serviceLocator.getService(locale);
        if (args.mode === 'Picker') {
            inst.showButtons = true;
            inst.dataBind();
            args.element.querySelector('.e-apply').title = l10n.getConstant('Apply');
            args.element.querySelector('.e-cancel').title = l10n.getConstant('Cancel');
            args.element.querySelector('.e-mode-switch-btn').title = l10n.getConstant('StandardColors');
        }
        else {
            inst.showButtons = false;
            inst.dataBind();
            args.element.querySelector('.e-mode-switch-btn').title = l10n.getConstant('MoreColors');
        }
    };
    ColorPicker$$1.prototype.destroy = function () {
        if (this.parent) {
            this.removeEventListener();
            this.fontColorPicker.destroy();
            this.fontColorPicker = null;
            this.filColorPicker.destroy();
            this.filColorPicker = null;
            this.parent = null;
        }
    };
    ColorPicker$$1.prototype.addEventListener = function () {
        this.parent.on(beforeRibbonCreate, this.render, this);
        this.parent.on('destroyRibbonComponents', this.destroy, this);
        this.parent.on(spreadsheetDestroyed, this.destroy, this);
    };
    ColorPicker$$1.prototype.removeEventListener = function () {
        this.parent.off(beforeRibbonCreate, this.render);
        this.parent.off('destroyRibbonComponents', this.destroy);
        this.parent.on(spreadsheetDestroyed, this.destroy, this);
    };
    return ColorPicker$$1;
}());

/**
 * Represents Ribbon for Spreadsheet.
 */
var Ribbon$$1 = /** @__PURE__ @class */ (function () {
    function Ribbon$$1(parent) {
        this.border = '1px solid #000000';
        this.fontNameIndex = 5;
        this.numPopupWidth = 0;
        this.findValue = '';
        this.preTabIdx = 1;
        this.chartThemeIndex = 5;
        this.parent = parent;
        this.addEventListener();
        this.initDefaultFormats();
        new ColorPicker$1(parent);
    }
    Ribbon$$1.prototype.getModuleName = function () {
        return 'ribbon';
    };
    Ribbon$$1.prototype.initRibbon = function (args) {
        if (!this.parent.showRibbon && this.ribbon) {
            this.destroy();
            return;
        }
        this.parent.notify(beforeRibbonCreate, {});
        if (this.parent.isMobileView()) {
            this.createMobileView();
        }
        else {
            this.createRibbon(args);
        }
    };
    Ribbon$$1.prototype.getRibbonMenuItems = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var id = this.parent.element.id;
        return [{
                text: this.parent.isMobileView() ? '' : l10n.getConstant('File'),
                iconCss: this.parent.isMobileView() ? 'e-icons e-file-menu-icon' : null, id: id + "_File",
                items: [
                    { text: l10n.getConstant('New'), id: id + "_New", iconCss: 'e-new e-icons' },
                    { text: l10n.getConstant('Open'), id: id + "_Open", iconCss: 'e-open e-icons' },
                    {
                        text: l10n.getConstant('SaveAs'), iconCss: 'e-save e-icons', id: id + "_Save_As",
                        items: [
                            { text: l10n.getConstant('ExcelXlsx'), id: id + "_Xlsx", iconCss: 'e-xlsx e-icons' },
                            { text: l10n.getConstant('ExcelXls'), id: id + "_Xls", iconCss: 'e-xls e-icons' },
                            { text: l10n.getConstant('CSV'), id: id + "_Csv", iconCss: 'e-csv e-icons' },
                            { text: l10n.getConstant('PDF'), id: id + "_Pdf", iconCss: 'e-pdf e-icons' }
                        ]
                    }
                ]
            }];
    };
    Ribbon$$1.prototype.getRibbonItems = function () {
        var _this = this;
        var id = this.parent.element.id;
        var l10n = this.parent.serviceLocator.getService(locale);
        var items = [{
                header: { text: l10n.getConstant('Home') },
                content: [
                    { prefixIcon: 'e-undo-icon', tooltipText: l10n.getConstant('Undo') + " (Ctrl+Z)", id: id + '_undo', disabled: true },
                    { prefixIcon: 'e-redo-icon', tooltipText: l10n.getConstant('Redo') + " (Ctrl+Y)", id: id + '_redo', disabled: true },
                    { type: 'Separator', id: id + '_separator_1' },
                    { prefixIcon: 'e-cut-icon', tooltipText: l10n.getConstant('Cut') + " (Ctrl+X)", id: id + '_cut' },
                    { prefixIcon: 'e-copy-icon', tooltipText: l10n.getConstant('Copy') + " (Ctrl+C)", id: id + '_copy' },
                    { tooltipText: l10n.getConstant('Paste') + " (Ctrl+V)", template: this.getPasteBtn(id), id: id + '_paste',
                        disabled: true
                    }, { type: 'Separator', id: id + '_separator_2' },
                    { template: this.getNumFormatDDB(id), tooltipText: l10n.getConstant('NumberFormat'), id: id + '_number_format' },
                    { type: 'Separator', id: id + '_separator_3' },
                    { template: this.getFontNameDDB(id), tooltipText: l10n.getConstant('Font'), id: id + '_font_name' },
                    { type: 'Separator', id: id + '_separator_4' },
                    { template: this.getFontSizeDDB(id), tooltipText: l10n.getConstant('FontSize'), id: id + '_font_size' },
                    { type: 'Separator', id: id + '_separator_5' },
                    { template: this.getBtn(id, 'bold'), tooltipText: l10n.getConstant('Bold') + " (Ctrl+B)", id: id + '_bold' },
                    { template: this.getBtn(id, 'italic'), tooltipText: l10n.getConstant('Italic') + " (Ctrl+I)", id: id + '_italic' },
                    { template: this.getBtn(id, 'line-through'), tooltipText: l10n.getConstant('Strikethrough') + " (Ctrl+5)",
                        id: id + '_line-through' },
                    { template: this.getBtn(id, 'underline'), tooltipText: l10n.getConstant('Underline') + " (Ctrl+U)",
                        id: id + '_underline' },
                    { template: document.getElementById(id + "_font_color_picker"), tooltipText: l10n.getConstant('TextColor'),
                        id: id + '_font_color_picker' }, { type: 'Separator', id: id + '_separator_6' },
                    { template: document.getElementById(id + "_fill_color_picker"), tooltipText: l10n.getConstant('FillColor'),
                        id: id + '_fill_color_picker' },
                    { template: this.getBordersDBB(id), tooltipText: l10n.getConstant('Borders'), id: id + '_borders' }, {
                        template: this.getMergeSplitBtn(id), tooltipText: l10n.getConstant('MergeCells'), id: id + '_merge_cells',
                        disabled: true
                    }, { type: 'Separator', id: id + '_separator_7' },
                    { template: this.getTextAlignDDB(id), tooltipText: l10n.getConstant('HorizontalAlignment'), id: id + '_text_align' }, { template: this.getVerticalAlignDDB(id), tooltipText: l10n.getConstant('VerticalAlignment'), id: id + '_vertical_align' },
                    { template: this.getBtn(id, 'wrap', false), tooltipText: "" + l10n.getConstant('WrapText'), id: id + '_wrap' }
                ]
            },
            {
                header: { text: l10n.getConstant('Insert') }, content: [
                    {
                        prefixIcon: 'e-hyperlink-icon', text: l10n.getConstant('Link'),
                        id: id + '_hyperlink', tooltipText: l10n.getConstant('Link'), click: function () { _this.getHyperlinkDlg(); }
                    },
                    {
                        prefixIcon: 'e-image-icon', text: l10n.getConstant('Image'),
                        id: id + '_image', tooltipText: l10n.getConstant('Image'), click: function () {
                            select('#' + id + '_imageUpload', _this.parent.element).click();
                        }
                    }
                ]
            },
            {
                header: { text: l10n.getConstant('Formulas') }, content: [{
                        prefixIcon: 'e-insert-function', tooltipText: l10n.getConstant('InsertFunction'),
                        text: l10n.getConstant('InsertFunction'), id: id + '_insert_function'
                    }]
            },
            {
                header: { text: l10n.getConstant('Data') }, content: [
                    {
                        prefixIcon: 'e-protect-icon', text: l10n.getConstant('ProtectSheet'), id: id + '_protect',
                        tooltipText: l10n.getConstant('ProtectSheet')
                    },
                    {
                        prefixIcon: 'e-password-protect-icon', text: l10n.getConstant('ProtectWorkbook'), id: id + '_protectworkbook',
                        tooltipText: l10n.getConstant('ProtectWorkbook')
                    },
                    { type: 'Separator', id: id + '_separator_8' },
                    {
                        template: this.datavalidationDDB(id), tooltipText: l10n.getConstant('DataValidation'),
                        id: id + '_datavalidation'
                    }
                ]
            },
            {
                header: { text: l10n.getConstant('View') }, content: [
                    {
                        prefixIcon: 'e-hide-headers', text: this.getLocaleText('Headers'), id: id + '_headers',
                        tooltipText: this.getLocaleText('Headers')
                    }, { type: 'Separator', id: id + '_separator_9' },
                    {
                        prefixIcon: 'e-hide-gridlines', text: this.getLocaleText('GridLines'), id: id + '_gridlines',
                        tooltipText: this.getLocaleText('GridLines')
                    },
                    { type: 'Separator', id: id + '_separator_13' },
                    { prefixIcon: 'e-freeze-pane', text: l10n.getConstant('FreezePanes'), id: id + '_freezepanes', tooltipText: l10n.getConstant('FreezePanes') },
                    { prefixIcon: 'e-freeze-row', text: l10n.getConstant('FreezeRows'), id: id + '_freezerows', tooltipText: l10n.getConstant('FreezeRows') },
                    { prefixIcon: 'e-freeze-column', text: l10n.getConstant('FreezeColumns'), id: id + '_freezecolumns', tooltipText: l10n.getConstant('FreezeColumns') }
                ]
            }];
        if (this.parent.allowConditionalFormat) {
            items.find(function (x) { return x.header && x.header.text === l10n.getConstant('Home'); }).content.push({ type: 'Separator', id: id + '_separator_10' }, { template: this.getCFDBB(id), tooltipText: l10n.getConstant('ConditionalFormatting'), id: id + '_conditionalformatting' });
        }
        if (this.parent.allowChart) {
            items.find(function (x) { return x.header && x.header.text === l10n.getConstant('Insert'); }).content.push({ type: 'Separator', id: id + '_separator_11' }, {
                template: this.getChartDDB(id, true), text: l10n.getConstant('Chart'),
                tooltipText: l10n.getConstant('Chart'), id: id + '_chart'
            });
        }
        if (this.parent.allowCellFormatting) {
            items.find(function (x) { return x.header && x.header.text === l10n.getConstant('Home'); }).content.push({ type: 'Separator', id: id + '_separator_12' }, { template: this.getClearDDB(id), tooltipText: l10n.getConstant('Clear'), id: id + '_clear' });
        }
        if (this.parent.allowSorting || this.parent.allowFiltering) {
            items.find(function (x) { return x.header && x.header.text === l10n.getConstant('Home'); }).content.push({ template: this.getSortFilterDDB(id), tooltipText: l10n.getConstant('SortAndFilter'), id: id + '_sorting' });
        }
        if (this.parent.allowFindAndReplace) {
            items.find(function (x) { return x.header && x.header.text === l10n.getConstant('Home'); }).content.push({
                template: this.getFindBtn(id), prefixIcon: 'e-tbar-search-icon tb-icons',
                tooltipText: l10n.getConstant('FindReplaceTooltip'), id: id + '_find'
            });
        }
        return items;
    };
    Ribbon$$1.prototype.getPasteBtn = function (id) {
        var _this = this;
        var btn = this.parent.element.appendChild(this.parent.createElement('button', { id: id + '_paste' }));
        var l10n = this.parent.serviceLocator.getService(locale);
        this.pasteSplitBtn = new SplitButton({
            iconCss: 'e-icons e-paste-icon',
            items: [
                { text: l10n.getConstant('All'), id: 'All' },
                { text: l10n.getConstant('Values'), id: 'Values' },
                { text: l10n.getConstant('Formats'), id: 'Formats' }
            ],
            createPopupOnClick: true,
            select: function (args) {
                _this.parent.notify(paste, { type: args.item.id, isAction: true, isInternal: true });
            },
            click: function () {
                _this.parent.notify(paste, { isAction: true, isInternal: true });
            },
            close: function () { focus(_this.parent.element); }
        });
        this.pasteSplitBtn.createElement = this.parent.createElement;
        this.pasteSplitBtn.appendTo(btn);
        return btn.parentElement;
    };
    Ribbon$$1.prototype.getHyperlinkDlg = function () {
        var indexes = getRangeIndexes(this.parent.getActiveSheet().activeCell);
        var row = this.parent.sheets[this.parent.getActiveSheet().id - 1].rows[indexes[0]];
        var cell;
        if (!isNullOrUndefined(row)) {
            cell = row.cells[indexes[1]];
        }
        if (isNullOrUndefined(cell)) {
            setCell(indexes[0], indexes[1], this.parent.getActiveSheet(), cell, false);
        }
        if (cell && cell.hyperlink) {
            this.parent.notify(editHyperlink, null);
        }
        else {
            this.parent.notify(initiateHyperlink, null);
        }
    };
    Ribbon$$1.prototype.passwordProtectDlg = function () {
        if (this.parent.password.length > 0) {
            this.parent.notify(unProtectWorkbook, null);
        }
        else {
            if (document.getElementById(this.parent.element.id + '_protectworkbook').classList.contains('e-active')) {
                document.getElementById(this.parent.element.id + '_protectworkbook').classList.remove('e-active');
                if (this.parent.showSheetTabs) {
                    this.parent.element.querySelector('.e-add-sheet-tab').removeAttribute('disabled');
                }
            }
            else {
                this.parent.notify(protectWorkbook, null);
            }
        }
    };
    Ribbon$$1.prototype.getLocaleText = function (str, setClass) {
        var text;
        var l10n = this.parent.serviceLocator.getService(locale);
        var sheet = this.parent.getActiveSheet();
        if (sheet['show' + str]) {
            if (setClass) {
                document.getElementById(this.parent.element.id + '_sheet').classList.remove('e-hide-' + str.toLowerCase());
            }
            text = l10n.getConstant('Hide' + str);
        }
        else {
            if (setClass) {
                document.getElementById(this.parent.element.id + '_sheet').classList.add('e-hide-' + str.toLowerCase());
            }
            text = l10n.getConstant('Show' + str);
        }
        return text;
    };
    Ribbon$$1.prototype.getLocaleProtectText = function (str, setClass) {
        var text;
        var l10n = this.parent.serviceLocator.getService(locale);
        var sheet = this.parent.getActiveSheet();
        if (sheet.isProtected) {
            if (setClass) {
                this.parent.getMainContent().classList.remove('e-hide-' + str.toLowerCase());
            }
            text = l10n.getConstant('Unprotect' + str);
        }
        else {
            if (setClass) {
                this.parent.getMainContent().classList.add('e-hide-' + str.toLowerCase());
            }
            text = l10n.getConstant('Protect' + str);
        }
        return text;
    };
    Ribbon$$1.prototype.getLocaleProtectWorkbook = function (str, setClass) {
        var text;
        var l10n = this.parent.serviceLocator.getService(locale);
        if (this.parent.isProtected) {
            if (setClass) {
                this.parent.getMainContent().classList.remove('e-hide-' + str.toLowerCase());
            }
            text = l10n.getConstant(str);
        }
        else {
            if (setClass) {
                this.parent.getMainContent().classList.add('e-hide-' + str.toLowerCase());
            }
            text = l10n.getConstant(str);
        }
        return text;
    };
    Ribbon$$1.prototype.insertDesignChart = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var tabIdx = this.ribbon.items.length - 1;
        this.preTabIdx = this.ribbon.selectedTab;
        if (this.parent.allowChart && this.ribbon.items[tabIdx] && this.ribbon.items[tabIdx].header.text !==
            l10n.getConstant('ChartDesign')) {
            var id = this.parent.element.id;
            var items = [{
                    header: { text: l10n.getConstant('ChartDesign') },
                    content: [
                        {
                            template: this.getAddChartEleDBB(id),
                            tooltipText: l10n.getConstant('AddChartElement'), id: id + 'add_chart_ element_chart'
                        },
                        { type: 'Separator' },
                        {
                            prefixIcon: 'e-switch-row-column-icon', text: l10n.getConstant('SwitchRowColumn'),
                            tooltipText: l10n.getConstant('SwitchRowColumn'),
                            id: id + 'switch_row_column_chart', click: function () {
                                _this.parent.notify(chartDesignTab, { switchRowColumn: true });
                            }
                        },
                        { type: 'Separator' },
                        { template: this.getChartThemeDDB(id), tooltipText: l10n.getConstant('ChartTheme'), id: id + '_chart_theme' },
                        { type: 'Separator' },
                        { template: this.getChartDDB(id, false), tooltipText: l10n.getConstant('ChartType'), id: id + '_chart_type' }
                    ]
                }];
            this.parent.addRibbonTabs(items);
            tabIdx = this.ribbon.items.length;
            this.ribbon.tabObj.select(tabIdx);
        }
    };
    Ribbon$$1.prototype.removeDesignChart = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var tabIdx = this.ribbon.items.length - 1;
        if (this.parent.allowChart && this.ribbon.items[tabIdx] && this.ribbon.items[tabIdx].header.text ===
            l10n.getConstant('ChartDesign')) {
            this.ribbon.tabObj.select(this.preTabIdx + 1);
            this.parent.hideRibbonTabs([l10n.getConstant('ChartDesign')], true);
            if (document.getElementsByClassName('e-addchart-ddb').length > 0) {
                document.getElementsByClassName('e-addchart-ddb')[0].remove();
            }
            if (document.getElementsByClassName('e-chart-type-ddb').length > 0) {
                document.getElementsByClassName('e-chart-type-ddb')[0].remove();
            }
            if (document.getElementsByClassName('e-charttheme-ddb').length > 0) {
                document.getElementsByClassName('e-charttheme-ddb')[0].remove();
            }
            delete this.ribbon.items[tabIdx].content[0];
            this.ribbon.items.length = this.ribbon.items.length - 1;
        }
    };
    Ribbon$$1.prototype.createRibbon = function (args) {
        var ribbonElement = this.parent.createElement('div', { id: this.parent.element.id + "_ribbon" });
        this.ribbon = new Ribbon$1({
            selectedTab: 0,
            menuItems: this.getRibbonMenuItems(),
            items: this.getRibbonItems(),
            fileMenuItemSelect: this.fileMenuItemSelect.bind(this),
            beforeOpen: this.fileMenuBeforeOpen.bind(this),
            beforeClose: this.fileMenuBeforeClose.bind(this),
            clicked: this.toolbarClicked.bind(this),
            created: this.ribbonCreated.bind(this),
            selecting: this.tabSelecting.bind(this),
            expandCollapse: this.expandCollapseHandler.bind(this),
            beforeFileMenuItemRender: this.beforeRenderHandler.bind(this)
        });
        this.ribbon.createElement = this.parent.createElement;
        if (args && args.uiUpdate) {
            var refEle = this.parent.element.querySelector('.e-formula-bar-panel') ||
                document.getElementById(this.parent.element.id + '_sheet_panel');
            this.parent.element.insertBefore(ribbonElement, refEle);
        }
        else {
            this.parent.element.appendChild(ribbonElement);
        }
        this.ribbon.appendTo(ribbonElement);
    };
    Ribbon$$1.prototype.tabSelecting = function (args) {
        if (args.selectingIndex !== this.ribbon.selectedTab) {
            if (this.parent.allowChart) {
                var l10n = this.parent.serviceLocator.getService(locale);
                if (this.ribbon.items[args.selectingIndex] && this.ribbon.items[args.selectingIndex].header.text ===
                    l10n.getConstant('Insert')) {
                    this.createChartDdb(document.getElementById(this.parent.element.id + '_chart-btn'), true);
                }
                if (this.ribbon.items[args.selectedIndex] && this.ribbon.items[args.selectedIndex].header.text ===
                    l10n.getConstant('Insert')) {
                    var ribbonContent = this.ribbon.items[args.selectedIndex].content;
                    for (var i = ribbonContent.length - 1; i >= 0; i--) {
                        if (ribbonContent[i].id === this.parent.element.id + '_chart') {
                            var chartBtn = ribbonContent[i].template;
                            if (chartBtn && chartBtn.classList.contains('e-dropdown-btn')) {
                                this.destroyComponent(chartBtn, 'dropdown-btn');
                            }
                            break;
                        }
                    }
                }
            }
            this.refreshRibbonContent(args.selectingIndex);
            this.parent.notify(tabSwitch, { activeTab: args.selectingIndex });
        }
    };
    Ribbon$$1.prototype.beforeRenderHandler = function (args) {
        var l10n = this.parent.serviceLocator.getService(locale);
        if (args.item.text === l10n.getConstant('Open') && (!this.parent.openUrl || !this.parent.allowOpen)) {
            args.element.classList.add('e-disabled');
        }
        if (args.item.text === l10n.getConstant('SaveAs') && (!this.parent.saveUrl || !this.parent.allowSave)) {
            args.element.classList.add('e-disabled');
        }
    };
    Ribbon$$1.prototype.getChartThemeDDB = function (id) {
        var _this = this;
        var chartThemeBtn = this.parent.createElement('button', { id: id + '_chart_theme' });
        chartThemeBtn.appendChild(this.parent.createElement('span', { className: 'e-tbar-btn-text', innerHTML: 'Material' }));
        this.chartThemeDDB = new DropDownButton({
            items: this.getChartThemeDdbItems(),
            createPopupOnClick: true,
            select: function (args) { return _this.chartThemeDDBSelect(args); },
            close: function () { return _this.parent.element.focus(); },
            cssClass: 'e-flat e-charttheme-ddb',
            beforeOpen: function (args) { return _this.tBarDdbBeforeOpen(args.element, args.items); }
        });
        this.chartThemeDDB.createElement = this.parent.createElement;
        this.chartThemeDDB.appendTo(chartThemeBtn);
        return chartThemeBtn;
    };
    Ribbon$$1.prototype.getNumFormatDDB = function (id) {
        var _this = this;
        var numFormatBtn = this.parent.createElement('button', { id: id + '_number_format' });
        numFormatBtn.appendChild(this.parent.createElement('span', { className: 'e-tbar-btn-text', innerHTML: 'General' }));
        this.numFormatDDB = new DropDownButton({
            items: this.getNumFormatDdbItems(id),
            createPopupOnClick: true,
            select: function (args) { return _this.numDDBSelect(args); },
            open: function (args) { return _this.numDDBOpen(args); },
            beforeItemRender: function (args) { return _this.previewNumFormat(args); },
            close: function () { return focus(_this.parent.element); },
            cssClass: 'e-flat e-numformat-ddb',
            beforeOpen: function (args) { return _this.tBarDdbBeforeOpen(args.element, args.items); }
        });
        this.numFormatDDB.createElement = this.parent.createElement;
        this.numFormatDDB.appendTo(numFormatBtn);
        return numFormatBtn;
    };
    Ribbon$$1.prototype.getFontSizeDDB = function (id) {
        var _this = this;
        this.fontSizeDdb = new DropDownButton({
            cssClass: 'e-font-size-ddb',
            content: '11',
            createPopupOnClick: true,
            items: [{ text: '8' }, { text: '9' }, { text: '10' }, { text: '11' }, { text: '12' }, { text: '14' }, { text: '16' },
                { text: '18' }, { text: '20' }, { text: '22' }, { text: '24' }, { text: '26' }, { text: '28' }, { text: '36' },
                { text: '48' }, { text: '72' }],
            beforeOpen: function (args) {
                _this.tBarDdbBeforeOpen(args.element, args.items);
                _this.refreshSelected(_this.fontSizeDdb, args.element, 'content', 'text');
            },
            select: function (args) {
                var eventArgs = { style: { fontSize: args.item.text + "pt" }, onActionUpdate: true };
                _this.parent.notify(setCellFormat, eventArgs);
                if (!eventArgs.cancel) {
                    _this.fontSizeDdb.content = eventArgs.style.fontSize.split('pt')[0];
                    _this.fontSizeDdb.dataBind();
                }
            },
            close: function () { return focus(_this.parent.element); }
        });
        this.fontSizeDdb.createElement = this.parent.createElement;
        this.fontSizeDdb.appendTo(this.parent.createElement('button', { id: id + '_font_size' }));
        return this.fontSizeDdb.element;
    };
    Ribbon$$1.prototype.getChartDDB = function (id, isChart) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var chartBtn;
        if (isChart) {
            chartBtn = this.parent.createElement('button', { id: id + '_chart-btn' });
            chartBtn.appendChild(this.parent.createElement('span', { id: id + '_chart', innerHTML: l10n.getConstant('Chart') }));
        }
        else {
            chartBtn = this.parent.createElement('button', { id: id + '_chart-type-btn' });
            chartBtn.appendChild(this.parent.createElement('span', { id: id + '_chart_type', innerHTML: l10n.getConstant('ChartType') }));
            this.createChartDdb(chartBtn, false);
        }
        return chartBtn;
    };
    Ribbon$$1.prototype.createChartDdb = function (chartBtn, isChart) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var menuClass = isChart ? 'e-chart-menu' : 'e-chart-type-menu';
        var ul = this.parent.createElement('ul', { id: "" + this.parent.element.id + (isChart ? '_chart_menu' : '_chart_type_menu') });
        var chartMenu;
        var chartDdb = new DropDownButton({
            iconCss: "e-icons " + (isChart ? 'e-chart-icon' : 'e-chart-type-icon'),
            cssClass: isChart ? 'e-chart-ddb' : 'e-chart-type-ddb',
            target: ul,
            createPopupOnClick: true,
            beforeOpen: function (args) {
                chartMenu = _this.createChartMenu(ul, menuClass, l10n, chartDdb);
                _this.tBarDdbBeforeOpen(args.element, chartMenu.items);
            },
            beforeClose: function (args) {
                if (args.event && closest(args.event.target, '.' + menuClass)) {
                    args.cancel = true;
                }
                else {
                    chartMenu.destroy();
                }
            },
            close: function () { return focus(_this.parent.element); }
        });
        chartDdb.createElement = this.parent.createElement;
        chartDdb.appendTo(chartBtn);
    };
    Ribbon$$1.prototype.createChartMenu = function (ul, cssClass, l10n, chartDdb) {
        var _this = this;
        var chartMenu = new Menu({
            cssClass: cssClass,
            items: [
                {
                    iconCss: 'e-icons e-column', text: l10n.getConstant('Column'),
                    items: [{ id: 'column_chart' }]
                },
                {
                    iconCss: 'e-icons e-bar', text: l10n.getConstant('Bar'),
                    items: [{ id: 'bar_chart' }]
                },
                {
                    iconCss: 'e-icons e-area', text: l10n.getConstant('Area'),
                    items: [{ id: 'area_chart' }]
                },
                {
                    iconCss: 'e-icons e-pie-doughnut', text: l10n.getConstant('PieAndDoughnut'),
                    items: [{ id: 'pie_doughnut_chart' }]
                },
                {
                    iconCss: 'e-icons e-line', text: l10n.getConstant('Line'),
                    items: [{ id: 'line_chart' }]
                },
                // {
                //     iconCss: 'e-icons e-radar', text: l10n.getConstant('Radar'),
                //     items: [{ id: 'radar_chart' }]
                // },
                {
                    iconCss: 'e-icons e-scatter', text: l10n.getConstant('Scatter'),
                    items: [{ id: 'scatter_chart' }]
                }
            ],
            orientation: 'Vertical',
            beforeOpen: function (args) {
                if (args.parentItem.text === l10n.getConstant('Column')) {
                    args.element.firstChild.appendChild(column);
                    args.element.parentElement.classList.add('e-column-chart');
                }
                else if (args.parentItem.text === l10n.getConstant('Bar')) {
                    args.element.firstChild.appendChild(bar);
                    args.element.parentElement.classList.add('e-bar-chart');
                }
                else if (args.parentItem.text === l10n.getConstant('Area')) {
                    args.element.firstChild.appendChild(area);
                    args.element.parentElement.classList.add('e-area-chart');
                }
                else if (args.parentItem.text === l10n.getConstant('Line')) {
                    args.element.firstChild.appendChild(line);
                    args.element.parentElement.classList.add('e-line-chart');
                }
                else if (args.parentItem.text === l10n.getConstant('PieAndDoughnut')) {
                    args.element.firstChild.appendChild(pie);
                    args.element.parentElement.classList.add('e-pie-doughnut-chart');
                }
                else if (args.parentItem.text === l10n.getConstant('Radar')) {
                    args.element.firstChild.appendChild(radar);
                    args.element.parentElement.classList.add('e-radar-chart');
                }
                else if (args.parentItem.text === l10n.getConstant('Scatter')) {
                    args.element.firstChild.appendChild(scatter);
                    args.element.parentElement.classList.add('e-scatter-chart');
                }
            },
            select: function (args) { return _this.chartSelected(args, chartDdb); }
        });
        var column = this.parent.createElement('div', { id: 'column_main', className: 'e-column-main' });
        var column1Text = this.parent.createElement('div', { id: 'column1_text', className: 'e-column1-text', innerHTML: l10n.getConstant('Column') });
        var column1Cont = this.parent.createElement('div', { id: 'column1_cont', className: 'e-column1-cont' });
        var column2Cont = this.parent.createElement('div', { id: 'column2_cont', className: 'e-column2-cont' });
        column.appendChild(column1Text);
        column.appendChild(column1Cont);
        //column.appendChild(column2Text);
        //column.appendChild(column2Cont);
        var clusteredColumn = this.parent.createElement('span', { id: 'clusteredColumn', className: 'e-clusteredcolumn e-column-icon e-menu-icon e-icons' });
        var stackedColumn = this.parent.createElement('span', {
            id: 'stackedColumn', className: 'e-stackedcolumn e-column-icon e-menu-icon e-icons'
        });
        var stackedColumn100 = this.parent.createElement('span', {
            id: 'stackedColumn100', className: 'e-stackedcolumn100 e-column-icon e-menu-icon e-icons'
        });
        var clusteredColumn3D = this.parent.createElement('span', {
            id: 'clusteredColumn3D', className: 'e-clusteredColumn3D e-column-icon'
        });
        var stackedColumn3D = this.parent.createElement('span', { id: 'stackedColumn3D', className: 'e-stackedColumn3D e-column-icon' });
        var stackedColumn1003D = this.parent.createElement('span', { id: 'stackedColumn1003D', className: 'e-stackedColumn1003D e-column-icon' });
        clusteredColumn.title = l10n.getConstant('ClusteredColumn');
        stackedColumn.title = l10n.getConstant('StackedColumn');
        stackedColumn100.title = l10n.getConstant('StackedColumn100');
        stackedColumn1003D.title = l10n.getConstant('OrangeDataBar');
        stackedColumn3D.title = l10n.getConstant('LightblueDataBar');
        clusteredColumn3D.title = l10n.getConstant('PurpleDataBar');
        column1Cont.appendChild(clusteredColumn);
        column1Cont.appendChild(stackedColumn);
        column1Cont.appendChild(stackedColumn100);
        column2Cont.appendChild(clusteredColumn3D);
        column2Cont.appendChild(stackedColumn3D);
        column2Cont.appendChild(stackedColumn1003D);
        var bar = this.parent.createElement('div', { id: 'bar_main', className: 'e-bar-main' });
        var bar1Text = this.parent.createElement('div', { id: 'bar1_text', className: 'e-bar1-text', innerHTML: l10n.getConstant('Bar') });
        var bar1Cont = this.parent.createElement('div', { id: 'bar1_cont', className: 'e-bar1-cont' });
        var bar2Cont = this.parent.createElement('div', { id: 'bar2_cont', className: 'e-bar2-cont' });
        bar.appendChild(bar1Text);
        bar.appendChild(bar1Cont);
        //bar.appendChild(bar2Text);
        //bar.appendChild(bar2Cont);
        var clusteredBar = this.parent.createElement('span', { id: 'clusteredBar', className: 'e-clusteredbar e-bar-icon e-menu-icon e-icons' });
        var stackedBar = this.parent.createElement('span', { id: 'stackedBar', className: 'e-stackedbar e-bar-icon e-menu-icon e-icons' });
        var stackedBar100 = this.parent.createElement('span', { id: 'stackedBar100', className: 'e-stackedbar100 e-bar-icon e-menu-icon e-icons' });
        var clusteredBar3D = this.parent.createElement('span', { id: 'clusteredBar3D', className: 'e-clusteredBar3D e-bar-icon' });
        var stackedBar3D = this.parent.createElement('span', { id: 'stackedBar3D', className: 'e-stackedBar3D e-bar-icon' });
        var stackedBar1003D = this.parent.createElement('span', { id: 'stackedBar1003D', className: 'e-stackedBar1003D e-bar-icon' });
        clusteredBar.title = l10n.getConstant('ClusteredBar');
        stackedBar.title = l10n.getConstant('StackedBar');
        stackedBar100.title = l10n.getConstant('StackedBar100');
        stackedBar1003D.title = l10n.getConstant('OrangeDataBar');
        stackedBar3D.title = l10n.getConstant('LightblueDataBar');
        clusteredBar3D.title = l10n.getConstant('PurpleDataBar');
        bar1Cont.appendChild(clusteredBar);
        bar1Cont.appendChild(stackedBar);
        bar1Cont.appendChild(stackedBar100);
        bar2Cont.appendChild(clusteredBar3D);
        bar2Cont.appendChild(stackedBar3D);
        bar2Cont.appendChild(stackedBar1003D);
        var area = this.parent.createElement('div', { id: 'area_main', className: 'e-area-main' });
        var areaText = this.parent.createElement('div', { id: 'area_text', className: 'e-area-text', innerHTML: l10n.getConstant('Area') });
        var areaCont = this.parent.createElement('div', { id: 'area_cont', className: 'e-area-cont' });
        area.appendChild(areaText);
        area.appendChild(areaCont);
        var defArea = this.parent.createElement('span', { id: 'area', className: 'e-area e-area-icon e-menu-icon e-icons' });
        var stackedArea = this.parent.createElement('span', { id: 'stackedArea', className: 'e-stackedarea e-area-icon e-menu-icon e-icons' });
        var stackedArea100 = this.parent.createElement('span', { id: 'stackedArea100', className: 'e-stackedarea100 e-area-icon e-menu-icon e-icons' });
        defArea.title = l10n.getConstant('Area');
        stackedArea.title = l10n.getConstant('StackedArea');
        stackedArea100.title = l10n.getConstant('StackedArea100');
        areaCont.appendChild(defArea);
        areaCont.appendChild(stackedArea);
        areaCont.appendChild(stackedArea100);
        var line = this.parent.createElement('div', { id: 'line_main', className: 'e-line-main' });
        var lineText = this.parent.createElement('div', { id: 'line_text', className: 'e-line-text', innerHTML: l10n.getConstant('Line') });
        var lineCont = this.parent.createElement('div', { id: 'line_cont', className: 'e-line-cont' });
        line.appendChild(lineText);
        line.appendChild(lineCont);
        var defLine = this.parent.createElement('span', { id: 'line', className: 'e-line e-line-icon e-menu-icon e-icons' });
        var stackedLine = this.parent.createElement('span', { id: 'stackedLine', className: 'e-stackedline e-line-icon e-menu-icon e-icons' });
        var stackedLine100 = this.parent.createElement('span', {
            id: 'stackedline100', className: 'e-stackedline100 e-line-icon e-menu-icon e-icons'
        });
        defLine.title = l10n.getConstant('Line');
        stackedLine.title = l10n.getConstant('StackedLine');
        stackedLine100.title = l10n.getConstant('StackedLine100');
        lineCont.appendChild(defLine);
        lineCont.appendChild(stackedLine);
        lineCont.appendChild(stackedLine100);
        var pie = this.parent.createElement('div', { id: 'pie_main', className: 'e-pie-main' });
        var pieText = this.parent.createElement('div', { id: 'pie_text', className: 'e-pie-text', innerHTML: l10n.getConstant('Pie') });
        var pieCont = this.parent.createElement('div', { id: 'pie_cont', className: 'e-pie-cont' });
        pie.appendChild(pieText);
        pie.appendChild(pieCont);
        var defPie = this.parent.createElement('span', { id: 'pie', className: 'e-pie e-pie-icon e-menu-icon e-icons' });
        var doughnut = this.parent.createElement('span', { id: 'doughnut', className: 'e-doughnut e-pie-icon e-menu-icon e-icons' });
        defPie.title = l10n.getConstant('Pie');
        doughnut.title = l10n.getConstant('Doughnut');
        pieCont.appendChild(defPie);
        pieCont.appendChild(doughnut);
        var radar = this.parent.createElement('div', { id: 'radar_main', className: 'e-radar-main' });
        var radarText = this.parent.createElement('div', { id: 'radar_text', className: 'e-radar-text', innerHTML: 'Radar' });
        var radarCont = this.parent.createElement('div', { id: 'radar_cont', className: 'e-radar-cont' });
        radar.appendChild(radarText);
        radar.appendChild(radarCont);
        var defradar = this.parent.createElement('span', { id: 'radar', className: 'e-radar e-radar-icon e-menu-icon e-icons' });
        var radarMarkers = this.parent.createElement('span', { id: 'radar_markers', className: 'e-radar-markers e-radar-icon e-menu-icon e-icons' });
        defradar.title = l10n.getConstant('BlueDataBar');
        radarMarkers.title = l10n.getConstant('GreenDataBar');
        radarCont.appendChild(defradar);
        radarCont.appendChild(radarMarkers);
        var scatter = this.parent.createElement('div', { id: 'scatter_main', className: 'e-scatter-main' });
        var scatterText = this.parent.createElement('div', { id: 'scatter_text', className: 'e-scatter-text', innerHTML: l10n.getConstant('Scatter') });
        var scatterCont = this.parent.createElement('div', { id: 'scatter_cont', className: 'e-scatter-cont' });
        scatter.appendChild(scatterText);
        scatter.appendChild(scatterCont);
        var defscatter = this.parent.createElement('span', { id: 'scatter', className: 'e-scatter e-scatter-icon e-menu-icon e-icons' });
        defscatter.title = l10n.getConstant('Scatter');
        scatterCont.appendChild(defscatter);
        chartMenu.createElement = this.parent.createElement;
        chartMenu.appendTo(ul);
        ul.classList.add('e-ul');
        return chartMenu;
    };
    Ribbon$$1.prototype.getAddChartEleDBB = function (id) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var ul = this.parent.createElement('ul', { id: id + '_add_chart_menu' });
        var addChartMenu;
        this.addChartDdb = new DropDownButton({
            iconCss: 'e-icons e-addchart-icon',
            cssClass: 'e-addchart-ddb',
            target: ul,
            createPopupOnClick: true,
            close: function () { return focus(_this.parent.element); },
            beforeOpen: function (args) {
                addChartMenu = _this.createAddChartMenu(ul, l10n);
                _this.tBarDdbBeforeOpen(args.element, addChartMenu.items);
            },
            beforeClose: function (args) {
                if (args.event && closest(args.event.target, '.e-addchart-menu')) {
                    args.cancel = true;
                }
                else {
                    addChartMenu.destroy();
                }
            }
        });
        this.addChartDdb.createElement = this.parent.createElement;
        var addChartBtn = this.parent.createElement('button', { id: id + '_addchart' });
        addChartBtn.appendChild(this.parent.createElement('span', { id: id + '_chart', innerHTML: l10n.getConstant('AddChartElement') }));
        this.addChartDdb.appendTo(addChartBtn);
        return this.addChartDdb.element;
    };
    Ribbon$$1.prototype.createAddChartMenu = function (ul, l10n) {
        var addChartMenu = new Menu({
            cssClass: 'e-addchart-menu', title: l10n.getConstant('AddChartElement'),
            items: [{
                    iconCss: 'e-icons e-axes', text: l10n.getConstant('Axes'),
                    items: [{
                            iconCss: 'e-icons e-ph-axes', id: 'PHAxes',
                            text: l10n.getConstant('PrimaryHorizontal')
                        },
                        {
                            iconCss: 'e-icons e-pv-axes', id: 'PVAxes',
                            text: l10n.getConstant('PrimaryVertical')
                        }]
                },
                {
                    iconCss: 'e-icons e-axis-title', text: l10n.getConstant('AxisTitle'),
                    items: [{
                            iconCss: 'e-icons e-ph-axistitle', id: 'PHAxisTitle',
                            text: l10n.getConstant('PrimaryHorizontal')
                        },
                        {
                            iconCss: 'e-icons e-pv-axistitle', id: 'PVAxisTitle',
                            text: l10n.getConstant('PrimaryVertical')
                        }]
                },
                {
                    iconCss: 'e-icons e-chart-title', text: l10n.getConstant('ChartTitle'),
                    items: [{ iconCss: 'e-icons e-ct-none', id: 'ChartTitleNone', text: l10n.getConstant('None') },
                        { iconCss: 'e-icons e-ct-abovechart', id: 'ChartTitleAbove', text: l10n.getConstant('AboveChart') }
                        // { iconCss: 'e-icons e-ct-farchart', id: 'chart_farchart', text: l10n.getConstant('AboveChart') },
                        // { iconCss: 'e-icons e-ct-nearchart', id: 'chart_nearchart', text: l10n.getConstant('AboveChart') }
                    ]
                },
                {
                    iconCss: 'e-icons e-data-labels', text: l10n.getConstant('DataLabels'),
                    items: [{ iconCss: 'e-icons e-dl-none', id: 'DLNone', text: l10n.getConstant('None') },
                        { iconCss: 'e-icons e-dl-center', id: 'DLCenter', text: l10n.getConstant('Center') },
                        { iconCss: 'e-icons e-dl-insideend', id: 'DLInsideend', text: l10n.getConstant('InsideEnd') },
                        { iconCss: 'e-icons e-dl-insidebase', id: 'DLInsidebase', text: l10n.getConstant('InsideBase') },
                        { iconCss: 'e-icons e-dl-outsideend', id: 'DLOutsideend', text: l10n.getConstant('OutsideEnd') }]
                },
                {
                    iconCss: 'e-icons e-gridlines', text: l10n.getConstant('Gridlines'),
                    items: [{
                            iconCss: 'e-icons e-gl-major-horizontal', id: 'GLMajorHorizontal',
                            text: l10n.getConstant('PrimaryMajorHorizontal')
                        },
                        {
                            iconCss: 'e-icons e-gl-major-vertical', id: 'GLMajorVertical',
                            text: l10n.getConstant('PrimaryMajorVertical')
                        },
                        {
                            iconCss: 'e-icons e-gl-minor-horizontal', id: 'GLMinorHorizontal',
                            text: l10n.getConstant('PrimaryMinorHorizontal')
                        },
                        {
                            iconCss: 'e-icons e-gl-minor-vertical', id: 'GLMinorVertical',
                            text: l10n.getConstant('PrimaryMinorVertical')
                        }]
                },
                {
                    iconCss: 'e-icons e-legends', text: l10n.getConstant('Legends'),
                    items: [{ iconCss: 'e-icons e-legends-none', id: 'LegendNone', text: l10n.getConstant('None') },
                        { iconCss: 'e-icons e-legends-right', id: 'LegendsRight', text: l10n.getConstant('Right') },
                        { iconCss: 'e-icons e-legends-left', id: 'LegendsLeft', text: l10n.getConstant('Left') },
                        { iconCss: 'e-icons e-legends-bottom', id: 'LegendsBottom', text: l10n.getConstant('Bottom') },
                        { iconCss: 'e-icons e-legends-top', id: 'LegendsTop', text: l10n.getConstant('Top') }]
                }],
            orientation: 'Vertical',
            select: this.addChartEleSelected.bind(this)
        });
        addChartMenu.createElement = this.parent.createElement;
        addChartMenu.appendTo(ul);
        ul.classList.add('e-ul');
        return addChartMenu;
    };
    Ribbon$$1.prototype.getCFDBB = function (id) {
        var _this = this;
        var ul = this.parent.createElement('ul', { id: id + '_cf_menu' });
        var cfMenu;
        this.cFDdb = new DropDownButton({
            iconCss: 'e-icons e-conditionalformatting-icon',
            cssClass: 'e-cf-ddb',
            target: ul,
            createPopupOnClick: true,
            close: function () { return focus(_this.parent.element); },
            beforeOpen: function (args) {
                cfMenu = _this.createCFMenu(ul);
                _this.tBarDdbBeforeOpen(args.element, cfMenu.items);
            },
            beforeClose: function (args) {
                if (args.event && closest(args.event.target, '.e-cf-menu')) {
                    args.cancel = true;
                }
                else {
                    cfMenu.destroy();
                }
            }
        });
        this.cFDdb.createElement = this.parent.createElement;
        this.cFDdb.appendTo(this.parent.createElement('button', { id: id + '_conditionalformatting' }));
        return this.cFDdb.element;
    };
    Ribbon$$1.prototype.createCFMenu = function (ul) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var cFMenu = new Menu({
            cssClass: 'e-cf-menu',
            items: [{
                    iconCss: 'e-icons e-hlcellrules', text: l10n.getConstant('HighlightCellsRules'),
                    items: [{ iconCss: 'e-icons e-greaterthan', id: 'cf_greaterthan', text: l10n.getConstant('GreaterThan') + '...' },
                        { iconCss: 'e-icons e-lessthan', id: 'cf_lessthan', text: l10n.getConstant('LessThan') + '...' },
                        { iconCss: 'e-icons e-between', id: 'cf_between', text: l10n.getConstant('Between') + '...' },
                        { iconCss: 'e-icons e-equalto', id: 'cf_eqaulto', text: l10n.getConstant('CFEqualTo') + '...' }, {
                            iconCss: 'e-icons e-textcontains', id: 'cf_textthatcontains',
                            text: l10n.getConstant('TextThatContains') + '...'
                        }, { iconCss: 'e-icons e-adateoccuring', id: 'cf_adateoccuring', text: l10n.getConstant('ADateOccuring') + '...' }, {
                            iconCss: 'e-icons e-duplicate', id: 'cf_duplicatevalues',
                            text: l10n.getConstant('DuplicateValues') + '...'
                        }]
                },
                {
                    iconCss: 'e-icons e-topbottomrules', text: l10n.getConstant('TopBottomRules'),
                    items: [{ iconCss: 'e-icons e-top10items', id: 'cf_top10items', text: l10n.getConstant('Top10Items') + '...' },
                        { iconCss: 'e-icons e-top10', id: 'cf_top10', text: l10n.getConstant('Top10') + ' %...' },
                        { iconCss: 'e-icons e-bottom10items', id: 'cf_bottom10items', text: l10n.getConstant('Bottom10Items') + '...' },
                        { iconCss: 'e-icons e-bottom10', id: 'cf_bottom10', text: l10n.getConstant('Bottom10') + ' %...' },
                        { iconCss: 'e-icons e-aboveaverage', id: 'cf_aboveaverage', text: l10n.getConstant('AboveAverage') + '...' },
                        { iconCss: 'e-icons e-belowaverage', id: 'cf_belowaverage', text: l10n.getConstant('BelowAverage') + '...' }]
                },
                {
                    iconCss: 'e-icons e-databars', text: l10n.getConstant('DataBars'),
                    items: [{ id: 'cf_databars' }]
                },
                {
                    iconCss: 'e-icons e-colorscales', text: l10n.getConstant('ColorScales'),
                    items: [{ id: 'cf_colorscales' }]
                },
                {
                    iconCss: 'e-icons e-iconsets', text: l10n.getConstant('IconSets'),
                    items: [{ id: 'cf_iconsets' }]
                },
                {
                    iconCss: 'e-icons e-clearrules', text: l10n.getConstant('ClearRules'),
                    items: [{ id: 'cf_cr_cells', text: l10n.getConstant('SelectedCells') },
                        { id: 'cf_cr_sheet', text: l10n.getConstant('EntireSheet') }]
                }],
            orientation: 'Vertical',
            beforeOpen: function (args) {
                if (args.parentItem.text === l10n.getConstant('DataBars')) {
                    args.element.firstChild.appendChild(dataBars);
                    args.element.parentElement.classList.add('e-databars');
                }
                else if (args.parentItem.text === l10n.getConstant('ColorScales')) {
                    args.element.firstChild.appendChild(colorScales);
                    args.element.parentElement.classList.add('e-colorscales');
                }
                else if (args.parentItem.text === l10n.getConstant('IconSets')) {
                    args.element.firstChild.appendChild(iconSets);
                    args.element.parentElement.classList.add('e-iconsets');
                }
            },
            select: this.cFSelected.bind(this)
        });
        var dataBars = this.parent.createElement('div', { id: 'db', className: 'e-db' });
        var db1 = this.parent.createElement('div', { id: 'db1', className: 'e-db1' });
        var db2 = this.parent.createElement('div', { id: 'db2', className: 'e-db2' });
        dataBars.appendChild(db1);
        dataBars.appendChild(db2);
        var bBar = this.parent.createElement('span', { id: 'BlueDataBar', className: 'e-bdatabar e-databar-icon' });
        var gBar = this.parent.createElement('span', { id: 'GreenDataBar', className: 'e-gdatabar e-databar-icon' });
        var rBar = this.parent.createElement('span', { id: 'RedDataBar', className: 'e-rdatabar e-databar-icon' });
        var oBar = this.parent.createElement('span', { id: 'OrangeDataBar', className: 'e-odatabar e-databar-icon' });
        var lBBar = this.parent.createElement('span', { id: 'LightBlueDataBar', className: 'e-lbdatabar e-databar-icon' });
        var pBar = this.parent.createElement('span', { id: 'PurpleDataBar', className: 'e-pdatabar e-databar-icon' });
        bBar.title = l10n.getConstant('BlueDataBar');
        gBar.title = l10n.getConstant('GreenDataBar');
        rBar.title = l10n.getConstant('RedDataBar');
        oBar.title = l10n.getConstant('OrangeDataBar');
        lBBar.title = l10n.getConstant('LightblueDataBar');
        pBar.title = l10n.getConstant('PurpleDataBar');
        db1.appendChild(bBar);
        db1.appendChild(gBar);
        db1.appendChild(rBar);
        db2.appendChild(oBar);
        db2.appendChild(lBBar);
        db2.appendChild(pBar);
        cFMenu.createElement = this.parent.createElement;
        var colorScales = this.parent.createElement('div', { id: 'db', className: 'e-cs' });
        var cs1 = this.parent.createElement('div', { id: 'cs1', className: 'e-cs1' });
        var cs2 = this.parent.createElement('div', { id: 'cs2', className: 'e-cs2' });
        var cs3 = this.parent.createElement('div', { id: 'cs3', className: 'e-cs3' });
        colorScales.appendChild(cs1);
        colorScales.appendChild(cs2);
        colorScales.appendChild(cs3);
        var gyr = this.parent.createElement('span', { id: 'GYRColorScale', className: 'e-gyr e-colorscale-icon' });
        var ryg = this.parent.createElement('span', { id: 'RYGColorScale', className: 'e-ryg e-colorscale-icon' });
        var gwr = this.parent.createElement('span', { id: 'GWRColorScale', className: 'e-gwr e-colorscale-icon' });
        var rwg = this.parent.createElement('span', { id: 'RWGColorScale', className: 'e-rwg e-colorscale-icon' });
        var bwr = this.parent.createElement('span', { id: 'BWRColorScale', className: 'e-bwr e-colorscale-icon' });
        var rwb = this.parent.createElement('span', { id: 'RWBColorScale', className: 'e-rwb e-colorscale-icon' });
        var wr = this.parent.createElement('span', { id: 'WRColorScale', className: 'e-wr e-colorscale-icon' });
        var rw = this.parent.createElement('span', { id: 'RWColorScale', className: 'e-rw e-colorscale-icon' });
        var gw = this.parent.createElement('span', { id: 'GWColorScale', className: 'e-gw e-colorscale-icon' });
        var wg = this.parent.createElement('span', { id: 'WGColorScale', className: 'e-wg e-colorscale-icon' });
        var gy = this.parent.createElement('span', { id: 'GYColorScale', className: 'e-gy e-colorscale-icon' });
        var yg = this.parent.createElement('span', { id: 'YGColorScale', className: 'e-yg e-colorscale-icon' });
        gyr.title = l10n.getConstant('GYRColorScale');
        ryg.title = l10n.getConstant('RYGColorScale');
        gwr.title = l10n.getConstant('GWRColorScale');
        rwg.title = l10n.getConstant('RWGColorScale');
        bwr.title = l10n.getConstant('BWRColorScale');
        rwb.title = l10n.getConstant('RWBColorScale');
        wr.title = l10n.getConstant('WRColorScale');
        rw.title = l10n.getConstant('RWColorScale');
        gw.title = l10n.getConstant('GWColorScale');
        wg.title = l10n.getConstant('WGColorScale');
        gy.title = l10n.getConstant('GYColorScale');
        yg.title = l10n.getConstant('YGColorScale');
        cs1.appendChild(gyr);
        cs1.appendChild(ryg);
        cs1.appendChild(gwr);
        cs1.appendChild(rwg);
        cs2.appendChild(bwr);
        cs2.appendChild(rwb);
        cs2.appendChild(wr);
        cs2.appendChild(rw);
        cs3.appendChild(gw);
        cs3.appendChild(wg);
        cs3.appendChild(gy);
        cs3.appendChild(yg);
        var iconSets = this.parent.createElement('div', { id: 'is', className: 'e-is' });
        var is1 = this.parent.createElement('div', { id: 'is1', className: 'e-is1', innerHTML: 'Directional' });
        var is2 = this.parent.createElement('div', { id: 'is2', className: 'e-is2' });
        var is3 = this.parent.createElement('div', { id: 'is3', className: 'e-is3', innerHTML: 'Shapes' });
        var is4 = this.parent.createElement('div', { id: 'is4', className: 'e-is4' });
        var is5 = this.parent.createElement('div', { id: 'is5', className: 'e-is5', innerHTML: 'Indicators' });
        var is6 = this.parent.createElement('div', { id: 'is6', className: 'e-is6' });
        var is7 = this.parent.createElement('div', { id: 'is7', className: 'e-is7', innerHTML: 'Ratings' });
        var is8 = this.parent.createElement('div', { id: 'is8', className: 'e-is8' });
        is1.title = l10n.getConstant('GYColorScale');
        is2.title = l10n.getConstant('YGColorScale');
        is3.title = l10n.getConstant('GYColorScale');
        is4.title = l10n.getConstant('YGColorScale');
        is5.title = l10n.getConstant('GYColorScale');
        is6.title = l10n.getConstant('YGColorScale');
        is7.title = l10n.getConstant('GYColorScale');
        is8.title = l10n.getConstant('YGColorScale');
        iconSets.appendChild(is1);
        iconSets.appendChild(is2);
        iconSets.appendChild(is3);
        iconSets.appendChild(is4);
        iconSets.appendChild(is5);
        iconSets.appendChild(is6);
        iconSets.appendChild(is7);
        iconSets.appendChild(is8);
        var directional1 = this.parent.createElement('div', { id: 'ThreeArrows', className: 'e-3arrows e-is-wrapper' });
        var directional2 = this.parent.createElement('div', { id: 'ThreeArrowsGray', className: 'e-3arrowsgray e-is-wrapper' });
        var directional3 = this.parent.createElement('div', { id: 'ThreeTriangles', className: 'e-3triangles e-is-wrapper' });
        var directional4 = this.parent.createElement('div', { id: 'FourArrowsGray', className: 'e-4arrowsgray e-is-wrapper' });
        var directional5 = this.parent.createElement('div', { id: 'FourArrows', className: 'e-4arrows e-is-wrapper' });
        var directional6 = this.parent.createElement('div', { id: 'FiveArrowsGray', className: 'e-5arrowsgray e-is-wrapper' });
        var directional7 = this.parent.createElement('div', { id: 'FiveArrows', className: 'e-5arrows e-is-wrapper' });
        directional1.title = l10n.getConstant('ThreeArrowsColor');
        directional2.title = l10n.getConstant('ThreeArrowsGray');
        directional3.title = l10n.getConstant('ThreeTriangles');
        directional4.title = l10n.getConstant('FourArrowsColor');
        directional5.title = l10n.getConstant('FourArrowsGray');
        directional6.title = l10n.getConstant('FiveArrowsColor');
        directional7.title = l10n.getConstant('FiveArrowsGray');
        is2.appendChild(directional1);
        is2.appendChild(directional2);
        is2.appendChild(directional3);
        is2.appendChild(directional4);
        is2.appendChild(directional5);
        is2.appendChild(directional6);
        is2.appendChild(directional7);
        var shapes1 = this.parent.createElement('div', { id: 'ThreeTrafficLights1', className: 'e-3trafficlights e-is-wrapper' });
        var shapes2 = this.parent.createElement('div', { id: 'ThreeTrafficLights2', className: 'e-3rafficlights2 e-is-wrapper' });
        var shapes3 = this.parent.createElement('div', { id: 'ThreeSigns', className: 'e-3signs e-is-wrapper' });
        var shapes4 = this.parent.createElement('div', { id: 'FourTrafficLights', className: 'e-4trafficlights e-is-wrapper' });
        var shapes5 = this.parent.createElement('div', { id: 'FourRedToBlack', className: 'e-4redtoblack e-is-wrapper' });
        shapes1.title = l10n.getConstant('ThreeTrafficLights1');
        shapes2.title = l10n.getConstant('ThreeTrafficLights2');
        shapes3.title = l10n.getConstant('ThreeSigns');
        shapes4.title = l10n.getConstant('FourTrafficLights');
        shapes5.title = l10n.getConstant('RedToBlack');
        is4.appendChild(shapes1);
        is4.appendChild(shapes2);
        is4.appendChild(shapes3);
        is4.appendChild(shapes4);
        is4.appendChild(shapes5);
        var indicators1 = this.parent.createElement('div', { id: 'ThreeSymbols', className: 'e-3symbols e-is-wrapper' });
        var indicators2 = this.parent.createElement('div', { id: 'ThreeSymbols2', className: 'e-3symbols2 e-is-wrapper' });
        var indicators3 = this.parent.createElement('div', { id: 'ThreeFlags', className: 'e-3flags e-is-wrapper' });
        indicators1.title = l10n.getConstant('ThreeSymbols1');
        indicators2.title = l10n.getConstant('ThreeSymbols2');
        indicators3.title = l10n.getConstant('ThreeFlags');
        is6.appendChild(indicators1);
        is6.appendChild(indicators2);
        is6.appendChild(indicators3);
        var ratings1 = this.parent.createElement('div', { id: 'ThreeStars', className: 'e-3stars e-is-wrapper' });
        var ratings2 = this.parent.createElement('div', { id: 'FourRating', className: 'e-4rating e-is-wrapper' });
        var ratings3 = this.parent.createElement('div', { id: 'FiveQuarters', className: 'e-5quarters e-is-wrapper' });
        var ratings4 = this.parent.createElement('div', { id: 'FiveRating', className: 'e-5rating e-is-wrapper' });
        var ratings5 = this.parent.createElement('div', { id: 'FiveBoxes', className: 'e-5boxes e-is-wrapper' });
        ratings1.title = l10n.getConstant('ThreeStars');
        ratings2.title = l10n.getConstant('FourRatings');
        ratings3.title = l10n.getConstant('FiveQuarters');
        ratings4.title = l10n.getConstant('FiveRatings');
        ratings5.title = l10n.getConstant('FiveBoxes');
        is8.appendChild(ratings1);
        is8.appendChild(ratings2);
        is8.appendChild(ratings3);
        is8.appendChild(ratings4);
        is8.appendChild(ratings5);
        directional1.appendChild(this.createElement('span', 'e-3arrows-1 e-iconsetspan'));
        directional1.appendChild(this.createElement('span', 'e-3arrows-2 e-iconsetspan'));
        directional1.appendChild(this.createElement('span', 'e-3arrows-3 e-iconsetspan'));
        directional2.appendChild(this.createElement('span', 'e-3arrowsgray-1 e-iconsetspan'));
        directional2.appendChild(this.createElement('span', 'e-3arrowsgray-2 e-iconsetspan'));
        directional2.appendChild(this.createElement('span', 'e-3arrowsgray-3 e-iconsetspan'));
        directional3.appendChild(this.createElement('span', 'e-3triangles-1 e-iconsetspan'));
        directional3.appendChild(this.createElement('span', 'e-3triangles-2 e-iconsetspan'));
        directional3.appendChild(this.createElement('span', 'e-3triangles-3 e-iconsetspan'));
        directional4.appendChild(this.createElement('span', 'e-4arrowsgray-1 e-iconsetspan'));
        directional4.appendChild(this.createElement('span', 'e-4arrowsgray-2 e-iconsetspan'));
        directional4.appendChild(this.createElement('span', 'e-4arrowsgray-3 e-iconsetspan'));
        directional4.appendChild(this.createElement('span', 'e-4arrowsgray-4 e-iconsetspan'));
        directional5.appendChild(this.createElement('span', 'e-4arrows-1 e-iconsetspan'));
        directional5.appendChild(this.createElement('span', 'e-4arrows-2 e-iconsetspan'));
        directional5.appendChild(this.createElement('span', 'e-4arrows-3 e-iconsetspan'));
        directional5.appendChild(this.createElement('span', 'e-4arrows-4 e-iconsetspan'));
        directional6.appendChild(this.createElement('span', 'e-5arrowsgray-1 e-iconsetspan'));
        directional6.appendChild(this.createElement('span', 'e-5arrowsgray-2 e-iconsetspan'));
        directional6.appendChild(this.createElement('span', 'e-5arrowsgray-3 e-iconsetspan'));
        directional6.appendChild(this.createElement('span', 'e-5arrowsgray-4 e-iconsetspan'));
        directional6.appendChild(this.createElement('span', 'e-5arrowsgray-5 e-iconsetspan'));
        directional7.appendChild(this.createElement('span', 'e-5arrows-1 e-iconsetspan'));
        directional7.appendChild(this.createElement('span', 'e-5arrows-2 e-iconsetspan'));
        directional7.appendChild(this.createElement('span', 'e-5arrows-3 e-iconsetspan'));
        directional7.appendChild(this.createElement('span', 'e-5arrows-4 e-iconsetspan'));
        directional7.appendChild(this.createElement('span', 'e-5arrows-5 e-iconsetspan'));
        shapes1.appendChild(this.createElement('span', 'e-3trafficlights-1 e-iconsetspan'));
        shapes1.appendChild(this.createElement('span', 'e-3trafficlights-2 e-iconsetspan'));
        shapes1.appendChild(this.createElement('span', 'e-3trafficlights-3 e-iconsetspan'));
        shapes2.appendChild(this.createElement('span', 'e-3rafficlights2-1 e-iconsetspan'));
        shapes2.appendChild(this.createElement('span', 'e-3rafficlights2-2 e-iconsetspan'));
        shapes2.appendChild(this.createElement('span', 'e-3rafficlights2-3 e-iconsetspan'));
        shapes3.appendChild(this.createElement('span', 'e-3signs-1 e-iconsetspan'));
        shapes3.appendChild(this.createElement('span', 'e-3signs-2 e-iconsetspan'));
        shapes3.appendChild(this.createElement('span', 'e-3signs-3 e-iconsetspan'));
        shapes4.appendChild(this.createElement('span', 'e-4trafficlights-1 e-iconsetspan'));
        shapes4.appendChild(this.createElement('span', 'e-4trafficlights-2 e-iconsetspan'));
        shapes4.appendChild(this.createElement('span', 'e-4trafficlights-3 e-iconsetspan'));
        shapes4.appendChild(this.createElement('span', 'e-4trafficlights-4 e-iconsetspan'));
        shapes5.appendChild(this.createElement('span', 'e-4redtoblack-1 e-iconsetspan'));
        shapes5.appendChild(this.createElement('span', 'e-4redtoblack-2 e-iconsetspan'));
        shapes5.appendChild(this.createElement('span', 'e-4redtoblack-3 e-iconsetspan'));
        shapes5.appendChild(this.createElement('span', 'e-4redtoblack-4 e-iconsetspan'));
        indicators1.appendChild(this.createElement('span', 'e-3symbols-1 e-iconsetspan'));
        indicators1.appendChild(this.createElement('span', 'e-3symbols-2 e-iconsetspan'));
        indicators1.appendChild(this.createElement('span', 'e-3symbols-3 e-iconsetspan'));
        indicators2.appendChild(this.createElement('span', 'e-3symbols2-1 e-iconsetspan'));
        indicators2.appendChild(this.createElement('span', 'e-3symbols2-2 e-iconsetspan'));
        indicators2.appendChild(this.createElement('span', 'e-3symbols2-3 e-iconsetspan'));
        indicators3.appendChild(this.createElement('span', 'e-3flags-1 e-iconsetspan'));
        indicators3.appendChild(this.createElement('span', 'e-3flags-2 e-iconsetspan'));
        indicators3.appendChild(this.createElement('span', 'e-3flags-3 e-iconsetspan'));
        ratings1.appendChild(this.createElement('span', 'e-3stars-1 e-iconsetspan'));
        ratings1.appendChild(this.createElement('span', 'e-3stars-2 e-iconsetspan'));
        ratings1.appendChild(this.createElement('span', 'e-3stars-3 e-iconsetspan'));
        ratings2.appendChild(this.createElement('span', 'e-4rating-1 e-iconsetspan'));
        ratings2.appendChild(this.createElement('span', 'e-4rating-2 e-iconsetspan'));
        ratings2.appendChild(this.createElement('span', 'e-4rating-3 e-iconsetspan'));
        ratings2.appendChild(this.createElement('span', 'e-4rating-4 e-iconsetspan'));
        ratings3.appendChild(this.createElement('span', 'e-5quarters-1 e-iconsetspan'));
        ratings3.appendChild(this.createElement('span', 'e-5quarters-2 e-iconsetspan'));
        ratings3.appendChild(this.createElement('span', 'e-5quarters-3 e-iconsetspan'));
        ratings3.appendChild(this.createElement('span', 'e-5quarters-4 e-iconsetspan'));
        ratings3.appendChild(this.createElement('span', 'e-5quarters-5 e-iconsetspan'));
        ratings4.appendChild(this.createElement('span', 'e-5rating-1 e-iconsetspan'));
        ratings4.appendChild(this.createElement('span', 'e-5rating-2 e-iconsetspan'));
        ratings4.appendChild(this.createElement('span', 'e-5rating-3 e-iconsetspan'));
        ratings4.appendChild(this.createElement('span', 'e-5rating-4 e-iconsetspan'));
        ratings4.appendChild(this.createElement('span', 'e-5rating-5 e-iconsetspan'));
        ratings5.appendChild(this.createElement('span', 'e-5boxes-1 e-iconsetspan'));
        ratings5.appendChild(this.createElement('span', 'e-5boxes-2 e-iconsetspan'));
        ratings5.appendChild(this.createElement('span', 'e-5boxes-3 e-iconsetspan'));
        ratings5.appendChild(this.createElement('span', 'e-5boxes-4 e-iconsetspan'));
        ratings5.appendChild(this.createElement('span', 'e-5boxes-5 e-iconsetspan'));
        cFMenu.createElement = this.parent.createElement;
        cFMenu.appendTo(ul);
        ul.classList.add('e-ul');
        return cFMenu;
    };
    Ribbon$$1.prototype.createElement = function (tag, className) {
        return this.parent.createElement(tag, { className: className });
    };
    Ribbon$$1.prototype.getBordersDBB = function (id) {
        var _this = this;
        var ul = this.parent.createElement('ul', { id: id + '_borders_menu' });
        this.cPickerEle = this.parent.createElement('input', { id: id + "_cell_border_color", attrs: { 'type': 'color' } });
        this.parent.element.appendChild(this.cPickerEle);
        this.colorPicker = new ColorPicker({
            cssClass: 'e-border-colorpicker',
            mode: 'Palette',
            inline: true,
            change: function (args) {
                var border = _this.border.split(' ');
                border[2] = args.currentValue.hex;
                _this.border = border.join(' ');
            }
        });
        this.colorPicker.createElement = this.parent.createElement;
        this.colorPicker.appendTo(this.cPickerEle);
        var bordersMenu;
        this.bordersDdb = new DropDownButton({
            iconCss: 'e-icons e-bottom-borders',
            cssClass: 'e-borders-ddb',
            target: ul,
            createPopupOnClick: true,
            beforeOpen: function (args) {
                bordersMenu = _this.createBorderMenu(ul);
                _this.tBarDdbBeforeOpen(args.element, bordersMenu.items, 1);
            },
            beforeClose: function (args) {
                if (args.event && closest(args.event.target, '.e-borders-menu')) {
                    args.cancel = true;
                }
                else {
                    bordersMenu.destroy();
                }
            },
            close: function () { return focus(_this.parent.element); }
        });
        this.bordersDdb.createElement = this.parent.createElement;
        this.bordersDdb.appendTo(this.parent.createElement('button', { id: id + '_borders' }));
        return this.bordersDdb.element;
    };
    Ribbon$$1.prototype.createBorderMenu = function (ul) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var id = this.parent.element.id;
        var bordersMenu = new Menu({
            cssClass: 'e-borders-menu',
            items: [{ iconCss: 'e-icons e-top-borders', text: l10n.getConstant('TopBorders') }, {
                    iconCss: 'e-icons e-left-borders',
                    text: l10n.getConstant('LeftBorders')
                }, { iconCss: 'e-icons e-right-borders', text: l10n.getConstant('RightBorders') }, {
                    iconCss: 'e-icons e-bottom-borders', text: l10n.getConstant('BottomBorders')
                }, {
                    iconCss: 'e-icons e-all-borders', text: l10n.getConstant('AllBorders')
                }, { iconCss: 'e-icons e-horizontal-borders', text: l10n.getConstant('HorizontalBorders') }, {
                    iconCss: 'e-icons e-vertical-borders', text: l10n.getConstant('VerticalBorders')
                }, {
                    iconCss: 'e-icons e-outside-borders',
                    text: l10n.getConstant('OutsideBorders')
                }, { iconCss: 'e-icons e-inside-borders', text: l10n.getConstant('InsideBorders') },
                { iconCss: 'e-icons e-no-borders', text: l10n.getConstant('NoBorders') }, { separator: true }, {
                    text: l10n.getConstant('BorderColor'), items: [{ id: id + "_border_colors" }]
                }, {
                    text: l10n.getConstant('BorderStyle'), items: [
                        { iconCss: 'e-icons e-selected-icon', id: id + "_1px" }, { id: id + "_2px" },
                        { id: id + "_3px" }, { id: id + "_dashed" },
                        { id: id + "_dotted" }, { id: id + "_double" }
                    ]
                }],
            orientation: 'Vertical',
            beforeOpen: function (args) {
                if (args.parentItem.text === 'Border Color') {
                    _this.colorPicker.refresh();
                    var cPickerWrapper = _this.colorPicker.element.parentElement;
                    args.element.firstElementChild.appendChild(cPickerWrapper);
                    cPickerWrapper.style.display = 'inline-block';
                    args.element.parentElement.classList.add('e-border-color');
                }
                else {
                    args.element.classList.add('e-border-style');
                }
            },
            beforeClose: function (args) {
                if (args.parentItem.text === 'Border Color') {
                    if (!closest(args.event.target, '.e-border-colorpicker') ||
                        closest(args.event.target, '.e-apply') || closest(args.event.target, '.e-cancel')) {
                        _this.colorPicker = getComponent(_this.cPickerEle, 'colorpicker');
                        if (_this.colorPicker.mode === 'Picker') {
                            _this.colorPicker.mode = 'Palette';
                            _this.colorPicker.dataBind();
                        }
                        var cPickerWrapper = _this.colorPicker.element.parentElement;
                        cPickerWrapper.style.display = '';
                        _this.parent.element.appendChild(cPickerWrapper);
                    }
                    else {
                        args.cancel = true;
                    }
                }
            },
            onOpen: function (args) {
                if (args.parentItem.text === 'Border Color') {
                    args.element.parentElement.style.overflow = 'visible';
                }
            },
            select: function (args) { return _this.borderSelected(args, bordersMenu); }
        });
        bordersMenu.createElement = this.parent.createElement;
        bordersMenu.appendTo(ul);
        ul.classList.add('e-ul');
        return bordersMenu;
    };
    Ribbon$$1.prototype.chartSelected = function (args, chartDdb) {
        var isChart = !isNullOrUndefined(closest(args.element, '.e-chart-menu'));
        var eleId = args.element.id;
        if (('column_chart' + 'bar_chart' + 'area_chart' + 'pie_doughnut_chart' +
            'line_chart' + 'radar_chart' + 'scatter_chart').includes(eleId)) {
            var id = args.event.target.id;
            this.parent.notify(insertChart, { action: eleId, id: id, isChart: isChart });
        }
        if (args.item && (!args.item.items || !args.item.items.length)) {
            chartDdb.toggle();
        }
    };
    Ribbon$$1.prototype.addChartEleSelected = function (args) {
        var eleId = args.element.id;
        this.parent.notify(chartDesignTab, { addChartEle: eleId });
        if (args.item && (!args.item.items || !args.item.items.length)) {
            this.addChartDdb.toggle();
        }
    };
    Ribbon$$1.prototype.cFSelected = function (args) {
        var eleId = args.element.id;
        if (('cf_greaterthan' + 'cf_lessthan' + 'cf_between' + 'cf_eqaulto' + 'cf_textthatcontains' +
            'cf_adateoccuring' + 'cf_duplicatevalues' + 'cf_top10items' + 'cf_top10' + 'cf_bottom10items' +
            'cf_bottom10' + 'cf_aboveaverage' + 'cf_belowaverage').includes(eleId)) {
            this.parent.notify(initiateConditionalFormat, { action: args.item.text });
        }
        else if (('cf_databars' + 'cf_colorscales').includes(eleId)) {
            var id = args.event.target.id;
            this.parent.notify(setCF, { action: eleId, id: id });
        }
        else if ('cf_iconsets' === args.element.id) {
            var target = args.event.target;
            var iconName = (target.id === '') ? target.parentElement.id : target.id;
            this.parent.notify(setCF, { action: eleId, id: iconName });
        }
        if (eleId === 'cf_cr_cells') {
            this.parent.notify(clearCFRule, { range: this.parent.getActiveSheet().selectedRange, isPublic: false });
        }
        else if (eleId === 'cf_cr_sheet') {
            var sheet = this.parent.getActiveSheet();
            var range = getRangeAddress([0, 0, sheet.rowCount - 1, sheet.colCount - 1]);
            this.parent.conditionalFormat = null;
            this.parent.notify(clearCFRule, { range: range, isPublic: false });
        }
        if (args.item && (!args.item.items || !args.item.items.length)) {
            this.cFDdb.toggle();
        }
    };
    Ribbon$$1.prototype.borderSelected = function (args, bordersMenu) {
        if (args.item.items.length || args.item.id === this.parent.element.id + "_border_colors") {
            return;
        }
        if (!args.item.text) {
            var id = this.parent.element.id;
            var border = this.border.split(' ');
            var prevStyleId_1 = border[1] === 'solid' ? id + "_" + border[0] : id + "_" + border[1];
            if (prevStyleId_1 === args.item.id) {
                return;
            }
            if (args.item.id === id + "_1px" || args.item.id === id + "_2px" || args.item.id === id + "_3px") {
                border[0] = args.item.id.split(id + "_")[1];
                border[1] = 'solid';
            }
            else {
                border[1] = args.item.id.split(id + "_")[1];
                border[0] = border[1] === 'double' ? '3px' : '1px';
            }
            this.border = border.join(' ');
            bordersMenu.items[12].items.forEach(function (item) {
                if (item.id === prevStyleId_1) {
                    item.iconCss = null;
                }
                if (item.id === args.item.id) {
                    item.iconCss = 'e-icons e-selected-icon';
                }
            });
            bordersMenu.setProperties({ 'items': bordersMenu.items }, true);
            return;
        }
        this.bordersDdb.toggle();
        this.parent.showSpinner();
        switch (args.item.text) {
            case 'Top Borders':
                this.parent.notify(setCellFormat, { style: { borderTop: this.border }, onActionUpdate: true });
                break;
            case 'Left Borders':
                this.parent.notify(setCellFormat, { style: { borderLeft: this.border }, onActionUpdate: true });
                break;
            case 'Right Borders':
                this.parent.notify(setCellFormat, { style: { borderRight: this.border }, onActionUpdate: true });
                break;
            case 'Bottom Borders':
                this.parent.notify(setCellFormat, { style: { borderBottom: this.border }, onActionUpdate: true });
                break;
            case 'All Borders':
                this.parent.notify(setCellFormat, { style: { border: this.border }, onActionUpdate: true });
                break;
            case 'Horizontal Borders':
                this.parent.notify(setCellFormat, { style: { border: this.border }, onActionUpdate: true, borderType: 'Horizontal' });
                break;
            case 'Vertical Borders':
                this.parent.notify(setCellFormat, { style: { border: this.border }, onActionUpdate: true, borderType: 'Vertical' });
                break;
            case 'Outside Borders':
                this.parent.notify(setCellFormat, { style: { border: this.border }, onActionUpdate: true, borderType: 'Outer' });
                break;
            case 'Inside Borders':
                this.parent.notify(setCellFormat, { style: { border: this.border }, onActionUpdate: true, borderType: 'Inner' });
                break;
            case 'No Borders':
                this.parent.notify(setCellFormat, { style: { border: '' }, onActionUpdate: true });
                break;
        }
        this.parent.hideSpinner();
    };
    Ribbon$$1.prototype.getFontNameDDB = function (id) {
        var _this = this;
        var fontNameBtn = this.parent.createElement('button', { id: id + '_font_name' });
        fontNameBtn.appendChild(this.parent.createElement('span', { className: 'e-tbar-btn-text', innerHTML: 'Calibri' }));
        this.fontNameDdb = new DropDownButton({
            cssClass: 'e-font-family',
            items: this.getFontFamilyItems(),
            createPopupOnClick: true,
            select: function (args) {
                var eventArgs = { style: { fontFamily: args.item.text }, onActionUpdate: true };
                _this.parent.notify(setCellFormat, eventArgs);
                if (!eventArgs.cancel) {
                    _this.refreshFontNameSelection(eventArgs.style.fontFamily);
                }
            },
            close: function () { return focus(_this.parent.element); },
            beforeOpen: function (args) { return _this.tBarDdbBeforeOpen(args.element, args.items); }
        });
        this.fontNameDdb.createElement = this.parent.createElement;
        this.fontNameDdb.appendTo(fontNameBtn);
        return fontNameBtn;
    };
    Ribbon$$1.prototype.getBtn = function (id, name, bindEvent) {
        if (bindEvent === void 0) { bindEvent = true; }
        var btnObj = new Button({ iconCss: "e-icons e-" + name + "-icon", isToggle: true });
        btnObj.createElement = this.parent.createElement;
        btnObj.appendTo(this.parent.createElement('button', { id: id + "_" + name, attrs: { 'type': 'button' } }));
        if (bindEvent) {
            btnObj.element.addEventListener('click', this.toggleBtnClicked.bind(this));
        }
        return btnObj.element;
    };
    Ribbon$$1.prototype.datavalidationDDB = function (id) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var direction;
        this.datavalidationDdb = new DropDownButton({
            cssClass: 'e-datavalidation-ddb',
            iconCss: 'e-datavalidation-icon e-icons',
            content: l10n.getConstant('DataValidation'),
            items: [
                { text: l10n.getConstant('DataValidation') },
                { text: l10n.getConstant('HighlightInvalidData') },
                { text: l10n.getConstant('ClearHighlight') },
                { text: l10n.getConstant('ClearValidation') }
            ],
            createPopupOnClick: true,
            beforeOpen: function (args) {
                _this.refreshSelected(_this.datavalidationDdb, args.element, 'iconCss');
            },
            select: function (args) {
                switch (args.item.text) {
                    case l10n.getConstant('DataValidation'):
                        _this.parent.notify(initiateDataValidation, null);
                        break;
                    case l10n.getConstant('HighlightInvalidData'):
                        _this.parent.notify(invalidData, { isRemoveHighlight: false });
                        break;
                    case l10n.getConstant('ClearHighlight'):
                        _this.parent.notify(invalidData, { isRemoveHighlight: true });
                        break;
                    case l10n.getConstant('ClearValidation'):
                        _this.parent.notify(removeDataValidation, null);
                        break;
                    default:
                        direction = args.item.text === l10n.getConstant('SortAscending') ? 'Ascending' : 'Descending';
                        _this.parent.notify(applySort, { sortOptions: { sortDescriptors: { order: direction } } });
                        break;
                }
            },
            close: function () { return focus(_this.parent.element); }
        });
        this.datavalidationDdb.createElement = this.parent.createElement;
        this.datavalidationDdb.appendTo(this.parent.createElement('button', { id: id + '_datavalidation' }));
        return this.datavalidationDdb.element;
    };
    Ribbon$$1.prototype.getTextAlignDDB = function (id) {
        var _this = this;
        this.textAlignDdb = new DropDownButton({
            cssClass: 'e-align-ddb',
            iconCss: 'e-icons e-left-icon',
            items: [{ iconCss: 'e-icons e-left-icon' }, { iconCss: 'e-icons e-center-icon' }, { iconCss: 'e-icons e-right-icon' }],
            beforeItemRender: this.alignItemRender.bind(this),
            createPopupOnClick: true,
            beforeOpen: function (args) {
                _this.refreshSelected(_this.textAlignDdb, args.element, 'iconCss');
            },
            select: function (args) {
                var eventArgs = {
                    style: { textAlign: args.item.iconCss.split(' e-')[1].split('-icon')[0] }, onActionUpdate: true
                };
                _this.parent.notify(setCellFormat, eventArgs);
                if (!eventArgs.cancel) {
                    _this.textAlignDdb.iconCss = "e-icons e-" + eventArgs.style.textAlign + "-icon";
                    _this.textAlignDdb.dataBind();
                }
            },
            close: function () { return focus(_this.parent.element); }
        });
        this.textAlignDdb.createElement = this.parent.createElement;
        this.textAlignDdb.appendTo(this.parent.createElement('button', { id: id + '_text_align' }));
        return this.textAlignDdb.element;
    };
    Ribbon$$1.prototype.getVerticalAlignDDB = function (id) {
        var _this = this;
        this.verticalAlignDdb = new DropDownButton({
            cssClass: 'e-align-ddb',
            iconCss: 'e-icons e-bottom-icon',
            items: [{ iconCss: 'e-icons e-top-icon' }, { iconCss: 'e-icons e-middle-icon' }, { iconCss: 'e-icons e-bottom-icon' }],
            beforeItemRender: this.alignItemRender.bind(this),
            createPopupOnClick: true,
            beforeOpen: function (args) {
                _this.refreshSelected(_this.verticalAlignDdb, args.element, 'iconCss');
            },
            select: function (args) {
                var eventArgs = {
                    style: { verticalAlign: args.item.iconCss.split(' e-')[1].split('-icon')[0] }, onActionUpdate: true
                };
                _this.parent.notify(setCellFormat, eventArgs);
                if (!eventArgs.cancel) {
                    _this.verticalAlignDdb.iconCss = "e-icons e-" + eventArgs.style.verticalAlign + "-icon";
                    _this.verticalAlignDdb.dataBind();
                }
            },
            close: function () { return focus(_this.parent.element); }
        });
        this.verticalAlignDdb.createElement = this.parent.createElement;
        this.verticalAlignDdb.appendTo(this.parent.createElement('button', { id: id + '_vertical_align' }));
        return this.verticalAlignDdb.element;
    };
    Ribbon$$1.prototype.getMergeSplitBtn = function (id) {
        var _this = this;
        this.parent.element.appendChild(this.parent.createElement('button', { id: id + '_merge' }));
        var l10n = this.parent.serviceLocator.getService(locale);
        this.mergeSplitBtn = new SplitButton({
            cssClass: 'e-merge-ddb',
            iconCss: 'e-icons e-merge-icon',
            createPopupOnClick: true,
            items: [{ text: l10n.getConstant('MergeAll'), id: id + "_merge_all" }, { text: l10n.getConstant('MergeHorizontally'), id: id + "_merge_horizontally" }, { text: l10n.getConstant('MergeVertically'), id: id + "_merge_vertically" },
                { separator: true, id: id + "_merge_separator" }, { text: l10n.getConstant('Unmerge'), id: id + "_unmerge" }],
            select: this.mergeSelectHandler.bind(this),
            close: function () { return focus(_this.parent.element); },
            click: function (args) {
                if (args.element.classList.contains('e-active')) {
                    _this.toggleActiveState(false);
                    _this.unMerge();
                }
                else {
                    _this.toggleActiveState(true);
                    _this.merge(_this.parent.element.id + "_merge_all");
                }
            },
            created: function () {
                _this.mergeSplitBtn.element.title = l10n.getConstant('MergeCells');
                _this.mergeSplitBtn.element.nextElementSibling.title = l10n.getConstant('SelectMergeType');
            }
        });
        this.mergeSplitBtn.createElement = this.parent.createElement;
        this.mergeSplitBtn.appendTo('#' + id + '_merge');
        return this.mergeSplitBtn.element.parentElement;
    };
    Ribbon$$1.prototype.mergeSelectHandler = function (args) {
        if (args.item.id === this.parent.element.id + "_unmerge") {
            this.unMerge();
        }
        else {
            this.merge(args.item.id);
        }
    };
    Ribbon$$1.prototype.unMerge = function () {
        this.parent.showSpinner();
        this.parent.notify(setMerge, { merge: false, range: this.parent.getActiveSheet().selectedRange,
            isAction: true, refreshRibbon: true, type: 'All' });
        this.parent.hideSpinner();
    };
    Ribbon$$1.prototype.merge = function (itemId) {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        var indexes = getRangeIndexes(sheet.selectedRange);
        var cell;
        var isDataPresent;
        for (var i = indexes[0]; i <= indexes[2]; i++) {
            for (var j = indexes[1]; j <= indexes[3]; j++) {
                if (i === indexes[0] && j === indexes[1] && itemId.includes('merge_all')) {
                    continue;
                }
                if (i === indexes[0] && itemId.includes('merge_vertically')) {
                    continue;
                }
                if (j === indexes[1] && itemId.includes('_merge_horizontally')) {
                    continue;
                }
                cell = getCell(i, j, sheet) || {};
                if (cell.value || cell.formula) {
                    isDataPresent = true;
                }
            }
        }
        if (!isDataPresent) {
            this.performMerge(itemId);
            return;
        }
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            target: this.parent.element, height: 200, width: 400, isModal: true, showCloseIcon: true,
            content: this.parent.serviceLocator.getService(locale).getConstant('MergeCellsAlert'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'MergeAlertDialog',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                focus(_this.parent.element);
            },
            buttons: [{
                    buttonModel: { content: this.parent.serviceLocator.getService(locale).getConstant('Ok'), isPrimary: true },
                    click: function () { dialogInst.hide(); _this.performMerge(itemId); }
                }]
        });
    };
    Ribbon$$1.prototype.performMerge = function (itemId) {
        var id = this.parent.element.id;
        this.parent.showSpinner();
        switch (itemId) {
            case id + "_merge_all":
                this.parent.notify(setMerge, { merge: true, range: this.parent.getActiveSheet().selectedRange,
                    type: 'All', isAction: true, refreshRibbon: true });
                break;
            case id + "_merge_horizontally":
                this.parent.notify(setMerge, { merge: true, range: this.parent.getActiveSheet().selectedRange,
                    type: 'Horizontally', isAction: true });
                break;
            case id + "_merge_vertically":
                this.parent.notify(setMerge, { merge: true, range: this.parent.getActiveSheet().selectedRange,
                    type: 'Vertically', isAction: true });
                break;
        }
        this.parent.hideSpinner();
    };
    Ribbon$$1.prototype.getSortFilterDDB = function (id) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var direction;
        this.sortingDdb = new DropDownButton({
            cssClass: 'e-sort-filter-ddb',
            iconCss: 'e-icons e-sort-filter-icon',
            items: [
                { text: l10n.getConstant('SortAscending'), iconCss: 'e-icons e-sort-asc' },
                { text: l10n.getConstant('SortDescending'), iconCss: 'e-icons e-sort-desc' },
                { text: l10n.getConstant('CustomSort') + '...', iconCss: 'e-icons e-sort-custom' },
                { separator: true },
                { text: l10n.getConstant('Filter'), iconCss: 'e-icons e-filter-apply', id: id + '_applyfilter' },
                { text: l10n.getConstant('ClearAllFilter'), iconCss: 'e-icons e-filter-clear', id: id + '_clearfilter' },
                { text: l10n.getConstant('ReapplyFilter'), iconCss: 'e-icons e-filter-reapply', id: id + '_reapplyfilter' }
            ],
            createPopupOnClick: true,
            beforeItemRender: function (args) {
                var eventArgs = { isFiltered: false, isClearAll: true };
                _this.parent.notify(getFilteredColumn, eventArgs);
                if (!_this.parent.allowSorting && (args.item.text === l10n.getConstant('SortAscending') ||
                    args.item.text === l10n.getConstant('SortDescending') || args.item.text === (l10n.getConstant('CustomSort') + '...'))) {
                    args.element.classList.add('e-disabled');
                }
                if (!_this.parent.allowFiltering && args.item.text === (l10n.getConstant('Filter'))) {
                    args.element.classList.add('e-disabled');
                }
                if (args.item.id === id + '_clearfilter' || args.item.id === id + '_reapplyfilter') {
                    if (!eventArgs.isFiltered) {
                        args.element.classList.add('e-disabled');
                    }
                    else {
                        args.element.classList.remove('e-disabled');
                    }
                }
                else if (args.item.id === id + '_applyfilter') {
                    var sheet = _this.parent.getActiveSheet();
                    if (sheet.frozenColumns || sheet.frozenRows) {
                        args.element.classList.add('e-disabled');
                    }
                }
            },
            beforeOpen: function (args) {
                _this.refreshSelected(_this.sortingDdb, args.element, 'iconCss');
            },
            select: function (args) {
                switch (args.item.text) {
                    case l10n.getConstant('Filter'):
                        _this.parent.notify(initiateFilterUI, {});
                        break;
                    case l10n.getConstant('ClearAllFilter'):
                        _this.parent.notify(clearFilter, { isAction: true });
                        break;
                    case l10n.getConstant('ReapplyFilter'):
                        _this.parent.notify(reapplyFilter, null);
                        break;
                    case l10n.getConstant('CustomSort') + '...':
                        _this.parent.notify(initiateCustomSort, null);
                        break;
                    default:
                        direction = args.item.text === l10n.getConstant('SortAscending') ? 'Ascending' : 'Descending';
                        _this.parent.notify(applySort, { sortOptions: { sortDescriptors: { order: direction } } });
                        break;
                }
            },
            close: function () { return focus(_this.parent.element); }
        });
        this.sortingDdb.createElement = this.parent.createElement;
        this.sortingDdb.appendTo(this.parent.createElement('button', { id: id + '_sorting' }));
        return this.sortingDdb.element;
    };
    Ribbon$$1.prototype.getFindBtn = function (id) {
        var findToolbtn = this.parent.createElement('button', { id: id + '_findbtn', attrs: { 'type': 'button' } });
        this.findDdb = new Button({ cssClass: 'e-spreadsheet-find-ddb', iconCss: 'e-icons e-search-icon' });
        this.findDdb.createElement = this.parent.createElement;
        this.findDdb.appendTo(findToolbtn);
        findToolbtn.onclick = this.findToolDlg.bind(this);
        return this.findDdb.element;
    };
    Ribbon$$1.prototype.findToolDlg = function () {
        var _this = this;
        if (isNullOrUndefined(this.parent.element.querySelector('.e-findtool-dlg'))) {
            // eslint-disable-next-line prefer-const
            var toolbarObj_1;
            var findTextElement = this.parent.createElement('div', { className: 'e-input-group' });
            var findTextInput_1 = this.parent.createElement('input', {
                className: 'e-input e-text-findNext-short', attrs: { 'type': 'Text' }
            });
            if (this.findValue) {
                findTextInput_1.value = this.findValue;
            }
            var l10n = this.parent.serviceLocator.getService(locale);
            findTextInput_1.setAttribute('placeholder', l10n.getConstant('FindValue'));
            var findSpan_1 = this.parent.createElement('span', { className: 'e-input-group-icon' });
            var prevValue_1 = findTextInput_1.value;
            findTextInput_1.onkeyup = function (e) {
                var sheet = _this.parent.getActiveSheet();
                var mainHandlerFn = function () {
                    if (!findTextInput_1) {
                        return;
                    }
                    if (e.keyCode === 13) {
                        if (findTextInput_1.value && findSpan_1.textContent !== '0 of 0') {
                            _this.parent.notify(findHandler, { findOption: e.shiftKey ? 'prev' : 'next' });
                            _this.updateCount(findSpan_1, e.shiftKey);
                        }
                    }
                    else {
                        var inputValue_1 = findTextInput_1.value;
                        if (prevValue_1 === inputValue_1) {
                            return;
                        }
                        else {
                            prevValue_1 = inputValue_1;
                        }
                        var handlerFn = function () {
                            if (!findTextInput_1) {
                                return;
                            }
                            var value = findTextInput_1.value;
                            if (value !== inputValue_1) {
                                return;
                            }
                            var countArgs = { countOpt: 'count', findCount: '' };
                            _this.parent.notify(findHandler, { countArgs: countArgs });
                            findSpan_1.textContent = countArgs.findCount;
                            if (isNullOrUndefined(value) || (value === '') || (countArgs.findCount === '0 of 0')) {
                                toolbarObj_1.enableItems(1, false);
                                toolbarObj_1.enableItems(2, false);
                                findSpan_1.textContent = '0 of 0';
                            }
                            else if (!isNullOrUndefined(value) || (countArgs.findCount !== '0 of 0')) {
                                toolbarObj_1.enableItems(1, true);
                                toolbarObj_1.enableItems(2, true);
                            }
                        };
                        if (sheet.usedRange.rowIndex * sheet.usedRange.rowIndex < 1000) {
                            handlerFn();
                        }
                        else {
                            setTimeout(handlerFn());
                        }
                    }
                };
                if (sheet.usedRange.rowIndex * sheet.usedRange.rowIndex < 1000) {
                    mainHandlerFn();
                }
                else {
                    setTimeout(mainHandlerFn());
                }
            };
            findTextElement.appendChild(findTextInput_1);
            findTextElement.appendChild(findSpan_1);
            var toolItemModel = [
                { type: 'Input', template: findTextElement },
                {
                    prefixIcon: 'e-icons e-prev-icon', tooltipText: 'Find Previous', type: 'Button', cssClass: 'e-findRib-prev',
                    disabled: true
                },
                { prefixIcon: 'e-icons e-next-icon', tooltipText: 'Find Next', type: 'Button', cssClass: 'e-findRib-next', disabled: true },
                { type: 'Separator' },
                { prefixIcon: 'e-icons e-option-icon', tooltipText: 'More Options', type: 'Button', cssClass: 'e-findRib-more' },
                { prefixIcon: 'e-icons e-close', tooltipText: 'Close', type: 'Button', cssClass: 'e-findRib-close' }
            ];
            toolbarObj_1 = new Toolbar({
                clicked: function (args) {
                    if (args.item.cssClass === 'e-findRib-next') {
                        _this.parent.notify(findHandler, { findOption: 'next' });
                        _this.updateCount(findSpan_1);
                    }
                    else if (args.item.cssClass === 'e-findRib-prev') {
                        _this.parent.notify(findHandler, { findOption: 'prev' });
                        _this.updateCount(findSpan_1, true);
                    }
                    else if (args.item.cssClass === 'e-findRib-more') {
                        _this.parent.notify(findDlg, null);
                        _this.findDialog.hide();
                    }
                }, width: 'auto', height: 'auto', items: toolItemModel, cssClass: 'e-find-toolObj'
            });
            var toolbarElement_1 = this.parent.createElement('div', { className: 'e-find-toolbar' });
            var dialogDiv = this.parent.createElement('div', { className: 'e-dlg-div' });
            this.findDialog = new Dialog({
                isModal: false, showCloseIcon: false, cssClass: 'e-findtool-dlg', content: toolbarElement_1, visible: false,
                allowDragging: true, target: this.parent.element.querySelector('.e-sheet'),
                beforeOpen: function () {
                    EventHandler.add(document, 'click', _this.closeDialog, _this);
                },
                open: function () {
                    if (_this.findValue) {
                        var countArgs = { countOpt: 'count', findCount: '' };
                        _this.parent.notify(findHandler, { countArgs: countArgs });
                        findSpan_1.textContent = countArgs.findCount;
                    }
                    else {
                        findSpan_1.textContent = '0 of 0';
                    }
                    _this.textFocus(toolbarObj_1.element);
                },
                beforeClose: function () {
                    _this.findValue = findTextInput_1.value || null;
                    toolbarObj_1.destroy();
                    var element = document.querySelector('.e-find-toolbar');
                    if (element) {
                        EventHandler.remove(element, 'focus', _this.textFocus);
                    }
                    EventHandler.remove(document, 'click', _this.closeDialog);
                    focus(_this.parent.element);
                },
                created: function () {
                    toolbarObj_1.createElement = _this.parent.createElement;
                    toolbarObj_1.appendTo(toolbarElement_1);
                    _this.findDialog.width = getComputedStyle(document.querySelector('.e-findtool-dlg')).width;
                    var offset = _this.parent.element.querySelector('.e-main-panel').getBoundingClientRect();
                    var width = _this.findDialog.width.toString();
                    _this.findDialog.position = { X: offset.width - parseInt(width, 10) - (_this.parent.allowScrolling ? getScrollBarWidth() :
                            0), Y: _this.parent.getActiveSheet().showHeaders ? 31 : 0 };
                    _this.findDialog.dataBind();
                    _this.findDialog.show();
                }
            });
            this.findDialog.createElement = this.parent.createElement;
            this.findDialog.appendTo(dialogDiv);
        }
        else {
            if (!isNullOrUndefined(this.parent.element.querySelector('.e-findtool-dlg'))) {
                this.findDialog.hide();
                detach(this.parent.element.querySelector('.e-findtool-dlg'));
                this.findDialog = null;
                focus(this.parent.element);
            }
        }
    };
    Ribbon$$1.prototype.updateCount = function (countEle, isPrev) {
        var values = countEle.textContent.split(' ');
        var newStart;
        if (isPrev) {
            newStart = Number(values[0]) - 1;
            if (newStart < 1) {
                newStart = Number(values[2]);
            }
        }
        else {
            newStart = Number(values[0]) + 1;
            if (newStart > Number(values[2])) {
                newStart = 1;
            }
        }
        values[0] = newStart.toString();
        countEle.textContent = values.join(' ');
    };
    Ribbon$$1.prototype.closeDialog = function (e) {
        if ((closest(e.target, '.e-findRib-close')) || (!closest(e.target, '.e-spreadsheet'))) {
            if (!isNullOrUndefined(this.findDialog)) {
                this.findDialog.hide();
                var findToolDlg = this.parent.element.querySelector('.e-findtool-dlg');
                if (findToolDlg) {
                    detach(findToolDlg);
                }
                this.findDialog = null;
            }
        }
    };
    Ribbon$$1.prototype.textFocus = function (element) {
        element = document.querySelector('.e-find-toolbar');
        element.addEventListener('focus', function () {
            var elements = document.querySelector('.e-text-findNext-short');
            elements.focus();
            elements.classList.add('e-input-focus');
            (elements).setSelectionRange(0, elements.value.length);
        });
    };
    Ribbon$$1.prototype.getClearDDB = function (id) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        this.clearDdb = new DropDownButton({
            cssClass: 'e-clear-ddb',
            iconCss: 'e-icons e-clear-icon',
            items: [
                { text: l10n.getConstant('ClearAll') },
                { text: l10n.getConstant('ClearFormats') },
                { text: l10n.getConstant('ClearContents') },
                { text: l10n.getConstant('ClearHyperlinks') }
            ],
            createPopupOnClick: true,
            select: function (args) { return _this.parent.notify(clearViewer, { options: { type: args.item.text } }); },
            close: function () { return focus(_this.parent.element); }
        });
        this.clearDdb.createElement = this.parent.createElement;
        this.clearDdb.appendTo(this.parent.createElement('button', { id: id + '_clear' }));
        return this.clearDdb.element;
    };
    Ribbon$$1.prototype.ribbonCreated = function () {
        this.ribbon.element.querySelector('.e-drop-icon').title
            = this.parent.serviceLocator.getService(locale).getConstant('CollapseToolbar');
    };
    Ribbon$$1.prototype.alignItemRender = function (args) {
        var text = args.item.iconCss.split(' e-')[1].split('-icon')[0];
        text = text[0].toUpperCase() + text.slice(1, text.length);
        args.element.title = this.parent.serviceLocator.getService(locale).getConstant('Align' + text);
    };
    Ribbon$$1.prototype.toggleBtnClicked = function (e) {
        var target = closest(e.target, '.e-btn');
        var parentId = this.parent.element.id;
        var id = target.id;
        var property = setCellFormat;
        var value;
        var defaultModel;
        var activeModel;
        var eventArgs;
        var key;
        switch (id) {
            case parentId + "_bold":
                defaultModel = { fontWeight: 'normal' };
                activeModel = { fontWeight: 'bold' };
                key = 'fontWeight';
                break;
            case parentId + "_italic":
                defaultModel = { fontStyle: 'normal' };
                activeModel = { fontStyle: 'italic' };
                key = 'fontStyle';
                break;
            case parentId + "_line-through":
                property = textDecorationUpdate;
                defaultModel = { textDecoration: 'line-through' };
                activeModel = defaultModel;
                key = 'textDecoration';
                break;
            case parentId + "_underline":
                property = textDecorationUpdate;
                defaultModel = { textDecoration: 'underline' };
                activeModel = defaultModel;
                key = 'textDecoration';
                break;
        }
        if (target.classList.contains('e-active')) {
            value = activeModel[key];
            eventArgs = { style: activeModel, onActionUpdate: true };
            this.parent.notify(property, eventArgs);
            if (eventArgs.cancel) {
                target.classList.remove('e-active');
            }
        }
        else {
            value = defaultModel[key];
            eventArgs = { style: defaultModel, onActionUpdate: true };
            this.parent.notify(property, eventArgs);
            if (eventArgs.cancel) {
                target.classList.add('e-active');
            }
        }
        if (!eventArgs.cancel && value !== eventArgs.style[key]) {
            this.refreshToggleBtn(getCellIndexes(this.parent.getActiveSheet().activeCell));
        }
        focus(this.parent.element);
    };
    Ribbon$$1.prototype.getCellStyleValue = function (cssProp, indexes) {
        var cell = getCell(indexes[0], indexes[1], this.parent.getActiveSheet());
        var value = this.parent.cellStyle[cssProp];
        if (cell && cell.style && cell.style[cssProp]) {
            value = cell.style[cssProp];
        }
        return value;
    };
    Ribbon$$1.prototype.refreshSelected = function (inst, element, key, itemKey) {
        if (itemKey === void 0) { itemKey = key; }
        for (var i = 0; i < inst.items.length; i++) {
            if (inst.items[i][itemKey] === inst[key]) {
                element.children[i].classList.add('e-selected');
                break;
            }
        }
    };
    Ribbon$$1.prototype.expandCollapseHandler = function (args) {
        var target = this.ribbon.element.querySelector('.e-drop-icon');
        var l10n = this.parent.serviceLocator.getService(locale);
        if (args.expanded) {
            target.title = l10n.getConstant('CollapseToolbar');
        }
        else {
            target.title = l10n.getConstant('ExpandToolbar');
        }
        this.parent.setPanelSize();
    };
    Ribbon$$1.prototype.getChartThemeDdbItems = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        return [
            { id: 'Material', text: l10n.getConstant('Material') },
            { id: 'Fabric', text: l10n.getConstant('Fabric') },
            { id: 'Bootstrap', text: l10n.getConstant('Bootstrap') },
            { id: 'HighContrastLight', text: l10n.getConstant('HighContrastLight') },
            { id: 'MaterialDark', text: l10n.getConstant('MaterialDark') },
            { id: 'FabricDark', text: l10n.getConstant('FabricDark') },
            { id: 'HighContrast', text: l10n.getConstant('HighContrast') },
            { id: 'BootstrapDark', text: l10n.getConstant('BootstrapDark') },
            { id: 'Bootstrap4', text: l10n.getConstant('Bootstrap4') },
            { id: 'Bootstrap5Dark', text: l10n.getConstant('Bootstrap5Dark') },
            { id: 'Bootstrap5', text: l10n.getConstant('Bootstrap5') },
            { id: 'TailwindDark', text: l10n.getConstant('TailwindDark') },
            { id: 'Tailwind', text: l10n.getConstant('Tailwind') }
        ];
    };
    Ribbon$$1.prototype.getNumFormatDdbItems = function (id) {
        var l10n = this.parent.serviceLocator.getService(locale);
        return [
            { id: id + '_General', text: l10n.getConstant('General') },
            { id: id + '_Number', text: l10n.getConstant('Number') },
            { id: id + '_Currency', text: l10n.getConstant('Currency') },
            { id: id + '_Accounting', text: l10n.getConstant('Accounting') },
            { id: id + '_ShortDate', text: l10n.getConstant('ShortDate') },
            { id: id + '_LongDate', text: l10n.getConstant('LongDate') },
            { id: id + '_Time', text: l10n.getConstant('Time') },
            { id: id + '_Percentage', text: l10n.getConstant('Percentage') },
            { id: id + '_Fraction', text: l10n.getConstant('Fraction') },
            { id: id + '_Scientific', text: l10n.getConstant('Scientific') },
            { id: id + '_Text', text: l10n.getConstant('Text') },
            { id: id + '_Custom', text: l10n.getConstant('Custom') }
        ];
    };
    Ribbon$$1.prototype.getFontFamilyItems = function () {
        return [{ text: 'Arial' }, { text: 'Arial Black' }, { text: 'Axettac Demo' }, { text: 'Batang' }, { text: 'Book Antiqua' },
            { text: 'Calibri', iconCss: 'e-icons e-selected-icon' }, { text: 'Courier' }, { text: 'Courier New' },
            { text: 'Din Condensed' }, { text: 'Georgia' }, { text: 'Helvetica' }, { text: 'Helvetica New' }, { text: 'Roboto' },
            { text: 'Tahoma' }, { text: 'Times New Roman' }, { text: 'Verdana' }];
    };
    Ribbon$$1.prototype.numDDBSelect = function (args) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var cellIndex = getCellIndexes(this.parent.getActiveSheet().activeCell);
        var cell = getCell(cellIndex[0], cellIndex[1], this.parent.getActiveSheet());
        var eventArgs = {
            format: getFormatFromType(args.item.id.split(this.parent.element.id + '_')[1]),
            range: this.parent.getActiveSheet().selectedRange, cancel: false, requestType: 'NumberFormat'
        };
        if (args.item.text === l10n.getConstant('Custom') && cell) {
            eventArgs.format = cell.format;
        }
        var actionArgs = {
            range: this.parent.getActiveSheet().name + '!' + eventArgs.range,
            format: eventArgs.format, requestType: 'NumberFormat'
        };
        this.parent.trigger('beforeCellFormat', eventArgs);
        this.parent.notify(beginAction, { eventArgs: eventArgs, action: 'format' });
        if (eventArgs.cancel) {
            return;
        }
        this.parent.notify(applyNumberFormatting, eventArgs);
        this.parent.notify(selectionComplete, { type: 'mousedown' });
        if (args.item.text === l10n.getConstant('Custom')) {
            this.renderCustomFormatDialog();
        }
        else {
            this.refreshNumFormatSelection(args.item.text);
            this.parent.notify(completeAction, { eventArgs: actionArgs, action: 'format' });
        }
    };
    Ribbon$$1.prototype.renderCustomFormatDialog = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var cellIndex = getCellIndexes(this.parent.getActiveSheet().activeCell);
        var cell = getCell(cellIndex[0], cellIndex[1], this.parent.getActiveSheet());
        var dummyDiv = this.parent.createElement('div');
        var dialogCont = this.parent.createElement('div', { className: 'e-custom-dialog' });
        var dialogBtn = this.parent.createElement('button', { className: 'e-btn', innerHTML: l10n.getConstant('APPLY') });
        var sampleDiv = this.parent.createElement('div', { className: 'e-custom-sample', innerHTML: l10n.getConstant('CustomFormatSample') + ':' });
        var inputElem = this.parent.createElement('input', { className: 'e-input e-dialog-input', attrs: { 'type': 'text', 'name': 'input', 'placeholder': 'Custom Number Format', 'spellcheck': 'false' } });
        var listviewCont = this.parent.createElement('div', { className: 'e-custom-listview' });
        var customFormatDialog = this.parent.serviceLocator.getService(dialog);
        var listview = new ListView({
            dataSource: this.formatData,
            select: function (args) {
                inputElem.value = args.text;
            }
        });
        dialogCont.appendChild(inputElem);
        dialogCont.appendChild(dialogBtn);
        dialogCont.appendChild(sampleDiv);
        dialogCont.appendChild(listviewCont);
        listview.appendTo(listviewCont);
        dialogBtn.addEventListener('click', function () {
            var format = inputElem.value;
            var actionArgs = {
                range: _this.parent.getActiveSheet().name + '!' + _this.parent.getActiveSheet().selectedRange,
                format: format, requestType: 'NumberFormat'
            };
            _this.parent.numberFormat(format);
            var item = { text: format };
            if (_this.checkNewFormats(format) && format.length > 0) {
                _this.formatData.push(item);
            }
            _this.refreshNumFormatSelection(l10n.getConstant('Custom'));
            _this.parent.notify(completeAction, { eventArgs: actionArgs, action: 'format' });
            customFormatDialog.hide();
        });
        customFormatDialog.show({
            header: l10n.getConstant('CustomFormat'),
            cssClass: 'e-custom-format-dlg',
            height: this.parent.cssClass.indexOf('e-bigger') > -1 ? 502 : 480,
            width: 440,
            isModal: true,
            showCloseIcon: true,
            content: dialogCont,
            footerTemplate: dummyDiv
        });
        var item = { text: cell.format };
        listview.selectItem(item);
    };
    Ribbon$$1.prototype.checkNewFormats = function (format) {
        var isNewFormat = true;
        this.formatData.forEach(function (e) {
            if (e.text === format) {
                isNewFormat = false;
            }
        });
        return isNewFormat;
    };
    Ribbon$$1.prototype.initDefaultFormats = function () {
        this.formatData = [
            { text: 'General' },
            { text: '0' },
            { text: '0.00' },
            { text: '#,##0' },
            { text: '#,##0.00' },
            { text: '#,##0_);(#,##0)' },
            { text: '#,##0_);[Red](#,##0)' },
            { text: '#,##0.00_);(#,##0.00)' },
            { text: '#,##0.00_);[Red](#,##0.00)' },
            { text: '$#,##0_);($#,##0)' },
            { text: '$#,##0_);[Red]($#,##0)' },
            { text: '$#,##0.00_);($#,##0.00)' },
            { text: '$#,##0.00_);[Red]($#,##0.00)' },
            { text: '0%' },
            { text: '0.00%' },
            { text: '0.00E+00' },
            { text: '##0.0E+0' },
            { text: '# ?/?' },
            { text: '# ??/??' },
            { text: 'dd-mm-yy' },
            { text: 'dd-mmm-yy' },
            { text: 'dd-mmm' },
            { text: 'mmm-yy' },
            { text: 'h:mm AM/PM' },
            { text: 'h:mm:ss AM/PM' },
            { text: 'h:mm' },
            { text: 'h:mm:ss' },
            { text: 'dd-mm-yy h:mm' },
            { text: 'mm:ss' },
            { text: 'mm:ss.0' },
            { text: '@' },
            { text: '[h]:mm:ss' },
            { text: '_($* #,##0_);_($* (#,##0);_($* "-"_);_(@_)' },
            { text: '_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)' },
            { text: '_($* #,##0.00_);_($* (#,##0.00);_($* "-"??_);_(@_)' },
            { text: '_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)' }
        ];
    };
    Ribbon$$1.prototype.chartThemeDDBSelect = function (args) {
        this.parent.notify(selectionComplete, { type: 'mousedown' });
        this.refreshChartThemeSelection(args.item.id);
        this.parent.notify(chartDesignTab, { chartTheme: args.item.id });
    };
    Ribbon$$1.prototype.tBarDdbBeforeOpen = function (element, items, separatorCount) {
        if (separatorCount === void 0) { separatorCount = 0; }
        var viewportHeight = this.parent.viewport.height;
        var actualHeight = (parseInt(getComputedStyle(element.firstElementChild).height, 10) * (items.length - separatorCount)) +
            (parseInt(getComputedStyle(element).paddingTop, 10) * 2);
        if (separatorCount) {
            var separatorStyle = getComputedStyle(element.querySelector('.e-separator'));
            actualHeight += (separatorCount * (parseInt(separatorStyle.borderBottomWidth, 10) + (parseInt(separatorStyle.marginTop, 10) * 2)));
        }
        if (actualHeight > viewportHeight) {
            element.style.height = viewportHeight + "px";
            element.style.overflowY = 'auto';
        }
        else {
            if (element.style.height) {
                element.style.height = '';
                element.style.overflowY = '';
            }
        }
    };
    Ribbon$$1.prototype.numDDBOpen = function (args) {
        this.numPopupWidth = 0;
        var elemList = args.element.querySelectorAll('span.e-numformat-preview-text');
        for (var i = 0, len = elemList.length; i < len; i++) {
            if (this.numPopupWidth < elemList[i].offsetWidth) {
                this.numPopupWidth = elemList[i].offsetWidth;
            }
        }
        var popWidth = this.numPopupWidth + 160;
        document.querySelector('.e-numformat-ddb.e-dropdown-popup').style.width = popWidth + "px";
    };
    Ribbon$$1.prototype.previewNumFormat = function (args) {
        var cellIndex = getCellIndexes(this.parent.getActiveSheet().activeCell);
        var cell = getCell(cellIndex[0], cellIndex[1], this.parent.getActiveSheet());
        var eventArgs = {
            type: args.item.text,
            formattedText: '',
            value: cell && cell.value ? cell.value : '',
            format: getFormatFromType(args.item.id.split(this.parent.element.id + '_')[1]),
            sheetIndex: this.parent.activeSheetIndex,
            onLoad: true
        };
        if (args.item.text === 'Custom') {
            return;
        }
        var numElem = this.parent.createElement('div', {
            className: 'e-numformat-text',
            styles: 'width:100%',
            innerHTML: args.element.innerHTML
        });
        args.element.innerHTML = '';
        this.parent.notify(getFormattedCellObject, eventArgs);
        var previewElem = this.parent.createElement('span', {
            className: 'e-numformat-preview-text',
            styles: 'float:right;',
            innerHTML: eventArgs.formattedText.toString()
        });
        numElem.appendChild(previewElem);
        args.element.appendChild(numElem);
    };
    Ribbon$$1.prototype.refreshRibbonContent = function (activeTab) {
        if (!this.ribbon) {
            return;
        }
        if (isNullOrUndefined(activeTab)) {
            activeTab = this.ribbon.selectedTab;
        }
        var l10n = this.parent.serviceLocator.getService(locale);
        var sheet = this.parent.getActiveSheet();
        switch (this.ribbon.items[activeTab].header.text) {
            case l10n.getConstant('Home'):
                this.refreshHomeTabContent(getCellIndexes(sheet.activeCell));
                break;
            case l10n.getConstant('Insert'):
                // Second tab functionality comes here
                break;
            case l10n.getConstant('Formulas'):
                // Third tab functionality comes here
                break;
            case l10n.getConstant('Data'):
                this.refreshDataTabContent(activeTab);
                break;
            case l10n.getConstant('View'):
                this.refreshViewTabContent(activeTab);
                break;
        }
    };
    Ribbon$$1.prototype.refreshHomeTabContent = function (indexes) {
        if (!isNullOrUndefined(document.getElementById(this.parent.element.id + '_number_format'))) {
            this.numFormatDDB = getComponent(document.getElementById(this.parent.element.id + '_number_format'), DropDownButton);
        }
        var sheet = this.parent.getActiveSheet();
        var actCell = getCellIndexes(this.parent.getActiveSheet().activeCell);
        var l10n = this.parent.serviceLocator.getService(locale);
        var cell = getCell(actCell[0], actCell[1], this.parent.getActiveSheet()) || {};
        var type = getTypeFromFormat(cell.format ? cell.format : 'General');
        if (this.numFormatDDB) {
            if (sheet.isProtected && !sheet.protectSettings.formatCells) {
                type = 'General';
                this.refreshNumFormatSelection(type);
            }
            else {
                if (cell.format && type === 'General') {
                    type = 'Custom';
                }
                this.refreshNumFormatSelection(l10n.getConstant(type));
            }
        }
        if (this.fontNameDdb) {
            if (sheet.isProtected && !sheet.protectSettings.formatCells) {
                this.refreshFontNameSelection('Calibri');
            }
            else {
                this.refreshFontNameSelection(this.getCellStyleValue('fontFamily', indexes));
            }
        }
        if (this.fontSizeDdb) {
            var value = this.getCellStyleValue('fontSize', indexes);
            if (sheet.isProtected && !sheet.protectSettings.formatCells) {
                this.fontSizeDdb.content = '11';
            }
            else {
                value = value.includes('pt') ? value.split('pt')[0] : '11';
                if (value !== this.fontSizeDdb.content) {
                    this.fontSizeDdb.content = value;
                    this.fontSizeDdb.dataBind();
                }
            }
        }
        if (this.textAlignDdb) {
            var style = this.getCellStyleValue('textAlign', indexes);
            if (sheet.isProtected && !sheet.protectSettings.formatCells) {
                this.textAlignDdb.iconCss = 'e-icons e-left-icon';
            }
            else {
                if (cell.value !== undefined && style === 'left' && (type === 'Accounting' || isNumber(cell.value))) {
                    style = 'right';
                }
                var value = "e-icons e-" + style.toLowerCase() + "-icon";
                if (value !== this.textAlignDdb.iconCss) {
                    this.textAlignDdb.iconCss = value;
                    this.textAlignDdb.dataBind();
                }
            }
        }
        if (this.verticalAlignDdb) {
            var value = "e-icons e-" + this.getCellStyleValue('verticalAlign', indexes).toLowerCase() + "-icon";
            if (sheet.isProtected && !sheet.protectSettings.formatCells) {
                this.verticalAlignDdb.iconCss = 'e-icons e-bottom-icon';
            }
            else {
                if (value !== this.verticalAlignDdb.iconCss) {
                    this.verticalAlignDdb.iconCss = value;
                    this.verticalAlignDdb.dataBind();
                }
            }
        }
        this.refreshToggleBtn(indexes);
        if (!sheet.isProtected && (cell.rowSpan > 1 || cell.colSpan > 1)) {
            this.enableToolbarItems([{ tab: l10n.getConstant('Home'), items: [this.parent.element.id + "_merge_cells"],
                    enable: true }]);
            this.toggleActiveState(true);
        }
        else {
            var indexes_1 = getRangeIndexes(sheet.selectedRange);
            this.enableToolbarItems([{ tab: l10n.getConstant('Home'), items: [this.parent.element.id + "_merge_cells"],
                    enable: indexes_1[0] !== indexes_1[2] || indexes_1[1] !== indexes_1[3] ? true : false }]);
            this.toggleActiveState(false);
        }
    };
    Ribbon$$1.prototype.toggleActiveState = function (active) {
        var l10n = this.parent.serviceLocator.getService(locale);
        if (!this.parent.getActiveSheet().isProtected) {
            if (active) {
                this.mergeSplitBtn.element.classList.add('e-active');
                this.mergeSplitBtn.element.title = l10n.getConstant('UnmergeCells');
            }
            else {
                if (this.mergeSplitBtn.element.classList.contains('e-active')) {
                    this.mergeSplitBtn.element.classList.remove('e-active');
                }
                this.mergeSplitBtn.element.title = l10n.getConstant('MergeCells');
            }
        }
    };
    Ribbon$$1.prototype.refreshToggleBtn = function (indexes) {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        var btn;
        var id = this.parent.element.id;
        var value;
        var isActive;
        var cell = getCell(indexes[0], indexes[1], sheet);
        var fontProps = ['fontWeight', 'fontStyle', 'textDecoration', 'textDecoration'];
        ['bold', 'italic', 'line-through', 'underline', 'wrap'].forEach(function (name, index) {
            btn = document.getElementById(id + "_" + name);
            if (btn) {
                if (sheet.isProtected && !sheet.protectSettings.formatCells) {
                    btn.classList.remove('e-active');
                }
                else if (name === 'wrap') {
                    isActive = cell && cell.wrap;
                }
                else {
                    value = _this.getCellStyleValue(fontProps[index], indexes).toLowerCase();
                    isActive = value.indexOf(name) > -1;
                }
                if (isActive) {
                    btn.classList.add('e-active');
                }
                else {
                    if (btn.classList.contains('e-active')) {
                        btn.classList.remove('e-active');
                    }
                }
            }
        });
    };
    Ribbon$$1.prototype.refreshFontNameSelection = function (fontFamily) {
        fontFamily = fontFamily.split('"').join('');
        this.fontNameDdb.element.firstElementChild.textContent = fontFamily;
        for (var i = 0; i < this.fontNameDdb.items.length; i++) {
            if (this.fontNameDdb.items[i].text === fontFamily) {
                this.fontNameDdb.items[i].iconCss = 'e-icons e-selected-icon';
                if (i !== this.fontNameIndex) {
                    this.fontNameDdb.items[this.fontNameIndex].iconCss = '';
                }
                this.fontNameDdb.setProperties({ 'items': this.fontNameDdb.items }, true);
                this.fontNameIndex = i;
                break;
            }
        }
        if (['Arial', 'Arial Black', 'Axettac Demo', 'Batang', 'Book Antiqua', 'Calibri', 'Courier',
            'Courier New', 'Din Condensed', 'Georgia', 'Helvetica', 'Helvetica New', 'Roboto',
            'Tahoma', 'Times New Roman', 'Verdana'].indexOf(fontFamily) < 0) {
            this.fontNameDdb.items[this.fontNameIndex].iconCss = '';
        }
    };
    Ribbon$$1.prototype.refreshNumFormatSelection = function (type) {
        for (var i = 0; i < this.numFormatDDB.items.length; i++) {
            if (this.numFormatDDB.items[i].iconCss !== '') {
                this.numFormatDDB.items[i].iconCss = '';
            }
            if (this.numFormatDDB.items[i].text === type) {
                this.numFormatDDB.items[i].iconCss = 'e-icons e-selected-icon';
            }
        }
        this.numFormatDDB.element.firstElementChild.textContent = type;
        this.numFormatDDB.setProperties({ 'items': this.numFormatDDB.items }, true);
    };
    Ribbon$$1.prototype.refreshChartThemeSelection = function (chartTheme) {
        if (chartTheme !== this.chartThemeDDB.items[this.chartThemeIndex].text) {
            this.chartThemeDDB.element.firstElementChild.textContent = this.getChartThemeText(chartTheme);
            for (var i = 0; i < this.chartThemeDDB.items.length; i++) {
                if (this.chartThemeDDB.items[i].id === chartTheme) {
                    this.chartThemeDDB.items[i].iconCss = 'e-icons e-selected-icon';
                    this.chartThemeDDB.items[this.chartThemeIndex].iconCss = '';
                    this.chartThemeDDB.setProperties({ 'items': this.chartThemeDDB.items }, true);
                    this.chartThemeIndex = i;
                    break;
                }
            }
        }
    };
    Ribbon$$1.prototype.getChartThemeText = function (theme) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var selectedTheme = '';
        switch (theme) {
            case 'Material':
                selectedTheme = l10n.getConstant('Material');
                break;
            case 'Fabric':
                selectedTheme = l10n.getConstant('Fabric');
                break;
            case 'Bootstrap':
                selectedTheme = l10n.getConstant('Bootstrap');
                break;
            case 'HighContrastLight':
                selectedTheme = l10n.getConstant('HighContrastLight');
                break;
            case 'MaterialDark':
                selectedTheme = l10n.getConstant('MaterialDark');
                break;
            case 'FabricDark':
                selectedTheme = l10n.getConstant('FabricDark');
                break;
            case 'HighContrast':
                selectedTheme = l10n.getConstant('HighContrast');
                break;
            case 'BootstrapDark':
                selectedTheme = l10n.getConstant('BootstrapDark');
                break;
            case 'Bootstrap4':
                selectedTheme = l10n.getConstant('Bootstrap4');
                break;
            case 'Bootstrap5Dark':
                selectedTheme = l10n.getConstant('Bootstrap5Dark');
                break;
            case 'Bootstrap5':
                selectedTheme = l10n.getConstant('Bootstrap5');
                break;
            case 'TailwindDark':
                selectedTheme = l10n.getConstant('TailwindDark');
                break;
            case 'Tailwind':
                selectedTheme = l10n.getConstant('Tailwind');
                break;
        }
        return selectedTheme;
    };
    Ribbon$$1.prototype.fileMenuItemSelect = function (args) {
        var _this = this;
        var selectArgs = extend({ cancel: false }, args);
        this.parent.trigger('fileMenuItemSelect', selectArgs);
        var id = this.parent.element.id;
        var dialogInst;
        if (!selectArgs.cancel) {
            switch (args.item.id) {
                case id + "_Open":
                    select('#' + id + '_fileUpload', this.parent.element).click();
                    break;
                case id + "_Xlsx":
                case id + "_Xls":
                case id + "_Csv":
                case id + "_Pdf":
                    this.parent.notify(exportDialog, args);
                    break;
                case id + "_New":
                    dialogInst = this.parent.serviceLocator.getService(dialog);
                    dialogInst.show({
                        height: 200, width: 400, isModal: true, showCloseIcon: true,
                        content: this.parent.serviceLocator.getService(locale).getConstant('DestroyAlert'),
                        beforeOpen: function (args) {
                            var dlgArgs = {
                                dialogName: 'DestroySheetDialog',
                                element: args.element, target: args.target, cancel: args.cancel
                            };
                            _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                            if (dlgArgs.cancel) {
                                args.cancel = true;
                            }
                            focus(_this.parent.element);
                        },
                        buttons: [{
                                buttonModel: {
                                    content: this.parent.serviceLocator.getService(locale).getConstant('Ok'), isPrimary: true
                                },
                                click: function () {
                                    dialogInst.hide();
                                    _this.blankWorkbook();
                                }
                            }]
                    });
                    break;
            }
        }
    };
    Ribbon$$1.prototype.blankWorkbook = function () {
        this.parent.notify(clearCopy, null);
        this.parent.sheets.length = 0;
        this.parent.sheetNameCount = 1;
        this.parent.notify(sheetsDestroyed, {});
        this.parent.createSheet();
        this.parent.activeSheetIndex = this.parent.sheets.length - 1;
        this.parent.notify(refreshSheetTabs, {});
        this.parent.notify(workbookFormulaOperation, { action: 'initSheetInfo' });
        this.parent.renderModule.refreshSheet();
        this.parent.openModule.isImportedFile = false;
        this.parent.openModule.unProtectSheetIdx = [];
    };
    Ribbon$$1.prototype.toolbarClicked = function (args) {
        if (!(args.item.id === 'spreadsheet_find')) {
            var parentId = this.parent.element.id;
            var sheet = this.parent.getActiveSheet();
            var evtHArgs = void 0;
            var evtglArgs = void 0;
            var isActive = void 0;
            var indexes = void 0;
            var selectCell = void 0;
            switch (args.item.id) {
                case parentId + '_headers':
                    evtHArgs = {
                        isShow: !sheet.showHeaders,
                        sheetIdx: this.parent.activeSheetIndex,
                        cancel: false
                    };
                    this.parent.notify(completeAction, { eventArgs: evtHArgs, action: 'headers' });
                    if (evtHArgs.cancel) {
                        return;
                    }
                    this.parent.setSheetPropertyOnMute(sheet, 'showHeaders', !sheet.showHeaders);
                    this.parent.serviceLocator.getService('sheet').showHideHeaders();
                    this.toggleRibbonItems({ props: 'Headers', activeTab: this.ribbon.selectedTab });
                    focus(this.parent.element);
                    break;
                case parentId + '_gridlines':
                    evtglArgs = {
                        isShow: !sheet.showGridLines,
                        sheetIdx: this.parent.activeSheetIndex,
                        cancel: false
                    };
                    this.parent.notify(completeAction, { eventArgs: evtglArgs, action: 'gridLines' });
                    if (evtglArgs.cancel) {
                        return;
                    }
                    this.parent.setSheetPropertyOnMute(sheet, 'showGridLines', !sheet.showGridLines);
                    this.toggleRibbonItems({ props: 'GridLines', activeTab: this.ribbon.selectedTab });
                    focus(this.parent.element);
                    break;
                case parentId + '_protect':
                    if (this.parent.openModule.isImportedFile &&
                        this.parent.openModule.unProtectSheetIdx.indexOf(this.parent.activeSheetIndex) === -1) {
                        this.parent.notify(UnProtectWorksheet, { isImportedSheet: true });
                    }
                    else if (sheet.password && sheet.password.length > 0) {
                        this.parent.notify(UnProtectWorksheet, null);
                    }
                    else {
                        this.parent.setSheetPropertyOnMute(sheet, 'isProtected', !sheet.isProtected);
                        isActive = sheet.isProtected ? false : true;
                        this.parent.notify(applyProtect, { isActive: isActive, id: parentId + '_protect' });
                    }
                    break;
                case parentId + '_undo':
                    this.parent.notify(performUndoRedo, { isUndo: true });
                    break;
                case parentId + '_redo':
                    this.parent.notify(performUndoRedo, { isUndo: false });
                    break;
                case parentId + '_freezepanes':
                    indexes = getCellIndexes(sheet.topLeftCell);
                    selectCell = sheet.frozenRows || sheet.frozenColumns ? indexes : getCellIndexes(sheet.activeCell);
                    this.parent.notify(freeze, { row: selectCell[0] - indexes[0], column: selectCell[1] - indexes[1], isAction: true });
                    break;
                case parentId + '_freezerows':
                    this.parent.notify(freeze, { row: sheet.frozenRows ? 0 : getCellIndexes(sheet.activeCell)[0] - getCellIndexes(sheet.topLeftCell)[0], column: sheet.frozenColumns, isAction: true });
                    break;
                case parentId + '_freezecolumns':
                    this.parent.notify(freeze, { row: sheet.frozenRows, column: sheet.frozenColumns ? 0 : getCellIndexes(sheet.activeCell)[1] - getCellIndexes(sheet.topLeftCell)[1], isAction: true });
                    break;
                case parentId + '_protectworkbook':
                    if (this.parent.password.length > 0) {
                        this.parent.notify(unProtectWorkbook, null);
                    }
                    else {
                        if (this.parent.isProtected) {
                            this.parent.isProtected = false;
                            if (this.parent.showSheetTabs) {
                                this.parent.element.querySelector('.e-add-sheet-tab').removeAttribute('disabled');
                                this.parent.element.querySelector('.e-add-sheet-tab').classList.remove('e-disabled');
                            }
                            this.toggleRibbonItems({ props: 'Protectworkbook', activeTab: this.ribbon.selectedTab });
                        }
                        else if (this.parent.element.querySelector('.e-add-sheet-tab').classList.contains('e-disabled')) {
                            this.toggleRibbonItems({ props: 'Protectworkbook', activeTab: this.ribbon.selectedTab });
                        }
                        else {
                            this.parent.notify(protectWorkbook, null);
                        }
                    }
                    break;
            }
            this.parent.notify(ribbonClick, args);
        }
    };
    Ribbon$$1.prototype.toggleRibbonItems = function (args) {
        var text = '';
        var viewtabHeader = this.parent.serviceLocator.getService(locale).getConstant('View');
        var datatabHeader = this.parent.serviceLocator.getService(locale).getConstant('Data');
        if (this.ribbon.items[this.ribbon.selectedTab].header.text === viewtabHeader) {
            if (isNullOrUndefined(args.activeTab)) {
                for (var i = 0, len_1 = this.ribbon.items.length; i < len_1; i++) {
                    if (this.ribbon.items[i].header.text === viewtabHeader) {
                        args.activeTab = i;
                        break;
                    }
                }
            }
            var text_1 = this.getLocaleText(args.props, args.props === 'GridLines');
            var id = this.parent.element.id + "_" + args.props.toLowerCase();
            var len = this.ribbon.items[args.activeTab].content.length;
            for (var i = void 0; i < len; i++) {
                if (this.ribbon.items[args.activeTab].content[i].type === 'Separator') {
                    continue;
                }
                if (this.ribbon.items[args.activeTab].content[i].id === id) {
                    this.ribbon.items[args.activeTab].content[i].text = text_1;
                    this.ribbon.setProperties({ 'items': this.ribbon.items }, true);
                }
            }
            if (this.ribbon.items[this.ribbon.selectedTab].header.text === viewtabHeader) {
                this.updateToggleText(args.props.toLowerCase(), text_1);
            }
        }
        if (this.ribbon.items[this.ribbon.selectedTab].header.text === datatabHeader) {
            if (isNullOrUndefined(args.activeTab)) {
                for (var i = 0, len_2 = this.ribbon.items.length; i < len_2; i++) {
                    if (this.ribbon.items[i].header.text === datatabHeader) {
                        args.activeTab = i;
                        break;
                    }
                }
            }
            var id = this.parent.element.id + "_" + args.props.toLowerCase();
            if (id === this.parent.element.id + '_protect') {
                var len_3 = this.ribbon.items[this.ribbon.selectedTab].content.length;
                var j = void 0;
                for (j = 0; j < len_3; j++) {
                    if (this.ribbon.items[this.ribbon.selectedTab].content[j].id === this.parent.element.id + '_protect') {
                        break;
                    }
                }
                text = this.getLocaleProtectText('Sheet', true);
            }
            else if (id === this.parent.element.id + '_protectworkbook') {
                var len_4 = this.ribbon.items[this.ribbon.selectedTab].content.length;
                var j = void 0;
                for (j = 0; j < len_4; j++) {
                    if (this.ribbon.items[this.ribbon.selectedTab].content[j].id === this.parent.element.id + '_protectworkbook') {
                        break;
                    }
                }
                if (this.parent.isProtected || this.parent.password.length > 0) {
                    text = this.getLocaleProtectWorkbook('UnProtectWorkbook');
                }
                else if (!this.parent.isProtected) {
                    text = this.getLocaleProtectWorkbook('ProtectWorkbook');
                }
            }
            var len = this.ribbon.items[args.activeTab].content.length;
            for (var i = void 0; i < len; i++) {
                if (this.ribbon.items[args.activeTab].content[i].type === 'Separator') {
                    continue;
                }
                if (this.ribbon.items[args.activeTab].content[i].id === id) {
                    this.ribbon.items[args.activeTab].content[i].text = text;
                    this.ribbon.setProperties({ 'items': this.ribbon.items }, true);
                }
            }
            if (this.ribbon.items[this.ribbon.selectedTab].header.text === datatabHeader) {
                this.updateToggleText(args.props.toLowerCase(), text);
            }
        }
    };
    Ribbon$$1.prototype.enableFileMenuItems = function (args) {
        this.ribbon.enableMenuItems(args.items, args.enable, args.isUniqueId);
    };
    Ribbon$$1.prototype.hideRibbonTabs = function (args) {
        this.ribbon.hideTabs(args.tabs, args.hide);
    };
    Ribbon$$1.prototype.addRibbonTabs = function (args) {
        this.ribbon.addTabs(args.items, args.insertBefore);
        var nextTab = select('.e-ribbon .e-tab-header .e-toolbar-item:not(.e-menu-tab).e-hide', this.parent.element);
        if (nextTab) {
            this.parent.updateActiveBorder(selectAll('.e-ribbon .e-tab-header .e-toolbar-item:not(.e-menu-tab)', this.parent.element)[this.ribbon.selectedTab]);
        }
    };
    Ribbon$$1.prototype.updateToggleText = function (item, text) {
        var _this = this;
        getUpdateUsingRaf(function () {
            var ele = select("#" + _this.parent.element.id + "_" + item + " .e-tbar-btn-text", _this.ribbon.element);
            if (ele) {
                ele.textContent = text;
            }
        });
        if (item === 'headers' && this.findDialog) {
            this.findDialog.position.Y = this.parent.getActiveSheet().showHeaders ? 31 : 0;
            this.findDialog.dataBind();
        }
    };
    Ribbon$$1.prototype.refreshViewTabContent = function (activeTab) {
        var id = this.parent.element.id;
        var sheet = this.parent.getActiveSheet();
        var l10n = this.parent.serviceLocator.getService(locale);
        for (var i = 0; i < this.ribbon.items[activeTab].content.length; i++) {
            if (this.ribbon.items[activeTab].content[i].type === 'Separator') {
                continue;
            }
            if (this.ribbon.items[activeTab].content[i].id === id + "_headers") {
                this.updateViewTabContent(activeTab, 'Headers', i);
            }
            if (this.ribbon.items[activeTab].content[i].id === id + "_gridlines") {
                this.updateViewTabContent(activeTab, 'GridLines', i);
            }
            if (this.ribbon.items[activeTab].content[i].id === (id + "_freezepanes")) {
                if (sheet.frozenRows || sheet.frozenColumns) {
                    if (this.ribbon.items[activeTab].content[i].text === l10n.getConstant('FreezePanes')) {
                        this.updateToggleText('freezepanes', this.updateRibbonItemText('Unfreeze', 'Panes', i, activeTab));
                    }
                }
                else {
                    if (this.ribbon.items[activeTab].content[i].text === l10n.getConstant('UnfreezePanes')) {
                        this.updateToggleText('freezepanes', this.updateRibbonItemText('Freeze', 'Panes', i, activeTab));
                    }
                }
            }
            if (this.ribbon.items[activeTab].content[i].id === (id + "_freezerows")) {
                if (sheet.frozenRows) {
                    if (this.ribbon.items[activeTab].content[i].text === l10n.getConstant('FreezeRows')) {
                        this.updateToggleText('freezerows', this.updateRibbonItemText('Unfreeze', 'Rows', i, activeTab));
                    }
                }
                else {
                    if (this.ribbon.items[activeTab].content[i].text === l10n.getConstant('UnfreezeRows')) {
                        this.updateToggleText('freezerows', this.updateRibbonItemText('Freeze', 'Rows', i, activeTab));
                    }
                }
            }
            if (this.ribbon.items[activeTab].content[i].id === (id + "_freezecolumns")) {
                if (sheet.frozenColumns) {
                    if (this.ribbon.items[activeTab].content[i].text === l10n.getConstant('FreezeColumns')) {
                        this.updateToggleText('freezecolumns', this.updateRibbonItemText('Unfreeze', 'Columns', i, activeTab));
                    }
                }
                else {
                    if (this.ribbon.items[activeTab].content[i].text === l10n.getConstant('UnfreezeColumns')) {
                        this.updateToggleText('freezecolumns', this.updateRibbonItemText('Freeze', 'Columns', i, activeTab));
                    }
                }
            }
        }
    };
    Ribbon$$1.prototype.updateViewTabContent = function (activeTab, item, idx) {
        var sheet = this.parent.getActiveSheet();
        var l10n = this.parent.serviceLocator.getService(locale);
        if (sheet['show' + item]) {
            if (this.ribbon.items[activeTab].content[idx].text === l10n.getConstant('Show' + item)) {
                this.updateToggleText(item.toLowerCase(), this.updateRibbonItemText('Hide', item, idx, activeTab));
            }
        }
        else {
            if (this.ribbon.items[activeTab].content[idx].text === l10n.getConstant('Hide' + item)) {
                this.updateToggleText(item.toLowerCase(), this.updateRibbonItemText('Show', item, idx, activeTab));
            }
        }
    };
    Ribbon$$1.prototype.updateRibbonItemText = function (showHideText, item, idx, activeTab) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var text = l10n.getConstant(showHideText + item);
        this.ribbon.items[activeTab].content[idx].text = text;
        this.ribbon.setProperties({ 'items': this.ribbon.items }, true);
        return text;
    };
    Ribbon$$1.prototype.refreshDataTabContent = function (activeTab) {
        var id = this.parent.element.id;
        var updated;
        for (var j = 0; j < this.ribbon.items[activeTab].content.length; j++) {
            if (this.ribbon.items[activeTab].content[j].type === 'Separator') {
                continue;
            }
            if (this.ribbon.items[activeTab].content[j].id === id + "_protect") {
                this.updateDataTabContent(activeTab, 'Sheet', j);
                if (updated) {
                    break;
                }
                updated = true;
            }
            if (this.ribbon.items[activeTab].content[j].id === id + "_protectworkbook") {
                this.updateDataTabContent(activeTab, 'Workbook', j);
            }
        }
    };
    Ribbon$$1.prototype.updateDataTabContent = function (activeTab, item, idx) {
        var sheet = this.parent.getActiveSheet();
        var l10n = this.parent.serviceLocator.getService(locale);
        if (item === 'Sheet') {
            if (sheet.isProtected) {
                if (this.ribbon.items[activeTab].content[idx].text === l10n.getConstant('Protect' + item)) {
                    this.ribbon.items[activeTab].content[idx].cssClass = 'e-active';
                    this.updateProtectBtn('Unprotect', item, idx, activeTab);
                }
            }
            else {
                this.updateProtectBtn('Protect', item, idx, activeTab);
            }
        }
        else if (item === 'Workbook') {
            var l10n_1 = this.parent.serviceLocator.getService(locale);
            if (this.parent.isProtected) {
                if (this.ribbon.items[activeTab].content[idx].text === l10n_1.getConstant('Protect' + item)) {
                    this.updateToggleText('protectworkbook', this.updateRibbonItemText('UnProtect', item, idx, activeTab));
                }
            }
            else {
                if (this.ribbon.items[activeTab].content[idx].text === l10n_1.getConstant('UnProtect' + item)) {
                    this.updateToggleText('protectworkbook', this.updateRibbonItemText('Protect', item, idx, activeTab));
                }
            }
        }
    };
    Ribbon$$1.prototype.updateProtectBtn = function (protectText, item, idx, activeTab) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var text = l10n.getConstant(protectText + item);
        this.ribbon.items[activeTab].content[idx].text = text;
        this.ribbon.setProperties({ 'items': this.ribbon.items }, true);
        this.updateToggleText('protect', text);
    };
    Ribbon$$1.prototype.updateProtectWorkbookBtn = function (protectText, item, idx, activeTab) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var text = l10n.getConstant(protectText);
        this.ribbon.items[activeTab].content[idx].text = text;
        this.ribbon.setProperties({ 'items': this.ribbon.items }, true);
        this.updateToggleText('protectworkbook', text);
    };
    Ribbon$$1.prototype.addToolbarItems = function (args) {
        this.ribbon.addToolbarItems(args.tab, args.items, args.index);
    };
    Ribbon$$1.prototype.enableToolbarItems = function (args) {
        var _this = this;
        args.forEach(function (arg) {
            _this.ribbon.enableItems(arg.tab || _this.ribbon.items[_this.ribbon.selectedTab].header.text, arg.items, arg.enable);
        });
    };
    Ribbon$$1.prototype.createMobileView = function () {
        var _this = this;
        var parentId = this.parent.element.id;
        var toobar = this.parent.createElement('div', { className: 'e-header-toolbar' });
        var menu = this.parent.createElement('ul');
        toobar.appendChild(menu);
        var toolbarObj = new Toolbar({
            items: [
                { prefixIcon: 'e-tick-icon', align: 'Left', id: parentId + 'focused_tick', cssClass: 'e-focused-tick' },
                { template: menu, align: 'Right', id: parentId + 'file_menu' }
            ],
            clicked: function (args) {
                switch (args.item.id) {
                    case parentId + 'focused_tick':
                        _this.parent.element.classList.remove('e-mobile-focused');
                        _this.parent.renderModule.setSheetPanelSize();
                        break;
                }
            },
            created: function () {
                var menuObj = new Menu({
                    cssClass: 'e-mobile e-file-menu',
                    enableRtl: true,
                    showItemOnClick: true,
                    items: _this.getRibbonMenuItems(),
                    select: _this.fileMenuItemSelect.bind(_this),
                    beforeOpen: function (args) {
                        args.element.parentElement.classList.remove('e-rtl');
                        _this.fileMenuBeforeOpen(args);
                    },
                    beforeClose: _this.fileMenuBeforeClose.bind(_this)
                });
                menuObj.createElement = _this.parent.createElement;
                menuObj.appendTo(menu);
            }
        });
        toolbarObj.createElement = this.parent.createElement;
        toolbarObj.appendTo(toobar);
        this.parent.element.insertBefore(toobar, this.parent.element.firstElementChild);
        this.renderMobileToolbar();
    };
    Ribbon$$1.prototype.renderMobileToolbar = function () {
        var _this = this;
        var toolbarPanel = this.parent.createElement('div', { className: 'e-toolbar-panel e-ribbon' });
        var toolbar = this.parent.createElement('div');
        var ddb = this.parent.createElement('button');
        toolbarPanel.appendChild(toolbar);
        toolbarPanel.appendChild(ddb);
        toolbarPanel.style.display = 'block';
        this.parent.element.appendChild(toolbarPanel);
        var ddbObj = new DropDownButton({
            cssClass: 'e-caret-hide',
            content: this.ribbon.items[0].header.text,
            items: [
                { text: this.ribbon.items[0].header.text },
                { text: this.ribbon.items[1].header.text },
                { text: this.ribbon.items[2].header.text },
                { text: this.ribbon.items[3].header.text }
            ],
            createPopupOnClick: true,
            select: function (args) {
                if (args.item.text !== ddbObj.content) {
                    toolbarObj.element.style.display = 'none';
                    ddbObj.content = args.item.text;
                    ddbObj.dataBind();
                    toolbarObj.items = _this.ribbon.items[ddbObj.items.indexOf(args.item) + 1].content;
                    toolbarObj.width = "calc(100% - " + ddb.getBoundingClientRect().width + "px)";
                    toolbarObj.element.style.display = '';
                    toolbarObj.dataBind();
                    toolbarObj.items[0].text = args.item.text;
                    toolbarObj.dataBind();
                }
            },
            open: function (args) {
                var element = args.element.parentElement;
                var clientRect = element.getBoundingClientRect();
                var offset = calculatePosition(ddbObj.element, 'right', 'bottom');
                element.style.left = offset.left - clientRect.width + "px";
                element.style.top = offset.top - clientRect.height + "px";
                for (var i = 0; i < ddbObj.items.length; i++) {
                    if (ddbObj.content === ddbObj.items[i].text) {
                        args.element.children[i].classList.add('e-selected');
                        break;
                    }
                }
            },
            close: function () { return focus(_this.parent.element); }
        });
        ddbObj.createElement = this.parent.createElement;
        ddbObj.appendTo(ddb);
        var toolbarObj = new Toolbar({
            width: "calc(100% - " + ddb.getBoundingClientRect().width + "px)",
            items: this.ribbon.items[0].content,
            clicked: this.toolbarClicked.bind(this)
        });
        toolbarObj.createElement = this.parent.createElement;
        toolbarObj.appendTo(toolbar);
        toolbarPanel.style.display = '';
    };
    Ribbon$$1.prototype.fileMenuBeforeOpen = function (args) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var wrapper;
        var contents = ['.xlsx', '.xls', '.csv', '.pdf'];
        if (args.parentItem.text === l10n.getConstant('SaveAs')) {
            [].slice.call(args.element.children).forEach(function (li, index) {
                wrapper = _this.parent.createElement('div', { innerHTML: li.innerHTML });
                li.innerHTML = '';
                wrapper.appendChild(_this.parent.createElement('span', { className: 'e-extension', innerHTML: contents[index] }));
                li.appendChild(wrapper);
            });
        }
        this.parent.trigger('fileMenuBeforeOpen', args);
    };
    Ribbon$$1.prototype.enableRibbonTabs = function (args) {
        this.ribbon.enableTabs(args.tabs, args.enable);
    };
    Ribbon$$1.prototype.fileMenuBeforeClose = function (args) {
        this.parent.trigger('fileMenuBeforeClose', args);
    };
    Ribbon$$1.prototype.hideFileMenuItems = function (args) {
        this.ribbon.hideMenuItems(args.items, args.hide, args.isUniqueId);
    };
    Ribbon$$1.prototype.addFileMenuItems = function (args) {
        this.ribbon.addMenuItems(args.items, args.text, args.insertAfter, args.isUniqueId);
    };
    Ribbon$$1.prototype.hideToolbarItems = function (args) {
        this.ribbon.hideToolbarItems(args.tab, args.indexes, args.hide);
    };
    Ribbon$$1.prototype.protectSheetHandler = function (args) {
        var sheet = this.parent.getActiveSheet();
        var l10n = this.parent.serviceLocator.getService(locale);
        if ((sheet.isProtected && sheet.protectSettings.formatCells) || !sheet.isProtected) {
            if (this.parent.allowCellFormatting) {
                this.enableToolbarItems([{ tab: l10n.getConstant('Home'), items: args.enableHomeBtnId, enable: true }]);
            }
            else {
                this.enableToolbarItems([{ tab: l10n.getConstant('Home'), items: args.enableHomeBtnId.slice(2, 14), enable: false }]);
            }
            if (!this.parent.allowWrap) {
                this.enableToolbarItems([{ tab: l10n.getConstant('Home'), items: args.enableHomeBtnId.slice(14, 15), enable: false }]);
            }
            if (!this.parent.allowNumberFormatting) {
                this.enableToolbarItems([{ tab: l10n.getConstant('Home'), items: args.enableHomeBtnId.slice(2, 3), enable: false }]);
            }
            this.parent.notify(setUndoRedo, null);
        }
        else {
            this.enableToolbarItems([{ tab: l10n.getConstant('Home'), items: args.disableHomeBtnId, enable: false }]);
        }
        if ((sheet.isProtected && sheet.protectSettings.insertLink) || !sheet.isProtected) {
            if (!this.parent.allowHyperlink || (sheet.isProtected && sheet.protectSettings.insertLink)) {
                this.enableToolbarItems([{ tab: l10n.getConstant('Insert'), items: args.enableInsertBtnId.slice(0, 1), enable: false }]);
            }
            else {
                this.enableToolbarItems([{ tab: l10n.getConstant('Insert'), items: args.enableInsertBtnId, enable: true }]);
            }
        }
        else {
            this.enableToolbarItems([{ tab: l10n.getConstant('Insert'), items: args.enableInsertBtnId, enable: false }]);
        }
        if ((sheet.isProtected && sheet.protectSettings.selectCells) || !sheet.isProtected) {
            this.enableToolbarItems([{ tab: l10n.getConstant('Home'), items: args.findBtnId, enable: true }]);
        }
        else {
            this.enableToolbarItems([{ tab: l10n.getConstant('Home'), items: args.findBtnId, enable: false }]);
        }
        var len = this.ribbon.items[this.ribbon.selectedTab].content.length;
        var i;
        for (i = 0; i < len; i++) {
            if (this.ribbon.items[this.ribbon.selectedTab].content[i].id === this.parent.element.id + '_protectworkbook') {
                break;
            }
        }
        if (sheet.isProtected) {
            if (this.parent.isProtected && this.parent.element.querySelector('#' + this.parent.element.id + '_protectworkbook') &&
                this.parent.element.querySelector('#' + this.parent.element.id + '_protectworkbook')
                    .querySelector('.e-tbar-btn-text').textContent === l10n.getConstant('UnProtectWorkbook')) {
                if (this.ribbon.items[this.ribbon.selectedTab].header.text === l10n.getConstant('Data')) {
                    this.ribbon.items[this.ribbon.selectedTab].content[i].text = l10n.getConstant('UnProtectWorkbook');
                }
            }
            else {
                if (this.ribbon.items[this.ribbon.selectedTab].header.text === l10n.getConstant('Data')) {
                    this.ribbon.items[this.ribbon.selectedTab].content[i].text = l10n.getConstant('ProtectWorkbook');
                }
            }
            this.enableToolbarItems([{ tab: l10n.getConstant('Insert'), items: args.imageBtnId, enable: false }]);
            this.enableToolbarItems([{ tab: l10n.getConstant('Data'), items: args.dataValidationBtnId, enable: false }]);
            this.enableToolbarItems([{ tab: l10n.getConstant('Formulas'), items: args.enableFrmlaBtnId, enable: false }]);
            this.enableToolbarItems([{ tab: l10n.getConstant('Insert'), items: args.chartBtnId, enable: false }]);
        }
        else {
            if (this.parent.isProtected && this.parent.element.querySelector('#' + this.parent.element.id + '_protectworkbook') &&
                this.parent.element.querySelector('#' + this.parent.element.id + '_protectworkbook')
                    .querySelector('.e-tbar-btn-text').textContent === l10n.getConstant('UnProtectWorkbook')) {
                if (this.ribbon.items[this.ribbon.selectedTab].header.text === l10n.getConstant('Data')) {
                    this.ribbon.items[this.ribbon.selectedTab].content[i].text = l10n.getConstant('UnProtectWorkbook');
                }
            }
            else {
                if (this.ribbon.items[this.ribbon.selectedTab].header.text === l10n.getConstant('Data')) {
                    this.ribbon.items[this.ribbon.selectedTab].content[i].text = l10n.getConstant('ProtectWorkbook');
                }
            }
            this.enableToolbarItems([{ tab: l10n.getConstant('Insert'), items: args.imageBtnId, enable: this.parent.allowImage }]);
            this.enableToolbarItems([{ tab: l10n.getConstant('Data'), items: args.dataValidationBtnId,
                    enable: this.parent.allowDataValidation }]);
            this.enableToolbarItems([{ tab: l10n.getConstant('Formulas'), items: args.enableFrmlaBtnId, enable: true }]);
            this.enableToolbarItems([{ tab: l10n.getConstant('Insert'), items: args.chartBtnId, enable: this.parent.allowChart }]);
        }
    };
    Ribbon$$1.prototype.updateMergeItem = function (e) {
        if (e.type === 'mousemove' || e.type === 'pointermove' || (e.shiftKey && e.type === 'mousedown')) {
            var indexes = getRangeIndexes(this.parent.getActiveSheet().selectedRange);
            if ((indexes[1] !== indexes[3] || indexes[0] !== indexes[2]) && !this.parent.getActiveSheet().isProtected &&
                this.parent.allowMerge) {
                this.enableToolbarItems([{ tab: this.parent.serviceLocator.getService(locale).getConstant('Home'),
                        items: [this.parent.element.id + "_merge_cells"], enable: true }]);
                this.toggleActiveState(false);
            }
        }
    };
    Ribbon$$1.prototype.updateCustomFormats = function (args) {
        if (this.checkNewFormats(args.format.toString()) && args.format.toString().length > 0) {
            var item = { text: args.format.toString() };
            this.formatData.push(item);
        }
    };
    Ribbon$$1.prototype.addEventListener = function () {
        this.parent.on(ribbon, this.initRibbon, this);
        this.parent.on(enableToolbarItems, this.enableToolbarItems, this);
        this.parent.on(activeCellChanged, this.refreshRibbonContent, this);
        this.parent.on(updateToggleItem, this.toggleRibbonItems, this);
        this.parent.on(enableFileMenuItems, this.enableFileMenuItems, this);
        this.parent.on(hideRibbonTabs, this.hideRibbonTabs, this);
        this.parent.on(addRibbonTabs, this.addRibbonTabs, this);
        this.parent.on(addToolbarItems, this.addToolbarItems, this);
        this.parent.on(hideFileMenuItems, this.hideFileMenuItems, this);
        this.parent.on(addFileMenuItems, this.addFileMenuItems, this);
        this.parent.on(hideToolbarItems, this.hideToolbarItems, this);
        this.parent.on(enableRibbonTabs, this.enableRibbonTabs, this);
        this.parent.on(protectCellFormat, this.protectSheetHandler, this);
        this.parent.on(selectionComplete, this.updateMergeItem, this);
        this.parent.on(refreshRibbonIcons, this.refreshRibbonContent, this);
        this.parent.on(insertDesignChart, this.insertDesignChart, this);
        this.parent.on(removeDesignChart, this.removeDesignChart, this);
        this.parent.on(ribbonFind, this.findToolDlg, this);
        this.parent.on(blankWorkbook, this.blankWorkbook, this);
        this.parent.on(updateCustomFormatsFromImport, this.updateCustomFormats, this);
    };
    Ribbon$$1.prototype.destroy = function () {
        var parentElem = this.parent.element;
        var ribbonEle = this.ribbon.element;
        var cPickerEle = this.cPickerEle;
        var id = parentElem.id;
        ['bold', 'italic', 'line-through', 'underline'].forEach(function (name) {
            destroyComponent(select('#' + (id + "_" + name), parentElem), Button);
        });
        this.pasteSplitBtn.destroy();
        this.pasteSplitBtn = null;
        this.mergeSplitBtn.destroy();
        this.mergeSplitBtn = null;
        this.numFormatDDB.destroy();
        this.numFormatDDB = null;
        this.fontSizeDdb.destroy();
        this.fontSizeDdb = null;
        this.fontNameDdb.destroy();
        this.fontNameDdb = null;
        this.textAlignDdb.destroy();
        this.textAlignDdb = null;
        this.verticalAlignDdb.destroy();
        this.verticalAlignDdb = null;
        this.sortingDdb.destroy();
        this.sortingDdb = null;
        this.clearDdb.destroy();
        this.clearDdb = null;
        this.colorPicker.destroy();
        this.colorPicker = null;
        this.destroyComponent(id + "_borders_menu", 'menu');
        this.bordersDdb.destroy();
        this.bordersDdb = null;
        this.findDdb.destroy();
        this.findDdb = null;
        this.destroyComponent(id + '_chart_menu', 'menu');
        this.destroyComponent(id + '_chart_type_menu', 'menu');
        this.destroyComponent(id + '_chart-btn', 'dropdown-btn');
        this.destroyComponent(id + '_chart-type-btn', 'dropdown-btn');
        this.destroyComponent(id + "_cf_menu", 'menu');
        this.cFDdb.destroy();
        this.cFDdb = null;
        this.detachPopupElement(id);
        this.parent.notify('destroyRibbonComponents', null);
        this.ribbon.destroy();
        if (ribbonEle) {
            detach(ribbonEle);
        }
        this.ribbon = null;
        if (cPickerEle) {
            detach(cPickerEle);
        }
        this.cPickerEle = null;
        if (this.findDialog) {
            this.findDialog.destroy();
        }
        this.removeEventListener();
    };
    Ribbon$$1.prototype.destroyComponent = function (id, moduleName) {
        var ele = typeof id === 'string' ? document.getElementById(id) : id;
        if (ele) {
            if (moduleName !== 'menu' || ele.childElementCount) {
                var compObj = getComponent(ele, moduleName);
                if (compObj) {
                    compObj.destroy();
                    if (moduleName === 'dropdown-btn') {
                        var popup = document.getElementById(ele.id + "-popup");
                        if (popup) {
                            detach(popup);
                        }
                    }
                }
            }
            if (moduleName === 'menu') {
                detach(ele);
            }
        }
    };
    Ribbon$$1.prototype.detachPopupElement = function (id) {
        ['_conditionalformatting', '_chart-type-btn', '_chart-btn', '_borders'].forEach(function (selector) {
            var ddbPopup = document.getElementById("" + id + selector + "-popup");
            if (ddbPopup) {
                detach(ddbPopup);
            }
        });
    };
    Ribbon$$1.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(ribbon, this.initRibbon);
            this.parent.off(enableToolbarItems, this.enableToolbarItems);
            this.parent.off(activeCellChanged, this.refreshRibbonContent);
            this.parent.off(updateToggleItem, this.toggleRibbonItems);
            this.parent.off(enableFileMenuItems, this.enableFileMenuItems);
            this.parent.off(hideRibbonTabs, this.hideRibbonTabs);
            this.parent.off(addRibbonTabs, this.addRibbonTabs);
            this.parent.off(addToolbarItems, this.addToolbarItems);
            this.parent.off(hideFileMenuItems, this.hideFileMenuItems);
            this.parent.off(addFileMenuItems, this.addFileMenuItems);
            this.parent.off(hideToolbarItems, this.hideToolbarItems);
            this.parent.off(enableRibbonTabs, this.enableRibbonTabs);
            this.parent.off(protectCellFormat, this.protectSheetHandler);
            this.parent.off(selectionComplete, this.updateMergeItem);
            this.parent.off(refreshRibbonIcons, this.refreshRibbonContent);
            this.parent.off(insertDesignChart, this.insertDesignChart);
            this.parent.off(removeDesignChart, this.removeDesignChart);
            this.parent.on(ribbonFind, this.findToolDlg, this);
            this.parent.off(blankWorkbook, this.blankWorkbook);
            this.parent.off(updateCustomFormatsFromImport, this.updateCustomFormats);
        }
    };
    return Ribbon$$1;
}());

/**
 * Represents Formula bar for Spreadsheet.
 */
var FormulaBar = /** @__PURE__ @class */ (function () {
    function FormulaBar(parent) {
        this.categoryCollection = [];
        this.formulaCollection = [];
        this.isGoto = false;
        this.parent = parent;
        this.addEventListener();
    }
    FormulaBar.prototype.getModuleName = function () {
        return 'formulaBar';
    };
    FormulaBar.prototype.createFormulaBar = function (args) {
        if (!this.parent.showFormulaBar && this.insertFnRipple) {
            this.destroy();
            return;
        }
        var l10n = this.parent.serviceLocator.getService(locale);
        var id = this.parent.element.id;
        var fBarWrapper = this.parent.createElement('div', { className: 'e-formula-bar-panel' });
        if (!this.parent.isMobileView()) {
            var nameBox = this.parent.createElement('input', { id: id + '_name_box', attrs: { type: 'text' } });
            fBarWrapper.appendChild(nameBox);
            this.comboBoxInstance = new ComboBox({
                value: 'A1',
                cssClass: 'e-name-box',
                width: '',
                noRecordsTemplate: '',
                fields: { text: 'name', value: 'refersTo' },
                beforeOpen: this.nameBoxBeforeOpen.bind(this),
                blur: this.nameBoxBlur.bind(this),
                select: this.nameBoxSelect.bind(this),
                change: function () {
                    /** */
                }
            });
            this.comboBoxInstance.createElement = this.parent.createElement;
            this.comboBoxInstance.appendTo(nameBox);
            this.comboBoxInstance.element.parentElement.title = l10n.getConstant('NameBox');
        }
        var insertFnBtn = fBarWrapper.appendChild(this.parent.createElement('button', {
            className: 'e-btn e-css e-flat e-icon-btn e-insert-function', attrs: { 'title': l10n.getConstant('InsertFunction') }
        }));
        insertFnBtn.appendChild(this.parent.createElement('span', { className: 'e-btn-icon e-icons' }));
        this.insertFnRipple = rippleEffect(fBarWrapper, { selector: '.e-insert-function' });
        fBarWrapper.appendChild(this.parent.createElement('div', { className: 'e-separator' }));
        var textarea = fBarWrapper.appendChild(this.parent.createElement('textarea', {
            className: 'e-formula-bar e-css', id: id + '_formula_input',
            attrs: { 'title': l10n.getConstant('FormulaBar'), 'spellcheck': 'false' }
        }));
        textarea.rows = 1;
        if (this.parent.isMobileView()) {
            textarea.placeholder = l10n.getConstant('MobileFormulaBarPlaceHolder');
            EventHandler.add(textarea, 'focus', this.textAreaFocusIn, this);
            EventHandler.add(textarea, 'blur', this.textAreaFocusOut, this);
        }
        else {
            fBarWrapper.appendChild(this.parent.createElement('span', {
                className: 'e-drop-icon e-icons', attrs: { 'title': l10n.getConstant('ExpandFormulaBar') }
            }));
        }
        if (args && args.uiUpdate) {
            this.parent.element.insertBefore(fBarWrapper, document.getElementById(id + '_sheet_panel'));
        }
        else {
            this.parent.element.appendChild(fBarWrapper);
        }
    };
    FormulaBar.prototype.textAreaFocusIn = function () {
        var formulaPanel = this.parent.element.querySelector('.e-formula-bar-panel');
        var tickBtn = this.parent.createElement('button', { className: 'e-btn e-css e-flat e-icon-btn e-formula-submit' });
        tickBtn.appendChild(this.parent.createElement('span', { className: 'e-btn-icon e-icons e-tick-icon' }));
        formulaPanel.classList.add('e-focused');
        formulaPanel.appendChild(tickBtn);
    };
    FormulaBar.prototype.textAreaFocusOut = function () {
        var formulaPanel = this.parent.element.querySelector('.e-formula-bar-panel');
        formulaPanel.classList.remove('e-focused');
        detach(formulaPanel.querySelector('.e-formula-submit'));
    };
    FormulaBar.prototype.keyDownHandler = function (e) {
        var trgtElem = e.target;
        if (this.parent.isEdit && !this.parent.getActiveSheet().isProtected) {
            if ((checkIsFormula(trgtElem.value) || (trgtElem.validity && trgtElem.value.toString().indexOf('=') === 0)) &&
                e.keyCode === 16) {
                return;
            }
            if (trgtElem.classList.contains('e-formula-bar')) {
                this.parent.notify(editOperation, { action: 'refreshEditor', value: trgtElem.value, refreshEditorElem: true });
            }
        }
    };
    FormulaBar.prototype.keyUpHandler = function (e) {
        if (this.parent.isEdit) {
            var trgtElem = e.target;
            if (trgtElem.classList.contains('e-formula-bar')) {
                var eventArg = { action: 'getCurrentEditValue', editedValue: '' };
                this.parent.notify(editOperation, eventArg);
                if (eventArg.editedValue !== trgtElem.value && e.keyCode !== 16) {
                    this.parent.notify(editOperation, { action: 'refreshEditor', value: trgtElem.value, refreshEditorElem: true });
                }
            }
        }
    };
    FormulaBar.prototype.nameBoxBeforeOpen = function (args) {
        if (this.comboBoxInstance.element.classList.contains('e-name-editing')) {
            args.cancel = true;
        }
        else {
            this.comboBoxInstance.element.select();
        }
    };
    FormulaBar.prototype.nameBoxBlur = function () {
        if (this.comboBoxInstance.element.classList.contains('e-name-editing')) {
            this.comboBoxInstance.element.classList.remove('e-name-editing');
            this.UpdateValueAfterMouseUp();
        }
    };
    FormulaBar.prototype.nameBoxSelect = function (args) {
        if (args.isInteracted) {
            var refersTo = args.itemData.refersTo.substr(1);
            var sheetIdx = getSheetIndex(this.parent, getSheetNameFromAddress(refersTo));
            if (sheetIdx === undefined) {
                return;
            }
            var range = getRangeFromAddress(refersTo);
            var sheet = getSheet(this.parent, sheetIdx);
            if (range.indexOf(':') !== -1) {
                var colIndex = range.indexOf(':');
                var left = range.substr(0, colIndex);
                var right = range.substr(colIndex + 1, range.length);
                left = left.replace('$', '');
                right = right.replace('$', '');
                if (right.match(/\D/g) && !right.match(/[0-9]/g) && left.match(/\D/g) && !left.match(/[0-9]/g)) {
                    left = left + '1';
                    right = right + sheet.rowCount;
                    range = left + ':' + right;
                }
                else if (!right.match(/\D/g) && right.match(/[0-9]/g) && !left.match(/\D/g) && left.match(/[0-9]/g)) {
                    left = getCellAddress(parseInt(left, 10) - 1, 0);
                    right = getCellAddress(parseInt(right, 10) - 1, sheet.colCount - 1);
                    range = left + ':' + right;
                }
            }
            if ((sheetIdx) === this.parent.activeSheetIndex) {
                this.parent.selectRange(range);
                focus(this.parent.element);
            }
            else {
                updateSelectedRange(this.parent, range, sheet);
                this.parent.activeSheetIndex = sheetIdx;
            }
        }
    };
    FormulaBar.prototype.formulaBarUpdateHandler = function (e) {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        var range = sheet.selectedRange.split(':');
        var address;
        var editArgs = { action: 'getElement', element: null };
        this.parent.notify(editOperation, editArgs);
        var formulaBar$$1 = this.parent.element.querySelector('.e-formula-bar');
        var intl = new Internationalization();
        if (e.type === 'mousemove' || e.type === 'pointermove') {
            var indexes1 = getRangeIndexes(range[0]);
            var indexes2 = getRangeIndexes(range[1]);
            address = Math.abs(indexes1[0] - indexes2[0]) + 1 + "R x " + (Math.abs(indexes1[1] - indexes2[1]) + 1) + "C";
            if (this.parent.isEdit) {
                if (e.target && !e.target.classList.contains('e-spreadsheet-edit')) {
                    this.parent.notify(editValue, null);
                }
                else if (editArgs.element) {
                    formulaBar$$1.value = editArgs.element.textContent;
                }
            }
        }
        else {
            address = range[0];
            var data = this.parent.getData(getSheetName(this.parent) + "!" + address);
            data.then(function (values) {
                var value = '';
                var intDate;
                values.forEach(function (cell) {
                    var type = cell && cell.format ? getTypeFromFormat(cell.format) : 'General';
                    if (cell) {
                        if (!isNullOrUndefined(cell.value)) {
                            intDate = intToDate(Number(cell.value));
                            if (intDate.toString() !== 'Invalid Date' && (type === 'ShortDate' || type === 'LongDate')) {
                                value = intl.formatDate(intDate, {
                                    type: 'date',
                                    skeleton: 'yMd'
                                });
                                if (value && value.indexOf('/') > -1 || value.indexOf('-') > 0) {
                                    var dateSplit = value.split(/-|\//);
                                    var cellFormat = cell ? cell.format : '';
                                    if (((cellFormat === 'dd-MM-yyyy' || cellFormat === 'dd/MM/yyyy')) && Number(dateSplit[0]) <= 12 && Number(dateSplit[1]) <= 31) {
                                        value = dateSplit[1] + '/' + dateSplit[0] + '/' + dateSplit[2];
                                    }
                                }
                            }
                            else if (intDate.toString() !== 'Invalid Date' && type === 'Time') {
                                if (Number(cell.value) >= 1) {
                                    value = intl.formatDate(intDate, { type: 'dateTime', skeleton: 'yMd' }) + ' ';
                                }
                                value += intl.formatDate(intDate, { type: 'dateTime', skeleton: 'hms' });
                            }
                            else {
                                value = cell.value;
                            }
                        }
                        if (cell.formula) {
                            value = cell.formula;
                        }
                    }
                    var eventArgs = { action: 'getCurrentEditValue', editedValue: '' };
                    _this.parent.notify(editOperation, eventArgs);
                    var isFormulaEdit = (eventArgs.editedValue && eventArgs.editedValue.toString().indexOf('=') === 0) ||
                        checkIsFormula(eventArgs.editedValue);
                    var formulaInp = document.getElementById(_this.parent.element.id + '_formula_input');
                    var addressRange = getRangeIndexes(address);
                    var cellEle = _this.parent.getCell(addressRange[0], addressRange[1]);
                    if (cell && !cell.formula && cellEle && (type !== 'Time' || !value)) {
                        if (cell.value === undefined || (_this.isDateTimeType(cell.format) && cell.value && intToDate(Number(cell.value)).toString() !== 'Invalid Date') || isNullOrUndefined(cell.format)) {
                            var key = _this.isDateTimeType(cell.format);
                            if (key) {
                                var intl_1 = new Internationalization();
                                var format = key === 'date' ? 'M/d/yyyy' : 'h:mm:ss a';
                                if (cell.format === 'dd-MM-yyyy' || cell.format === 'dd/MM/yyyy') {
                                    format = cell.format;
                                }
                                formulaInp.value = intl_1.formatDate(intToDate(parseFloat(cell.value)), { type: key, format: format });
                            }
                            else {
                                if (cell.validation && cell.validation.type === 'List') {
                                    formulaInp.value = (cellEle.lastElementChild || cellEle).textContent;
                                }
                                else {
                                    formulaInp.value = cellEle.textContent;
                                }
                            }
                        }
                        else {
                            formulaInp.value = cell.value;
                        }
                    }
                    else {
                        formulaInp.value = value;
                    }
                    if (!isNullOrUndefined(value) && !isFormulaEdit) {
                        _this.parent.notify(editOperation, { action: 'refreshEditor', value: formulaInp.value, refreshEditorElem: true });
                    }
                    if (_this.parent.isEdit) {
                        if (e.target && !e.target.classList.contains('e-spreadsheet-edit')) {
                            _this.parent.notify(editValue, null);
                        }
                        else if (editArgs.element) {
                            formulaBar$$1.value = editArgs.element.textContent;
                        }
                    }
                });
            });
        }
        this.updateComboBoxValue(address);
    };
    FormulaBar.prototype.isDateTimeType = function (format) {
        var dateCodes = ['/', '-d', '-m', '-y', 'dd', 'mm', 'yy'];
        var timeCodes = [':', 'hh', 'h', 'mm:ss', 'h:mm:ss'];
        var result;
        timeCodes.forEach(function (code) {
            if (format && format.indexOf(code) > -1) {
                result = 'time';
            }
        });
        if (result) {
            return result;
        }
        else {
            dateCodes.forEach(function (code) {
                if (format && format.indexOf(code) > -1) {
                    result = 'date';
                }
            });
        }
        return result;
    };
    FormulaBar.prototype.UpdateValueAfterMouseUp = function () {
        this.updateComboBoxValue(this.parent.getActiveSheet().selectedRange.split(':')[0]);
    };
    FormulaBar.prototype.updateComboBoxValue = function (value) {
        var sheet = this.parent.getActiveSheet();
        var range = getSheetName(this.parent) + '!' + sheet.selectedRange;
        var eventArgs = {
            action: 'getNameFromRange', range: range, definedName: null
        };
        this.parent.notify(formulaOperation, eventArgs);
        if (eventArgs.definedName) {
            value = eventArgs.definedName.name;
        }
        if (!this.parent.isMobileView()) {
            if (this.comboBoxInstance.text === value) {
                return;
            }
            this.comboBoxInstance.text = value;
            this.comboBoxInstance.dataBind();
        }
    };
    FormulaBar.prototype.disabletextarea = function () {
        var element = this.getFormulaBar();
        if (this.parent.getActiveSheet().isProtected) {
            element.disabled = true;
        }
        else {
            element.disabled = false;
        }
    };
    FormulaBar.prototype.formulaBarScrollEdit = function () {
        var index = getRangeIndexes(this.parent.getActiveSheet().selectedRange);
        var viewportIndexes = getCellIndexes(this.parent.getActiveSheet().topLeftCell);
        if (index[0] < viewportIndexes[0]) {
            this.parent.goTo(this.parent.getActiveSheet().selectedRange);
            this.isGoto = true;
        }
        this.parent.notify(editOperation, { action: 'startEdit', refreshCurPos: false });
    };
    FormulaBar.prototype.formulaBarClickHandler = function (e) {
        var _this = this;
        var target = e.target;
        var sheet = this.parent.getActiveSheet();
        var isSheetProtected = sheet.isProtected;
        var range = getCellIndexes(sheet.activeCell);
        var cell = getCell(range[0], range[1], sheet);
        var isCellLocked = isLocked(cell, getColumn(sheet, range[1]));
        if (target.classList.contains('e-drop-icon') && closest(target, '.e-formula-bar-panel')) {
            this.toggleFormulaBar(target);
        }
        else if (target.classList.contains('e-formula-bar')) {
            if (!this.parent.isEdit && (!isSheetProtected || (isSheetProtected && !isCellLocked))) {
                this.formulaBarScrollEdit();
            }
            else if (isSheetProtected && isCellLocked) {
                this.parent.notify(editAlert, null);
            }
        }
        else if (target.parentElement && target.parentElement.classList.contains('e-name-box')) {
            if (target.classList.contains('e-ddl-icon')) {
                var eventArgs = { action: 'getNames', names: [] };
                this.parent.notify(formulaOperation, eventArgs);
                this.comboBoxInstance.dataSource = eventArgs.names;
            }
            else {
                this.comboBoxInstance.element.classList.add('e-name-editing');
                this.comboBoxInstance.element.select();
            }
        }
        if (!isNullOrUndefined(target.offsetParent) && ((target.offsetParent.classList.contains('e-insert-function')) ||
            (target.classList.contains('e-insert-function')) || (this.parent.element.id + '_insert_function' === target.offsetParent.id)
            || (this.parent.element.id + '_insert_function' === target.id) ||
            target.parentElement.classList.contains('e-insert-function')
            || (this.parent.element.id + '_insert_function' === target.parentElement.id))) {
            if (isSheetProtected) {
                this.parent.notify(editAlert, null);
                return;
            }
            var isOpen = !this.parent.isEdit;
            var args = { action: 'getCurrentEditValue', editedValue: '' };
            if (!isOpen) {
                var eventArgs = { action: 'isFormulaEditing', isFormulaEdit: false };
                this.parent.notify(formulaOperation, eventArgs);
                isOpen = eventArgs.isFormulaEdit;
                this.parent.notify(editOperation, args);
            }
            if (isOpen || args.editedValue === '') {
                if (args.editedValue === '') {
                    this.parent.notify(editOperation, { action: 'refreshEditor', value: '=' });
                }
                var l10n = this.parent.serviceLocator.getService(locale);
                var formulaDescription = this.parent.createElement('div', { className: 'e-formula-description', id: this.parent.element.id + '_description_content' });
                var categoryContent = this.parent.createElement('div', {
                    className: 'e-category-content', id: this.parent.element.id + '_category_content',
                    innerHTML: l10n.getConstant('PickACategory')
                });
                var dropDownElement = this.parent.createElement('input', { className: 'e-formula-category', id: this.parent.element.id + '_formula_category' });
                var listViewElement = this.parent.createElement('div', { className: 'e-formula-list', id: this.parent.element.id + '_formula_list' });
                var descriptionContent = this.parent.createElement('div', { className: 'e-description-content', innerHTML: l10n.getConstant('Description') });
                var headerContent = this.parent.createElement('div', { className: 'e-header-content', innerHTML: l10n.getConstant('InsertFunction') });
                var categoryArgs = {
                    action: 'getFormulaCategory', categoryCollection: []
                };
                this.parent.notify(workbookFormulaOperation, categoryArgs);
                this.categoryCollection = categoryArgs.categoryCollection;
                this.categoryList = new DropDownList({
                    dataSource: this.categoryCollection, index: 0, width: '285px', popupHeight: '210px',
                    select: this.dropDownSelect.bind(this)
                });
                var listArgs = {
                    action: 'getLibraryFormulas', formulaCollection: []
                };
                this.parent.notify(workbookFormulaOperation, listArgs);
                this.formulaCollection = listArgs.formulaCollection;
                this.formulaList = new ListView({
                    dataSource: this.formulaCollection.sort(),
                    actionComplete: this.updateFormulaList.bind(this),
                    select: this.listSelected.bind(this), width: '285px', height: '200px'
                });
                this.dialog = this.parent.serviceLocator.getService('dialog');
                this.dialog.show({
                    header: headerContent.outerHTML,
                    content: categoryContent.outerHTML + dropDownElement.outerHTML + listViewElement.outerHTML +
                        descriptionContent.outerHTML + formulaDescription.outerHTML,
                    width: '320px', height: '485px', cssClass: 'e-spreadsheet-function-dlg',
                    showCloseIcon: true, isModal: true,
                    beforeOpen: function (args) {
                        var dlgArgs = {
                            dialogName: 'InsertFunctionDialog', element: args.element, target: args.target, cancel: args.cancel
                        };
                        _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                        if (dlgArgs.cancel) {
                            args.cancel = true;
                        }
                        focus(_this.parent.element);
                    },
                    open: this.dialogOpen.bind(this), beforeClose: this.dialogBeforeClose.bind(this), close: this.dialogClose.bind(this),
                    buttons: [
                        {
                            click: (this.selectFormula.bind(this, this.dialog, this)),
                            buttonModel: { content: l10n.getConstant('Ok'), isPrimary: true }
                        }
                    ]
                });
                this.categoryList.appendTo('#' + this.parent.element.id + '_formula_category');
                this.formulaList.appendTo('#' + this.parent.element.id + '_formula_list');
                EventHandler.add(this.formulaList.element, 'dblclick', this.formulaClickHandler, this);
            }
        }
    };
    FormulaBar.prototype.toggleFormulaBar = function (target) {
        var parent = target.parentElement;
        var l10n = this.parent.serviceLocator.getService(locale);
        if (parent.classList.contains('e-expanded')) {
            parent.classList.remove('e-expanded');
            document.getElementById(this.parent.element.id + '_formula_input').rows = 1;
            target.title = l10n.getConstant('ExpandFormulaBar');
        }
        else {
            parent.classList.add('e-expanded');
            document.getElementById(this.parent.element.id + '_formula_input').rows = 3;
            target.title = l10n.getConstant('CollapseFormulaBar');
        }
        this.parent.setPanelSize();
    };
    FormulaBar.prototype.dialogOpen = function () {
        this.focusOkButton();
    };
    FormulaBar.prototype.dialogClose = function () {
        var args = { action: 'getCurrentEditValue', editedValue: '' };
        this.parent.notify(editOperation, args);
        if (args.editedValue.toString().trim() === '=') {
            this.parent.notify(editOperation, { action: 'refreshEditor', value: '' });
        }
    };
    FormulaBar.prototype.dialogBeforeClose = function () {
        EventHandler.remove(this.formulaList.element, 'dblclick', this.formulaClickHandler);
        var dialogContentEle = document.getElementsByClassName('e-spreadsheet-function-dlg')[0].
            querySelector('.e-dlg-content');
        dialogContentEle.parentNode.removeChild(dialogContentEle);
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        this.dialog.dialogInstance.storeActiveElement = document.getElementById(this.parent.element.id + '_edit');
    };
    FormulaBar.prototype.selectFormula = function (dialog, formulaBarObj) {
        var formulaText = formulaBarObj.formulaList.getSelectedItems().text;
        var sheet = getSheet(this.parent, this.parent.activeSheetIndex);
        if (this.parent.isEdit) {
            this.parent.notify(editOperation, {
                action: 'refreshEditor', value: formulaText + '(', refreshFormulaBar: true,
                refreshEditorElem: true, isAppend: true
            });
        }
        else {
            this.parent.notify(editOperation, { action: 'startEdit', value: '=' + formulaText + '(', address: sheet.activeCell });
            this.parent.notify(formulaBarOperation, { action: 'refreshFormulabar', value: '=' + formulaText + '(' });
        }
        dialog.hide();
    };
    FormulaBar.prototype.listSelected = function () {
        this.updateFormulaDescription();
    };
    FormulaBar.prototype.updateFormulaList = function () {
        this.activeListFormula();
        this.updateFormulaDescription();
    };
    FormulaBar.prototype.dropDownSelect = function (args) {
        this.formulaCollection = [];
        var listArgs = {
            action: 'getLibraryFormulas',
            formulaCollection: []
        };
        if (args.item.textContent === 'All') {
            this.parent.notify(workbookFormulaOperation, listArgs);
            this.formulaCollection = listArgs.formulaCollection;
        }
        else {
            var category = args.item.textContent;
            var selectArgs = {
                action: 'dropDownSelectFormulas',
                formulaCollection: [],
                selectCategory: category
            };
            this.parent.notify(workbookFormulaOperation, selectArgs);
            this.formulaCollection = selectArgs.formulaCollection;
        }
        this.formulaList.dataSource = this.formulaCollection.sort();
    };
    FormulaBar.prototype.focusOkButton = function () {
        var focusEle = document.getElementsByClassName('e-spreadsheet-function-dlg')[0].querySelector('.e-dlg-content');
        (focusEle.nextElementSibling.firstElementChild).focus();
    };
    FormulaBar.prototype.activeListFormula = function () {
        var acListEle = document.getElementById(this.parent.element.id + '_formula_list');
        var firstElement = acListEle.children[0].children[0].firstElementChild;
        this.formulaList.selectItem(firstElement);
    };
    FormulaBar.prototype.updateFormulaDescription = function () {
        var selectedFormula = this.formulaList.getSelectedItems().text;
        var descriptionArgs = {
            action: 'getFormulaDescription',
            description: '',
            selectedList: selectedFormula
        };
        this.parent.notify(workbookFormulaOperation, descriptionArgs);
        this.focusOkButton();
        var descriptionArea = document.getElementById(this.parent.element.id + '_description_content');
        selectedFormula = (selectedFormula === 'AND') ? 'CalculateAND' : (selectedFormula === 'OR') ? 'CalculateOR' : selectedFormula;
        descriptionArea.innerHTML = this.parent.serviceLocator.getService(locale).getConstant(selectedFormula);
    };
    FormulaBar.prototype.formulaClickHandler = function (args) {
        var trgtElem = args.target;
        var sheet = getSheet(this.parent, this.parent.activeSheetIndex);
        if (trgtElem.offsetParent.classList.contains('e-text-content') || trgtElem.classList.contains('e-list-item')) {
            if (this.parent.isEdit) {
                this.parent.notify(editOperation, {
                    action: 'refreshEditor', value: trgtElem.innerText + '(', refreshFormulaBar: true,
                    refreshEditorElem: true, isAppend: true
                });
            }
            else {
                this.parent.notify(editOperation, { action: 'startEdit', value: '=' + trgtElem.innerText + '(', address: sheet.activeCell });
                this.parent.notify(formulaBarOperation, { action: 'refreshFormulabar', value: '=' + trgtElem.innerText + '(' });
            }
            this.dialog.hide();
        }
    };
    FormulaBar.prototype.addEventListener = function () {
        this.parent.on(formulaBar, this.createFormulaBar, this);
        this.parent.on(click, this.formulaBarClickHandler, this);
        this.parent.on(keyDown, this.keyDownHandler, this);
        this.parent.on(keyUp, this.keyUpHandler, this);
        this.parent.on(selectionComplete, this.formulaBarUpdateHandler, this);
        this.parent.on(mouseUpAfterSelection, this.UpdateValueAfterMouseUp, this);
        this.parent.on(formulaBarOperation, this.editOperationHandler, this);
        this.parent.on(enableFormulaInput, this.disabletextarea, this);
        this.parent.on(isFormulaBarEdit, this.isFormulaBarEdit, this);
    };
    FormulaBar.prototype.destroy = function () {
        this.removeEventListener();
        this.comboBoxInstance.destroy();
        this.comboBoxInstance = null;
        this.insertFnRipple();
        this.insertFnRipple = null;
        var formulaPanel = this.parent.element.querySelector('.e-formula-bar-panel');
        if (formulaPanel) {
            detach(formulaPanel);
        }
    };
    FormulaBar.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(formulaBar, this.createFormulaBar);
            this.parent.off(click, this.formulaBarClickHandler);
            this.parent.off(keyDown, this.keyDownHandler);
            this.parent.off(keyUp, this.keyUpHandler);
            this.parent.off(selectionComplete, this.formulaBarUpdateHandler);
            this.parent.off(mouseUpAfterSelection, this.UpdateValueAfterMouseUp);
            this.parent.off(formulaBarOperation, this.editOperationHandler);
            this.parent.off(enableFormulaInput, this.disabletextarea);
            this.parent.off(isFormulaBarEdit, this.isFormulaBarEdit);
        }
    };
    FormulaBar.prototype.editOperationHandler = function (args) {
        var action = args.action;
        switch (action) {
            case 'refreshFormulabar':
                this.getFormulaBar().value = isUndefined(args.value) ? '' : args.value;
                break;
            case 'getElement':
                args.element = this.getFormulaBar();
                break;
        }
    };
    FormulaBar.prototype.isFormulaBarEdit = function (args) {
        var edit = this.parent.isEdit;
        if (edit && this.isGoto) {
            args.isEdit = true;
        }
        else {
            args.isEdit = false;
        }
    };
    FormulaBar.prototype.getFormulaBar = function () {
        return select('#' + this.parent.element.id + '_formula_input', this.parent.element);
    };
    return FormulaBar;
}());

/**
 * @hidden
 * The `Formula` module is used to handle the formulas and its functionalities in Spreadsheet.
 */
var Formula = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for formula module in Spreadsheet.
     *
     * @private
     * @param {Spreadsheet} parent - Constructor for formula module in Spreadsheet.
     */
    function Formula(parent) {
        this.isFormulaBar = false;
        this.isFormula = false;
        this.isPopupOpened = false;
        this.isPreventClose = false;
        this.isSubFormula = false;
        this.parent = parent;
        this.addEventListener();
        //Spreadsheet.Inject(WorkbookFormula);
    }
    /**
     * Get the module name.
     *
     * @returns {string} - Get the module name.
     * @private
     */
    Formula.prototype.getModuleName = function () {
        return 'formula';
    };
    /**
     * To destroy the formula module.
     *
     * @returns {void} - To destroy the formula module.
     * @hidden
     */
    Formula.prototype.destroy = function () {
        this.removeEventListener();
        if (this.autocompleteInstance) {
            this.autocompleteInstance.destroy();
            if (this.autocompleteInstance.element) {
                this.autocompleteInstance.element.remove();
            }
        }
        this.autocompleteInstance = null;
        this.parent = null;
    };
    Formula.prototype.addEventListener = function () {
        this.parent.on(formulaOperation, this.performFormulaOperation, this);
        this.parent.on(keyUp, this.keyUpHandler, this);
        this.parent.on(keyDown, this.keyDownHandler, this);
        this.parent.on(click, this.formulaClick, this);
        this.parent.on(refreshFormulaDatasource, this.refreshFormulaDatasource, this);
    };
    Formula.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(formulaOperation, this.performFormulaOperation);
            this.parent.off(keyUp, this.keyUpHandler);
            this.parent.off(keyDown, this.keyDownHandler);
            this.parent.off(click, this.formulaClick);
            this.parent.off(refreshFormulaDatasource, this.refreshFormulaDatasource);
        }
    };
    Formula.prototype.performFormulaOperation = function (args) {
        var _this = this;
        var action = args.action;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst;
        switch (action) {
            case 'renderAutoComplete':
                this.renderAutoComplete();
                break;
            case 'endEdit':
                this.endEdit();
                break;
            case 'addDefinedName':
                args.isAdded = this.addDefinedName(args.definedName);
                break;
            case 'getNames':
                if (!args.sheetName) {
                    args.sheetName = getSheetName(this.parent);
                }
                args.names = this.getNames(args.sheetName);
                break;
            case 'getNameFromRange':
                args.definedName = this.getNameFromRange(args.range);
                break;
            case 'isFormulaEditing':
                args.isFormulaEdit = this.isFormula;
                break;
            case 'isCircularReference':
                dialogInst = this.parent.serviceLocator.getService(dialog);
                dialogInst.show({
                    height: 180, width: 400, isModal: true, showCloseIcon: true,
                    content: l10n.getConstant('CircularReference'),
                    beforeOpen: function (args) {
                        var dlgArgs = {
                            dialogName: 'CircularReferenceDialog',
                            element: args.element, target: args.target, cancel: args.cancel
                        };
                        _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                        if (dlgArgs.cancel) {
                            args.cancel = true;
                        }
                    }
                });
                args.argValue = '0';
                break;
        }
    };
    Formula.prototype.renderAutoComplete = function () {
        if (!select('#' + this.parent.element.id + '_ac', this.parent.element)) {
            var acElem = this.parent.createElement('input', { id: this.parent.element.id + '_ac', className: 'e-ss-ac' });
            this.parent.element.appendChild(acElem);
            var eventArgs = {
                action: 'getLibraryFormulas',
                formulaCollection: []
            };
            this.parent.notify(workbookFormulaOperation, eventArgs);
            var autoCompleteOptions = {
                dataSource: eventArgs.formulaCollection,
                cssClass: 'e-ss-atc',
                popupWidth: '130px',
                allowFiltering: true,
                filterType: 'StartsWith',
                sortOrder: 'Ascending',
                open: this.onSuggestionOpen.bind(this),
                close: this.onSuggestionClose.bind(this),
                select: this.onSelect.bind(this),
                actionComplete: this.onSuggestionComplete.bind(this)
            };
            this.autocompleteInstance = new AutoComplete(autoCompleteOptions, acElem);
            this.autocompleteInstance.createElement = this.parent.createElement;
        }
    };
    Formula.prototype.onSuggestionOpen = function (e) {
        var _this = this;
        this.isPopupOpened = true;
        e.popup.relateTo = this.getRelateToElem();
        e.popup.element.firstChild.style.maxHeight = '180px';
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        new Promise(function (resolve, reject) {
            setTimeout(function () { resolve(); }, 100);
        }).then(function () {
            _this.triggerKeyDownEvent(keyCodes.DOWN);
        });
    };
    Formula.prototype.onSuggestionClose = function (e) {
        if (this.isPreventClose) {
            e.cancel = true;
        }
        else {
            this.isPopupOpened = false;
        }
    };
    Formula.prototype.onSelect = function (e) {
        var updatedFormulaValue = '=' + e.itemData.value + '(';
        if (this.isSubFormula) {
            var editValue = this.getEditingValue();
            var parseIndex = editValue.lastIndexOf(this.getArgumentSeparator());
            if (parseIndex > -1) {
                updatedFormulaValue = editValue.slice(0, parseIndex + 1);
            }
            else {
                parseIndex = editValue.lastIndexOf('(');
                if (parseIndex > -1) {
                    updatedFormulaValue = editValue.slice(0, parseIndex + 1);
                }
            }
            updatedFormulaValue += e.itemData.value + '(';
        }
        this.parent.notify(editOperation, {
            action: 'refreshEditor', value: updatedFormulaValue,
            refreshFormulaBar: true, refreshEditorElem: true, refreshCurPos: !this.isFormulaBar
        });
        if (this.isPopupOpened) {
            this.hidePopUp();
            var suggPopupElem = select('#' + this.parent.element.id + '_ac_popup');
            if (suggPopupElem) {
                detach(suggPopupElem);
            }
            this.isPopupOpened = false;
        }
    };
    Formula.prototype.onSuggestionComplete = function (args) {
        this.isPreventClose = args.result.length > 0;
        if (!this.isPreventClose) {
            args.cancel = true;
            this.hidePopUp();
        }
    };
    Formula.prototype.refreshFormulaDatasource = function () {
        var eventArgs = {
            action: 'getLibraryFormulas',
            formulaCollection: []
        };
        this.parent.notify(workbookFormulaOperation, eventArgs);
        this.autocompleteInstance.dataSource = eventArgs.formulaCollection;
    };
    Formula.prototype.keyUpHandler = function (e) {
        if (this.parent.isEdit) {
            var editValue = this.getEditingValue();
            this.isFormula = checkIsFormula(editValue);
            if (this.isFormula || this.isPopupOpened) {
                if (e.keyCode !== keyCodes.TAB && this.isFormula) {
                    editValue = this.getSuggestionKeyFromFormula(editValue);
                }
                this.refreshFormulaSuggestion(e, editValue);
            }
        }
        else if (this.isPopupOpened) {
            this.hidePopUp();
        }
    };
    Formula.prototype.keyDownHandler = function (e) {
        var keyCode = e.keyCode;
        if (this.isFormula) {
            if (this.isPopupOpened) {
                switch (keyCode) {
                    case keyCodes.UP:
                    case keyCodes.DOWN:
                        e.preventDefault();
                        this.triggerKeyDownEvent(keyCode);
                        break;
                    case keyCodes.TAB:
                        e.preventDefault();
                        this.triggerKeyDownEvent(keyCodes.ENTER);
                        break;
                }
            }
        }
        else {
            var trgtElem = e.target;
            if (trgtElem.id === this.parent.element.id + '_name_box') {
                switch (keyCode) {
                    case keyCodes.ENTER:
                        this.addDefinedName({ name: trgtElem.value });
                        focus(this.parent.element);
                        break;
                    case keyCodes.ESC:
                        focus(this.parent.element);
                        break;
                }
            }
        }
    };
    Formula.prototype.formulaClick = function (e) {
        if (this.parent.isEdit) {
            var trgtElem = e.target;
            this.isFormulaBar = trgtElem.classList.contains('e-formula-bar');
        }
    };
    Formula.prototype.refreshFormulaSuggestion = function (e, formula) {
        if (formula.length > 0) {
            var autoCompleteElem = this.autocompleteInstance.element;
            var keyCode = e.keyCode;
            var isSuggestionAlreadyOpened = this.isPopupOpened;
            if (!this.isNavigationKey(keyCode)) {
                autoCompleteElem.value = formula;
                autoCompleteElem.dispatchEvent(new Event('input'));
                autoCompleteElem.dispatchEvent(new Event('keyup'));
                if (isSuggestionAlreadyOpened) {
                    this.triggerKeyDownEvent(keyCodes.DOWN);
                }
            }
        }
        else {
            if (this.isPopupOpened) {
                this.isPreventClose = false;
                this.hidePopUp();
            }
        }
    };
    Formula.prototype.endEdit = function () {
        this.isSubFormula = false;
        this.isPreventClose = false;
        this.isFormula = false;
        this.isFormulaBar = false;
        if (this.isPopupOpened) {
            this.hidePopUp();
            var suggPopupElem = select('#' + this.parent.element.id + '_ac_popup');
            if (suggPopupElem) {
                detach(suggPopupElem);
            }
            this.isPopupOpened = false;
        }
    };
    Formula.prototype.hidePopUp = function () {
        this.autocompleteInstance.hidePopup();
    };
    Formula.prototype.getSuggestionKeyFromFormula = function (formula) {
        var suggestValue = '';
        formula = formula.substr(1); //remove = char.
        if (formula) {
            var bracketIndex = formula.lastIndexOf('(');
            formula = formula.substr(bracketIndex + 1);
            var fSplit = formula.split(this.getArgumentSeparator());
            if (fSplit.length === 1) {
                suggestValue = fSplit[0];
                this.isSubFormula = bracketIndex > -1;
            }
            else {
                suggestValue = fSplit[fSplit.length - 1];
                this.isSubFormula = true;
            }
            var isAlphaNumeric = suggestValue.match(/\w/);
            if (!isAlphaNumeric || (isAlphaNumeric && isAlphaNumeric.index !== 0)) {
                suggestValue = '';
            }
        }
        return suggestValue;
    };
    Formula.prototype.getRelateToElem = function () {
        var eventArgs = { action: 'getElement' };
        if (this.isFormulaBar) {
            this.parent.notify(formulaBarOperation, eventArgs);
        }
        else {
            this.parent.notify(editOperation, eventArgs);
        }
        return eventArgs.element;
    };
    Formula.prototype.getEditingValue = function () {
        var eventArgs = { action: 'getCurrentEditValue', editedValue: '' };
        this.parent.notify(editOperation, eventArgs);
        return eventArgs.editedValue;
    };
    Formula.prototype.isNavigationKey = function (keyCode) {
        return (keyCode === keyCodes.UP) || (keyCode === keyCodes.DOWN) || (keyCode === keyCodes.LEFT)
            || (keyCode === keyCodes.RIGHT);
    };
    Formula.prototype.triggerKeyDownEvent = function (keyCode) {
        var autoCompleteElem = this.autocompleteInstance.element;
        autoCompleteElem.dispatchEvent(new Event('input'));
        var eventArg = new Event('keydown');
        eventArg['keyCode'] = keyCode;
        eventArg['which'] = keyCode;
        eventArg['altKey'] = false;
        eventArg['shiftKey'] = false;
        eventArg['ctrlKey'] = false;
        /* eslint-enable @typescript-eslint/dot-notation */
        autoCompleteElem.dispatchEvent(eventArg);
    };
    Formula.prototype.getArgumentSeparator = function () {
        var eventArgs = { action: 'getArgumentSeparator', argumentSeparator: '' };
        this.parent.notify(workbookFormulaOperation, eventArgs);
        return eventArgs.argumentSeparator;
    };
    Formula.prototype.getNames = function (sheetName) {
        var names = this.parent.definedNames.filter(function (name) { return name.scope === 'Workbook' || name.scope === '' || name.scope === sheetName; });
        return names;
    };
    Formula.prototype.getNameFromRange = function (range) {
        var singleRange = range.slice(0, range.indexOf(':'));
        var sRange = range.slice(range.indexOf('!') + 1).split(':');
        var isSingleCell = sRange.length > 1 && sRange[0] === sRange[1];
        var name = this.parent.definedNames.filter(function (name) {
            if (isSingleCell && name.refersTo === '=' + singleRange) {
                return true;
            }
            return name.refersTo === '=' + range;
        });
        return name && name[0];
    };
    Formula.prototype.addDefinedName = function (definedName) {
        var _this = this;
        var name = definedName.name;
        var isAdded = false;
        if (name && isCellReference(name.toUpperCase())) {
            this.parent.goTo(name);
            return isAdded;
        }
        if (!definedName.refersTo) {
            var sheet = getSheet(this.parent, this.parent.activeSheetIndex);
            var sheetName = getSheetName(this.parent);
            sheetName = sheetName.indexOf(' ') !== -1 ? '\'' + sheetName + '\'' : sheetName;
            var selectRange = sheet.selectedRange;
            if (!isNullOrUndefined(selectRange)) {
                var colIndex = selectRange.indexOf(':');
                var left = selectRange.substr(0, colIndex);
                var right = selectRange.substr(colIndex + 1, selectRange.length);
                if (parseInt(right.replace(/\D/g, ''), 10) === sheet.rowCount && parseInt(left.replace(/\D/g, ''), 10) === 1) {
                    right = right.replace(/[0-9]/g, '');
                    left = left.replace(/[0-9]/g, '');
                    selectRange = '$' + left + ':$' + right;
                }
                else if (getCellIndexes(right)[1] === sheet.colCount - 1 && getCellIndexes(left)[1] === 0) {
                    right = right.replace(/\D/g, '');
                    left = left.replace(/\D/g, '');
                    selectRange = '$' + left + ':$' + right;
                }
                else {
                    selectRange = left === right ? left : selectRange;
                }
            }
            definedName.refersTo = sheetName + '!' + selectRange;
            definedName.scope = 'Workbook';
        }
        if (name.length > 0 && (/^([a-zA-Z_0-9.]){0,255}$/.test(name))) {
            var eventArgs = {
                action: 'addDefinedName', definedName: definedName, isAdded: false
            };
            this.parent.notify(workbookFormulaOperation, eventArgs);
            isAdded = eventArgs.isAdded;
            if (!eventArgs.isAdded) {
                this.parent.serviceLocator.getService(dialog).show({
                    content: this.parent.serviceLocator.getService(locale).getConstant('DefineNameExists'),
                    width: '300',
                    beforeOpen: function (args) {
                        var dlgArgs = {
                            dialogName: 'DefineNameExistsDialog',
                            element: args.element, target: args.target, cancel: args.cancel
                        };
                        _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                        if (dlgArgs.cancel) {
                            args.cancel = true;
                        }
                    }
                });
            }
        }
        else {
            this.parent.serviceLocator.getService(dialog).show({
                content: this.parent.serviceLocator.getService(locale).getConstant('DefineNameInValid'),
                width: '300',
                beforeOpen: function (args) {
                    var dlgArgs = {
                        dialogName: 'DefineNameInValidDialog',
                        element: args.element, target: args.target, cancel: args.cancel
                    };
                    _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                    if (dlgArgs.cancel) {
                        args.cancel = true;
                    }
                }
            });
        }
        return isAdded;
    };
    return Formula;
}());

/**
 * Represents SheetTabs for Spreadsheet.
 */
var SheetTabs = /** @__PURE__ @class */ (function () {
    function SheetTabs(parent) {
        this.aggregateContent = '';
        this.selaggregateCnt = 'Sum';
        this.parent = parent;
        this.addEventListener();
    }
    SheetTabs.prototype.getModuleName = function () {
        return 'sheetTabs';
    };
    SheetTabs.prototype.createSheetTabs = function () {
        var _this = this;
        if (!this.parent.showSheetTabs && this.tabInstance) {
            this.destroy();
            return;
        }
        var l10n = this.parent.serviceLocator.getService(locale);
        var panel = this.parent.createElement('div', {
            className: 'e-sheet-tab-panel', id: this.parent.element.id + '_sheet_tab_panel'
        });
        var addBtn = this.parent.createElement('button', {
            className: 'e-add-sheet-tab e-btn e-css e-flat e-icon-btn' + (this.parent.allowInsert ? '' : ' e-disabled'),
            attrs: { 'title': l10n.getConstant('AddSheet') }
        });
        addBtn.appendChild(this.parent.createElement('span', { className: 'e-btn-icon e-icons e-add-icon' }));
        addBtn.addEventListener('click', this.addSheetTab.bind(this));
        addBtn.disabled = !this.parent.allowInsert;
        panel.appendChild(addBtn);
        this.addBtnRipple = rippleEffect(panel, { selector: '.e-add-sheet-tab' });
        var ddb = this.parent.createElement('button', { attrs: { 'title': l10n.getConstant('ListAllSheets') } });
        panel.appendChild(ddb);
        this.parent.element.appendChild(panel);
        var items = this.getSheetTabItems();
        this.dropDownInstance = new DropDownButton({
            iconCss: 'e-icons',
            items: items.ddbItems,
            createPopupOnClick: true,
            beforeItemRender: function (args) {
                var sheet = _this.parent.sheets[_this.dropDownInstance.items.indexOf(args.item)];
                if (sheet.state === 'Hidden') {
                    args.element.classList.add('e-hide');
                }
                else if (sheet.state === 'VeryHidden') {
                    args.element.style.display = 'none';
                }
            },
            select: function (args) { return _this.updateSheetTab({ idx: _this.dropDownInstance.items.indexOf(args.item) }); },
            beforeOpen: function (args) { return _this.beforeOpenHandler(_this.dropDownInstance, args.element); },
            open: function (args) { return _this.openHandler(_this.dropDownInstance, args.element, 'left'); },
            cssClass: 'e-sheets-list e-flat e-caret-hide',
            close: function () { return focus(_this.parent.element); }
        });
        this.dropDownInstance.createElement = this.parent.createElement;
        this.dropDownInstance.appendTo(ddb);
        var sheetTab = this.parent.createElement('div', { className: 'e-sheet-tab' });
        var cancelSelect;
        this.tabInstance = new Tab({
            selectedItem: this.parent.activeSheetIndex,
            overflowMode: 'Scrollable',
            items: items.tabItems,
            scrollStep: 250,
            selecting: function (args) {
                if (args.selectingIndex === args.selectedIndex) {
                    return;
                }
                if (cancelSelect) {
                    cancelSelect = false;
                }
                else {
                    var beginEventArgs = { currentSheetIndex: args.selectingIndex, previousSheetIndex: args.selectedIndex, cancel: false };
                    _this.parent.notify(beginAction, { eventArgs: beginEventArgs, action: 'gotoSheet' });
                    cancelSelect = beginEventArgs.cancel;
                }
            },
            selected: function (args) {
                if (args.selectedIndex === args.previousIndex) {
                    return;
                }
                if (cancelSelect) {
                    _this.tabInstance.selectedItem = args.previousIndex;
                    _this.tabInstance.dataBind();
                    focus(_this.parent.element);
                    return;
                }
                _this.parent.notify(removeDesignChart, {});
                if (_this.parent.isEdit) {
                    var selection = window.getSelection();
                    var editArgs = { action: 'getCurrentEditValue', editedValue: '' };
                    _this.parent.notify(editOperation, editArgs);
                    var formula = editArgs.editedValue ? checkIsFormula(editArgs.editedValue, true) : false;
                    if (!formula && selection && selection.focusNode && selection.focusNode.classList &&
                        selection.focusNode.classList.contains('e-formula-bar-panel')) {
                        formula = checkIsFormula(_this.parent.element.querySelector('.e-formula-bar').value, true);
                    }
                    if (!formula) {
                        _this.parent.endEdit();
                    }
                }
                _this.parent.activeSheetIndex = args.selectedIndex;
                _this.parent.dataBind();
                _this.updateDropDownItems(args.selectedIndex, args.previousIndex);
                focus(_this.parent.element);
                var eventArgs = {
                    action: 'registerGridInCalc',
                    sheetID: (args.selectedIndex + 1).toString()
                };
                _this.parent.notify(workbookFormulaOperation, eventArgs);
                _this.parent.notify(completeAction, { eventArgs: { previousSheetIndex: args.previousIndex, currentSheetIndex: args.selectedIndex },
                    action: 'gotoSheet' });
            },
            created: function () {
                var tBarItems = _this.tabInstance.element.querySelector('.e-toolbar-items');
                tBarItems.classList.add('e-sheet-tabs-items');
                EventHandler.add(tBarItems, 'dblclick', _this.renameSheetTab, _this);
            }
        });
        panel.appendChild(sheetTab);
        this.tabInstance.createElement = this.parent.createElement;
        this.tabInstance.appendTo(sheetTab);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        EventHandler.remove(this.tabInstance.element, 'keydown', this.tabInstance.spaceKeyDown);
        var sheetCount = items.tabItems.length;
        var sheet;
        for (var i = 0; i < sheetCount; i++) {
            sheet = getSheet(this.parent, i);
            var arg = { action: 'addSheet', sheetName: 'Sheet' + sheet.id, sheetId: sheet.id, visibleName: sheet.name };
            this.parent.notify(workbookFormulaOperation, arg);
        }
        this.parent.notify(workbookFormulaOperation, { action: 'initiateDefinedNames' });
        this.parent.notify(protectSheet, null);
    };
    SheetTabs.prototype.updateDropDownItems = function (curIdx, prevIdx) {
        if (prevIdx > -1) {
            this.dropDownInstance.items[prevIdx].iconCss = '';
        }
        this.dropDownInstance.items[curIdx].iconCss = 'e-selected-icon e-icons';
        this.dropDownInstance.setProperties({ 'items': this.dropDownInstance.items }, true);
    };
    SheetTabs.prototype.beforeOpenHandler = function (instance, element) {
        var viewportHeight = this.parent.viewport.height;
        var actualHeight = (parseInt(getComputedStyle(element.firstElementChild).height, 10) *
            instance.items.length) + (parseInt(getComputedStyle(element).paddingTop, 10) * 2);
        if (actualHeight > viewportHeight) {
            element.style.height = viewportHeight + "px";
            element.style.overflowY = 'auto';
        }
        element.parentElement.style.visibility = 'hidden';
    };
    SheetTabs.prototype.openHandler = function (instance, element, positionX) {
        var wrapper = element.parentElement;
        var height;
        var collide = isCollide(wrapper);
        if (collide.indexOf('bottom') === -1) {
            height = element.style.overflowY === 'auto' ? this.parent.viewport.height : wrapper.getBoundingClientRect().height;
            var offset = calculatePosition(instance.element, positionX, 'top');
            if (positionX === 'right') {
                offset.left -= wrapper.getBoundingClientRect().width;
            }
            wrapper.style.left = offset.left + "px";
            wrapper.style.top = offset.top - height + "px";
        }
        wrapper.style.visibility = '';
    };
    SheetTabs.prototype.getSheetTabItems = function () {
        var _this = this;
        var tabItems = [];
        var ddbItems = [];
        var sheetName;
        this.parent.sheets.forEach(function (sheet, index) {
            sheetName = getSheetName(_this.parent, index).replace(/</g, '&lt;').replace(/>/g, '&gt;');
            tabItems.push({ header: { 'text': sheetName }, visible: sheet.state === 'Visible' });
            ddbItems.push({ text: sheetName, iconCss: index === _this.parent.activeSheetIndex ? 'e-selected-icon e-icons' : '' });
        });
        return { tabItems: tabItems, ddbItems: ddbItems };
    };
    SheetTabs.prototype.refreshSheetTab = function () {
        var items = this.getSheetTabItems();
        this.dropDownInstance.items = items.ddbItems;
        this.dropDownInstance.setProperties({ 'items': this.dropDownInstance.items }, true);
        this.tabInstance.items = items.tabItems;
        this.tabInstance.selectedItem = this.parent.activeSheetIndex;
        this.tabInstance.dataBind();
    };
    SheetTabs.prototype.addSheetTab = function () {
        var eventArgs = { action: 'getCurrentEditValue', editedValue: '' };
        this.parent.notify(editOperation, eventArgs);
        this.parent.notify(insertModel, { model: this.parent, start: this.parent.activeSheetIndex + 1, end: this.parent.activeSheetIndex + 1, modelType: 'Sheet', isAction: true, activeSheetIndex: this.parent.activeSheetIndex + 1 });
        focus(this.parent.element);
    };
    SheetTabs.prototype.insertSheetTab = function (args) {
        this.parent.notify(removeDesignChart, {});
        if (!args.preventUpdate || args.startIdx === this.tabInstance.selectedItem) {
            this.dropDownInstance.items[this.tabInstance.selectedItem].iconCss = '';
        }
        for (var i = args.startIdx; i <= args.endIdx; i++) {
            var sheetName = this.parent.sheets[i].name.replace(/</g, '&lt;').replace(/>/g, '&gt;');
            this.dropDownInstance.items.splice(i, 0, { text: sheetName });
            this.tabInstance.addTab([{ header: { text: sheetName }, content: '' }], i);
        }
        if (!args.preventUpdate || args.startIdx === this.tabInstance.selectedItem) {
            this.dropDownInstance.items[args.startIdx].iconCss = 'e-selected-icon e-icons';
        }
        this.dropDownInstance.setProperties({ 'items': this.dropDownInstance.items }, true);
        if (args.preventUpdate) {
            if (args.startIdx !== this.tabInstance.selectedItem) {
                this.refreshSheetTab();
            }
        }
        else {
            this.updateSheetTab({ idx: args.startIdx });
        }
    };
    SheetTabs.prototype.updateSheetTab = function (args) {
        if (args.name === 'activeSheetChanged') {
            args.idx = this.parent.skipHiddenSheets(args.idx);
        }
        else {
            if (this.parent.sheets[args.idx].state === 'Hidden') {
                if (this.parent.isProtected) {
                    return;
                }
                this.parent.setSheetPropertyOnMute(this.parent.sheets[args.idx], 'state', 'Visible');
                this.tabInstance.hideTab(args.idx, false);
            }
        }
        this.tabInstance.selectedItem = args.idx;
        this.tabInstance.dataBind();
        this.parent.notify(protectSheet, null);
    };
    SheetTabs.prototype.switchSheetTab = function (args) {
        var target = closest(args.event.target, '.e-toolbar-item');
        if (!target) {
            return;
        }
        var name = target.querySelector('.e-tab-text').textContent;
        var disableItems = [];
        var id = this.parent.element.id + "_cmenu";
        for (var i = 0, len = this.parent.sheets.length; i < len; i++) {
            if (this.parent.sheets[i].name === name) {
                if (this.parent.activeSheetIndex !== i) {
                    this.updateSheetTab({ idx: i });
                }
                break;
            }
        }
        if (args.element.classList.contains('e-contextmenu') && args.items[0] &&
            args.items[0].id === this.parent.element.id + "_cmenu_insert_sheet") {
            if (this.skipHiddenSheets() === 1) {
                //let id: string = `${this.parent.element.id}_cmenu`;
                //this.parent.enableFileMenuItems([`${id}_hide_sheet`, `${id}_delete_sheet`], false, true);
                disableItems.push(id + "_hide_sheet", id + "_delete_sheet");
            }
            if (!this.parent.allowInsert) {
                disableItems.push(id + "_insert_sheet");
            }
            if (!this.parent.allowDelete && disableItems.indexOf(id + "_delete_sheet") > -1) {
                disableItems.push(id + "_delete_sheet");
            }
        }
        if (this.parent.password.length > 0 || this.parent.isProtected) {
            if (disableItems.indexOf(id + "_insert_sheet") > -1) {
                disableItems.push(id + "_insert_sheet");
            }
            if (disableItems.indexOf(id + "_delete_sheet") > -1) {
                disableItems.push(id + "_delete_sheet");
            }
            disableItems.push(id + "_duplicate", id + "_rename");
        }
        this.parent.enableContextMenuItems(disableItems, false, true);
    };
    SheetTabs.prototype.skipHiddenSheets = function () {
        var count = this.parent.sheets.length;
        this.parent.sheets.forEach(function (sheet) {
            if (sheet.state !== 'Visible') {
                --count;
            }
        });
        return count;
    };
    SheetTabs.prototype.renameSheetTab = function () {
        var target = this.tabInstance.element.querySelector('.e-toolbar-item.e-active');
        if (target) {
            target = target.querySelector('.e-text-wrap');
            var value = target.querySelector('.e-tab-text').textContent;
            var args = {
                eventArgs: {
                    name: value, index: this.parent.getActiveSheet().id
                },
                action: 'renameSheet', cancel: false
            };
            this.parent.trigger('actionBegin', args);
            if (args.cancel) {
                return;
            }
            var input = this.parent.createElement('input', {
                id: this.parent.element.id + '_rename_input',
                className: 'e-input e-sheet-rename', styles: "width: " + target.getBoundingClientRect().width + "px", attrs: {
                    'type': 'text', 'name': 'Rename', 'required': '', 'value': value, 'spellcheck': 'false', 'maxlength': '31'
                }
            });
            target.firstElementChild.style.display = 'none';
            target.appendChild(input);
            EventHandler.add(document, 'mousedown touchstart', this.renameInputFocusOut, this);
            EventHandler.add(input, 'input', this.updateWidth, this);
            input.focus();
            input.setSelectionRange(0, value.length);
            EventHandler.remove(closest(target, '.e-toolbar-items'), 'dblclick', this.renameSheetTab);
        }
    };
    SheetTabs.prototype.updateWidth = function (e) {
        var target = e.target;
        var len = target.value.length;
        var value = target.value.split(' ');
        if (value.length) {
            var spaceLen = value.length - 1;
            len -= spaceLen;
            len += (spaceLen * 0.5);
        }
        target.style.width = len + "ch";
    };
    SheetTabs.prototype.renameInputFocusOut = function (e) {
        var target = e.target;
        if ((e.type === 'mousedown' || e.type === 'touchstart') && (target.classList.contains('e-sheet-rename') ||
            closest(target, '.e-dlg-container'))) {
            return;
        }
        target = document.getElementById(this.parent.element.id + '_rename_input');
        if (e.type === 'keydown' && e.keyCode === 27) {
            this.removeRenameInput(target);
            focus(this.parent.element);
            return;
        }
        var value = target.value;
        var l10n = this.parent.serviceLocator.getService(locale);
        if (value) {
            var idx = this.tabInstance.selectedItem;
            // eslint-disable-next-line no-useless-escape
            if (!value.match(new RegExp('.*[\\[\\]\\*\\\\\/\\?].*'))) {
                if (this.parent.sheets[idx].name !== value) {
                    for (var i = 0, len = this.parent.sheets.length; i < len; i++) {
                        if (i !== this.parent.activeSheetIndex && this.parent.sheets[i].name.toLowerCase() === value.toLowerCase()) {
                            this.showRenameDialog(target, l10n.getConstant('SheetRenameAlreadyExistsAlert'));
                            return;
                        }
                    }
                }
                var items = this.removeRenameInput(target);
                if (this.parent.sheets[idx].name !== value) {
                    this.parent.setSheetPropertyOnMute(this.parent.sheets[idx], 'name', value);
                    this.updateSheetName({ value: value, idx: idx, items: items });
                }
                if (e.type === 'keydown' || (closest(e.target, '.e-spreadsheet'))) {
                    focus(this.parent.element);
                }
            }
            else {
                this.showRenameDialog(target, l10n.getConstant('SheetRenameInvalidAlert'));
            }
        }
        else {
            this.showRenameDialog(target, l10n.getConstant('SheetRenameEmptyAlert'));
        }
        this.parent.notify(completeAction, { eventArgs: { index: this.parent.getActiveSheet().id, value: value }, action: 'renameSheet' });
    };
    SheetTabs.prototype.updateSheetName = function (args) {
        var pName = this.tabInstance.items[args.idx].header.text.replace(/&lt;/g, '<').replace(/&gt;/g, '>');
        var name = args.value.replace(/</g, '&lt;').replace(/>/g, '&gt;');
        this.tabInstance.items[args.idx].header.text = name;
        this.dropDownInstance.items[args.idx].text = name;
        this.dropDownInstance.setProperties({ 'items': this.dropDownInstance.items }, true);
        args.items.querySelector('.e-toolbar-item.e-active .e-tab-text').textContent = '';
        args.items.querySelector('.e-toolbar-item.e-active .e-tab-text').appendChild(document.createTextNode(args.value));
        if (args.value.indexOf('  ') > -1) {
            this.tabInstance.setProperties({ 'items': this.tabInstance.items }, true);
        }
        else {
            this.tabInstance.dataBind();
        }
        this.parent.notify(workbookFormulaOperation, { action: 'renameUpdation', value: args.value, pName: pName });
    };
    SheetTabs.prototype.hideSheet = function () {
        this.parent.setSheetPropertyOnMute(this.parent.getActiveSheet(), 'state', 'Hidden');
        this.tabInstance.hideTab(this.parent.activeSheetIndex);
    };
    SheetTabs.prototype.removeRenameInput = function (target) {
        var textEle = target.parentElement.querySelector('.e-tab-text');
        var sheetItems = closest(target, '.e-toolbar-items');
        EventHandler.add(sheetItems, 'dblclick', this.renameSheetTab, this);
        EventHandler.remove(document, 'mousedown touchstart', this.renameInputFocusOut);
        EventHandler.remove(target, 'input', this.updateWidth);
        remove(target);
        textEle.style.display = '';
        return sheetItems;
    };
    SheetTabs.prototype.showRenameDialog = function (target, content) {
        var _this = this;
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            target: document.getElementById(this.parent.element.id + '_sheet_panel'),
            height: 180, width: 400, isModal: true, showCloseIcon: true,
            content: content,
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'SheetRenameDialog',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                target.focus();
            },
            close: function () { return target.setSelectionRange(0, target.value.length); }
        });
    };
    SheetTabs.prototype.focusRenameInput = function () {
        var input = document.getElementById(this.parent.element.id + '_rename_input');
        if (input) {
            input.focus();
        }
    };
    SheetTabs.prototype.removeSheetTab = function (args) {
        var _this = this;
        if (args.count && (args.count === this.parent.sheets.length)) {
            return;
        }
        var l10n = this.parent.serviceLocator.getService(locale);
        if (this.skipHiddenSheets() > 1) {
            var sheet = args.sheetName ?
                getSheet(this.parent, getSheetIndex(this.parent, args.sheetName)) :
                this.parent.getActiveSheet();
            var sheetIndex_1 = args.index || getSheetIndex(this.parent, sheet.name);
            var eventArgs_1 = {
                index: sheetIndex_1,
                sheetCount: this.parent.sheets.length,
                sheetName: sheet.name
            };
            var isDataAvail = sheet.rows && sheet.rows.length ?
                (sheet.rows.length === 1 ? (sheet.rows[0].cells && sheet.rows[0].cells.length ? true : false) : true) : false;
            if (isDataAvail) {
                var dialogInst_1 = this.parent.serviceLocator.getService(dialog);
                if (args.clicked) {
                    this.forceDelete(sheetIndex_1);
                }
                else {
                    dialogInst_1.show({
                        height: 200, width: 400, isModal: true, showCloseIcon: true,
                        content: l10n.getConstant('DeleteSheetAlert'),
                        beforeOpen: function (args) {
                            var dlgArgs = {
                                dialogName: 'DeleteSheetDialog',
                                element: args.element, target: args.target, cancel: args.cancel
                            };
                            _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                            if (dlgArgs.cancel) {
                                args.cancel = true;
                            }
                            focus(_this.parent.element);
                        },
                        buttons: [{
                                buttonModel: {
                                    content: l10n.getConstant('Ok'), isPrimary: true
                                },
                                click: function () {
                                    dialogInst_1.hide();
                                    _this.forceDelete(sheetIndex_1);
                                    _this.parent.notify(clearUndoRedoCollection, null);
                                    if (args && !args.isAction) {
                                        eventArgs_1.sheetCount = _this.parent.sheets.length;
                                        _this.parent.notify(completeAction, { eventArgs: eventArgs_1, action: 'removeSheet' });
                                    }
                                }
                            }]
                    });
                }
            }
            else {
                this.parent.notify(workbookFormulaOperation, { action: 'deleteSheetTab', sheetId: getSheet(this.parent, sheetIndex_1).id });
                this.destroySheet(sheetIndex_1);
                this.parent.notify(clearUndoRedoCollection, null);
                if (args && !args.isAction) {
                    eventArgs_1.sheetCount = this.parent.sheets.length;
                    this.parent.notify(completeAction, { eventArgs: eventArgs_1, action: 'removeSheet' });
                }
            }
        }
        else {
            this.parent.serviceLocator.getService(dialog).show({
                target: document.getElementById(this.parent.element.id + '_sheet_panel'),
                height: 180, width: 400, isModal: true, showCloseIcon: true,
                content: l10n.getConstant('DeleteSingleLastSheetAlert'),
                beforeOpen: function (args) {
                    var dlgArgs = {
                        dialogName: 'DeleteSingleSheetDialog',
                        element: args.element, target: args.target, cancel: args.cancel
                    };
                    _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                    if (dlgArgs.cancel) {
                        args.cancel = true;
                    }
                    focus(_this.parent.element);
                }
            });
        }
    };
    SheetTabs.prototype.forceDelete = function (sheetIndex) {
        this.parent.notify(removeDesignChart, {});
        this.parent.notify(workbookFormulaOperation, { action: 'deleteSheetTab', sheetId: getSheet(this.parent, sheetIndex).id });
        this.destroySheet(sheetIndex);
    };
    SheetTabs.prototype.destroySheet = function (sheetIndex) {
        var activeSheetIdx = sheetIndex || this.parent.activeSheetIndex;
        this.parent.removeSheet(activeSheetIdx);
        this.parent.notify(sheetsDestroyed, { sheetIndex: activeSheetIdx });
        this.dropDownInstance.items.splice(activeSheetIdx, 1);
        this.dropDownInstance.setProperties({ 'items': this.dropDownInstance.items }, true);
        this.tabInstance.removeTab(activeSheetIdx);
        var activeIndex = this.parent.skipHiddenSheets(this.tabInstance.selectedItem);
        this.parent.activeSheetIndex = activeIndex;
        this.parent.setProperties({ activeSheetIndex: activeIndex }, true);
        this.parent.renderModule.refreshSheet();
        this.tabInstance.selectedItem = activeIndex;
        this.tabInstance.dataBind();
        this.updateDropDownItems(activeIndex);
        this.parent.notify(protectSheet, null);
        focus(this.parent.element);
    };
    SheetTabs.prototype.showAggregate = function () {
        var _this = this;
        if (isSingleCell(getRangeIndexes(this.parent.getActiveSheet().selectedRange))) {
            return;
        }
        var eventArgs = { Count: 0, Sum: '0', Avg: '0', Min: '0', Max: '0', countOnly: true };
        this.parent.notify(aggregateComputation, eventArgs);
        if (eventArgs.Count > 1) {
            this.aggregateContent = eventArgs.countOnly ? 'Count' : this.selaggregateCnt;
            if (eventArgs.countOnly) {
                this.aggregateContent = 'Count';
                delete eventArgs.Sum;
                delete eventArgs.Avg;
                delete eventArgs.Min;
                delete eventArgs.Max;
            }
            var btnClass = eventArgs.countOnly ? 'e-aggregate-list e-flat e-aggregate-list-countonly e-caret-hide'
                : 'e-aggregate-list e-flat';
            delete eventArgs.countOnly;
            var key = this.aggregateContent;
            var content = key + ": " + eventArgs[key];
            if (!this.aggregateDropDown) {
                var aggregateEle = this.parent.createElement('button', { id: this.parent.element.id + '_aggregate' });
                document.getElementById(this.parent.element.id + "_sheet_tab_panel").appendChild(aggregateEle);
                this.aggregateDropDown = new DropDownButton({
                    content: content,
                    items: this.getAggregateItems(eventArgs),
                    createPopupOnClick: true,
                    select: function (args) {
                        _this.parent.notify(aggregateComputation, eventArgs);
                        _this.updateAggregateContent(args.item.text, { Count: eventArgs.Count, Sum: eventArgs.Sum, Avg: eventArgs.Avg, Min: eventArgs.Min,
                            Max: eventArgs.Max }, true);
                    },
                    beforeOpen: function (args) {
                        return _this.beforeOpenHandler(_this.aggregateDropDown, args.element);
                    },
                    open: function (args) { return _this.openHandler(_this.aggregateDropDown, args.element, 'right'); },
                    close: function () { return focus(_this.parent.element); },
                    cssClass: btnClass
                });
                this.aggregateDropDown.createElement = this.parent.createElement;
                this.aggregateDropDown.appendTo(aggregateEle);
            }
            else {
                this.updateAggregateContent(content, eventArgs);
            }
        }
        else {
            this.removeAggregate();
        }
    };
    SheetTabs.prototype.getAggregateItems = function (args) {
        var _this = this;
        var items = [];
        var text;
        var iconCss;
        Object.keys(args).forEach(function (key) {
            if (args[key] !== aggregateComputation) {
                text = key + ": " + args[key];
                iconCss = key === _this.aggregateContent ? 'e-selected-icon e-icons' : '';
                items.push({ text: text, iconCss: iconCss });
            }
        });
        return items;
    };
    SheetTabs.prototype.updateAggregateContent = function (text, eventArgs, isSelect) {
        this.aggregateContent = text.split(': ')[0];
        if (isSelect) {
            this.selaggregateCnt = text.split(': ')[0];
        }
        this.aggregateDropDown.content = text;
        this.aggregateDropDown.dataBind();
        this.aggregateDropDown.setProperties({ 'items': this.getAggregateItems(eventArgs) }, true);
    };
    SheetTabs.prototype.removeAggregate = function () {
        if (!isNullOrUndefined(this.aggregateDropDown)) {
            this.aggregateDropDown.destroy();
            remove(this.aggregateDropDown.element);
            this.aggregateDropDown = null;
        }
    };
    SheetTabs.prototype.addEventListener = function () {
        this.parent.on(sheetTabs, this.createSheetTabs, this);
        this.parent.on(refreshSheetTabs, this.refreshSheetTab, this);
        this.parent.on(insertSheetTab, this.insertSheetTab, this);
        this.parent.on(removeSheetTab, this.removeSheetTab, this);
        this.parent.on(renameSheetTab, this.renameSheetTab, this);
        this.parent.on(cMenuBeforeOpen, this.switchSheetTab, this);
        this.parent.on(activeSheetChanged, this.updateSheetTab, this);
        this.parent.on(renameSheet, this.renameInputFocusOut, this);
        this.parent.on(activeCellChanged, this.removeAggregate, this);
        this.parent.on(onVerticalScroll, this.focusRenameInput, this);
        this.parent.on(onHorizontalScroll, this.focusRenameInput, this);
        this.parent.on(sheetNameUpdate, this.updateSheetName, this);
        this.parent.on(hideSheet, this.hideSheet, this);
        this.parent.on(showAggregate, this.showAggregate, this);
    };
    SheetTabs.prototype.destroy = function () {
        this.removeEventListener();
        this.dropDownInstance.destroy();
        this.dropDownInstance = null;
        this.tabInstance.destroy();
        this.tabInstance = null;
        this.removeAggregate();
        this.aggregateContent = null;
        this.addBtnRipple();
        this.addBtnRipple = null;
        EventHandler.remove(document, 'mousedown touchstart', this.renameInputFocusOut);
        var ele = document.getElementById(this.parent.element.id + '_sheet_tab_panel');
        if (ele) {
            remove(ele);
        }
        this.parent = null;
    };
    SheetTabs.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(sheetTabs, this.createSheetTabs);
            this.parent.off(refreshSheetTabs, this.refreshSheetTab);
            this.parent.off(insertSheetTab, this.insertSheetTab);
            this.parent.off(removeSheetTab, this.removeSheetTab);
            this.parent.off(renameSheetTab, this.renameSheetTab);
            this.parent.off(cMenuBeforeOpen, this.switchSheetTab);
            this.parent.off(activeSheetChanged, this.updateSheetTab);
            this.parent.off(renameSheet, this.renameInputFocusOut);
            this.parent.off(activeCellChanged, this.removeAggregate);
            this.parent.off(onVerticalScroll, this.focusRenameInput);
            this.parent.off(onHorizontalScroll, this.focusRenameInput);
            this.parent.off(sheetNameUpdate, this.updateSheetName);
            this.parent.off(hideSheet, this.hideSheet);
            this.parent.off(showAggregate, this.showAggregate);
        }
    };
    return SheetTabs;
}());

var Open = /** @__PURE__ @class */ (function () {
    function Open(parent) {
        this.isImportedFile = false;
        this.unProtectSheetIdx = [];
        this.parent = parent;
        this.addEventListener();
        this.renderFileUpload();
        //Spreadsheet.Inject(WorkbookOpen);
    }
    /**
     * Adding event listener for success and failure
     *
     * @returns {void} - Adding event listener for success and failure
     */
    Open.prototype.addEventListener = function () {
        this.parent.on(openSuccess, this.openSuccess, this);
        this.parent.on(openFailure, this.openFailed, this);
    };
    /**
     * Removing event listener for success and failure
     *
     * @returns {void} - Removing event listener for success and failure
     */
    Open.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(openSuccess, this.openSuccess);
            this.parent.off(openFailure, this.openFailed);
        }
    };
    /**
     * Rendering upload component for importing files.
     *
     * @returns {void} - Rendering upload component for importing files.
     */
    Open.prototype.renderFileUpload = function () {
        var uploadID = this.parent.element.id + '_fileUpload';
        this.parent.element.appendChild(this.parent.createElement('input', {
            id: uploadID,
            attrs: { type: 'file', accept: '.xls, .xlsx, .csv, .xlsm', name: 'fileUpload' }
        }));
        var uploadBox = document.getElementById(uploadID);
        uploadBox.onchange = this.fileSelect.bind(this);
        uploadBox.onerror = this.openFailed.bind(this);
        uploadBox.style.display = 'none';
    };
    /**
     * Process after select the excel and image file.
     *
     * @param {Event} args - File select native event.
     * @returns {void} - Process after select the excel and image file.
     */
    Open.prototype.fileSelect = function (args) {
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        var filesData = args.target.files[0];
        if (filesData && filesData.length < 1) {
            return;
        }
        var impArgs = {
            file: filesData
        };
        this.parent.open(impArgs);
        document.getElementById(this.parent.element.id + '_fileUpload').value = '';
    };
    /**
     * File open success event declaration.
     *
     * @param {string} response - File open success response text.
     * @returns {void} - File open success event declaration.
     */
    Open.prototype.openSuccess = function (response) {
        var _this = this;
        var openError = ['UnsupportedFile', 'InvalidUrl', 'NeedPassword', 'InCorrectPassword', 'InCorrectSheetPassword', 'CorrectSheetPassword'];
        if (openError.indexOf(response.data) > -1) {
            if (openError[2] === response.data) {
                if (!this.parent.element.querySelector('.e-importprotectworkbook-dlg')) {
                    this.parent.notify(importProtectWorkbook, response.eventArgs);
                }
            }
            else if (openError[3] === response.data) {
                var l10n = this.parent.serviceLocator.getService(locale);
                var alertSpan = this.parent.createElement('span', {
                    className: 'e-importprotectpwd-alert-span',
                    innerHTML: l10n.getConstant('InCorrectPassword')
                });
                (this.parent.element.querySelector('.e-importprotectworkbook-dlg').querySelector('.e-dlg-content')).appendChild(alertSpan);
            }
            else if (openError[4] === response.data) {
                var l10n = this.parent.serviceLocator.getService(locale);
                var alertSpan = this.parent.createElement('span', {
                    className: 'e-unprotectsheetpwd-alert-span',
                    innerHTML: l10n.getConstant('InCorrectPassword')
                });
                (this.parent.element.querySelector('.e-unprotectworksheet-dlg').querySelector('.e-dlg-content')).appendChild(alertSpan);
            }
            else if (openError[5] === response.data) {
                this.parent.isOpen = false;
                this.parent.notify(unProtectSheetPassword, null);
                var dialogInst = this.parent.serviceLocator.getService(dialog);
                dialogInst.hide();
                this.parent.hideSpinner();
            }
            else {
                var dialogInst = this.parent.serviceLocator.getService(dialog);
                dialogInst.hide();
                this.parent.serviceLocator.getService(dialog).show({
                    content: this.parent.serviceLocator.getService('spreadsheetLocale')
                        .getConstant(response.data),
                    width: '300',
                    beforeOpen: function (args) {
                        var dlgArgs = {
                            dialogName: 'OpenDialog',
                            element: args.element, target: args.target, cancel: args.cancel
                        };
                        _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                        if (dlgArgs.cancel) {
                            args.cancel = true;
                        }
                    }
                });
                this.parent.hideSpinner();
                return;
            }
        }
        else {
            var dialogInst = this.parent.serviceLocator.getService(dialog);
            dialogInst.hide();
            this.parent.showSpinner();
        }
        if (!this.parent.element) {
            return;
        }
        if (openError[5] !== response.data) {
            if (!response.isOpenFromJson) {
                this.parent.trigger('openComplete', { response: response });
                this.parent.notify(completeAction, { response: response, action: 'import' });
            }
            this.parent.renderModule.refreshSheet(response.isOpenFromJson);
            this.parent.notify(refreshSheetTabs, this);
            this.isImportedFile = true;
            this.unProtectSheetIdx = [];
            this.parent.hideSpinner();
        }
    };
    /**
     * File open failure event declaration.
     *
     * @param {object} args - Open failure arguments.
     * @returns {void} - File open failure event declaration.
     */
    Open.prototype.openFailed = function (args) {
        this.parent.trigger('openFailure', args);
        this.parent.hideSpinner();
        /* Need to Implement */
    };
    /**
     * To Remove the event listeners.
     *
     * @returns {void} - To Remove the event listeners.
     */
    Open.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * Get the sheet open module name.
     *
     * @returns {string} - Get the sheet open module name.
     */
    Open.prototype.getModuleName = function () {
        return 'open';
    };
    return Open;
}());

/**
 * `Save` module is used to handle the save action in Spreadsheet.
 */
var Save = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for Save module in Spreadsheet.
     *
     * @private
     * @param {Spreadsheet} parent - Specifies the Spreadsheet instance.
     */
    function Save(parent) {
        this.parent = parent;
        this.addEventListener();
        //Spreadsheet.Inject(WorkbookSave);
    }
    /**
     * To destroy the Save module.
     *
     * @returns {void}
     * @hidden
     */
    Save.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    Save.prototype.addEventListener = function () {
        this.parent.on(beginSave, this.initiateSave, this);
        this.parent.on(saveCompleted, this.saveCompleted, this);
        this.parent.on(saveError, this.showErrorDialog, this);
        this.parent.on(exportDialog, this.exportDialog, this);
    };
    Save.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(beginSave, this.initiateSave);
            this.parent.off(saveCompleted, this.saveCompleted);
            this.parent.off(saveError, this.showErrorDialog);
            this.parent.off(exportDialog, this.exportDialog);
        }
    };
    /**
     * Get the module name.
     *
     * @returns {string} - Get the module name.
     * @private
     */
    Save.prototype.getModuleName = function () {
        return 'save';
    };
    /**
     * Initiate save process.
     *
     * @hidden
     * @returns {void} - Initiate save process.
     */
    Save.prototype.initiateSave = function () {
        this.parent.showSpinner();
    };
    /**
     * Save action completed.
     *
     * @hidden
     * @returns {void} - Save action completed.
     */
    Save.prototype.saveCompleted = function () {
        this.parent.hideSpinner();
    };
    Save.prototype.showErrorDialog = function (args) {
        var _this = this;
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            target: this.parent.element, isModal: true, showCloseIcon: true, height: 180, width: 400, content: args.content,
            beforeOpen: function () { return focus(_this.parent.element); }
        });
    };
    Save.prototype.exportDialog = function (args) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        var type = args ? args.item.id.split('_')[1] : 'xlsx';
        if (isNullOrUndefined(this.parent.element.querySelector('.e-find-dlg'))) {
            var dlg = {
                isModal: true, showCloseIcon: true, cssClass: 'e-open-dlg', allowDragging: false,
                header: l10n.getConstant('SaveAs'),
                beforeOpen: function (args) {
                    var dlgArgs = {
                        dialogName: l10n.getConstant('SaveAs'),
                        element: args.element, target: args.target, cancel: args.cancel
                    };
                    _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                    if (dlgArgs.cancel) {
                        args.cancel = true;
                    }
                    dialogInst.dialogInstance.content = _this.OpenContent(type);
                    dialogInst.dialogInstance.dataBind();
                    _this.parent.element.querySelector('.e-text-open').setSelectionRange(0, _this.parent.element.querySelector('.e-text-open').value.length);
                    focus(_this.parent.element);
                },
                buttons: [{
                        buttonModel: {
                            content: l10n.getConstant('Save'), isPrimary: true, cssClass: 'e-btn-open-ok'
                        },
                        click: function () {
                            var name = _this.parent.element.querySelector('.e-text-open').value;
                            if (_this.checkValidName(name)) {
                                dialogInst.hide();
                                var type_1 = args ? args.item.id.split(_this.parent.element.id + "_")[1] : 'Xlsx';
                                _this.parent.save({ saveType: type_1, fileName: name });
                            }
                            else {
                                var saveButton = _this.parent.element.querySelector('.e-btn-open-ok');
                                var saveButtonObj = getComponent(saveButton, 'btn');
                                saveButtonObj.disabled = true;
                                var l10n_1 = _this.parent.serviceLocator.getService(locale);
                                var error = name.length === 0 ? l10n_1.getConstant('EmptyFileName') :
                                    (name.length > 218 ? l10n_1.getConstant('LargeName') : l10n_1.getConstant('FileNameError'));
                                var fileSpan = _this.parent.createElement('span', {
                                    className: 'e-file-alert-span',
                                    innerHTML: error
                                });
                                if (_this.parent.element.querySelector('.e-file-alert-span')) {
                                    _this.parent.element.querySelector('.e-file-alert-span').remove();
                                }
                                (_this.parent.element.querySelector('.e-open-dlg').querySelector('.e-dlg-content')).appendChild(fileSpan);
                            }
                        }
                    }], close: function () {
                    dialogInst.hide();
                }
            };
            dialogInst.show(dlg);
        }
        else {
            dialogInst.hide();
        }
    };
    Save.prototype.checkValidName = function (name) {
        var isValidName = true;
        if (name.match(new RegExp('.*[\\[\\]\\*\\\\/\\?\\:\\<\\>\\|\\"].*')) || name.length < 1 || name.length > 218) {
            isValidName = false;
        }
        return isValidName;
    };
    Save.prototype.OpenContent = function (type) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogElem = this.parent.createElement('div', { className: 'e-open-dialog' });
        var openTextHeader = this.parent.createElement('div', { className: 'e-open-head' });
        var openTextE = this.parent.createElement('div', { className: 'e-input-group' });
        dialogElem.appendChild(openTextHeader);
        dialogElem.appendChild(openTextE);
        var openTextH = this.parent.createElement('p', { className: 'e-header', innerHTML: l10n.getConstant('FileName') });
        var openTextIp = this.parent.createElement('input', { className: 'e-input e-text-open', attrs: { 'type': 'Text' } });
        var openTextSpan = this.parent.createElement('span', { className: 'e-input-group-icon' });
        openTextIp.onkeyup = function (e) {
            if (_this.parent.element.querySelector('.e-file-alert-span') && e.keyCode !== 13) {
                var saveButton = _this.parent.element.querySelector('.e-btn-open-ok');
                var buttonObj = getComponent(saveButton, 'btn');
                buttonObj.disabled = false;
                _this.parent.element.querySelector('.e-file-alert-span').remove();
            }
        };
        openTextHeader.appendChild(openTextH);
        openTextSpan.textContent = '.' + type.toLowerCase();
        openTextE.appendChild(openTextIp);
        openTextIp.setAttribute('value', 'Sample');
        openTextE.appendChild(openTextSpan);
        return dialogElem;
    };
    return Save;
}());

/**
 * Represents context menu for Spreadsheet.
 */
var ContextMenu$1 = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for ContextMenu module.
     *
     * @param {Spreadsheet} parent - Constructor for ContextMenu module.
     */
    function ContextMenu$$1(parent) {
        this.parent = parent;
        this.init();
    }
    ContextMenu$$1.prototype.init = function () {
        this.initContextMenu();
        this.addEventListener();
    };
    ContextMenu$$1.prototype.initContextMenu = function () {
        var ul = document.createElement('ul');
        ul.id = this.parent.element.id + '_contextmenu';
        this.parent.element.appendChild(ul);
        this.contextMenuInstance = new ContextMenu({
            cssClass: 'e-spreadsheet-contextmenu',
            target: '#' + this.parent.element.id,
            filter: 'e-numericcontainer e-active-cell e-selection e-row e-header-row e-select-all-cell e-sheet-tabs-items',
            select: this.selectHandler.bind(this),
            beforeOpen: this.beforeOpenHandler.bind(this),
            beforeClose: this.beforeCloseHandler.bind(this)
        }, ul);
    };
    /**
     * Before close event handler.
     *
     * @param {BeforeOpenCloseMenuEventArgs} args - Specify the args
     * @returns {void} - Before close event handler.
     */
    ContextMenu$$1.prototype.beforeCloseHandler = function (args) {
        this.parent.trigger('contextMenuBeforeClose', args);
    };
    /**
     * Select event handler.
     *
     * @param {MenuEventArgs} args - Specify the args
     * @returns {void} - Select event handler.
     */
    ContextMenu$$1.prototype.selectHandler = function (args) {
        var selectArgs = extend({ cancel: false }, args);
        this.parent.trigger('contextMenuItemSelect', selectArgs);
        var id = this.parent.element.id + '_cmenu';
        var field;
        var sheet;
        var isActive;
        if (!selectArgs.cancel) {
            var indexes = void 0;
            switch (args.item.id) {
                case id + '_cut':
                    this.parent.notify(cut, { invokeCopy: true, promise: Promise });
                    break;
                case id + '_copy':
                    this.parent.notify(copy, { invokeCopy: true, promise: Promise });
                    break;
                case id + '_paste':
                    this.parent.notify(paste, { isAction: true, isInternal: true });
                    break;
                case id + '_pastevalues':
                    this.parent.notify(paste, { type: 'Values', isAction: true, isInternal: true });
                    break;
                case id + '_pasteformats':
                    this.parent.notify(paste, { type: 'Formats', isAction: true, isInternal: true });
                    break;
                case id + '_rename':
                    this.parent.notify(renameSheetTab, {});
                    break;
                case id + '_delete_sheet':
                    this.parent.notify(removeSheetTab, {});
                    break;
                case id + '_insert_sheet':
                    this.parent.notify(insertModel, { model: this.parent, start: this.parent.activeSheetIndex,
                        end: this.parent.activeSheetIndex, modelType: 'Sheet', isAction: true, activeSheetIndex: this.parent.activeSheetIndex });
                    break;
                case id + '_hide_sheet':
                    this.parent.notify(hideSheet, null);
                    break;
                case id + '_duplicate':
                    duplicateSheet(this.parent, undefined, true);
                    break;
                case id + '_move_right':
                    moveSheet(this.parent, this.parent.activeSheetIndex + 1, null, true);
                    break;
                case id + '_move_left':
                    moveSheet(this.parent, this.parent.activeSheetIndex - 1, null, true);
                    break;
                case id + '_ascending':
                    this.parent.notify(applySort, null);
                    break;
                case id + '_descending':
                    this.parent.notify(applySort, { sortOptions: { sortDescriptors: { order: 'Descending' } } });
                    break;
                case id + '_customsort':
                    this.parent.notify(initiateCustomSort, null);
                    break;
                case id + '_filtercellvalue':
                    this.parent.notify(filterByCellValue, null);
                    break;
                case id + '_clearfilter':
                    field = getColumnHeaderText(getCellIndexes(this.parent.getActiveSheet().activeCell)[1] + 1);
                    this.parent.notify(clearFilter, { field: field });
                    break;
                case id + '_reapplyfilter':
                    this.parent.notify(reapplyFilter, null);
                    break;
                case id + '_hide_row':
                    indexes = getRangeIndexes(this.parent.getActiveSheet().selectedRange);
                    this.parent.notify(hideShow, {
                        startIndex: indexes[0], endIndex: indexes[2], hide: true, isCol: false, actionUpdate: true
                    });
                    focus(this.parent.element);
                    break;
                case id + '_unhide_row':
                    indexes = getRangeIndexes(this.parent.getActiveSheet().selectedRange);
                    this.parent.notify(hideShow, {
                        startIndex: indexes[0], endIndex: indexes[2], hide: false, isCol: false, actionUpdate: true
                    });
                    focus(this.parent.element);
                    break;
                case id + '_hide_column':
                    indexes = getRangeIndexes(this.parent.getActiveSheet().selectedRange);
                    this.parent.notify(hideShow, {
                        startIndex: indexes[1], endIndex: indexes[3], hide: true, isCol: true, actionUpdate: true
                    });
                    focus(this.parent.element);
                    break;
                case id + '_unhide_column':
                    indexes = getRangeIndexes(this.parent.getActiveSheet().selectedRange);
                    this.parent.notify(hideShow, {
                        startIndex: indexes[1], endIndex: indexes[3], hide: false, isCol: true, actionUpdate: true
                    });
                    focus(this.parent.element);
                    break;
                case id + '_insert_row_above':
                case id + '_delete_row':
                    indexes = getRangeIndexes(this.parent.getActiveSheet().selectedRange);
                    this.parent.notify(args.item.id.substr(id.length + 1, 6) + "Model", { model: this.parent.getActiveSheet(), start: indexes[0], end: indexes[2], modelType: 'Row', isAction: true,
                        insertType: 'above' });
                    focus(this.parent.element);
                    break;
                case id + '_insert_row_below':
                    indexes = getSwapRange(getRangeIndexes(this.parent.getActiveSheet().selectedRange));
                    this.parent.notify(insertModel, { model: this.parent.getActiveSheet(), start: indexes[2] + 1, end: indexes[2] + 1 + (indexes[2] - indexes[0]), modelType: 'Row', isAction: true,
                        insertType: 'below' });
                    focus(this.parent.element);
                    break;
                case id + '_insert_column_before':
                case id + '_delete_column':
                    indexes = getRangeIndexes(this.parent.getActiveSheet().selectedRange);
                    this.parent.notify(args.item.id.substr(id.length + 1, 6) + "Model", { model: this.parent.getActiveSheet(), start: indexes[1], end: indexes[3], modelType: 'Column', isAction: true,
                        insertType: 'before' });
                    focus(this.parent.element);
                    break;
                case id + '_insert_column_after':
                    indexes = getSwapRange(getRangeIndexes(this.parent.getActiveSheet().selectedRange));
                    this.parent.notify(insertModel, { model: this.parent.getActiveSheet(), start: indexes[3] + 1, end: indexes[3] + 1 + (indexes[3] - indexes[1]), modelType: 'Column', isAction: true,
                        insertType: 'after' });
                    focus(this.parent.element);
                    break;
                case id + '_hyperlink':
                    this.parent.notify(initiateHyperlink, null);
                    break;
                case id + '_editHyperlink':
                    this.parent.notify(editHyperlink, null);
                    break;
                case id + '_openHyperlink':
                    this.parent.notify(openHyperlink, null);
                    break;
                case id + '_removeHyperlink':
                    this.parent.removeHyperlink(this.parent.getActiveSheet().selectedRange);
                    break;
                case id + '_protect':
                    sheet = this.parent.getActiveSheet();
                    this.parent.setSheetPropertyOnMute(sheet, 'isProtected', !sheet.isProtected);
                    isActive = sheet.isProtected ? false : true;
                    this.parent.notify(applyProtect, { isActive: isActive });
                    break;
            }
        }
    };
    ContextMenu$$1.prototype.getInsertModel = function (startIndex, endIndex) {
        var model = [];
        for (var i = startIndex; i <= endIndex; i++) {
            if (i === startIndex) {
                model.push({ index: i });
            }
            else {
                model.push({});
            }
        }
        return model;
    };
    /**
     * Before open event handler.
     *
     * @param {BeforeOpenCloseMenuEventArgs} args - Specify the args.
     * @returns {void} - Before open event handler.
     */
    ContextMenu$$1.prototype.beforeOpenHandler = function (args) {
        var trgt = args.event.target;
        var target = this.getTarget(trgt);
        var items;
        if (args.element.classList.contains('e-contextmenu')) {
            var sheet = this.parent.getActiveSheet();
            if (args.event.target && (trgt.classList.contains('e-rowresize') || trgt.classList.contains('e-colresize'))) {
                var range = getRangeIndexes(sheet.selectedRange);
                if (!(trgt.classList.contains('e-rowresize') ? range[1] === 0 && range[3] === sheet.colCount - 1 :
                    range[0] === 0 && range[2] === sheet.rowCount - 1)) {
                    args.cancel = true;
                    return;
                }
                if (trgt.classList.contains('e-rowresize') ? this.parent.hiddenCount(range[0], range[2]) !== Math.abs(range[2] - range[0]) +
                    1 : this.parent.hiddenCount(range[1], range[3], 'columns') !== Math.abs(range[3] - range[1]) + 1) {
                    items = this.getDataSource(target);
                }
                else {
                    items = this.getDataSource(target, trgt);
                }
            }
            else {
                if (target === 'Content') {
                    var range = getRangeIndexes(sheet.selectedRange);
                    var rowSelect = range[1] === 0 && range[3] === sheet.colCount - 1;
                    var colSelect = range[0] === 0 && range[2] === sheet.rowCount - 1;
                    target = rowSelect && colSelect ? 'SelectAll' : (rowSelect ? 'RowHeader' : (colSelect ? 'ColumnHeader' : 'Content'));
                }
                items = this.getDataSource(target);
            }
            this.contextMenuInstance.items = items;
            this.contextMenuInstance.dataBind();
        }
        else {
            items = args.items;
        }
        if (target === 'ColumnHeader' || target === 'RowHeader') {
            if (args.element && args.element.childElementCount > 0) {
                var insertEle = target === 'ColumnHeader' ? args.element.querySelector('#' + this.parent.element.id + '_cmenu_insert_column') :
                    args.element.querySelector('#' + this.parent.element.id + '_cmenu_insert_row');
                var deleteEle = target ===
                    'ColumnHeader' ? args.element.querySelector('#' + this.parent.element.id + '_cmenu_delete_column') :
                    args.element.querySelector('#' + this.parent.element.id + '_cmenu_delete_row');
                if (this.parent.allowInsert && insertEle.classList.contains('e-disabled')) {
                    insertEle.classList.remove('e-disabled');
                }
                else if ((!this.parent.allowInsert || !!this.parent.element.querySelector('.e-selectall.e-highlight')) &&
                    !insertEle.classList.contains('e-disabled')) {
                    insertEle.classList.add('e-disabled');
                }
                if (this.parent.allowDelete && deleteEle.classList.contains('e-disabled')) {
                    deleteEle.classList.remove('e-disabled');
                }
                else if (!this.parent.allowDelete && !deleteEle.classList.contains('e-disabled')) {
                    deleteEle.classList.add('e-disabled');
                }
            }
        }
        else if (target === 'Footer') {
            var sheetIdx = getSheetIndex(this.parent, trgt.textContent);
            if (sheetIdx === 0) {
                args.element.querySelector('#' + this.parent.element.id + '_cmenu_move_left').classList.add('e-disabled');
            }
            if (sheetIdx === this.parent.sheets.length - 1) {
                args.element.querySelector('#' + this.parent.element.id + '_cmenu_move_right').classList.add('e-disabled');
            }
        }
        this.parent.trigger('contextMenuBeforeOpen', args);
        this.parent.notify(cMenuBeforeOpen, extend(args, { target: target, items: items }));
    };
    /**
     * To get target area based on right click.
     *
     * @param {Element} target - Specify the target
     * @returns {string} - To get target area based on right click.
     */
    ContextMenu$$1.prototype.getTarget = function (target) {
        if (closest(target, '.e-sheet-content')) {
            return 'Content';
        }
        else if (closest(target, '.e-column-header')) {
            return target.classList.contains('e-header-cell') ? 'ColumnHeader' : 'Content';
        }
        else if (closest(target, '.e-row-header')) {
            return target.classList.contains('e-header-cell') ? 'RowHeader' : 'Content';
        }
        else if (closest(target, '.e-sheet-tabs-items')) {
            return 'Footer';
        }
        else if (closest(target, '.e-selectall-container')) {
            if (target.classList.contains('e-header-cell')) {
                return closest(target, '.e-header-row') ? 'ColumnHeader' : 'RowHeader';
            }
            return closest(target, '.e-select-all-cell') ? 'SelectAll' : 'Content';
        }
        else {
            return '';
        }
    };
    /**
     * To populate context menu items based on target area.
     *
     * @param {string} target - Specify the target
     * @param {Element} targetEle - Specify the target element
     * @returns {MenuItemModel[]} - To populate context menu items based on target area.
     */
    ContextMenu$$1.prototype.getDataSource = function (target, targetEle) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var items = [];
        var id = this.parent.element.id + '_cmenu';
        if (target === 'Content') {
            this.setClipboardData(items, l10n, id);
            items.push({ separator: true });
            //push filter and sort items here
            this.setFilterItems(items, id);
            this.setSortItems(items, id);
            items.push({ separator: true });
            this.setHyperLink(items, id);
        }
        else if (target === 'RowHeader') {
            this.setClipboardData(items, l10n, id);
            var sheet = this.parent.getActiveSheet();
            var indexes = getRangeIndexes(sheet.selectedRange);
            this.setInsertDeleteItems(items, l10n, 'Row', id, [indexes[0], indexes[2]], ['Above', 'Below']);
            if (!sheet.frozenRows && !sheet.frozenColumns && (!targetEle || targetEle.classList.contains('e-rowresize') ||
                !targetEle.parentElement || !targetEle.parentElement.classList.value.includes('e-hide'))) {
                this.setHideShowItems(items, l10n, 'Row', id, [indexes[0], indexes[2]]);
            }
        }
        else if (target === 'ColumnHeader') {
            this.setClipboardData(items, l10n, id);
            var sheet = this.parent.getActiveSheet();
            var indexes = getRangeIndexes(sheet.selectedRange);
            this.setInsertDeleteItems(items, l10n, 'Column', id, [indexes[1], indexes[3]], ['Before', 'After']);
            if (!sheet.frozenRows && !sheet.frozenColumns && (!targetEle || !targetEle.classList.value.includes('e-hide'))) {
                this.setHideShowItems(items, l10n, 'Column', id, [indexes[1], indexes[3]]);
            }
        }
        else if (target === 'SelectAll') {
            this.setClipboardData(items, l10n, id);
            this.setFilterItems(items, id);
            this.setSortItems(items, id);
        }
        else if (target === 'Footer') {
            items.push({
                text: l10n.getConstant('Insert'), id: id + '_insert_sheet'
            });
            items.push({
                text: l10n.getConstant('Delete'), iconCss: 'e-icons e-delete', id: id + '_delete_sheet'
            });
            items.push({
                text: l10n.getConstant('DuplicateSheet'), id: id + '_duplicate'
            });
            items.push({
                text: l10n.getConstant('Rename'), id: id + '_rename'
            });
            items.push({
                text: l10n.getConstant('Hide'), id: id + '_hide_sheet'
            });
            this.setProtectSheetItems(items, id);
            items.push({
                text: l10n.getConstant('MoveRight'), id: id + '_move_right'
            });
            items.push({
                text: l10n.getConstant('MoveLeft'), id: id + '_move_left'
            });
        }
        return items;
    };
    ContextMenu$$1.prototype.setProtectSheetItems = function (items, id) {
        var l10n = this.parent.serviceLocator.getService(locale);
        if (this.parent.getActiveSheet().isProtected) {
            items.push({
                text: l10n.getConstant('UnprotectSheet'), id: id + '_protect', iconCss: 'e-icons e-protect-icon'
            });
        }
        else {
            items.push({
                text: l10n.getConstant('ProtectSheet'), id: id + '_protect', iconCss: 'e-icons e-protect-icon'
            });
        }
    };
    /**
     * Sets sorting related items to the context menu.
     *
     * @param {MenuItemModel[]} items - Specifies the item
     * @param {string} id - Specify the id.
     * @returns {void} - Sets sorting related items to the context menu.
     */
    ContextMenu$$1.prototype.setFilterItems = function (items, id) {
        if (this.parent.allowFiltering) {
            var l10n = this.parent.serviceLocator.getService(locale);
            var args = { clearFilterText: null, isFiltered: false };
            this.parent.notify(getFilteredColumn, args);
            items.push({
                text: l10n.getConstant('Filter'), id: id + '_filter',
                iconCss: '',
                items: [
                    { text: args.clearFilterText, iconCss: 'e-icons e-filter-clear', id: id + '_clearfilter' },
                    { text: l10n.getConstant('ReapplyFilter'), iconCss: 'e-icons e-filter-reapply', id: id + '_reapplyfilter' },
                    { separator: true },
                    { text: l10n.getConstant('FilterCellValue'), iconCss: '', id: id + '_filtercellvalue' }
                ]
            });
        }
    };
    /**
     * Sets sorting related items to the context menu.
     *
     * @param {MenuItemModel[]} items - Specifies the item
     * @param {string} id - Specify the id.
     * @returns {void} - Sets sorting related items to the context menu.
     */
    ContextMenu$$1.prototype.setSortItems = function (items, id) {
        var l10n = this.parent.serviceLocator.getService(locale);
        if (this.parent.allowSorting) {
            items.push({
                text: l10n.getConstant('Sort'), id: id + '_sort',
                iconCss: 'e-icons e-sort-icon',
                items: [
                    { text: l10n.getConstant('SortAscending'), iconCss: 'e-icons e-sort-asc', id: id + '_ascending' },
                    { text: l10n.getConstant('SortDescending'), iconCss: 'e-icons e-sort-desc', id: id + '_descending' },
                    { text: l10n.getConstant('CustomSort') + '...', iconCss: 'e-icons e-sort-custom', id: id + '_customsort' }
                ]
            });
        }
    };
    ContextMenu$$1.prototype.setHyperLink = function (items, id) {
        var sheet = this.parent.getActiveSheet();
        if (this.parent.allowHyperlink) {
            var l10n = this.parent.serviceLocator.getService(locale);
            if ((!document.activeElement.getElementsByClassName('e-hyperlink')[0] &&
                !document.activeElement.classList.contains('e-hyperlink')) || (sheet.isProtected && !sheet.protectSettings.insertLink)) {
                items.push({
                    text: l10n.getConstant('Hyperlink'), iconCss: 'e-icons e-hyperlink-icon', id: id + '_hyperlink'
                });
            }
            else {
                items.push({ text: l10n.getConstant('EditHyperlink'), iconCss: 'e-icons e-edithyperlink-icon', id: id + '_editHyperlink' }, { text: l10n.getConstant('OpenHyperlink'), iconCss: 'e-icons e-openhyperlink-icon', id: id + '_openHyperlink' }, { text: l10n.getConstant('RemoveHyperlink'), iconCss: 'e-icons e-removehyperlink-icon', id: id + '_removeHyperlink' });
            }
        }
    };
    ContextMenu$$1.prototype.setClipboardData = function (items, l10n, id) {
        if (this.parent.enableClipboard) {
            items.push({
                text: l10n.getConstant('Cut'),
                iconCss: 'e-icons e-cut-icon', id: id + '_cut'
            });
            items.push({
                text: l10n.getConstant('Copy'),
                iconCss: 'e-icons e-copy-icon', id: id + '_copy'
            });
            items.push({
                text: l10n.getConstant('Paste'),
                iconCss: 'e-icons e-paste-icon', id: id + '_paste'
            });
            items.push({
                text: l10n.getConstant('PasteSpecial'), id: id + '_pastespecial',
                items: [
                    { text: l10n.getConstant('Values'), id: id + '_pastevalues' },
                    { text: l10n.getConstant('Formats'), id: id + '_pasteformats' }
                ]
            });
        }
    };
    ContextMenu$$1.prototype.setInsertDeleteItems = function (items, l10n, layout, id, indexes, subItems) {
        items.push({ separator: true });
        ['Insert', 'Delete'].forEach(function (action) {
            if (indexes[0] === indexes[1]) {
                items.push({ text: l10n.getConstant("" + action + layout), id: id + ("_" + action.toLowerCase() + "_" + layout.toLowerCase()) });
            }
            else {
                items.push({ text: l10n.getConstant("" + action + layout + "s"), id: id + ("_" + action.toLowerCase() + "_" + layout.toLowerCase()) });
            }
            if (action === 'Insert') {
                items[items.length - 1].items = [];
                subItems.forEach(function (item) {
                    items[items.length - 1].items.push({
                        text: l10n.getConstant(item), id: items[items.length - 1].id + "_" + item.toLowerCase()
                    });
                });
            }
        });
    };
    ContextMenu$$1.prototype.setHideShowItems = function (items, l10n, layout, id, indexes) {
        if (indexes[0] === indexes[1]) {
            items.push({ text: l10n.getConstant("Hide" + layout), id: id + ("_hide_" + layout.toLowerCase()) });
        }
        else {
            var StartIdx = indexes[0];
            indexes[0] = indexes[0] > indexes[1] ? indexes[1] : indexes[0];
            indexes[1] = indexes[1] > StartIdx ? indexes[1] : StartIdx;
            items.push({ text: l10n.getConstant("Hide" + layout + "s"), id: id + ("_hide_" + layout.toLowerCase()) });
        }
        if (this.parent.hiddenCount(indexes[0], indexes[1], layout.toLowerCase() + "s")) {
            items.push({ text: l10n.getConstant("UnHide" + layout + "s"), id: id + ("_unhide_" + layout.toLowerCase()) });
        }
    };
    /**
     * To add event listener.
     *
     * @returns {void} - To add event listener.
     */
    ContextMenu$$1.prototype.addEventListener = function () {
        this.parent.on(addContextMenuItems, this.addItemsHandler, this);
        this.parent.on(removeContextMenuItems, this.removeItemsHandler, this);
        this.parent.on(enableContextMenuItems, this.enableItemsHandler, this);
    };
    /**
     * To add context menu items before / after particular item.
     *
     * @param {InsertArgs} args - Specify the add item handler
     * @returns {void} - To add context menu items before / after particular item.
     */
    ContextMenu$$1.prototype.addItemsHandler = function (args) {
        if (args.insertAfter) {
            this.contextMenuInstance.insertAfter(args.items, args.text, args.isUniqueId);
        }
        else {
            this.contextMenuInstance.insertBefore(args.items, args.text, args.isUniqueId);
        }
    };
    /**
     * To remove context menu items.
     *
     * @param {RemoveArgs} args - Specifies the args
     * @returns {void} - To remove context menu items.
     */
    ContextMenu$$1.prototype.removeItemsHandler = function (args) {
        this.contextMenuInstance.removeItems(args.items, args.isUniqueId);
    };
    /**
     * To enable / disable context menu items.
     *
     * @param {EnableDisableArgs} args - Specifies the args
     * @returns {void} - To enable / disable context menu items.
     */
    ContextMenu$$1.prototype.enableItemsHandler = function (args) {
        this.contextMenuInstance.enableItems(args.items, args.enable, args.isUniqueId);
    };
    /**
     * To remove event listener.
     *
     * @returns {void} - To remove event listener.
     */
    ContextMenu$$1.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(addContextMenuItems, this.addItemsHandler);
            this.parent.off(removeContextMenuItems, this.removeItemsHandler);
            this.parent.off(enableContextMenuItems, this.enableItemsHandler);
        }
    };
    /**
     * To get module name.
     *
     * @returns {string} - To get module name.
     */
    ContextMenu$$1.prototype.getModuleName = function () {
        return 'contextMenu';
    };
    /**
     * Destroy method.
     *
     * @returns {void} - Destroy method.
     */
    ContextMenu$$1.prototype.destroy = function () {
        this.removeEventListener();
        this.contextMenuInstance.destroy();
        var ele = document.getElementById(this.parent.element.id + '_contextmenu');
        if (ele) {
            detach(ele);
        }
        this.parent = null;
    };
    return ContextMenu$$1;
}());

/**
 * Specifies number format.
 */
var NumberFormat = /** @__PURE__ @class */ (function () {
    function NumberFormat(parent) {
        this.parent = parent;
        this.addEventListener();
        //Spreadsheet.Inject(WorkbookNumberFormat);
    }
    NumberFormat.prototype.refreshCellElement = function (args) {
        var cell = this.parent.getCell(args.rowIndex, args.colIndex);
        if (!isNullOrUndefined(cell)) {
            this.parent.refreshNode(cell, args);
        }
    };
    NumberFormat.prototype.getTextSpace = function (args) {
        args.width = getTextWidth(args.char, args.cell.style, this.parent.cellStyle);
    };
    NumberFormat.prototype.rowFillHandler = function (args) {
        var cellElem = args.td ? args.td : this.parent.getCell(args.rowIdx, args.colIdx);
        var span2;
        var span3;
        if (cellElem) {
            if (args.formatText) {
                cellElem.innerHTML = args.formatText.toString();
            }
            if (args.secText) {
                span3 = this.parent.createElement('span');
                span3.classList.add('e-fill-sec');
                span3.innerHTML = args.secText.toString();
            }
            if (cellElem.children.length) {
                span2 = cellElem.querySelector('.e-fill');
            }
            else {
                span2 = this.parent.createElement('span');
                span2.style.flexGrow = '1';
                span2.classList.add('e-fill');
                cellElem.appendChild(span2);
                if (span3) {
                    cellElem.appendChild(span3);
                }
            }
            span2.innerHTML = '';
            var width = getTextWidth(args.value.toString(), args.cell.style, this.parent.cellStyle);
            var count$$1 = Math.round(span2.offsetWidth / width);
            args.formatText = args.value.repeat(count$$1);
            span2.innerHTML = args.formatText;
        }
    };
    /**
     * Adding event listener for number format.
     *
     * @hidden
     * @returns {void} - Adding event listener for number format.
     */
    NumberFormat.prototype.addEventListener = function () {
        this.parent.on(refreshCellElement, this.refreshCellElement, this);
        this.parent.on(rowFillHandler, this.rowFillHandler, this);
        this.parent.on(getTextSpace, this.getTextSpace, this);
    };
    /**
     * Removing event listener for number format.
     *
     * @hidden
     * @returns {void} - Removing event listener for number format.
     */
    NumberFormat.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(refreshCellElement, this.refreshCellElement);
            this.parent.off(rowFillHandler, this.rowFillHandler);
            this.parent.off(getTextSpace, this.getTextSpace);
        }
    };
    /**
     * To Remove the event listeners.
     *
     * @returns {void} - To Remove the event listeners.
     */
    NumberFormat.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * Get the workbook import module name.
     *
     * @returns {string} - Get the workbook import module name.
     */
    NumberFormat.prototype.getModuleName = function () {
        return 'numberFormat';
    };
    return NumberFormat;
}());

/**
 * `Sort` module is used to handle the sort action in Spreadsheet.
 */
var Sort = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for sort module.
     *
     * @param {Spreadsheet} parent - Specifies the Spreadsheet instance.
     */
    function Sort(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the sort module.
     *
     * @returns {void}
     */
    Sort.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    Sort.prototype.addEventListener = function () {
        this.parent.on(applySort, this.applySortHandler, this);
        this.parent.on(sortComplete, this.sortCompleteHandler, this);
        this.parent.on(initiateCustomSort, this.initiateCustomSortHandler, this);
        this.parent.on(sortImport, this.sortImport, this);
    };
    Sort.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(applySort, this.applySortHandler);
            this.parent.off(sortComplete, this.sortCompleteHandler);
            this.parent.off(initiateCustomSort, this.initiateCustomSortHandler);
            this.parent.off(sortImport, this.sortImport);
        }
    };
    /**
     * Gets the module name.
     *
     * @returns {string} - Gets the module name.
     */
    Sort.prototype.getModuleName = function () {
        return 'sort';
    };
    /**
     * Validates the range and returns false when invalid.
     *
     * @returns {boolean} - Validates the range and returns false when invalid.
     */
    Sort.prototype.isValidSortRange = function () {
        var sheet = this.parent.getActiveSheet();
        var range = getSwapRange(getIndexesFromAddress(sheet.selectedRange));
        if (range[0] > sheet.usedRange.rowIndex || range[1] > sheet.usedRange.colIndex) {
            return false;
        }
        return true;
    };
    /**
     * sort while importing.
     *
     * @param {any} args - Specifies the args
     * @param {number} args.sheetIdx - Specifies the sheet index
     * @returns {void}
     */
    Sort.prototype.sortImport = function (args) {
        var sort = this.parent.sortCollection;
        var cell;
        var rowId = this.parent.getActiveSheet().usedRange.rowIndex - 1;
        var sheetIdx = args ? args.sheetIdx : this.parent.activeSheetIndex;
        for (var j = 0; j < sort.length; j++) {
            if (sort[j].sheetIndex === sheetIdx) {
                for (var i = 0; i < rowId; i++) {
                    cell = this.parent.getCell(i, sort[j].columnIndex);
                    if (cell && cell.querySelector('.e-filter-icon')) {
                        if (sort[j].order === 'Ascending' || sort[j].order === 'OnTop') {
                            if (!cell.querySelector('.e-filter-icon').classList.contains('e-sortasc-filter')) {
                                cell.querySelector('.e-filter-icon').classList.add('e-sortasc-filter');
                            }
                        }
                        else {
                            if (!cell.querySelector('.e-filter-icon').classList.contains('e-sortdesc-filter')) {
                                cell.querySelector('.e-filter-icon').classList.add('e-sortdesc-filter');
                            }
                        }
                        return;
                    }
                }
            }
        }
    };
    /**
     * Shows the range error alert dialog.
     *
     * @param {object} args - specify the args
     * @param {string} args.error - range error string.
     * @returns {void}
     */
    Sort.prototype.sortRangeAlertHandler = function (args) {
        var _this = this;
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        var l10n = this.parent.serviceLocator.getService(locale);
        dialogInst.show({
            height: 180, width: 400, isModal: true, showCloseIcon: true,
            content: args.error,
            beforeOpen: function (openArgs) {
                var dlgArgs = {
                    dialogName: args.error === l10n.getConstant("MultiRangeSortError") ? "MultiRangeSortDialog" : "SortRangeDialog",
                    content: args.error,
                    element: openArgs.element, target: openArgs.target, cancel: openArgs.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    openArgs.cancel = true;
                }
                dialogInst.dialogInstance.content = dlgArgs.content;
            }
        });
        this.parent.hideSpinner();
    };
    /**
     * Initiates the custom sort dialog.
     *
     * @returns {void}
     */
    Sort.prototype.initiateCustomSortHandler = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var sheet = this.parent.getActiveSheet();
        if (!this.isValidSortRange() || sheet.rows.length == 0) {
            this.sortRangeAlertHandler({ error: l10n.getConstant('SortOutOfRangeError') });
            return;
        }
        if (isDiscontinuousRange(sheet.selectedRange)) {
            this.sortRangeAlertHandler({ error: l10n.getConstant('MultiRangeSortError') });
            return;
        }
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        var sortOptions;
        dialogInst.show({
            height: 400, width: 560, isModal: true, showCloseIcon: true, cssClass: 'e-customsort-dlg',
            header: l10n.getConstant('CustomSort'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'CustomSortDialog',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                dialogInst.dialogInstance.content = _this.customSortContent();
                dialogInst.dialogInstance.dataBind();
                focus(_this.parent.element);
            },
            buttons: [{
                    buttonModel: { content: l10n.getConstant('Ok'), isPrimary: true },
                    click: function () {
                        var element = dialogInst.dialogInstance.content;
                        var listview = getComponent(element.getElementsByClassName('e-list-sort e-listview e-lib')[0], 'listview');
                        var data = listview.dataSource;
                        _this.clearError();
                        var errorElem = element.getElementsByClassName('e-sort-error')[0];
                        errorElem.style.display = 'block';
                        if (!_this.validateError(data, element, errorElem)) {
                            sortOptions = { sortDescriptors: data, containsHeader: element.getElementsByClassName('e-sort-checkheader')[0].checked,
                                caseSensitive: element.getElementsByClassName('e-sort-checkcase')[0].checked };
                            dialogInst.hide();
                        }
                    }
                }],
            close: function () {
                if (sortOptions) {
                    getUpdateUsingRaf(function () { return _this.applySortHandler({ sortOptions: sortOptions }); });
                }
            }
        });
    };
    /**
     * Validates the errors of the sort criteria and displays the error.
     *
     * @param {Object} json - listview datasource.
     * @param {HTMLElement} dialogElem - dialog content element.
     * @param {HTMLElement} errorElem - element to display error.
     * @returns {boolean} - Return boolean value.
     */
    Sort.prototype.validateError = function (json, dialogElem, errorElem) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var hasEmpty = json.some(function (element) { return element.field.toString() === ''; });
        if (hasEmpty) {
            Array.prototype.some.call(dialogElem.getElementsByClassName('e-sort-field'), function (dropDown) {
                var hasError = !getComponent(dropDown, 'dropdownlist').value;
                if (hasError) {
                    dropDown.parentElement.classList.add('e-error');
                }
                return hasError; //breaks the loop if only one error added.
            });
            errorElem.innerText = l10n.getConstant('SortEmptyFieldError');
            return true;
        }
        var temp = new Set();
        var duplicateField = '';
        var hasDuplicate = json.some(function (element) {
            duplicateField = element.field.toString();
            return temp.size === temp.add(element.field).size;
        });
        var errorField = '';
        if (hasDuplicate) {
            var count_1 = 0;
            Array.prototype.some.call(dialogElem.getElementsByClassName('e-sort-field'), function (dropDown) {
                var dropDownList = getComponent(dropDown, 'dropdownlist');
                if (dropDownList.value === duplicateField) {
                    dropDown.parentElement.classList.add('e-error');
                    errorField = dropDownList.text;
                    count_1++;
                }
                return count_1 === 2; //breaks the loop when 2 errors added.
            });
            errorElem.innerHTML = '<strong>' + errorField + '</strong>' + l10n.getConstant('SortDuplicateFieldError');
            return true;
        }
        return false;
    };
    /**
     * Creates all the elements and generates the dialog content element.
     *
     * @returns {HTMLElement} - Returns the dialog element.
     */
    Sort.prototype.customSortContent = function () {
        var dialogElem = this.parent.createElement('div', { className: 'e-sort-dialog' });
        var fields = this.getFields();
        var listId = getUniqueID('customSort');
        var listviewObj = this.getCustomListview(listId);
        this.setHeaderTab(dialogElem, listviewObj, fields);
        var contentElem = this.parent.createElement('div', {
            className: 'e-sort-listsection',
            styles: ''
        });
        dialogElem.appendChild(contentElem);
        var listview = this.parent.createElement('div', { className: 'e-list-sort', styles: '' });
        contentElem.appendChild(listview);
        listviewObj.createElement = this.parent.createElement;
        listviewObj.appendTo(listview);
        this.renderListItem(listId, listviewObj, true, fields);
        var errorElem = this.parent.createElement('div', { className: 'e-sort-error' });
        dialogElem.appendChild(errorElem);
        return dialogElem;
    };
    /**
     * Gets the fields data from the selected range.
     *
     * @returns {Object} - Gets the fields data from the selected range.
     */
    Sort.prototype.getFields = function () {
        var sheet = this.parent.getActiveSheet();
        var range = getSwapRange(getIndexesFromAddress(sheet.selectedRange));
        if (range[0] === range[2] && (range[2] - range[0]) === 0) { //for entire range
            range[0] = 0;
            range[1] = 0;
            range[3] = sheet.usedRange.colIndex;
            var args = { filterRange: [], hasFilter: false };
            this.parent.notify(getFilterRange, args);
            if (args.hasFilter && args.filterRange) {
                range[0] = args.filterRange[0];
            }
        }
        var fields = [];
        var fieldName;
        for (range[1]; range[1] <= range[3]; range[1]++) {
            var cell = getCell(range[0], range[1], sheet);
            if (cell && cell.value) {
                var eventArgs = {
                    formattedText: cell.value,
                    value: cell.value,
                    format: cell.format,
                    onLoad: true
                };
                if (cell.format) {
                    this.parent.notify(getFormattedCellObject, eventArgs);
                }
                fieldName = eventArgs.formattedText;
            }
            else {
                fieldName = 'Column ' + getColumnHeaderText(range[1] + 1);
            }
            fields.push({ text: fieldName, value: 'Column ' + getColumnHeaderText(range[1] + 1) });
        }
        return fields;
    };
    /**
     * Creates the header tab for the custom sort dialog.
     *
     * @param {HTMLElement} dialogElem - dialog content element.
     * @param {ListView} listviewObj - listview instance.
     * @param {Object} fields - fields data.
     * @returns {void} - set header tab.
     */
    Sort.prototype.setHeaderTab = function (dialogElem, listviewObj, fields) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var headerTabElement = this.parent.createElement('div', {
            className: 'e-sort-header',
            styles: '',
            innerHTML: ''
        });
        dialogElem.appendChild(headerTabElement);
        var addButton = this.parent.createElement('button', {
            className: 'e-btn e-sort-addbtn e-flat',
            innerHTML: l10n.getConstant('AddColumn')
        });
        var footer = this.parent.element.querySelector('.e-customsort-dlg .e-footer-content');
        footer.insertBefore(addButton, footer.firstElementChild);
        addButton.addEventListener('click', function () {
            if (listviewObj) {
                var listId = getUniqueID('customSort');
                listviewObj.addItem([{ id: listId, text: l10n.getConstant('ThenBy'), field: '', order: 'ascending' }]);
                _this.renderListItem(listId, listviewObj, checkHeaderObj.checked, fields, true);
            }
        });
        var checkHeaderObj = new CheckBox({
            label: l10n.getConstant('ContainsHeader'),
            checked: true,
            change: function (args) {
                var fieldsMap = args.checked ? { text: 'text', value: 'value' } : { text: 'value' };
                Array.prototype.forEach.call(dialogElem.getElementsByClassName('e-sort-field e-dropdownlist e-lib'), function (dropDown) {
                    var dropDownListObj = getComponent(dropDown, 'dropdownlist');
                    dropDownListObj.dataSource = null; //reset datasource.
                    dropDownListObj.dataSource = fields;
                    dropDownListObj.fields = fieldsMap;
                    dropDownListObj.dataBind();
                });
            },
            cssClass: 'e-sort-headercheckbox'
        });
        var headerCheckbox = this.parent.createElement('input', {
            className: 'e-sort-checkheader', attrs: { type: 'checkbox' }
        });
        headerTabElement.appendChild(headerCheckbox);
        checkHeaderObj.createElement = this.parent.createElement;
        checkHeaderObj.appendTo(headerCheckbox);
        var checkCaseObj = new CheckBox({
            label: l10n.getConstant('CaseSensitive'),
            checked: false,
            cssClass: 'e-sort-casecheckbox'
        });
        var caseCheckbox = this.parent.createElement('input', {
            className: 'e-sort-checkcase', attrs: { type: 'checkbox' }
        });
        headerTabElement.appendChild(caseCheckbox);
        checkCaseObj.createElement = this.parent.createElement;
        checkCaseObj.appendTo(caseCheckbox);
    };
    /**
     * Creates a listview instance.
     *
     * @param {string} listId - unique id of the list item.
     * @returns {void}
     */
    Sort.prototype.getCustomListview = function (listId) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var data = [{ id: listId, text: l10n.getConstant('SortBy'), field: '', order: 'ascending' }];
        enableRipple(false);
        var listviewObj = new ListView({
            dataSource: data,
            fields: { id: 'id' },
            height: '100%',
            template: '<div class="e-sort-listwrapper">' +
                '<span class="text">${text}</span>' +
                '<div class="e-sort-row"><div class="e-sort-field"></div>' +
                '<div class="e-sort-order">' +
                '<span class="e-sort-ordertxt" style="display:none;">${order}</span></div>' +
                '<span class="e-icons e-sort-delete"></span></div>',
            cssClass: 'e-sort-template'
        });
        return listviewObj;
    };
    /**
     * Triggers the click event for delete icon.
     *
     * @param {Element} element - current list item element.
     * @param {ListView} listviewObj - listview instance.
     * @returns {void}
     */
    Sort.prototype.deleteHandler = function (element, listviewObj) {
        var iconEle = element.getElementsByClassName('e-sort-delete')[0];
        //Event handler to bind the click event for delete icon
        iconEle.addEventListener('click', function () {
            if (element) {
                listviewObj.removeItem(element);
            }
        });
    };
    /**
     * Renders the dropdown and radio button components inside list item.
     *
     * @param {string} id - unique id of the list item.
     * @param {ListView} lvObj - listview instance.
     * @param {boolean} containsHeader - data contains header.
     * @param {string} fields - fields data.
     * @param {boolean} btn - boolean value.
     * @returns {void}
     */
    Sort.prototype.renderListItem = function (id, lvObj, containsHeader, fields, btn) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var element = lvObj.element.querySelector('li[data-uid=' + id + ']');
        var fieldsMap = containsHeader ? { text: 'text', value: 'value' } : { text: 'value' };
        var dropDown = element.getElementsByClassName('e-sort-field')[0];
        var dropDownListObj = new DropDownList({
            dataSource: fields,
            width: 'auto',
            cssClass: 'e-sort-field-ddl',
            fields: fieldsMap,
            placeholder: l10n.getConstant('SelectAColumn'),
            change: function (args) {
                if (!args.value) {
                    return;
                }
                Array.prototype.some.call(lvObj.dataSource, function (item) {
                    if (item.id === id) {
                        item.field = args.value.toString().replace('Column ', '');
                    }
                    return item.id === id; //breaks the loop when proper id found
                });
                _this.clearError();
            }
        });
        dropDownListObj.createElement = this.parent.createElement;
        dropDownListObj.appendTo(dropDown);
        if (!btn) {
            dropDownListObj.index = 0;
        }
        /* sort ascending radio button */
        var orderRadio = element.getElementsByClassName('e-sort-order')[0];
        var ordertxtElem = orderRadio.getElementsByClassName('e-sort-ordertxt')[0];
        var isAscending = ordertxtElem.innerText.toLocaleLowerCase() === 'ascending';
        var radiobutton = new RadioButton({
            label: l10n.getConstant('SortAscending'),
            name: 'sortAZ_' + id, value: 'ascending', checked: isAscending, cssClass: 'e-sort-radiobutton',
            change: function (args) { _this.setRadioBtnValue(lvObj, id, args.value); }
        });
        var radio = this.parent.createElement('input', {
            id: 'orderAsc_' + id, className: 'e-sort-radioasc', styles: '', attrs: { type: 'radio' }
        });
        orderRadio.appendChild(radio);
        radiobutton.createElement = this.parent.createElement;
        radiobutton.appendTo(radio);
        /* sort descending radio button */
        var radiobutton2 = new RadioButton({
            label: l10n.getConstant('SortDescending'),
            name: 'sortAZ_' + id, value: 'descending', checked: !isAscending, cssClass: 'e-sort-radiobutton',
            change: function (args) { _this.setRadioBtnValue(lvObj, id, args.value); }
        });
        var radio2 = this.parent.createElement('input', {
            id: 'orderDesc_' + id, className: 'e-sort-radiodesc', styles: '', attrs: { type: 'radio' }
        });
        orderRadio.appendChild(radio2);
        radiobutton2.createElement = this.parent.createElement;
        radiobutton2.appendTo(radio2);
        this.deleteHandler(element, lvObj);
    };
    /**
     * Sets the new value of the radio button.
     *
     * @param {ListView} listviewObj - listview instance.
     * @param {string} id - unique id of the list item.
     * @param {string} value - new value.
     * @returns {void}
     */
    Sort.prototype.setRadioBtnValue = function (listviewObj, id, value) {
        if (!value) {
            return;
        }
        Array.prototype.some.call(listviewObj.dataSource, function (item) {
            if (item.id === id) {
                item.order = value;
            }
            return item.id === id; //breaks the loop when proper id found
        });
    };
    /**
     *
     * Clears the error from the dialog.
     *
     * @returns {void}
     */
    Sort.prototype.clearError = function () {
        var dialogElem = document.getElementsByClassName('e-sort-dialog')[0];
        var errorElem = dialogElem.getElementsByClassName('e-sort-error')[0];
        if (errorElem.style.display !== 'none' && errorElem.innerHTML !== '') {
            errorElem.style.display = 'none';
            Array.prototype.forEach.call(dialogElem.getElementsByClassName('e-error'), function (element) {
                element.classList.remove('e-error');
            });
        }
    };
    /**
     * Triggers sort events and applies sorting.
     *
     * @param {Object} args - Specifies the args.
     * @param {SortOptions} args.sortOptions - Specifies the sort options.
     * @param {string} args.range - Specifies the range.
     * @returns {void}
     */
    Sort.prototype.applySortHandler = function (args) {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        var address = args && args.range || sheet.selectedRange;
        var range = getSwapRange(getIndexesFromAddress(address));
        var sortOptions = args && args.sortOptions || { sortDescriptors: {} };
        var isSingle = range[0] === range[2];
        var eventArgs = { filterRange: [], hasFilter: false, sheetIdx: this.parent.activeSheetIndex };
        this.parent.notify(getFilterRange, eventArgs);
        if (eventArgs.hasFilter && (isSingle ? inRange(eventArgs.filterRange, range[0], range[1]) : (eventArgs.filterRange[0] ===
            range[0] && (this.parent.element.querySelector('.e-selectall.e-highlight') || (range[1] >= eventArgs.filterRange[1] && range[1]
            <= eventArgs.filterRange[3]) || (range[3] >= eventArgs.filterRange[1] && range[3] <= eventArgs.filterRange[3]))))) {
            range[0] = eventArgs.filterRange[0];
            range[1] = eventArgs.filterRange[1];
            range[2] = sheet.usedRange.rowIndex;
            range[3] = sheet.usedRange.colIndex;
            sortOptions.containsHeader = true;
            isSingle = false;
        }
        address = getRangeAddress(range);
        var beforeArgs = { range: address, sortOptions: sortOptions, cancel: false };
        this.parent.trigger(beforeSort, beforeArgs);
        if (beforeArgs.cancel) {
            return;
        }
        this.parent.notify(beginAction, { eventArgs: beforeArgs, action: 'beforeSort' });
        this.parent.showSpinner();
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var promise = new Promise(function (resolve, reject) { resolve((function () { })()); });
        var sortArgs = { args: { range: beforeArgs.range, sortOptions: beforeArgs.sortOptions, checkForHeader: isSingle && address !== beforeArgs.range }, promise: promise, previousSort: args && args.previousSort };
        this.parent.notify(initiateSort, sortArgs);
        sortArgs.promise.then(function (sortArgs) {
            _this.sortCompleteHandler(sortArgs);
            _this.parent.trigger(sortComplete, sortArgs);
            _this.parent.notify(completeAction, { eventArgs: sortArgs, action: 'sorting' });
            return Promise.resolve(sortArgs);
        }).catch(function (error) {
            _this.sortRangeAlertHandler({ error: error });
            return Promise.reject(error);
        });
    };
    /**
     *
     * Invoked when the sort action is completed.
     *
     * @param {SortEventArgs} args - Specifies the range and sort options.
     * @returns {void}
     */
    Sort.prototype.sortCompleteHandler = function (args) {
        var range = getIndexesFromAddress(args.range);
        for (var i = range[0]; i <= range[2]; i++) {
            for (var j = range[1]; j <= range[3]; j++) {
                this.parent.notify(workbookFormulaOperation, { action: 'refreshCalculate', rowIndex: i, colIndex: j });
            }
        }
        this.parent.serviceLocator.getService('cell').refreshRange(range, true, true);
        this.parent.hideSpinner();
    };
    return Sort;
}());

/* eslint-disable no-useless-escape */
/**
 * `Filter` module is used to handle the filter action in Spreadsheet.
 */
var Filter = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for filter module.
     *
     * @param {Spreadsheet} parent - Specifies the Spreadsheet.
     */
    function Filter(parent) {
        this.parent = parent;
        this.filterCollection = new Map();
        this.filterRange = new Map();
        this.filterBtn = parent.createElement('div', { className: 'e-filter-btn e-control e-btn e-lib e-filter-iconbtn e-icon-btn' });
        this.filterBtn.appendChild(parent.createElement('span', { className: 'e-btn-icon e-icons e-filter-icon' }));
        this.addEventListener();
    }
    /**
     * To destroy the filter module.
     *
     * @returns {void} - To destroy the filter module.
     */
    Filter.prototype.destroy = function () {
        this.removeEventListener();
        this.filterRange = null;
        this.filterCollection = null;
        this.parent = null;
    };
    Filter.prototype.addEventListener = function () {
        this.parent.on(filterRangeAlert, this.filterRangeAlertHandler, this);
        this.parent.on(initiateFilterUI, this.initiateFilterUIHandler, this);
        this.parent.on(mouseDown, this.filterMouseDownHandler, this);
        this.parent.on(renderFilterCell, this.renderFilterCellHandler, this);
        this.parent.on(beforeFltrcMenuOpen, this.beforeFilterMenuOpenHandler, this);
        this.parent.on(filterCmenuSelect, this.closeDialog, this);
        this.parent.on(reapplyFilter, this.reapplyFilterHandler, this);
        this.parent.on(filterByCellValue, this.filterByCellValueHandler, this);
        this.parent.on(clearFilter, this.clearFilterHandler, this);
        this.parent.on(getFilteredColumn, this.getFilteredColumnHandler, this);
        this.parent.on(cMenuBeforeOpen, this.cMenuBeforeOpenHandler, this);
        this.parent.on(filterCboxValue, this.filterCboxValueHandler, this);
        this.parent.on(getFilterRange, this.getFilterRangeHandler, this);
        this.parent.on(filterCellKeyDown, this.filterCellKeyDownHandler, this);
        this.parent.on(getFilteredCollection, this.getFilteredCollection, this);
        this.parent.on(contentLoaded, this.updateFilter, this);
        this.parent.on(updateFilter, this.updateFilter, this);
        this.parent.on(beforeInsert, this.beforeInsertHandler, this);
        this.parent.on(beforeDelete, this.beforeDeleteHandler, this);
        this.parent.on(sheetsDestroyed, this.deleteSheetHandler, this);
        this.parent.on(clear, this.clearHanlder, this);
        this.parent.on(filterDialogCreated, this.filterDialogCreatedHandler, this);
        this.parent.on(filterDialogClose, this.removeFilterClass, this);
    };
    Filter.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(filterRangeAlert, this.filterRangeAlertHandler);
            this.parent.off(initiateFilterUI, this.initiateFilterUIHandler);
            this.parent.off(mouseDown, this.filterMouseDownHandler);
            this.parent.off(renderFilterCell, this.renderFilterCellHandler);
            this.parent.off(beforeFltrcMenuOpen, this.beforeFilterMenuOpenHandler);
            this.parent.off(filterCmenuSelect, this.closeDialog);
            this.parent.off(reapplyFilter, this.reapplyFilterHandler);
            this.parent.off(filterByCellValue, this.filterByCellValueHandler);
            this.parent.off(clearFilter, this.clearFilterHandler);
            this.parent.off(getFilteredColumn, this.getFilteredColumnHandler);
            this.parent.off(cMenuBeforeOpen, this.cMenuBeforeOpenHandler);
            this.parent.on(filterCboxValue, this.filterCboxValueHandler);
            this.parent.off(getFilterRange, this.getFilterRangeHandler);
            this.parent.off(filterCellKeyDown, this.filterCellKeyDownHandler);
            this.parent.off(getFilteredCollection, this.getFilteredCollection);
            this.parent.off(contentLoaded, this.updateFilter);
            this.parent.off(updateFilter, this.updateFilter);
            this.parent.off(beforeInsert, this.beforeInsertHandler);
            this.parent.off(beforeDelete, this.beforeDeleteHandler);
            this.parent.off(sheetsDestroyed, this.deleteSheetHandler);
            this.parent.off(clear, this.clearHanlder);
            this.parent.off(filterDialogCreated, this.filterDialogCreatedHandler);
            this.parent.off(filterDialogClose, this.removeFilterClass);
        }
    };
    /**
     * Gets the module name.
     *
     * @returns {string} - Gets the module name.
     */
    Filter.prototype.getModuleName = function () {
        return 'filter';
    };
    /**
     * Validates the range and returns false when invalid.
     *
     * @param {SheetModel} sheet - Specify the sheet.
     * @param {string} range - Specify the range.
     * @returns {void} - Validates the range and returns false when invalid.
     */
    Filter.prototype.isInValidFilterRange = function (sheet, range) {
        var selectedRange = range ? getSwapRange(getIndexesFromAddress(range)) :
            getSwapRange(getIndexesFromAddress(sheet.selectedRange));
        return selectedRange[0] > sheet.usedRange.rowIndex || selectedRange[1] > sheet.usedRange.colIndex;
    };
    /**
     * Shows the range error alert dialog.
     *
     * @param {any} args - Specifies the args
     * @param {string} args.error - range error string.
     * @returns {void} - Shows the range error alert dialog.
     */
    Filter.prototype.filterRangeAlertHandler = function (args) {
        var _this = this;
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            content: args.error, isModal: true,
            height: 180, width: 400, showCloseIcon: true,
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'FilterRangeDialog',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
            }
        });
        this.parent.hideSpinner();
    };
    /**
     * Triggers before filter context menu opened and used to add sorting items.
     *
     * @param {any} args - Specifies the args
     * @param {HTMLElement} args.element - Specify the element
     * @returns {void} - Triggers before filter context menu opened and used to add sorting items.
     */
    Filter.prototype.beforeFilterMenuOpenHandler = function (args) {
        var l10n = this.parent.serviceLocator.getService(locale);
        args.element.classList.add('e-spreadsheet-contextmenu'); // to show sort icons
        var ul = args.element.querySelector('ul');
        this.addMenuItem(ul, l10n.getConstant('SortDescending'), 'e-filter-sortdesc', 'e-sort-desc');
        this.addMenuItem(ul, l10n.getConstant('SortAscending'), 'e-filter-sortasc', 'e-sort-asc');
        args.element.appendChild(ul);
    };
    /**
     * Creates new menu item element
     *
     * @param {Element} ul - Specify the element.
     * @param {string} text - Specify the text.
     * @param {string} className - Specify the className
     * @param {string} iconCss - Specify the iconCss
     * @returns {void} - Creates new menu item element
     */
    Filter.prototype.addMenuItem = function (ul, text, className, iconCss) {
        var li = this.parent.createElement('li', { className: className + ' e-menu-item' });
        li.innerHTML = text;
        li.insertBefore(this.parent.createElement('span', { className: 'e-menu-icon e-icons ' + iconCss }), li.firstChild);
        ul.insertBefore(li, ul.firstChild);
    };
    /**
     * Initiates the filter UI for the selected range.
     *
     * @param {any} args - Specifies the args
     * @param {PredicateModel[]} args.predicates - Specify the predicates.
     * @param {number} args.range - Specify the range.
     * @param {Promise<FilterEventArgs>} args.promise - Spefify the promise.
     * @param {number} args.sIdx - Specify the sIdx
     * @param {boolean} args.isCut - Specify the bool value
     * @param {boolean} args.isUndoRedo - Specify the bool value
     * @param {boolean} args.isInternal - Spefify the isInternal.
     * @returns {void} - Initiates the filter UI for the selected range.
     */
    Filter.prototype.initiateFilterUIHandler = function (args) {
        var _this = this;
        var predicates = args ? args.predicates : null;
        var sheetIdx = args.sIdx;
        if (!sheetIdx && sheetIdx !== 0) {
            sheetIdx = this.parent.activeSheetIndex;
        }
        var deferred;
        if (args.promise) {
            deferred = new Deferred();
            args.promise = deferred.promise;
        }
        var resolveFn = function () {
            if (deferred) {
                deferred.resolve();
            }
        };
        var isInternal = args.isInternal || args.isCut;
        if (this.filterRange.size > 0 && this.filterRange.has(sheetIdx) && !this.parent.isOpen && !predicates) { //disable filter
            this.removeFilter(sheetIdx, isInternal, false, args.isUndoRedo);
            resolveFn();
            return;
        }
        var sheet = getSheet(this.parent, sheetIdx);
        if (this.isInValidFilterRange(sheet, args.range)) {
            var l10n = this.parent.serviceLocator.getService(locale);
            this.filterRangeAlertHandler({ error: l10n.getConstant('FilterOutOfRangeError') });
            resolveFn();
            return;
        }
        var selectedRange = args.range || sheet.selectedRange;
        var eventArgs;
        if (!isInternal) {
            eventArgs = { range: selectedRange, cancel: false };
            if (args.predicates) {
                eventArgs.predicates = args.predicates;
                eventArgs.previousPredicates = [].slice.call(this.filterCollection.get(sheetIdx));
            }
            else {
                eventArgs.filterOptions = { predicates: args.predicates };
            }
            this.parent.notify(beginAction, { action: 'filter', eventArgs: eventArgs, preventAction: args.isUndoRedo });
            if (eventArgs.cancel) {
                resolveFn();
                return;
            }
        }
        if (!args.range && (isInternal || selectedRange === eventArgs.range)) {
            var rangeIdx = getRangeIndexes(selectedRange);
            if (rangeIdx[0] === rangeIdx[2] && rangeIdx[1] === rangeIdx[3]) {
                rangeIdx = getDataRange(rangeIdx[0], rangeIdx[1], sheet);
                selectedRange = getRangeAddress(rangeIdx);
                if (!isInternal) {
                    eventArgs.range = selectedRange;
                }
            }
        }
        else if (!isInternal) {
            selectedRange = eventArgs.range;
        }
        if (predicates) {
            if (predicates.length) {
                this.processRange(sheet, sheetIdx, selectedRange, true);
                var range = this.filterRange.get(sheetIdx).slice();
                range[0] = range[0] + 1; // to skip first row.
                range[2] = sheet.usedRange.rowIndex; //filter range should be till used range.
                range[1] = range[3] = getColIndex(predicates[0].field);
                var addr = sheet.name + "!" + this.getPredicateRange(range, predicates.slice(1, predicates.length));
                var fullAddr = getRangeAddress(range);
                getData(this.parent, addr, true, true, null, true, null, null, false, fullAddr).then(function (jsonData) {
                    _this.filterSuccessHandler(new DataManager(jsonData), { action: 'filtering', filterCollection: predicates, field: predicates[0].field, sIdx: args.sIdx, isUndoRedo: args.isUndoRedo || isInternal, isInternal: isInternal, prevPredicates: eventArgs &&
                            eventArgs.previousPredicates });
                    resolveFn();
                });
                return;
            }
            else {
                this.clearFilterHandler();
                resolveFn();
            }
        }
        else {
            this.processRange(sheet, sheetIdx, selectedRange);
            resolveFn();
        }
        if (!isInternal) {
            this.parent.notify(completeAction, { action: 'filter', eventArgs: eventArgs, preventAction: args.isUndoRedo });
        }
    };
    /**
     * Processes the range if no filter applied.
     *
     * @param {SheetModel} sheet - Specify the sheet.
     * @param {number} sheetIdx - Specify the sheet index.
     * @param {string} filterRange - Specify the filterRange.
     * @param {boolean} preventRefresh - To prevent refreshing the filter buttons.
     * @returns {void} - Processes the range if no filter applied.
     */
    Filter.prototype.processRange = function (sheet, sheetIdx, filterRange, preventRefresh) {
        var range = getSwapRange(getIndexesFromAddress(filterRange || sheet.selectedRange));
        if (range[0] === range[2] && range[1] === range[3]) { //if selected range is a single cell
            range[0] = 0;
            range[1] = 0;
            range[2] = sheet.usedRange.rowIndex;
            range[3] = sheet.usedRange.colIndex;
        }
        else if (range[3] > sheet.usedRange.colIndex) {
            range[3] = sheet.usedRange.colIndex;
        }
        this.filterRange.set(sheetIdx, range);
        this.filterCollection.set(sheetIdx, []);
        if (!preventRefresh) {
            this.refreshFilterRange(range, false, sheetIdx);
        }
    };
    /**
     * Removes all the filter related collections for the active sheet.
     *
     * @param {number} sheetIdx - Specify the sheet index.
     * @param {boolean} isCut - Specify the bool value.
     * @param {boolean} preventRefresh - Specify the preventRefresh.
     * @param {boolean} isUndoRedo - Specify the isUndoRedo.
     * @returns {void} - Removes all the filter related collections for the active sheet.
     */
    Filter.prototype.removeFilter = function (sheetIdx, isCut, preventRefresh, isUndoRedo) {
        var range = this.filterRange.get(sheetIdx).slice();
        var rangeAddr = getRangeAddress(range);
        var eventArgs;
        if (!isCut) {
            eventArgs = { range: rangeAddr, cancel: false };
            this.parent.notify(beginAction, { action: 'filter', eventArgs: eventArgs, preventAction: isUndoRedo });
            if (eventArgs.cancel) {
                return;
            }
        }
        if (this.filterCollection.get(sheetIdx).length || preventRefresh) {
            this.clearFilterHandler({ preventRefresh: preventRefresh });
        }
        this.filterRange.delete(sheetIdx);
        this.filterCollection.delete(sheetIdx);
        this.refreshFilterRange(range, true, sheetIdx);
        if (this.parent.filterCollection) {
            var count$$1 = 0;
            var filterColl = void 0;
            for (var i = 0, len = this.parent.filterCollection.length; i < len; i++) {
                filterColl = this.parent.filterCollection[count$$1];
                if (filterColl.sheetIndex === sheetIdx && filterColl.filterRange === rangeAddr) {
                    this.parent.filterCollection.splice(count$$1, 1);
                }
                else {
                    count$$1++;
                }
            }
        }
        if (!isCut) {
            this.parent.notify(completeAction, { action: 'filter', eventArgs: eventArgs, preventAction: isUndoRedo });
        }
    };
    /**
     * Handles filtering cell value based on context menu.
     *
     * @returns {void} - Handles filtering cell value based on context menu.
     */
    Filter.prototype.filterByCellValueHandler = function () {
        var _this = this;
        var sheetIdx = this.parent.activeSheetIndex;
        var sheet = this.parent.getActiveSheet();
        if (this.isInValidFilterRange(sheet)) {
            var l10n = this.parent.serviceLocator.getService(locale);
            this.filterRangeAlertHandler({ error: l10n.getConstant('FilterOutOfRangeError') });
            return;
        }
        var cell = getCellIndexes(sheet.activeCell);
        if (!this.isFilterRange(sheetIdx, cell[0], cell[1])) {
            this.processRange(sheet, sheetIdx);
        }
        var range = this.filterRange.get(sheetIdx).slice();
        range[0] = range[0] + 1; // to skip first row.
        range[2] = sheet.usedRange.rowIndex; //filter range should be till used range.
        range[1] = range[3] = cell[1];
        var field = getColumnHeaderText(cell[1] + 1);
        var type = this.getColumnType(sheet, cell[1] + 1, range);
        var predicates = [{ field: field, operator: 'equal', matchCase: false, type: type,
                value: getCell(cell[0], cell[1], sheet, false, true).value }];
        var addr = sheet.name + "!" + this.getPredicateRange(range, this.filterCollection.get(sheetIdx));
        var fullAddr = getRangeAddress(range);
        getData(this.parent, addr, true, true, null, true, null, null, false, fullAddr).then(function (jsonData) {
            _this.filterSuccessHandler(new DataManager(jsonData), { action: 'filtering', filterCollection: predicates, field: field, isFilterByValue: true });
        });
    };
    /**
     * Creates filter buttons and renders the filter applied cells.
     *
     * @param { any} args - Specifies the args
     * @param { HTMLElement} args.td - specify the element
     * @param { number} args.rowIndex - specify the rowIndex
     * @param { number} args.colIndex - specify the colIndex
     * @param { number} args.sIdx - specify the sIdx
     * @returns {void} - Creates filter buttons and renders the filter applied cells.
     */
    Filter.prototype.renderFilterCellHandler = function (args) {
        var sheetIdx = !isNullOrUndefined(args.sIdx) ? args.sIdx : this.parent.activeSheetIndex;
        if (sheetIdx === this.parent.activeSheetIndex && this.isFilterCell(sheetIdx, args.rowIndex, args.colIndex)) {
            if (!args.td) {
                return;
            }
            var filterButton = args.td.querySelector('.e-filter-icon');
            if (filterButton) {
                filterButton.className = 'e-btn-icon e-icons e-filter-icon' + this.getFilterSortClassName(args.colIndex, sheetIdx);
            }
            else {
                filterButton = this.filterBtn.cloneNode(true);
                filterButton.firstElementChild.className += this.getFilterSortClassName(args.colIndex, sheetIdx);
                args.td.insertBefore(filterButton, args.td.firstChild);
            }
        }
    };
    Filter.prototype.getFilterSortClassName = function (colIdx, sheetIdx) {
        var field = getColumnHeaderText(colIdx + 1);
        var className = '';
        var predicates = this.filterCollection.get(sheetIdx);
        var sortCollection = this.parent.sortCollection;
        for (var i = 0; i < predicates.length; i++) {
            if (predicates[i].field === field) {
                className = ' e-filtered';
                break;
            }
        }
        if (sortCollection) {
            for (var i = 0; i < sortCollection.length; i++) {
                if (sortCollection[i].sheetIndex === sheetIdx && sortCollection[i].columnIndex === colIdx) {
                    className += sortCollection[i].order === 'Ascending' ? ' e-sortasc-filter' : ' e-sortdesc-filter';
                    break;
                }
            }
        }
        return className;
    };
    /**
     * Refreshes the filter header range.
     *
     * @param {number[]} filterRange - Specify the filterRange.
     * @param {boolean} remove - Specify the bool value
     * @param {number} sIdx - Specify the index.
     * @returns {void} - Refreshes the filter header range.
     */
    Filter.prototype.refreshFilterRange = function (filterRange, remove$$1, sIdx) {
        var sheetIdx = sIdx;
        if (!sheetIdx && sheetIdx !== 0) {
            sheetIdx = this.parent.activeSheetIndex;
        }
        if (!filterRange && !this.filterRange.get(sheetIdx)) {
            filterRange = [0, 0, 0, 0];
        }
        var range = filterRange || this.filterRange.get(sheetIdx).slice();
        for (var index = range[1]; index <= range[3]; index++) {
            var cell = this.parent.getCell(range[0], index);
            if (remove$$1) {
                if (cell && cell.hasChildNodes()) {
                    var element = cell.querySelector('.e-filter-btn');
                    if (element) {
                        element.parentElement.removeChild(element);
                    }
                }
            }
            else {
                this.renderFilterCellHandler({ td: cell, rowIndex: range[0], colIndex: index, sIdx: sheetIdx });
            }
        }
        if (this.parent.sortCollection) {
            this.parent.notify(sortImport, null);
        }
    };
    /**
     * Checks whether the provided cell is a filter cell.
     *
     * @param {number} sheetIdx - Specify the sheet index.
     * @param {number} rowIndex - Specify the row index
     * @param {number} colIndex - Specify the col index.
     * @returns {boolean} - Checks whether the provided cell is a filter cell.
     */
    Filter.prototype.isFilterCell = function (sheetIdx, rowIndex, colIndex) {
        var range = this.filterRange.get(sheetIdx);
        return (range && range[0] === rowIndex && range[1] <= colIndex && range[3] >= colIndex);
    };
    /**
     * Checks whether the provided cell is in a filter range
     *
     * @param {number} sheetIdx - Specify the sheet index.
     * @param {number} rowIndex - Specify the row index
     * @param {number} colIndex - Specify the col index.
     * @returns {boolean} - Checks whether the provided cell is in a filter range
     */
    Filter.prototype.isFilterRange = function (sheetIdx, rowIndex, colIndex) {
        var range = this.filterRange.get(sheetIdx);
        return (range && range[0] <= rowIndex && range[2] >= rowIndex && range[1] <= colIndex && range[3] >= colIndex);
    };
    /**
     * Gets the filter information from active cell
     *
     * @param {any} args - Specifies the args
     * @param {string} args.field - Specify the field
     * @param {string} args.clearFilterText - Specify the clearFilterText
     * @param {boolean} args.isFiltered - Specify the isFiltered
     * @param {boolean} args.isClearAll - Specify the isClearAll
     * @returns {void} - Triggers before context menu created to enable or disable items.
     */
    Filter.prototype.getFilteredColumnHandler = function (args) {
        var sheetIdx = this.parent.activeSheetIndex;
        var l10n = this.parent.serviceLocator.getService(locale);
        args.clearFilterText = l10n.getConstant('ClearFilter');
        if (this.filterRange.has(sheetIdx)) {
            var filterCollection = this.filterCollection.get(sheetIdx);
            if (args.isClearAll) {
                args.isFiltered = filterCollection && filterCollection.length > 0;
                return;
            }
            var range = this.filterRange.get(sheetIdx).slice();
            var sheet = this.parent.getActiveSheet();
            var cell = getCellIndexes(sheet.activeCell);
            if (this.isFilterRange(sheetIdx, cell[0], cell[1])) {
                args.field = getColumnHeaderText(cell[1] + 1);
                var headerCell = getCell(range[0], cell[1], sheet);
                var cellValue = this.parent.getDisplayText(headerCell);
                args.clearFilterText = l10n.getConstant('ClearFilterFrom') + '\"'
                    + (cellValue ? cellValue.toString() : 'Column ' + args.field) + '\"';
                filterCollection.some(function (value) {
                    args.isFiltered = value.field === args.field;
                    return args.isFiltered;
                });
            }
        }
    };
    /**
     * Triggers before context menu created to enable or disable items.
     *
     * @param {any} e - Specifies the args
     * @param {HTMLElement} e.element - Specify the element
     * @param {MenuItemModel[]} e.items - Specify the items
     * @param {MenuItemModel} e.parentItem - Specify the parentItem
     * @param {string} e.target - Specify the target
     * @returns {void} - Triggers before context menu created to enable or disable items.
     */
    Filter.prototype.cMenuBeforeOpenHandler = function (e) {
        var id = this.parent.element.id + '_cmenu';
        if (e.parentItem && e.parentItem.id === id + '_filter' && e.target === '') {
            var args = { isFiltered: false };
            this.getFilteredColumnHandler(args);
            this.parent.enableContextMenuItems([id + '_clearfilter', id + '_reapplyfilter'], !!args.isFiltered, true);
        }
    };
    /**
     * Closes the filter popup.
     *
     * @returns {void} - Closes the filter popup.
     */
    Filter.prototype.closeDialog = function () {
        var filterPopup = document.querySelector('.e-filter-popup');
        if (filterPopup && filterPopup.id.includes(this.parent.element.id)) {
            var excelFilter = getComponent(filterPopup, 'dialog');
            EventHandler.remove(filterPopup, getStartEvent(), this.filterMouseDownHandler);
            if (excelFilter) {
                excelFilter.hide();
            }
            this.removeFilterClass();
        }
    };
    Filter.prototype.removeFilterClass = function () {
        if (this.parent.element.style.position === 'relative') {
            this.parent.element.style.position = '';
        }
        if (this.parent.element.classList.contains('e-filter-open')) {
            this.parent.element.classList.remove('e-filter-open');
        }
    };
    /**
     * Returns true if the filter popup is opened.
     *
     * @returns {boolean} - Returns true if the filter popup is opened.
     */
    Filter.prototype.isPopupOpened = function () {
        var filterPopup = document.querySelector('.e-filter-popup');
        return filterPopup && filterPopup.id.includes(this.parent.element.id) && filterPopup.style.display !== 'none';
    };
    Filter.prototype.filterCellKeyDownHandler = function (args) {
        var sheetIdx = this.parent.activeSheetIndex;
        var sheet = this.parent.getActiveSheet();
        var indexes = getCellIndexes(sheet.activeCell);
        if (this.isFilterCell(sheetIdx, indexes[0], indexes[1])) {
            args.isFilterCell = true;
            var pos = getCellPosition(sheet, indexes);
            var target = this.parent.getCell(indexes[0], indexes[1]);
            if (this.isPopupOpened()) {
                this.closeDialog();
            }
            this.openDialog(target, pos.left, target ? target.getBoundingClientRect().bottom : pos.top);
        }
        else {
            args.isFilterCell = false;
        }
    };
    /**
     * Opens the filter popup dialog on filter button click.
     *
     * @param {MouseEvent | TouchEvent} e - Specify the event
     * @returns {void} - Opens the filter popup dialog on filter button click.
     */
    Filter.prototype.filterMouseDownHandler = function (e) {
        if ((Browser.isDevice && e.type === 'mousedown') || this.parent.getActiveSheet().isProtected) {
            return;
        }
        var target = e.target;
        if (target.classList.contains('e-filter-icon')) {
            if (this.isPopupOpened()) {
                this.closeDialog();
                return;
            }
            this.openDialog(target, e.x, target.getBoundingClientRect().bottom);
        }
        else if (this.isPopupOpened()) {
            if (!target.classList.contains('e-searchinput') && !target.classList.contains('e-searchclear')
                && (target.offsetParent && !target.offsetParent.classList.contains('e-filter-popup'))) {
                this.closeDialog();
            }
            else {
                this.selectSortItemHandler(target);
            }
        }
    };
    /**
     * Opens the excel filter dialog based on target.
     *
     * @param {HTMLElement} target - Specify the target
     * @param {number} xPos - Specify the xPos
     * @param {number} yPos - Specify the yPos
     * @returns {void} - Opens the excel filter dialog based on target.
     */
    Filter.prototype.openDialog = function (target, xPos, yPos) {
        var _this = this;
        var cell = parentsUntil(target, 'e-cell');
        var colIndex = parseInt(cell.getAttribute('aria-colindex'), 10);
        var field = getColumnHeaderText(colIndex);
        //Update datasource dynamically
        this.parent.showSpinner();
        var sheetIdx = this.parent.activeSheetIndex;
        var range = this.filterRange.get(sheetIdx).slice();
        var sheet = this.parent.getActiveSheet();
        var filterCell = getCell(range[0], colIndex - 1, sheet);
        var displayName = this.parent.getDisplayText(filterCell);
        range[0] = range[0] + 1; // to skip first row.
        range[2] = sheet.usedRange.rowIndex; //filter range should be till used range.
        var fullRange = [range[0], colIndex - 1, range[2], colIndex - 1];
        var addr = sheet.name + "!" + this.getPredicateRange(fullRange, this.filterCollection.get(sheetIdx));
        var fullAddr = getRangeAddress(fullRange);
        getData(this.parent, addr, true, true, null, true, null, null, false, fullAddr).then(function (jsonData) {
            //to avoid undefined array data
            var checkBoxData;
            jsonData.some(function (value, index) {
                if (value) {
                    checkBoxData = new DataManager(jsonData.slice(index));
                }
                return !!value;
            });
            var offset = _this.parent.element.getBoundingClientRect();
            xPos -= offset.left;
            yPos -= offset.top;
            _this.parent.element.style.position = 'relative';
            _this.parent.element.classList.add('e-filter-open');
            var type = _this.getColumnType(sheet, colIndex, range);
            var options = {
                type: type, field: field, format: (type === 'date' ? _this.getDateFormatFromColumn(sheet, colIndex, range) : null), displayName: displayName || 'Column ' + field,
                dataSource: checkBoxData, height: _this.parent.element.classList.contains('e-bigger') ? 800 : 500, columns: [],
                hideSearchbox: false, filteredColumns: _this.filterCollection.get(sheetIdx), column: { 'field': field, 'filter': {} },
                handler: _this.filterSuccessHandler.bind(_this, new DataManager(jsonData)), target: target,
                position: { X: xPos, Y: yPos }, localeObj: _this.parent.serviceLocator.getService(locale)
            };
            var excelFilter = new ExcelFilterBase(_this.parent, _this.getLocalizedCustomOperators());
            excelFilter.openDialog(options);
            var filterPopup = document.querySelector('.e-filter-popup');
            var gClient = _this.parent.element.getBoundingClientRect();
            var fClient = target.getBoundingClientRect();
            if (filterPopup) {
                var leftPos = fClient.right - filterPopup.offsetWidth;
                if (leftPos < 1) {
                    filterPopup.style.left = ((leftPos + filterPopup.offsetWidth) - gClient.left).toString() + 'px';
                }
                else {
                    filterPopup.style.left = (leftPos - gClient.left).toString() + 'px';
                }
            }
            if (filterPopup && filterPopup.id.includes(_this.parent.element.id)) {
                EventHandler.add(filterPopup, getStartEvent(), _this.filterMouseDownHandler, _this);
                filterPopup.style.top = '0px';
                filterPopup.style.visibility = 'hidden';
                if (filterPopup.classList.contains('e-hide')) {
                    filterPopup.classList.remove('e-hide');
                }
                var height = filterPopup.getBoundingClientRect().height;
                if (height < 400) {
                    height = 400;
                }
                var popupOpenArea = offset.height - yPos;
                filterPopup.style.top = (height > popupOpenArea ? (yPos - Math.abs(height - popupOpenArea)) : yPos) + 'px';
                filterPopup.style.visibility = '';
            }
            _this.parent.hideSpinner();
        });
    };
    Filter.prototype.getPredicateRange = function (range, predicates) {
        var addr = getRangeAddress(range);
        if (predicates && predicates.length) {
            var predicateRange_1;
            var colIdx_1;
            predicates.forEach(function (predicate) {
                if (predicate.field) {
                    predicateRange_1 = "" + predicate.field + (range[0] + 1) + ":" + predicate.field + (range[2] + 1);
                    if (!addr.includes(predicateRange_1)) {
                        addr += "," + predicateRange_1;
                        colIdx_1 = getColIndex(predicate.field);
                        if (colIdx_1 < range[1]) {
                            range[1] = colIdx_1;
                        }
                        if (colIdx_1 > range[3]) {
                            range[3] = colIdx_1;
                        }
                    }
                }
            });
        }
        return addr;
    };
    Filter.prototype.filterDialogCreatedHandler = function () {
        var filterPopup = document.querySelector('.e-filter-popup');
        if (filterPopup && filterPopup.id.includes(this.parent.element.id) && filterPopup.classList.contains('e-popup-close')) {
            filterPopup.classList.add('e-hide');
        }
    };
    /**
     * Formats cell value for listing it in filter popup.
     *
     * @param {any} args - Specifies the args
     * @param {string | number} args.value - Specify the value
     * @param {object} args.column - Specify the column
     * @param {object} args.data - Specify the data
     * @returns {void} - Formats cell value for listing it in filter popup.
     */
    Filter.prototype.filterCboxValueHandler = function (args) {
        if (args.column && args.data) {
            var fieldKey = 'field';
            var field = args.column[fieldKey];
            var dataKey = 'dataObj';
            var rowKey = '__rowIndex';
            if (args.value) {
                var indexes = getCellIndexes(field + args.data[dataKey][rowKey]);
                var cell = getCell(indexes[0], indexes[1], this.parent.getActiveSheet());
                if (cell && cell.format) {
                    args.value = this.parent.getDisplayText(cell);
                }
            }
        }
    };
    /**
     * Triggers when sorting items are chosen on context menu of filter popup.
     *
     * @param {HTMLElement} target - Specify the element.
     * @returns {void} - Triggers when sorting items are chosen on context menu of filter popup.
     */
    Filter.prototype.selectSortItemHandler = function (target) {
        var sortOrder = target.classList.contains('e-filter-sortasc') ? 'Ascending'
            : target.classList.contains('e-filter-sortdesc') ? 'Descending' : null;
        if (!sortOrder) {
            return;
        }
        var sheet = this.parent.getActiveSheet();
        var sheetIdx = this.parent.activeSheetIndex;
        var range = this.filterRange.get(sheetIdx).slice();
        range[0] = range[0] + 1; // to skip first row.
        range[2] = sheet.usedRange.rowIndex; //filter range should be till used range.
        this.parent.sortCollection = this.parent.sortCollection ? this.parent.sortCollection : [];
        var prevSort;
        for (var i = 0; i < this.parent.sortCollection.length; i++) {
            if (this.parent.sortCollection[i] && this.parent.sortCollection[i].sheetIndex === sheetIdx) {
                prevSort = this.parent.sortCollection[i];
                this.parent.sortCollection.splice(i, 1);
            }
        }
        this.parent.sortCollection.push({ sortRange: getRangeAddress(range), columnIndex: getIndexesFromAddress(sheet.activeCell)[1], order: sortOrder,
            sheetIndex: sheetIdx });
        if (!prevSort) {
            prevSort = { order: '' };
        }
        this.parent.notify(applySort, { sortOptions: { sortDescriptors: { order: sortOrder } }, previousSort: prevSort, range: getRangeAddress(range) });
        this.refreshFilterRange();
        this.closeDialog();
    };
    /**
     * Triggers when OK button or clear filter item is selected
     *
     * @param {DataManager} dataSource - Specify the data source
     * @param {Object} args - Specify the data source
     * @param {string} args.action - Specify the action
     * @param {PredicateModel[]} args.filterCollection - Specify the filter collection.
     * @param {string} args.field - Specify the field.
     * @param {number} args.sIdx - Specify the index.
     * @param {boolean} args.isUndoRedo - Specify the bool.
     * @param {boolean} args.isInternal - Specify the isInternal.
     * @param {boolean} args.isFilterByValue - Specify the isFilterByValue.
     * @param {PredicateModel[]} args.prevPredicates - Specify the prevPredicates.
     * @returns {void} - Triggers when OK button or clear filter item is selected
     */
    Filter.prototype.filterSuccessHandler = function (dataSource, args) {
        var sheetIdx = args.sIdx;
        if (!sheetIdx && sheetIdx !== 0) {
            sheetIdx = this.parent.activeSheetIndex;
        }
        var prevPredicates = args.prevPredicates || [].slice.call(this.filterCollection.get(sheetIdx));
        if (args.isFilterByValue && !prevPredicates.length) {
            prevPredicates = undefined;
        }
        var predicates = this.filterCollection.get(sheetIdx);
        var dataManager = new DataManager(predicates);
        var query = new Query();
        var fields = dataManager.executeLocal(query.where('field', 'equal', args.field));
        for (var index = 0; index < fields.length; index++) {
            var sameIndex = -1;
            for (var filterIndex = 0; filterIndex < predicates.length; filterIndex++) {
                if (predicates[filterIndex].field === fields[index].field) {
                    sameIndex = filterIndex;
                    break;
                }
            }
            if (sameIndex !== -1) {
                predicates.splice(sameIndex, 1);
            }
        }
        if (args.action === 'filtering') {
            predicates = predicates.concat(args.filterCollection);
            if (predicates.length) {
                for (var i = 0; i < predicates.length; i++) {
                    args.field = predicates[i].field;
                }
            }
        }
        this.filterCollection.set(sheetIdx, predicates);
        var filterOptions = {
            datasource: dataSource,
            predicates: this.getPredicates(sheetIdx)
        };
        this.filterRange.get(sheetIdx)[2] = getSheet(this.parent, sheetIdx).usedRange.rowIndex; //extend the range if filtered
        this.applyFilter(filterOptions, getRangeAddress(this.filterRange.get(sheetIdx)), sheetIdx, prevPredicates, args.isUndoRedo, false, args.isInternal);
    };
    /**
     * Triggers events for filtering and applies filter.
     *
     * @param {FilterOptions} filterOptions - Specify the filteroptions.
     * @param {string} range - Specify the range.
     * @param {number} sheetIdx - Specify the sheet index.
     * @param {PredicateModel[]} prevPredicates - Specify the predicates.
     * @param {boolean} isUndoRedo - Specify the undo redo.
     * @param {boolean} refresh - Spefify the refresh.
     * @param {boolean} isInternal - Specify the isInternal.
     * @returns {void} - Triggers events for filtering and applies filter.
     */
    Filter.prototype.applyFilter = function (filterOptions, range, sheetIdx, prevPredicates, isUndoRedo, refresh, isInternal) {
        var _this = this;
        var eventArgs = { range: range, predicates: [].slice.call(this.filterCollection.get(sheetIdx)), previousPredicates: prevPredicates, cancel: false };
        if (!isUndoRedo) {
            this.parent.notify(beginAction, { action: 'filter', eventArgs: eventArgs });
            if (eventArgs.cancel) {
                return;
            }
        }
        if (range.indexOf('!') < 0) {
            range = this.parent.sheets[sheetIdx].name + '!' + range;
        }
        this.parent.showSpinner();
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var promise = new Promise(function (resolve, reject) { resolve((function () { })()); });
        var filterArgs = { args: { range: range,
                filterOptions: filterOptions }, promise: promise, refresh: refresh };
        this.parent.notify(initiateFilter, filterArgs);
        filterArgs.promise.then(function (args) {
            _this.refreshFilterRange();
            _this.parent.notify(getFilteredCollection, null);
            _this.parent.hideSpinner();
            if (!isInternal) {
                delete eventArgs.cancel;
                _this.parent.notify(completeAction, { action: 'filter', eventArgs: eventArgs, preventAction: isUndoRedo });
            }
            return Promise.resolve(args);
        }).catch(function (error) {
            _this.filterRangeAlertHandler({ error: error });
            return Promise.reject(error);
        });
    };
    /**
     * Gets the predicates for the sheet
     *
     * @param {number} sheetIdx - Specify the sheetindex
     * @returns {Predicate[]} - Gets the predicates for the sheet
     */
    Filter.prototype.getPredicates = function (sheetIdx) {
        var predicateList = [];
        var excelPredicate = CheckBoxFilterBase.getPredicate(this.filterCollection.get(sheetIdx));
        for (var _i = 0, _a = Object.keys(excelPredicate); _i < _a.length; _i++) {
            var prop = _a[_i];
            predicateList.push(excelPredicate[prop]);
        }
        return predicateList;
    };
    /**
     * Gets the column type to pass it into the excel filter options.
     *
     * @param {SheetModel} sheet - Specify the sheet.
     * @param {number} colIndex - Specify the colindex
     * @param {number[]} range - Specify the range.
     * @returns {string} - Gets the column type to pass it into the excel filter options.
     */
    Filter.prototype.getColumnType = function (sheet, colIndex, range) {
        var num = 0;
        var str = 0;
        var date = 0;
        var time = 0;
        for (var i = range[0]; i <= sheet.usedRange.rowIndex; i++) {
            var cell = getCell(i, colIndex - 1, sheet);
            if (cell) {
                if (cell.format) {
                    var type = getTypeFromFormat(cell.format).toLowerCase();
                    switch (type) {
                        case 'number':
                        case 'currency':
                        case 'accounting':
                        case 'percentage':
                            num++;
                            break;
                        case 'shortdate':
                        case 'longdate':
                            date++;
                            break;
                        case 'time':
                            num++;
                            break;
                        default:
                            str++;
                            break;
                    }
                }
                else {
                    if (typeof cell.value === 'string' || cell.value === undefined || cell.value === null) {
                        str++;
                    }
                    else {
                        num++;
                    }
                }
            }
            else {
                str++;
            }
        }
        return (num > str && num > date && num > time) ? 'number' : (str > num && str > date && str > time) ? 'string'
            : (date > num && date > str && date > time) ? 'date' : 'datetime';
    };
    Filter.prototype.getDateFormatFromColumn = function (sheet, colIndex, range) {
        var format;
        for (var i = range[0]; i <= range[2]; i++) {
            var cell = getCell(i, colIndex - 1, sheet);
            if (cell && cell.format) {
                format = cell.format;
                break;
            }
        }
        return format;
    };
    /**
     * Clear filter from the field.
     *
     * @param {any} args - Specifies the args
     * @param {{ field: string }} args.field - Specify the args
     * @param {boolean} args.isAction - Specify the isAction.
     * @param {boolean} args.preventRefresh - Specify the preventRefresh.
     * @returns {void} - Clear filter from the field.
     */
    Filter.prototype.clearFilterHandler = function (args) {
        if (args && args.field) {
            this.filterSuccessHandler(null, { action: 'clear-filter', filterCollection: [], field: args.field });
        }
        else {
            var isAction = args && args.isAction;
            var filterArgs = { isFiltered: false, isClearAll: true };
            this.getFilteredColumnHandler(filterArgs);
            if (filterArgs.isFiltered || (args && args.preventRefresh)) {
                var eventArgs = void 0;
                var sheet = this.parent.getActiveSheet();
                var range = this.filterRange.get(this.parent.activeSheetIndex);
                if (isAction) {
                    eventArgs = { range: getRangeAddress(range), predicates: [], previousPredicates: this.filterCollection.get(this.parent.activeSheetIndex), cancel: false };
                    this.parent.notify(beginAction, { action: 'filter', eventArgs: eventArgs });
                    if (eventArgs.cancel) {
                        return;
                    }
                }
                this.filterCollection.set(this.parent.activeSheetIndex, []);
                var filterColl = this.parent.filterCollection;
                for (var i = 0, len = filterColl && filterColl.length; i < len; i++) {
                    if (filterColl[i].sheetIndex === this.parent.activeSheetIndex) {
                        filterColl.splice(i, 1);
                        break;
                    }
                }
                if ((this.parent.scrollSettings.enableVirtualization && ((sheet.usedRange.rowIndex - range[0]) + 1 >
                    this.parent.viewport.rowCount + (this.parent.getThreshold('row') * 2))) || sheet.frozenColumns || sheet.frozenRows) {
                    for (var i = 0, len = sheet.usedRange.rowIndex; i <= len; i++) {
                        setRow(sheet, i, { hidden: false, isFiltered: false });
                    }
                    if (!args || !args.preventRefresh) {
                        this.parent.renderModule.refreshSheet(false, true, true);
                    }
                }
                else {
                    this.refreshFilterRange();
                    this.parent.notify(hideShow, { startIndex: range[0], endIndex: sheet.usedRange.rowIndex, hide: false, isFiltering: true });
                }
                if (isAction) {
                    delete eventArgs.cancel;
                    this.parent.notify(completeAction, { action: 'filter', eventArgs: eventArgs });
                }
            }
        }
    };
    /**
     * Reapplies the filter.
     *
     * @param {boolean} isInternal - Specifies the isInternal.
     * @param {boolean} refresh - Specifies the refresh.
     * @returns {void} - Reapplies the filter.
     */
    Filter.prototype.reapplyFilterHandler = function (isInternal, refresh) {
        var _this = this;
        var sheetIdx = this.parent.activeSheetIndex;
        if (this.filterRange.has(sheetIdx)) {
            var predicates_1 = this.filterCollection.get(sheetIdx);
            if (predicates_1 && predicates_1.length) {
                var sheet = getSheet(this.parent, sheetIdx);
                var range = this.filterRange.get(sheetIdx).slice();
                range[0] = range[0] + 1;
                range[2] = sheet.usedRange.rowIndex;
                range[1] = range[3] = getColIndex(predicates_1[0].field);
                var addr = sheet.name + "!" + this.getPredicateRange(range, predicates_1.slice(1, predicates_1.length));
                getData(this.parent, addr, true, true, null, true, null, null, false, getRangeAddress(range)).then(function (jsonData) {
                    var predicate = _this.getPredicates(sheetIdx);
                    _this.applyFilter({ predicates: predicate, datasource: new DataManager(jsonData) }, getRangeAddress(_this.filterRange.get(sheetIdx)), sheetIdx, [].slice.call(predicates_1), isInternal, refresh);
                });
            }
        }
    };
    /**
     * Gets the filter information of the sheet.
     *
     * @param {FilterInfoArgs} args - Specify the args
     * @returns {void} - Gets the filter information of the sheet.
     */
    Filter.prototype.getFilterRangeHandler = function (args) {
        var sheetIdx = args.sheetIdx;
        if (this.filterRange && this.filterRange.has(sheetIdx)) {
            args.hasFilter = true;
            args.filterRange = this.filterRange.get(sheetIdx);
        }
        else {
            args.hasFilter = false;
            args.filterRange = null;
        }
    };
    /**
     * Returns the custom operators for filter items.
     *
     * @returns {Object} - Returns the custom operators for filter items.
     */
    Filter.prototype.getLocalizedCustomOperators = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var numOptr = [
            { value: 'equal', text: l10n.getConstant('Equal') },
            { value: 'greaterthan', text: l10n.getConstant('GreaterThan') },
            { value: 'greaterthanorequal', text: l10n.getConstant('GreaterThanOrEqual') },
            { value: 'lessthan', text: l10n.getConstant('LessThan') },
            { value: 'lessthanorequal', text: l10n.getConstant('LessThanOrEqual') },
            { value: 'notequal', text: l10n.getConstant('NotEqual') }
        ];
        var customOperators = {
            stringOperator: [
                { value: 'startswith', text: l10n.getConstant('StartsWith') },
                { value: 'endswith', text: l10n.getConstant('EndsWith') },
                { value: 'contains', text: l10n.getConstant('Contains') },
                { value: 'equal', text: l10n.getConstant('Equal') },
                { value: 'notequal', text: l10n.getConstant('NotEqual') }
            ],
            numberOperator: numOptr,
            dateOperator: numOptr,
            datetimeOperator: numOptr,
            booleanOperator: [
                { value: 'equal', text: l10n.getConstant('Equal') },
                { value: 'notequal', text: l10n.getConstant('NotEqual') }
            ]
        };
        return customOperators;
    };
    /**
     * To get filtered range and predicates collections
     *
     * @returns {void} - To get filtered range and predicates collections
     */
    Filter.prototype.getFilteredCollection = function () {
        var sheetLen = this.parent.sheets.length;
        var col = [];
        var fil;
        for (var i = 0; i < sheetLen; i++) {
            var range = void 0;
            var hasFilter = void 0;
            var args = { sheetIdx: i, filterRange: range, hasFilter: hasFilter };
            this.getFilterRangeHandler(args);
            if (args.hasFilter) {
                var colCollection = [];
                var condition = [];
                var value = [];
                var type = [];
                var predi = [];
                var predicate = this.filterCollection.get(args.sheetIdx);
                for (var i_1 = 0; i_1 < predicate.length; i_1++) {
                    if (predicate[i_1].field && predicate[i_1].operator) {
                        var colIdx = getCellIndexes(predicate[i_1].field + '1')[1];
                        colCollection.push(colIdx);
                        condition.push(predicate[i_1].operator);
                        value.push(isNullOrUndefined(predicate[i_1].value) ? '' : predicate[i_1].value);
                        type.push(predicate[i_1].type);
                        predi.push(predicate[i_1].predicate);
                    }
                }
                var address = getRangeAddress(args.filterRange);
                fil = {
                    sheetIndex: args.sheetIdx, filterRange: address, hasFilter: args.hasFilter, column: colCollection,
                    criteria: condition, value: value, dataType: type, predicates: predi
                };
                col.push(fil);
            }
        }
        if (fil) {
            this.parent.filterCollection = col;
        }
    };
    Filter.prototype.updateFilter = function (args) {
        if (this.parent.filterCollection && (args.initLoad || args.isOpen)) {
            for (var i = 0; i < this.parent.filterCollection.length; i++) {
                var filterCol = this.parent.filterCollection[i];
                var sIdx = filterCol.sheetIndex;
                if (i === 0 && !this.parent.isOpen && !args.isOpen) {
                    sIdx = 0;
                }
                var predicates = [];
                if (filterCol.column) {
                    for (var j = 0; j < filterCol.column.length; j++) {
                        var predicateCol = {
                            field: getCellAddress(0, filterCol.column[j]).charAt(0),
                            operator: this.getFilterOperator(filterCol.criteria[j]), value: filterCol.value[j].toString().split('*').join(''),
                            predicate: filterCol.predicates && filterCol.predicates[j],
                            type: filterCol.dataType && filterCol.dataType[j]
                        };
                        predicates.push(predicateCol);
                    }
                }
                for (var i_2 = 0; i_2 < predicates.length - 1; i_2++) {
                    if (predicates[i_2].field === predicates[i_2 + 1].field) {
                        if (!predicates[i_2].predicate) {
                            predicates[i_2].predicate = 'or';
                        }
                        if (!predicates[i_2 + 1].predicate) {
                            predicates[i_2 + 1].predicate = 'or';
                        }
                    }
                }
                this.parent.notify(initiateFilterUI, { predicates: predicates !== [] ? predicates : null, range: filterCol.filterRange, sIdx: sIdx, isCut: true });
            }
            if (this.parent.sortCollection) {
                this.parent.notify(sortImport, null);
            }
        }
    };
    Filter.prototype.getFilterOperator = function (value) {
        switch (value) {
            case 'BeginsWith':
                value = 'startswith';
                break;
            case 'Less':
                value = 'lessthan';
                break;
            case 'EndsWith':
                value = 'endswith';
                break;
            case 'Equal':
                value = 'equal';
                break;
            case 'Notequal':
                value = 'notEqual';
                break;
            case 'Greater':
                value = 'greaterthan';
                break;
            case 'Contains':
                value = 'contains';
                break;
            case 'LessOrEqual':
                value = 'lessthanorequal';
                break;
            case 'GreaterOrEqual':
                value = 'greaterthanorequal';
                break;
        }
        return value;
    };
    Filter.prototype.beforeInsertHandler = function (args) {
        if (args.modelType === 'Column') {
            var sheetIdx_1 = isUndefined(args.activeSheetIndex) ? this.parent.activeSheetIndex : args.activeSheetIndex;
            if (this.filterRange.size && this.filterRange.has(sheetIdx_1)) {
                var range = this.filterRange.get(sheetIdx_1);
                if (this.isFilterCell(sheetIdx_1, range[0], args.index) || args.index < range[1]) {
                    range[3] += args.model.length;
                    if (args.index <= range[1]) {
                        range[1] += args.model.length;
                    }
                    this.filterCollection.get(sheetIdx_1).forEach(function (predicate) {
                        var colIdx = getColIndex(predicate.field);
                        if (args.index <= colIdx) {
                            predicate.field = getColumnHeaderText(colIdx + args.model.length + 1);
                        }
                    });
                    if (this.parent.sortCollection) {
                        this.parent.sortCollection.forEach(function (sortCollection) {
                            if (sortCollection.sheetIndex === sheetIdx_1 && args.index <= sortCollection.columnIndex) {
                                sortCollection.columnIndex += args.model.length;
                            }
                        });
                    }
                    this.getFilteredCollection();
                }
            }
        }
        else if (args.modelType === 'Sheet') {
            var isChanged = false;
            for (var _i = 0, _a = Array.from(this.filterRange.keys()).sort().reverse(); _i < _a.length; _i++) {
                var key = _a[_i];
                if (args.index <= key) {
                    isChanged = true;
                    this.filterRange.set(key + args.model.length, this.filterRange.get(key));
                    this.filterRange.delete(key);
                    this.filterCollection.set(key + args.model.length, this.filterCollection.get(key));
                    this.filterCollection.delete(key);
                }
            }
            if (this.parent.sortCollection) {
                this.parent.sortCollection.forEach(function (sortCollection) {
                    if (args.index <= sortCollection.sheetIndex) {
                        sortCollection.sheetIndex += args.model.length;
                    }
                });
            }
            if (isChanged) {
                this.getFilteredCollection();
            }
        }
    };
    Filter.prototype.beforeDeleteHandler = function (args) {
        if (args.modelType === 'Column') {
            var sheetIdx = this.parent.activeSheetIndex;
            if (this.filterRange.size && this.filterRange.has(sheetIdx)) {
                var isChanged = true;
                var range = this.filterRange.get(sheetIdx);
                if (args.start >= range[1] && args.end <= range[3]) { // in between
                    range[3] -= args.end - args.start + 1;
                }
                else if (args.start < range[1] && args.end < range[1]) { // before
                    range[1] -= args.end - args.start + 1;
                    range[3] -= args.end - args.start + 1;
                }
                else if (args.start < range[1] && args.end > range[1] && args.end < range[3]) { // from before to inbetween
                    range[1] = args.start;
                    range[3] -= args.end - args.start + 1;
                }
                else {
                    isChanged = false;
                }
                if (isChanged) {
                    var filterCollection = this.filterCollection.get(sheetIdx);
                    var isPredicateRemoved = void 0;
                    for (var i = filterCollection.length - 1; i >= 0; i--) {
                        var colIdx = getColIndex(filterCollection[i].field);
                        if (args.end < colIdx) {
                            filterCollection[i].field = getColumnHeaderText(colIdx - (args.end - args.start + 1) + 1);
                        }
                        else if (args.start <= colIdx && args.end >= colIdx) {
                            isPredicateRemoved = true;
                            filterCollection.splice(i, 1);
                        }
                    }
                    var sortColl = this.parent.sortCollection;
                    if (sortColl) {
                        for (var i = 0; i < sortColl.length; i++) {
                            if (sortColl[i].sheetIndex === sheetIdx) {
                                if (args.end < sortColl[i].columnIndex) {
                                    sortColl[i].columnIndex = sortColl[i].columnIndex - (args.end - args.start + 1);
                                    break;
                                }
                                else if (args.start <= sortColl[i].columnIndex && args.end >= sortColl[i].columnIndex) {
                                    sortColl.splice(i, 1);
                                    break;
                                }
                            }
                        }
                    }
                    if (range.some(function (value) { return value < 0; })) {
                        this.removeFilter(sheetIdx, true, true);
                        args.refreshSheet = true;
                    }
                    else if (isPredicateRemoved) {
                        if (filterCollection && filterCollection.length) {
                            this.reapplyFilterHandler(true, true);
                            args.refreshSheet = false;
                        }
                        else {
                            this.clearFilterHandler({ preventRefresh: true });
                            args.refreshSheet = true;
                        }
                    }
                    this.getFilteredCollection();
                }
            }
        }
    };
    Filter.prototype.deleteSheetHandler = function (args) {
        if (!isUndefined(args.sheetIndex)) {
            var isChanged = void 0;
            for (var _i = 0, _a = Array.from(this.filterRange.keys()).sort().reverse(); _i < _a.length; _i++) {
                var key = _a[_i];
                isChanged = true;
                if (args.sheetIndex === key) {
                    this.filterRange.delete(key);
                    this.filterCollection.delete(key);
                }
                else if (args.sheetIndex < key) {
                    this.filterRange.set(key - 1, this.filterRange.get(key));
                    this.filterRange.delete(key);
                    this.filterCollection.set(key - 1, this.filterCollection.get(key));
                    this.filterCollection.delete(key);
                }
                else {
                    isChanged = false;
                }
            }
            var sortColl = this.parent.sortCollection;
            if (sortColl) {
                for (var i = sortColl.length - 1; i >= 0; i--) {
                    if (args.sheetIndex === sortColl[i].sheetIndex) {
                        sortColl.splice(i, 1);
                    }
                    else if (args.sheetIndex < sortColl[i].sheetIndex) {
                        sortColl[i].sheetIndex -= 1;
                    }
                }
            }
            if (isChanged) {
                this.getFilteredCollection();
            }
        }
    };
    Filter.prototype.clearHanlder = function (args) {
        var info = this.parent.getAddressInfo(args.range);
        if (this.filterRange.has(info.sheetIndex)) {
            var indexes = this.filterRange.get(info.sheetIndex).slice();
            if (inRange(info.indices, indexes[0], indexes[1]) && inRange(info.indices, indexes[0], indexes[3])) {
                this.removeFilter(info.sheetIndex);
            }
        }
    };
    return Filter;
}());

var SpreadsheetImage = /** @__PURE__ @class */ (function () {
    function SpreadsheetImage(parent) {
        this.pictureCount = 1;
        this.parent = parent;
        this.addEventListener();
        this.renderImageUpload();
    }
    /**
     * Adding event listener for success and failure
     *
     * @returns {void} - Adding event listener for success and failure
     */
    SpreadsheetImage.prototype.addEventListener = function () {
        this.parent.on(insertImage, this.insertImage, this);
        this.parent.on(refreshImgElem, this.refreshImgElem, this);
        this.parent.on(refreshImgCellObj, this.refreshImgCellObj, this);
        this.parent.on(createImageElement, this.createImageElement, this);
        this.parent.on(deleteImage, this.deleteImage, this);
        this.parent.on(refreshImagePosition, this.refreshInsDelImagePosition, this);
    };
    /**
     * Rendering upload component for importing images.
     *
     * @returns {void} - Rendering upload component for importing images.
     */
    SpreadsheetImage.prototype.renderImageUpload = function () {
        var uploadBox = this.parent.element.appendChild(this.parent.createElement('input', {
            id: this.parent.element.id + '_imageUpload', styles: 'display: none;',
            attrs: { type: 'file', accept: '.image, .jpg, .png, .gif ,jpeg', name: 'fileUpload' }
        }));
        uploadBox.onchange = this.imageSelect.bind(this);
    };
    /**
     * Process after select the excel and image file.
     *
     * @param {Event} args - File select native event.
     * @returns {void} - Process after select the excel and image file.
     */
    SpreadsheetImage.prototype.imageSelect = function (args) {
        var file = args.target.files[0];
        if (!file) {
            return;
        }
        if (file.type.includes('image')) {
            this.insertImage({ file: file });
        }
        else {
            this.parent.serviceLocator.getService(dialog).show({ content: this.parent.serviceLocator.getService('spreadsheetLocale').getConstant('UnsupportedFile'),
                width: '300' });
        }
        args.target.value = '';
    };
    /**
     * Removing event listener for success and failure
     *
     * @returns {void} - Removing event listener for success and failure
     */
    SpreadsheetImage.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(insertImage, this.insertImage);
            this.parent.off(refreshImgCellObj, this.refreshImgCellObj);
            this.parent.off(createImageElement, this.createImageElement);
            this.parent.off(deleteImage, this.deleteImage);
            this.parent.off(refreshImagePosition, this.refreshInsDelImagePosition);
        }
    };
    /* eslint-disable */
    SpreadsheetImage.prototype.insertImage = function (args, range) {
        var _this = this;
        this.binaryStringVal(args).then(function (src) { return _this.createImageElement({ options: { src: src }, range: range, isPublic: true }); });
    };
    SpreadsheetImage.prototype.binaryStringVal = function (args) {
        return new Promise(function (resolve, reject) {
            var reader = new FileReader();
            reader.readAsDataURL(args.file);
            reader.onload = function () { return resolve(reader.result); };
            reader.onerror = function (error) { return reject(error); };
        });
    };
    /* eslint-enable */
    SpreadsheetImage.prototype.createImageElement = function (args) {
        var range = args.range ? (args.range.indexOf('!') > 0) ? args.range.split('!')[1] : args.range.split('!')[0]
            : this.parent.getActiveSheet().selectedRange;
        var sheetIndex = (args.range && args.range.indexOf('!') > 0) ?
            getSheetIndex(this.parent, args.range.split('!')[0]) : this.parent.activeSheetIndex;
        var overlayObj = this.parent.serviceLocator.getService(overlay);
        var id = args.options.imageId ? args.options.imageId : this.parent.element.id + '_overlay_picture_' + this.pictureCount;
        var indexes = getRangeIndexes(range);
        var sheet = sheetIndex ? this.parent.sheets[sheetIndex] : this.parent.getActiveSheet();
        if (document.getElementById(id)) {
            return;
        }
        var eventArgs = { requestType: 'beforeInsertImage', range: sheet.name + '!' + range, imageData: args.options.src,
            sheetIndex: sheetIndex };
        if (args.isPublic) {
            this.parent.notify('actionBegin', { eventArgs: eventArgs, action: 'beforeInsertImage' });
        }
        if (eventArgs.cancel) {
            return;
        }
        var element = overlayObj.insertOverlayElement(id, range, sheetIndex);
        element.style.backgroundImage = 'url(\'' + args.options.src + '\')';
        if (args.options.height || args.options.left) {
            element.style.height = args.options.height + 'px';
            element.style.width = args.options.width + 'px';
            element.style.top = args.options.top + 'px';
            element.style.left = args.options.left + 'px';
        }
        if (sheet.frozenRows || sheet.frozenColumns) {
            overlayObj.adjustFreezePaneSize(args.options, element, range);
        }
        if (!args.options.imageId) {
            this.pictureCount++;
        }
        var imgData = {
            src: args.options.src, id: id, height: parseFloat(element.style.height.replace('px', '')),
            width: parseFloat(element.style.width.replace('px', '')), top: sheet.frozenRows || sheet.frozenColumns ?
                (indexes[0] ? getRowsHeight(sheet, 0, indexes[0] - 1) : 0) : parseFloat(element.style.top.replace('px', '')),
            left: sheet.frozenRows || sheet.frozenColumns ? (indexes[1] ? getColumnsWidth(sheet, 0, indexes[1] - 1) : 0) :
                parseFloat(element.style.left.replace('px', ''))
        };
        this.parent.setUsedRange(indexes[0], indexes[1]);
        if (args.isPublic || args.isUndoRedo) {
            this.parent.notify(setImage, { options: [imgData], range: sheet.name + '!' + range });
        }
        var currCell = getCell(indexes[0], indexes[1], sheet);
        if (!currCell.image[currCell.image.length - 1].id) {
            currCell.image[currCell.image.length - 1].id = imgData.id;
        }
        if (!args.isUndoRedo && args.isPublic) {
            eventArgs = { requestType: 'insertImage', range: sheet.name + '!' + range, imageHeight: args.options.height ?
                    args.options.height : 300, imageWidth: args.options.width ? args.options.width : 400, imageData: args.options.src, id: id,
                sheetIndex: sheetIndex };
            this.parent.notify('actionComplete', { eventArgs: eventArgs, action: 'insertImage' });
        }
    };
    SpreadsheetImage.prototype.refreshImgElem = function () {
        var overlayElem = document.getElementsByClassName('e-ss-overlay-active')[0];
        if (overlayElem) {
            removeClass([overlayElem], 'e-ss-overlay-active');
        }
    };
    SpreadsheetImage.prototype.refreshInsDelImagePosition = function (args) {
        var count = args.count;
        var sheetIdx = args.sheetIdx;
        var sheet = this.parent.sheets[sheetIdx];
        var pictureElements;
        var currCellObj = getCell(args.rowIdx, args.colIdx, sheet);
        var imageLen = currCellObj.image.length;
        var top;
        var left;
        for (var i = 0; i < imageLen; i++) {
            pictureElements = document.getElementById(currCellObj.image[i].id);
            top = (args.type === 'Row') ? (args.status === 'insert') ? currCellObj.image[i].top + (count * 20) :
                currCellObj.image[i].top - (count * 20) : currCellObj.image[i].top;
            left = (args.type === 'Column') ? (args.status === 'insert') ? currCellObj.image[i].left + (count * 64) :
                currCellObj.image[i].left - (count * 64) : currCellObj.image[i].left;
            currCellObj.image[i].top = top;
            currCellObj.image[i].left = left;
            pictureElements.style.top = top + 'px';
            pictureElements.style.left = left + 'px';
        }
    };
    SpreadsheetImage.prototype.refreshImgCellObj = function (args) {
        var sheet = this.parent.getActiveSheet();
        var prevCellObj = getCell(args.prevRowIdx, args.prevColIdx, sheet);
        var currCellObj = getCell(args.currentRowIdx, args.currentColIdx, sheet);
        var prevCellImg = prevCellObj ? prevCellObj.image : [];
        var prevImgObj;
        var currImgObj;
        var prevCellImgLen = (prevCellImg && prevCellImg.length) ? prevCellImg.length : 0;
        if (prevCellObj && prevCellObj.image && prevCellImg.length > 0) {
            for (var i = 0; i < prevCellImgLen; i++) {
                if (prevCellImg[i] && prevCellImg[i].id === args.id) {
                    prevImgObj = prevCellImg[i];
                    prevImgObj.height = args.currentHeight;
                    prevImgObj.width = args.currentWidth;
                    prevImgObj.top = args.currentTop;
                    prevImgObj.left = args.currentLeft;
                    prevCellImg.splice(i, 1);
                }
            }
            if (currCellObj && currCellObj.image) {
                currImgObj = currCellObj.image;
                if (prevImgObj) {
                    currImgObj.push(prevImgObj);
                }
            }
            if (currImgObj) {
                setCell(args.currentRowIdx, args.currentColIdx, sheet, { image: currImgObj }, true);
            }
            else {
                setCell(args.currentRowIdx, args.currentColIdx, sheet, { image: [prevImgObj] }, true);
            }
            if (args.requestType === 'imageRefresh' && !args.isUndoRedo) {
                var eventArgs = {
                    requestType: 'imageRefresh', currentRowIdx: args.currentRowIdx, currentColIdx: args.currentColIdx,
                    prevRowIdx: args.prevRowIdx, prevColIdx: args.prevColIdx, prevTop: args.prevTop, prevLeft: args.prevLeft,
                    currentTop: args.currentTop, currentLeft: args.currentLeft, currentHeight: args.currentHeight,
                    currentWidth: args.currentWidth, prevHeight: args.prevHeight, prevWidth: args.prevWidth,
                    id: args.id, sheetIdx: this.parent.activeSheetIndex
                };
                this.parent.notify('actionComplete', { eventArgs: eventArgs, action: 'imageRefresh' });
            }
        }
    };
    SpreadsheetImage.prototype.deleteImage = function (args) {
        var sheet = this.parent.getActiveSheet();
        var pictureElements = document.getElementById(args.id);
        var rowIdx;
        var colIdx;
        if (pictureElements) {
            var imgTop = void 0;
            var imgleft = void 0;
            if (sheet.frozenRows || sheet.frozenColumns) {
                var clientRect = pictureElements.getBoundingClientRect();
                imgTop = { clientY: clientRect.top };
                imgleft = { clientX: clientRect.left };
                if (clientRect.top < this.parent.getColumnHeaderContent().getBoundingClientRect().bottom) {
                    imgTop.target = this.parent.getColumnHeaderContent();
                }
                if (clientRect.left < this.parent.getRowHeaderContent().getBoundingClientRect().right) {
                    imgleft.target = this.parent.getRowHeaderTable();
                }
            }
            else {
                imgTop = { clientY: pictureElements.offsetTop, isImage: true };
                imgleft = { clientX: pictureElements.offsetLeft, isImage: true };
            }
            this.parent.notify(getRowIdxFromClientY, imgTop);
            this.parent.notify(getColIdxFromClientX, imgleft);
            document.getElementById(args.id).remove();
            rowIdx = imgTop.clientY;
            colIdx = imgleft.clientX;
            sheet = this.parent.sheets[this.parent.activeSheetIndex];
        }
        else {
            var rangeVal = args.range ? args.range.indexOf('!') > 0 ? args.range.split('!')[1] : args.range.split('!')[0] :
                this.parent.getActiveSheet().selectedRange;
            var sheetIndex = args.range && args.range.indexOf('!') > 0 ? getSheetIndex(this.parent, args.range.split('!')[0]) :
                this.parent.activeSheetIndex;
            var index = getRangeIndexes(rangeVal);
            rowIdx = index[0];
            colIdx = index[1];
            sheet = this.parent.sheets[sheetIndex];
        }
        var cellObj = getCell(rowIdx, colIdx, sheet);
        var prevCellImg = cellObj.image;
        var imgLength = prevCellImg.length;
        for (var i = 0; i < imgLength; i++) {
            if (prevCellImg[i].id === args.id) {
                prevCellImg.splice(i, 1);
            }
        }
        setCell(rowIdx, colIdx, sheet, { image: prevCellImg }, true);
    };
    /**
     * To Remove the event listeners.
     *
     * @returns {void} - To Remove the event listeners.
     */
    SpreadsheetImage.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * Get the sheet picture module name.
     *
     * @returns {string} - Get the sheet picture module name.
     */
    SpreadsheetImage.prototype.getModuleName = function () {
        return 'spreadsheetImage';
    };
    return SpreadsheetImage;
}());

Chart.Inject(ColumnSeries, LineSeries, BarSeries, AreaSeries, StackingColumnSeries, StackingLineSeries, StackingBarSeries, ScatterSeries);
Chart.Inject(StackingAreaSeries, Category, Legend, Tooltip, DataLabel);
AccumulationChart.Inject(PieSeries, AccumulationTooltip, AccumulationDataLabel, AccumulationLegend);
/**
 * Represents Chart support for Spreadsheet.
 */
var SpreadsheetChart = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for the Spreadsheet Chart module.
     *
     * @param {Spreadsheet} parent - Constructor for the Spreadsheet Chart module.
     */
    function SpreadsheetChart(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * Adding event listener for success and failure
     *
     * @returns {void} - Adding event listener for success and failure
     */
    SpreadsheetChart.prototype.addEventListener = function () {
        this.parent.on(initiateChart, this.initiateChartHandler, this);
        this.parent.on(refreshChartCellObj, this.refreshChartCellObj, this);
        this.parent.on(updateChart, this.updateChartHandler, this);
        this.parent.on(deleteChart, this.deleteChart, this);
        this.parent.on(clearChartBorder, this.clearBorder, this);
        this.parent.on(insertChart, this.insertChartHandler, this);
        this.parent.on(chartRangeSelection, this.chartRangeHandler, this);
        this.parent.on(chartDesignTab, this.chartDesignTabHandler, this);
        this.parent.on(addChartEle, this.updateChartElement, this);
    };
    SpreadsheetChart.prototype.insertChartHandler = function (args) {
        var chartType = 'Column';
        switch (args.id) {
            case 'clusteredColumn':
                chartType = 'Column';
                break;
            case 'stackedColumn':
                chartType = 'StackingColumn';
                break;
            case 'stackedColumn100':
                chartType = 'StackingColumn100';
                break;
            case 'clusteredBar':
                chartType = 'Bar';
                break;
            case 'stackedBar':
                chartType = 'StackingBar';
                break;
            case 'stackedBar100':
                chartType = 'StackingBar100';
                break;
            case 'area':
                chartType = 'Area';
                break;
            case 'stackedArea':
                chartType = 'StackingArea';
                break;
            case 'stackedArea100':
                chartType = 'StackingArea100';
                break;
            case 'line':
                chartType = 'Line';
                break;
            case 'stackedLine':
                chartType = 'StackingLine';
                break;
            case 'stackedLine100':
                chartType = 'StackingLine100';
                break;
            case 'pie':
                chartType = 'Pie';
                break;
            case 'doughnut':
                chartType = 'Doughnut';
                break;
            //  case 'radar':
            //     chartType = ;
            //     break;
            //  case 'radar_markers':
            //     chartType = 'Column';
            //     break;
            case 'scatter':
                chartType = 'Scatter';
                break;
        }
        var chart = [{ type: chartType }];
        if (args.isChart) {
            this.parent.notify(setChart, { chart: chart });
        }
        else {
            this.parent.notify(chartDesignTab, { chartType: chartType });
        }
    };
    SpreadsheetChart.prototype.chartRangeHandler = function () {
        var overlayEle = document.querySelector('.e-datavisualization-chart.e-ss-overlay-active');
        if (overlayEle) {
            var chartId = overlayEle.getElementsByClassName('e-control')[0].id;
            var chartColl = this.parent.chartColl;
            var chartCollLen = chartColl.length;
            for (var idx = 0; idx < chartCollLen; idx++) {
                var chartEle = document.getElementById(chartColl[idx].id);
                if (overlayEle && chartEle && chartColl[idx].id === chartId) {
                    this.parent.notify(initiateChart, {
                        option: chartColl[idx], chartCount: this.parent.chartCount, isRefresh: true
                    });
                }
            }
        }
    };
    SpreadsheetChart.prototype.getPropertyValue = function (rIdx, cIdx, sheetIndex) {
        var sheets = this.parent.sheets;
        if (sheets[sheetIndex] && sheets[sheetIndex].rows[rIdx] && sheets[sheetIndex].rows[rIdx].cells[cIdx]) {
            var cell = getCell(rIdx, cIdx, this.parent.sheets[sheetIndex]);
            var value = '';
            if (cell.format) {
                var formatObj = {
                    type: getTypeFromFormat(cell.format),
                    value: cell && cell.value, format: cell && cell.format ?
                        cell.format : 'General', formattedText: cell && cell.value,
                    onLoad: true, isRightAlign: false, cell: cell,
                    rowIndex: rIdx.toString(), colIndex: cIdx.toString()
                };
                if (cell) {
                    this.parent.notify(getFormattedCellObject, formatObj);
                    if (typeof (formatObj.value) === 'number') {
                        // eslint-disable-next-line no-useless-escape
                        var escapeRegx = new RegExp('[!@#$%^&()+=\';,{}|\":<>~_-]', 'g');
                        formatObj.formattedText = (formatObj.formattedText.toString()).replace(escapeRegx, '');
                        value = parseInt(formatObj.formattedText.toString(), 10);
                    }
                    else {
                        value = formatObj.formattedText.toString();
                        
                    }
                }
            }
            else {
                value = this.parent.sheets[sheetIndex].rows[rIdx].cells[cIdx].value;
            }
            value = isNullOrUndefined(value) ? '' : value;
            return value;
        }
        else {
            return '';
        }
    };
    SpreadsheetChart.prototype.updateChartHandler = function (args) {
        var series = this.initiateChartHandler({ option: args.chart, isRefresh: true });
        var chartObj = this.parent.element.querySelector('.' + args.chart.id);
        if (chartObj) {
            var chartComp = getComponent(chartObj, 'chart');
            if (isNullOrUndefined(chartComp)) {
                chartComp = getComponent(chartObj, 'accumulationchart');
            }
            chartComp.series = series;
            chartComp.refresh();
        }
    };
    SpreadsheetChart.prototype.refreshChartCellObj = function (args) {
        var sheet = this.parent.sheets[this.parent.activeSheetIndex];
        var prevCellObj = getCell(args.prevRowIdx, args.prevColIdx, sheet);
        var currCellObj = getCell(args.currentRowIdx, args.currentColIdx, sheet);
        var prevCellChart = prevCellObj ? prevCellObj.chart : [];
        var prevChartObj;
        var currChartObj;
        var prevCellChartLen = (prevCellChart && prevCellChart.length) ? prevCellChart.length : 0;
        if (prevCellObj && prevCellObj.chart) {
            for (var i = 0; i < prevCellChartLen; i++) {
                var overlayEle = document.getElementsByClassName('e-datavisualization-chart e-ss-overlay-active')[0];
                var chartEleClassName = document.getElementById(prevCellChart[i].id);
                if (closest(chartEleClassName, '.' + overlayEle.classList[1]) === overlayEle) {
                    prevChartObj = prevCellChart[i];
                    prevChartObj.height = args.currentHeight;
                    prevChartObj.width = args.currentWidth;
                    prevChartObj.top = args.currentTop;
                    prevChartObj.left = args.currentLeft;
                    prevCellChart.splice(i, 1);
                    for (var idx = 0, chartCollLen = this.parent.chartColl.length; idx < chartCollLen; idx++) {
                        if (prevChartObj.id === this.parent.chartColl[idx].id) {
                            prevChartObj.height = args.currentHeight;
                            this.parent.chartColl[idx].width = args.currentWidth;
                            this.parent.chartColl[idx].top = args.currentTop;
                            this.parent.chartColl[idx].left = args.currentLeft;
                        }
                    }
                }
            }
            if (currCellObj && currCellObj.chart) {
                currChartObj = currCellObj.chart;
                if (prevChartObj) {
                    currChartObj.push(prevChartObj);
                }
            }
            if (currChartObj) {
                setCell(args.currentRowIdx, args.currentColIdx, sheet, { chart: currChartObj }, true);
            }
            else {
                setCell(args.currentRowIdx, args.currentColIdx, sheet, { chart: [prevChartObj] }, true);
            }
            if (args.requestType === 'chartRefresh' && !args.isUndoRedo) {
                var eventArgs = {
                    requestType: 'chartRefresh', currentRowIdx: args.currentRowIdx, currentColIdx: args.currentColIdx,
                    currentWidth: args.currentWidth, prevHeight: args.prevHeight, prevWidth: args.prevWidth,
                    prevRowIdx: args.prevRowIdx, prevColIdx: args.prevColIdx, prevTop: args.prevTop, prevLeft: args.prevLeft,
                    currentTop: args.currentTop, currentLeft: args.currentLeft, currentHeight: args.currentHeight,
                    id: args.id, sheetIdx: this.parent.activeSheetIndex
                };
                this.parent.notify('actionComplete', { eventArgs: eventArgs, action: 'chartRefresh' });
            }
        }
    };
    SpreadsheetChart.prototype.processChartRange = function (range, dataSheetIdx, opt) {
        var xRange;
        var yRange;
        var lRange;
        var minr = range[0];
        var minc = range[1];
        var isStringSeries = false;
        var maxr = range[2];
        var maxc = range[3];
        var isSingleRow = minr === maxr;
        var isSingleCol = minc === maxc;
        var trVal = this.getPropertyValue(minr, maxc, dataSheetIdx);
        // trVal = this.getParseValue(trVal);
        var blVal = this.getPropertyValue(maxr, minc, dataSheetIdx);
        // blVal = this.getParseValue(blVal);
        var tlVal = this.getPropertyValue(minr, minc, dataSheetIdx);
        // tlVal = this.getParseValue(tlVal);
        if (!isNumber(blVal) || !tlVal) {
            isStringSeries = true;
        }
        if (isNullOrUndefined(tlVal) && !isSingleRow && !isSingleCol || (opt.type === 'Scatter' && range[3] - range[1] === 1)) {
            xRange = [minr + 1, minc, maxr, minc];
            yRange = [minr + 1, minc + 1, maxr, maxc];
            lRange = [minr, minc + 1, minr, maxc];
        }
        else if ((!isNullOrUndefined(blVal) && isStringSeries && !isSingleRow && !isSingleCol)) {
            if (!isNullOrUndefined(trVal) && (!isNumber(trVal) || !tlVal)) {
                xRange = [minr + 1, minc, maxr, minc];
                yRange = [minr + 1, minc + 1, maxr, maxc];
                lRange = [minr, minc + 1, minr, maxc];
            }
            else {
                xRange = [minr, minc, maxr, minc];
                yRange = [minr, minc + 1, maxr, maxc];
            }
        }
        else {
            yRange = [minr, minc, maxr, maxc];
            if ((!isNullOrUndefined(trVal) && !isNumber(trVal) && !isDateTime(trVal))) {
                lRange = [minr, minc, minr, maxc];
                yRange[0] = yRange[0] + 1;
            }
            else if (isNullOrUndefined(tlVal) && (isSingleRow || isSingleCol)) {
                lRange = [minr, minc, minr, maxc];
                if (isSingleRow) {
                    yRange[1] = yRange[1] + 1;
                    lRange[3] = lRange[1];
                }
                else {
                    yRange[0] = yRange[0] + 1;
                }
            }
        }
        return { xRange: xRange, yRange: yRange, lRange: lRange };
    };
    SpreadsheetChart.prototype.toIntrnlRange = function (range, sheetIdx) {
        if (!range) {
            range = getRangeIndexes[this.parent.sheets[sheetIdx].selectedRange];
        }
        else if (typeof (range) === 'string') {
            range = getRangeIndexes[range];
        }
        return range;
    };
    SpreadsheetChart.prototype.getRangeData = function (options) {
        options.range = this.toIntrnlRange(options.range, options.sheetIdx);
        var rowIdx = [];
        var arr = [];
        this.pushRowData(options, options.range[0], options.range[1], options.range[2], options.range[3], arr, rowIdx, true, options.isYvalue);
        return arr;
    };
    SpreadsheetChart.prototype.pushRowData = function (options, minr, minc, maxr, maxc, arr, rowIdx, isDataSrcEnsured, isYvalue) {
        var minCol = minc;
        var sheet = this.parent.sheets[options.sheetIdx];
        while (minr <= maxr) {
            if (isHiddenRow(sheet, minr)) {
                minr++;
                continue;
            }
            minc = minCol;
            while (minc <= maxc) {
                if (isHiddenCol(sheet, minc)) {
                    minc++;
                    continue;
                }
                var value = '';
                var cell = getCell(minr, minc, sheet);
                if (cell && cell.format && !isYvalue) {
                    var forArgs = {
                        value: cell && cell.value, format: cell && cell.format ? cell.format : 'General',
                        formattedText: cell && cell.value, onLoad: true,
                        type: cell && getTypeFromFormat(cell.format),
                        rowIndex: minr.toString(), colIndex: minc.toString(),
                        isRightAlign: false, cell: cell
                    };
                    this.parent.notify(getFormattedCellObject, forArgs);
                    value = forArgs.formattedText.toString();
                }
                else {
                    value = cell ? (!isNullOrUndefined(cell.value) ? cell.value : '') : '';
                }
                // = this.parent.getValueRowCol(options.sheetIdx, minr + 1, minc + 1);
                arr.push({ value: value });
                minc++;
            }
            minr++;
        }
        rowIdx.push(minr);
    };
    SpreadsheetChart.prototype.toArrayData = function (args) {
        var prop = 'value';
        var obj;
        var i = 0;
        var temp = [];
        var len = args.length;
        while (i < len) {
            obj = args[i];
            if (Object.keys(obj).length) {
                if (prop in obj) {
                    temp.push(obj[prop]);
                }
            }
            else {
                temp.push('');
            }
            i++;
        }
        return temp;
    };
    SpreadsheetChart.prototype.getVirtualXValues = function (limit) {
        var i = 1;
        var arr = [];
        while (i < limit) {
            arr.push(i.toString());
            i++;
        }
        return arr;
    };
    SpreadsheetChart.prototype.processChartSeries = function (options, sheetIndex, xRange, yRange, lRange) {
        options = options || {};
        var seriesName = '';
        var dataLabel = {};
        var val;
        var xValue;
        var lValue;
        var diff;
        var pArr;
        var pObj = {};
        var j;
        var i = 0;
        var yInc = 0;
        var sArr = [];
        var dtVal;
        sheetIndex = isNullOrUndefined(sheetIndex) ? this.parent.getActiveSheet().index : sheetIndex;
        var sheet = this.parent.sheets[sheetIndex];
        var yValue = this.getRangeData({ range: yRange, sheetIdx: sheetIndex, skipFormula: true, isYvalue: true });
        var rDiff = ((yRange[2] - yRange[0]) + 1) - this.parent.hiddenCount(yRange[0], yRange[2], 'rows', sheet);
        var cDiff = ((yRange[3] - yRange[1]) + 1) - this.parent.hiddenCount(yRange[0], yRange[2], 'columns', sheet);
        if (options.isSeriesInRows) {
            xValue = lRange ? this.toArrayData(this.getRangeData({ range: lRange, sheetIdx: sheetIndex, skipFormula: false, isYvalue: false })) :
                this.getVirtualXValues(cDiff + 1);
            if (xRange) {
                lValue = this.toArrayData(this.getRangeData({ range: xRange, sheetIdx: sheetIndex, skipFormula: false, isYvalue: false }));
            }
            diff = rDiff;
        }
        else {
            xValue = xRange ? this.toArrayData(this.getRangeData({ range: xRange, sheetIdx: sheetIndex, skipFormula: false, isYvalue: false })) :
                this.getVirtualXValues(rDiff + 1);
            if (lRange) {
                lValue = this.toArrayData(this.getRangeData({ range: lRange, sheetIdx: sheetIndex, skipFormula: false, isYvalue: false }));
            }
            diff = cDiff;
        }
        var len = xValue.length;
        var inc = options.isSeriesInRows ? 1 : diff;
        if (!isNullOrUndefined(options.dataLabelSettings)) {
            dataLabel.visible = options.dataLabelSettings.visible;
            dataLabel.position = options.dataLabelSettings.position;
        }
        while (i < diff) {
            j = 0;
            pArr = [];
            yInc = options.isSeriesInRows ? yInc : i;
            while (j < len) {
                if (yValue[yInc]) {
                    val = yValue[yInc].value;
                    if (isNumber(val)) {
                        val = Number(val);
                    }
                    else {
                        dtVal = dateToInt(val);
                        val = isNaN(dtVal) ? 0 : dtVal;
                    }
                    pArr.push({ x: xValue[j], y: val });
                }
                yInc += inc;
                j++;
            }
            if (lValue && lValue.length > 0) {
                seriesName = lValue[i];
            }
            else {
                seriesName = 'series' + i;
            }
            if (options.type) {
                var type = options.type;
                if (type === 'Line' || type === 'StackingLine' || type === 'StackingLine100') {
                    pObj = {
                        dataSource: pArr, type: options.type, xName: 'x', yName: 'y', name: seriesName.toString(), marker: {
                            visible: true,
                            width: 10,
                            height: 10,
                            dataLabel: dataLabel
                        }
                    };
                }
                else if (type === 'Scatter') {
                    pObj = {
                        dataSource: pArr, type: options.type, xName: 'x', yName: 'y', name: seriesName.toString(), marker: {
                            visible: false,
                            width: 12,
                            height: 12,
                            shape: 'Circle',
                            dataLabel: dataLabel
                        }
                    };
                }
                else if (type === 'Pie' || type === 'Doughnut') {
                    var innerRadius = options.type === 'Pie' ? '0%' : '40%';
                    var visible = dataLabel.visible;
                    var position = isNullOrUndefined(dataLabel.position) ? 'Inside' : dataLabel.position === 'Outer' ? 'Outside' : 'Inside';
                    pObj = {
                        dataSource: pArr,
                        dataLabel: {
                            visible: !isNullOrUndefined(visible) ? visible : false, position: position, name: 'text', font: { fontWeight: '600' }
                        },
                        radius: '100%', xName: 'x', yName: 'y', innerRadius: innerRadius
                    };
                }
                else {
                    pObj = {
                        dataSource: pArr, type: options.type, xName: 'x', yName: 'y',
                        name: seriesName.toString(), marker: { dataLabel: dataLabel }
                    };
                }
            }
            sArr.push(pObj);
            i++;
        }
        var retVal;
        if (options.type) {
            retVal = {
                series: sArr, xRange: options.isSeriesInRows ? lRange : xRange,
                yRange: yRange, lRange: options.isSeriesInRows ? xRange : lRange
            };
        }
        return retVal;
    };
    SpreadsheetChart.prototype.primaryYAxisFormat = function (yRange) {
        if (isNullOrUndefined(yRange)) {
            return '{value}';
        }
        var type;
        var cell = getCell(yRange[0], yRange[1], this.parent.getActiveSheet());
        if (cell && cell.format) {
            type = getTypeFromFormat(cell.format);
            if (type === 'Accounting') {
                return '${value}';
            }
            else if (type === 'Currency') {
                return '${value}';
            }
            else if (type === 'Percentage') {
                return '{value}%';
            }
        }
        return '{value}';
    };
    SpreadsheetChart.prototype.focusChartRange = function (xRange, yRange, lRange) {
        var border = ['e-rcborderright', 'e-rcborderbottom', 'e-vcborderright', 'e-vcborderbottom', 'e-bcborderright', 'e-bcborderbottom'];
        this.clearBorder();
        var range;
        var sheet = this.parent.getActiveSheet();
        var isFreezePane = !!(sheet.frozenRows || sheet.frozenColumns);
        if (lRange) {
            if (isFreezePane) {
                range = lRange;
            }
            else {
                this.parent.notify(focusBorder, {
                    startcell: { rowIndex: lRange[0], colIndex: lRange[1] },
                    endcell: { rowIndex: lRange[2], colIndex: lRange[3] }, classes: [border[0], border[1]]
                });
            }
        }
        if (xRange) {
            if (isFreezePane) {
                if (range) {
                    range[0] = Math.min(lRange[0], xRange[0]);
                    range[1] = Math.min(lRange[1], xRange[1]);
                    range[2] = Math.max(lRange[2], xRange[2]);
                    range[3] = Math.max(lRange[3], xRange[3]);
                }
                else {
                    range = xRange;
                }
            }
            else {
                this.parent.notify(focusBorder, {
                    startcell: { rowIndex: xRange[0], colIndex: xRange[1] },
                    endcell: { rowIndex: xRange[2], colIndex: xRange[3] }, classes: [border[2], border[3]]
                });
            }
        }
        if (isFreezePane && range) {
            this.parent.notify(focusBorder, {
                startcell: { rowIndex: Math.min(range[0], yRange[0]), colIndex: Math.min(range[1], yRange[1]) },
                endcell: {
                    rowIndex: Math.max(range[2], yRange[2]), colIndex: Math.max(range[3], yRange[3])
                }, classes: [border[4], border[5]]
            });
        }
        else {
            this.parent.notify(focusBorder, {
                startcell: { rowIndex: yRange[0], colIndex: yRange[1] },
                endcell: { rowIndex: yRange[2], colIndex: yRange[3] }, classes: [border[4], border[5]]
            });
        }
    };
    SpreadsheetChart.prototype.clearBorder = function () {
        var sheet = this.parent.getActiveSheet();
        if (sheet.frozenColumns || sheet.frozenRows) {
            var chartIndicator = [].slice.call(this.parent.element.getElementsByClassName('e-chart-range'));
            chartIndicator.forEach(function (indicator) { detach(indicator); });
            return;
        }
        var mainCont = this.parent.getMainContent();
        var border = ['e-rcborderright', 'e-rcborderbottom', 'e-vcborderright', 'e-vcborderbottom', 'e-bcborderright', 'e-bcborderbottom'];
        for (var borderIdx = 0, borderLen = border.length; borderIdx < borderLen; borderIdx++) {
            var eleColl = mainCont.querySelectorAll('.' + border[borderIdx]);
            for (var tdIdx = 0, eleCollLen = eleColl.length; tdIdx < eleCollLen; tdIdx++) {
                var td = eleColl[tdIdx];
                td.classList.remove(border[borderIdx]);
            }
        }
    };
    SpreadsheetChart.prototype.initiateChartHandler = function (argsOpt) {
        var chart = argsOpt.option;
        var isRangeSelect = true;
        isRangeSelect = isNullOrUndefined(argsOpt.isInitCell) ? true : !argsOpt.isInitCell;
        argsOpt.isUndoRedo = isNullOrUndefined(argsOpt.isUndoRedo) ? true : argsOpt.isUndoRedo;
        var seriesModel;
        argsOpt.isRefresh = isNullOrUndefined(argsOpt.isRefresh) ? false : argsOpt.isRefresh;
        var sheet = this.parent.getActiveSheet();
        var range = chart.range ? (chart.range.indexOf('!') > 0) ?
            chart.range.split('!')[1] : chart.range.split('!')[0]
            : this.parent.getActiveSheet().selectedRange;
        var rangeIdx = getRangeIndexes(range);
        var options = {};
        var isRowLesser;
        var eventArgs;
        if (!this.parent.allowChart && sheet.isProtected) {
            return seriesModel;
        }
        var sheetIdx = (chart.range && chart.range.indexOf('!') > 0) ?
            getSheetIndex(this.parent, chart.range.split('!')[0]) : this.parent.activeSheetIndex;
        var args = {
            sheetIndex: sheetIdx, reqType: 'shape', type: 'actionBegin', shapeType: 'chart',
            action: 'create', options: chart, range: range, operation: 'create'
        };
        options = args.options;
        range = args.range;
        options = options || {};
        if (rangeIdx.length > 0) {
            var rDiff = rangeIdx[2] - rangeIdx[0];
            var cDiff = rangeIdx[3] - rangeIdx[1];
            if (rDiff < cDiff) {
                isRowLesser = true;
            }
        }
        options.isSeriesInRows = isRowLesser ? true : options.isSeriesInRows ? options.isSeriesInRows : false;
        argsOpt.dataSheetIdx = isNullOrUndefined(argsOpt.dataSheetIdx) ? sheetIdx : argsOpt.dataSheetIdx;
        var chartRange = this.processChartRange(rangeIdx, argsOpt.dataSheetIdx, options);
        var xRange = chartRange.xRange;
        var yRange = chartRange.yRange;
        var lRange = chartRange.lRange;
        if (sheetIdx === this.parent.activeSheetIndex && isRangeSelect) {
            this.focusChartRange(xRange, yRange, lRange);
        }
        var chartOptions = this.processChartSeries(options, argsOpt.dataSheetIdx, xRange, yRange, lRange);
        var primaryXAxis = {
            majorGridLines: chart.primaryXAxis && chart.primaryXAxis.majorGridLines &&
                !isNullOrUndefined(chart.primaryXAxis.majorGridLines.width) ?
                { width: chart.primaryXAxis.majorGridLines.width } : { width: 0 },
            minorGridLines: chart.primaryXAxis && chart.primaryXAxis.minorGridLines &&
                !isNullOrUndefined(chart.primaryXAxis.minorGridLines.width) ?
                { width: chart.primaryXAxis.minorGridLines.width } : { width: 0 },
            minorTicksPerInterval: chart.primaryXAxis && chart.primaryXAxis.minorGridLines && chart.primaryXAxis.minorGridLines.width > 0 ?
                5 : 0,
            lineStyle: { width: 0 },
            valueType: 'Category',
            visible: chart.primaryXAxis ? chart.primaryXAxis.visible : true,
            title: chart.primaryXAxis ? chart.primaryXAxis.title : ''
        };
        var primaryYAxis = {
            lineStyle: { width: 0 },
            majorGridLines: chart.primaryYAxis && chart.primaryYAxis.majorGridLines &&
                !isNullOrUndefined(chart.primaryYAxis.majorGridLines.width) ?
                { width: chart.primaryYAxis.majorGridLines.width } : { width: 1 },
            minorGridLines: chart.primaryYAxis && chart.primaryYAxis.minorGridLines &&
                !isNullOrUndefined(chart.primaryYAxis.minorGridLines.width) ?
                { width: chart.primaryYAxis.minorGridLines.width } : { width: 0 },
            minorTicksPerInterval: chart.primaryYAxis && chart.primaryYAxis.minorGridLines && chart.primaryYAxis.minorGridLines.width > 0 ?
                5 : 0,
            labelFormat: this.primaryYAxisFormat(yRange),
            visible: chart.primaryYAxis ? chart.primaryYAxis.visible : true,
            title: chart.primaryYAxis ? chart.primaryYAxis.title : ''
        };
        if (argsOpt.isRefresh) {
            return chartOptions.series;
        }
        if (argsOpt.isUndoRedo) {
            eventArgs = {
                type: chart.type, theme: chart.theme, isSeriesInRows: chart.isSeriesInRows, range: chart.range, id: chart.id,
                height: chart.height, width: chart.width, posRange: argsOpt.range, isInitCell: argsOpt.isInitCell, cancel: false
            };
            this.parent.notify(beginAction, { eventArgs: eventArgs, action: 'beforeInsertChart' });
            if (eventArgs.cancel) {
                return [];
            }
            chart.type = eventArgs.type;
            chart.theme = eventArgs.theme;
            chart.isSeriesInRows = eventArgs.isSeriesInRows;
            chart.range = eventArgs.range;
            chart.id = eventArgs.id;
            chart.height = eventArgs.height;
            chart.width = eventArgs.width;
        }
        var id = chart.id + '_overlay';
        var sheetIndex = argsOpt.isPaste ? this.parent.getActiveSheet().index :
            (argsOpt.option.range && argsOpt.option.range.indexOf('!') > 0) ?
                getSheetIndex(this.parent, argsOpt.option.range.split('!')[0]) : this.parent.activeSheetIndex;
        var overlayObj = this.parent.serviceLocator.getService(overlay);
        var eleRange = !isNullOrUndefined(argsOpt.isInitCell) && argsOpt.isInitCell ? argsOpt.range : range;
        var element = overlayObj.insertOverlayElement(id, eleRange, sheetIndex);
        element.classList.add('e-datavisualization-chart');
        element.style.width = chart.width + 'px';
        element.style.height = chart.height + 'px';
        if (sheet.frozenRows || sheet.frozenColumns) {
            overlayObj.adjustFreezePaneSize(chart, element, eleRange);
        }
        else {
            element.style.top = isNullOrUndefined(chart.top) ? element.style.top : (chart.top + 'px');
            element.style.left = isNullOrUndefined(chart.left) ? element.style.left : (chart.left + 'px');
            chart.top = parseInt(element.style.top.replace('px', ''), 10);
            chart.left = parseInt(element.style.left.replace('px', ''), 10);
        }
        this.parent.notify(overlayEleSize, { height: chart.height, width: chart.width });
        var legendSettings = (chart.type === 'Pie' || chart.type === 'Doughnut') ? { position: 'Bottom', visible: true } : {};
        if (!isNullOrUndefined(chart.legendSettings)) {
            legendSettings.visible = chart.legendSettings.visible;
            legendSettings.position = chart.legendSettings.position;
        }
        var chartContent = this.parent.createElement('div', {
            id: chart.id, className: chart.id
        });
        if (chart.type !== 'Pie' && chart.type !== 'Doughnut') {
            this.chart = new Chart({
                primaryXAxis: primaryXAxis,
                primaryYAxis: primaryYAxis,
                chartArea: {
                    border: {
                        width: 0
                    }
                },
                title: chart.title,
                legendSettings: legendSettings,
                theme: chart.theme,
                series: chartOptions.series,
                tooltip: {
                    enable: true
                },
                width: element.style.width,
                height: element.style.height,
                load: function (args) {
                    var selectedTheme = chart.theme;
                    selectedTheme = selectedTheme ? selectedTheme : 'Material';
                    args.chart.theme = selectedTheme;
                },
                beforeResize: function (args) {
                    args.cancelResizedEvent = true; // This is for cancel the resized event.
                }
            });
            this.chart.appendTo(chartContent);
        }
        else {
            this.chart = new AccumulationChart({
                title: chart.title,
                legendSettings: legendSettings,
                theme: chart.theme,
                series: chartOptions.series,
                width: element.style.width,
                height: element.style.height,
                center: { x: '50%', y: '50%' },
                enableSmartLabels: true,
                enableAnimation: true,
                load: function (args) {
                    var selectedTheme = chart.theme;
                    selectedTheme = selectedTheme ? selectedTheme : 'Material';
                    args.chart.theme = selectedTheme;
                },
                beforeResize: function (args) {
                    args.cancelResizedEvent = true; // This is for cancel the resized event.
                }
            });
            this.chart.appendTo(chartContent);
        }
        element.appendChild(chartContent);
        if (argsOpt.isUndoRedo) {
            this.parent.notify(completeAction, { eventArgs: eventArgs, action: 'insertChart' });
        }
        return seriesModel;
    };
    SpreadsheetChart.prototype.deleteChart = function (args) {
        this.clearBorder();
        var chartElements = null;
        var sheet = this.parent.getActiveSheet();
        if (isNullOrUndefined(args.id)) {
            chartElements = document.querySelector('.e-datavisualization-chart.e-ss-overlay-active');
            args.id = chartElements ? chartElements.getElementsByClassName('e-control')[0].id : null;
        }
        else {
            args.id = args.id.includes('overlay') ? args.id : args.id + '_overlay';
            chartElements = document.getElementById(args.id);
        }
        if (isNullOrUndefined(args.id) || isNullOrUndefined(chartElements)) {
            return;
        }
        else {
            args.id = args.id.includes('overlay') ? args.id : args.id + '_overlay';
        }
        var rowIdx;
        var colIdx;
        var prevCellChart;
        var isRemoveEle = false;
        var chartObj;
        for (var i = 0, chartCollLen = this.parent.chartColl.length; i < chartCollLen; i++) {
            if (this.parent.chartColl[i].id === args.id.split('_overlay')[0]) {
                chartObj = this.parent.chartColl[i];
                break;
            }
        }
        var eventArgs = {
            id: chartObj.id, range: chartObj.range, type: chartObj.type, theme: chartObj.theme, height: chartObj.height,
            width: chartObj.width, isSeriesInRows: chartObj.isSeriesInRows, isInitCell: true, posRange: null,
            top: chartObj.top, left: chartObj.left, cancel: false
        };
        if (chartElements) {
            var chartTop = void 0;
            var chartleft = void 0;
            if (sheet.frozenRows || sheet.frozenColumns) {
                var clientRect = chartElements.getBoundingClientRect();
                chartTop = { clientY: clientRect.top };
                chartleft = { clientX: clientRect.left };
                if (clientRect.top < this.parent.getColumnHeaderContent().getBoundingClientRect().bottom) {
                    chartTop.target = this.parent.getColumnHeaderContent();
                }
                if (clientRect.left < this.parent.getRowHeaderContent().getBoundingClientRect().right) {
                    chartleft.target = this.parent.getRowHeaderTable();
                }
            }
            else {
                chartTop = { clientY: chartElements.offsetTop, isImage: true };
                chartleft = { clientX: chartElements.offsetLeft, isImage: true };
            }
            this.parent.notify(deleteChartColl, { id: args.id });
            this.parent.notify(getRowIdxFromClientY, chartTop);
            this.parent.notify(getColIdxFromClientX, chartleft);
            isRemoveEle = true;
            rowIdx = chartTop.clientY;
            colIdx = chartleft.clientX;
            sheet = this.parent.sheets[this.parent.activeSheetIndex];
        }
        else {
            this.parent.notify(deleteChartColl, { id: args.id });
            var sheetIndex = args.range && args.range.indexOf('!') > 0 ? getSheetIndex(this.parent, args.range.split('!')[0]) :
                this.parent.activeSheetIndex;
            var rangeVal = args.range ? args.range.indexOf('!') > 0 ? args.range.split('!')[1] : args.range.split('!')[0] :
                this.parent.getActiveSheet().selectedRange;
            var index = getRangeIndexes(rangeVal);
            rowIdx = index[0];
            colIdx = index[1];
            sheet = this.parent.sheets[sheetIndex];
        }
        var cellObj = getCell(rowIdx, colIdx, sheet);
        if (cellObj) {
            prevCellChart = cellObj.chart;
        }
        var chartLength = prevCellChart ? prevCellChart.length : null;
        for (var i = 0; i < chartLength; i++) {
            var overlayEle = document.getElementById(args.id);
            var chartEleClassName = document.getElementById(prevCellChart[i].id);
            if (closest(chartEleClassName, '.' + overlayEle.classList[1]) === overlayEle) {
                prevCellChart.splice(i, 1);
            }
        }
        if (isRemoveEle) {
            document.getElementById(args.id).remove();
            this.parent.notify(removeDesignChart, {});
        }
        setCell(rowIdx, colIdx, sheet, { chart: prevCellChart }, true);
        eventArgs.posRange = getCellAddress(rowIdx, colIdx);
        if (!args.isUndoRedo) {
            this.parent.notify(completeAction, { eventArgs: eventArgs, action: 'deleteChart' });
        }
    };
    SpreadsheetChart.prototype.updateChartModel = function (eleId, chartComp, currCellObj, chartCollId, isAccumulationChart) {
        var accumulationChartComp = chartComp;
        chartComp = chartComp;
        var chartId = this.parent.chartColl[chartCollId].id;
        if (isAccumulationChart &&
            ['PHAxes', 'PVAxes', 'PHAxisTitle', 'PVAxisTitle', 'GLMajorHorizontal',
                'GLMajorVertical', 'GLMinorHorizontal', 'GLMinorVertical'].indexOf(eleId) > -1) {
            return;
        }
        for (var idx = 0, chartsCount = currCellObj.chart.length; idx < chartsCount; idx++) {
            if (currCellObj.chart[idx].id === chartId) {
                switch (eleId) {
                    case 'PHAxes':
                    case 'PHAxisTitle':
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryXAxis)) {
                            currCellObj.chart[idx].primaryXAxis = {};
                            this.parent.chartColl[chartCollId].primaryXAxis = {};
                        }
                        if (eleId === 'PHAxes') {
                            currCellObj.chart[idx].primaryXAxis.visible = chartComp.primaryXAxis.visible;
                            this.parent.chartColl[chartCollId].primaryXAxis.visible = chartComp.primaryXAxis.visible;
                        }
                        else if (eleId === 'PHAxisTitle') {
                            currCellObj.chart[idx].primaryXAxis.title = chartComp.primaryXAxis.title;
                            this.parent.chartColl[chartCollId].primaryXAxis.title = chartComp.primaryXAxis.title;
                        }
                        break;
                    case 'PVAxes':
                    case 'PVAxisTitle':
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryYAxis)) {
                            currCellObj.chart[idx].primaryYAxis = {};
                            this.parent.chartColl[chartCollId].primaryYAxis = {};
                        }
                        if (eleId === 'PVAxes') {
                            currCellObj.chart[idx].primaryYAxis.visible = chartComp.primaryYAxis.visible;
                            this.parent.chartColl[chartCollId].primaryYAxis.visible = chartComp.primaryYAxis.visible;
                        }
                        else if (eleId === 'PVAxisTitle') {
                            currCellObj.chart[idx].primaryYAxis.title = chartComp.primaryYAxis.title;
                            this.parent.chartColl[chartCollId].primaryYAxis.title = chartComp.primaryYAxis.title;
                        }
                        break;
                    case 'ChartTitleNone':
                    case 'ChartTitleAbove':
                        currCellObj.chart[idx].title = chartComp.title;
                        this.parent.chartColl[chartCollId].title = chartComp.title;
                        break;
                    case 'DLNone':
                    case 'DLCenter':
                    case 'DLInsideend':
                    case 'DLInsidebase':
                    case 'DLOutsideend':
                        if (isNullOrUndefined(currCellObj.chart[idx].dataLabelSettings)) {
                            currCellObj.chart[idx].dataLabelSettings = {};
                            this.parent.chartColl[chartCollId].dataLabelSettings = {};
                        }
                        if (eleId === 'DLNone') {
                            currCellObj.chart[idx].dataLabelSettings.visible = false;
                            this.parent.chartColl[chartCollId].dataLabelSettings.visible = false;
                        }
                        else {
                            currCellObj.chart[idx].dataLabelSettings.visible = true;
                            this.parent.chartColl[chartCollId].dataLabelSettings.visible = true;
                            var position = void 0;
                            if (isAccumulationChart) {
                                position = accumulationChartComp.series[0].dataLabel.position === 'Outside' ? 'Outer' : 'Middle';
                            }
                            else {
                                position = chartComp.series[0].marker.dataLabel.position;
                            }
                            currCellObj.chart[idx].dataLabelSettings.position = position;
                            this.parent.chartColl[chartCollId].dataLabelSettings.position = position;
                        }
                        break;
                    case 'GLMajorHorizontal':
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryYAxis)) {
                            currCellObj.chart[idx].primaryYAxis = {};
                            this.parent.chartColl[chartCollId].primaryYAxis = {};
                        }
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryYAxis.majorGridLines)) {
                            currCellObj.chart[idx].primaryYAxis.majorGridLines = {};
                            this.parent.chartColl[chartCollId].primaryYAxis.majorGridLines = {};
                        }
                        currCellObj.chart[idx].primaryYAxis.majorGridLines.width = chartComp.primaryYAxis.majorGridLines.width;
                        this.parent.chartColl[chartCollId].primaryYAxis.majorGridLines.width = chartComp.primaryYAxis.majorGridLines.width;
                        break;
                    case 'GLMajorVertical':
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryXAxis)) {
                            currCellObj.chart[idx].primaryXAxis = {};
                            this.parent.chartColl[chartCollId].primaryXAxis = {};
                        }
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryXAxis.majorGridLines)) {
                            currCellObj.chart[idx].primaryXAxis.majorGridLines = {};
                            this.parent.chartColl[chartCollId].primaryXAxis.majorGridLines = {};
                        }
                        currCellObj.chart[idx].primaryXAxis.majorGridLines.width = chartComp.primaryXAxis.majorGridLines.width;
                        this.parent.chartColl[chartCollId].primaryXAxis.majorGridLines.width = chartComp.primaryXAxis.majorGridLines.width;
                        break;
                    case 'GLMinorHorizontal':
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryYAxis)) {
                            currCellObj.chart[idx].primaryYAxis = {};
                            this.parent.chartColl[chartCollId].primaryYAxis = {};
                        }
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryYAxis.minorGridLines)) {
                            currCellObj.chart[idx].primaryYAxis.minorGridLines = {};
                            this.parent.chartColl[chartCollId].primaryYAxis.minorGridLines = {};
                        }
                        currCellObj.chart[idx].primaryYAxis.minorGridLines.width = chartComp.primaryYAxis.minorGridLines.width;
                        this.parent.chartColl[chartCollId].primaryYAxis.minorGridLines.width = chartComp.primaryYAxis.minorGridLines.width;
                        break;
                    case 'GLMinorVertical':
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryXAxis)) {
                            currCellObj.chart[idx].primaryXAxis = {};
                            this.parent.chartColl[chartCollId].primaryXAxis = {};
                        }
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryXAxis.minorGridLines)) {
                            currCellObj.chart[idx].primaryXAxis.minorGridLines = {};
                            this.parent.chartColl[chartCollId].primaryXAxis.minorGridLines = {};
                        }
                        currCellObj.chart[idx].primaryXAxis.minorGridLines.width = chartComp.primaryXAxis.minorGridLines.width;
                        this.parent.chartColl[chartCollId].primaryXAxis.minorGridLines.width = chartComp.primaryXAxis.minorGridLines.width;
                        break;
                    case 'LegendNone':
                    case 'LegendsRight':
                    case 'LegendsLeft':
                    case 'LegendsBottom':
                    case 'LegendsTop':
                        if (isNullOrUndefined(currCellObj.chart[idx].legendSettings)) {
                            currCellObj.chart[idx].legendSettings = {};
                            this.parent.chartColl[chartCollId].legendSettings = {};
                        }
                        currCellObj.chart[idx].legendSettings.visible = chartComp.legendSettings.visible;
                        this.parent.chartColl[chartCollId].legendSettings.visible = chartComp.legendSettings.visible;
                        if (eleId !== 'LegendNone') {
                            currCellObj.chart[idx].legendSettings.position = chartComp.legendSettings.position;
                            this.parent.chartColl[chartCollId].legendSettings.position =
                                chartComp.legendSettings.position;
                            break;
                        }
                }
            }
        }
    };
    SpreadsheetChart.prototype.updateChartElement = function (value, chartComp, currCellObj, chartCollId, title, isAccumulationChart) {
        if (isAccumulationChart &&
            ['PHAxes', 'PVAxes', 'PHAxisTitle', 'PVAxisTitle', 'GLMajorHorizontal',
                'GLMajorVertical', 'GLMinorHorizontal', 'GLMinorVertical'].indexOf(value) > -1) {
            return;
        }
        var chartSeries;
        switch (value) {
            case 'PHAxes':
                chartComp = chartComp;
                chartComp.primaryXAxis.visible = !chartComp.primaryXAxis.visible;
                break;
            case 'PVAxes':
                chartComp = chartComp;
                chartComp.primaryYAxis.visible = !chartComp.primaryYAxis.visible;
                break;
            case 'PHAxisTitle':
                chartComp = chartComp;
                chartComp.primaryXAxis.title = title;
                break;
            case 'PVAxisTitle':
                chartComp = chartComp;
                chartComp.primaryYAxis.title = title;
                break;
            case 'ChartTitleNone':
                chartComp.title = '';
                break;
            case 'ChartTitleAbove':
                chartComp.title = title;
                break;
            case 'DLNone':
            case 'DLCenter':
            case 'DLInsideend':
            case 'DLInsidebase':
            case 'DLOutsideend':
                chartComp = isAccumulationChart ? chartComp : chartComp;
                chartSeries = chartComp.series;
                if (value === 'DLNone') {
                    for (var idx = 0, len = chartSeries.length; idx < len; idx++) {
                        if (isAccumulationChart) {
                            chartSeries[idx].dataLabel.visible = false;
                        }
                        else {
                            chartSeries[idx].marker.dataLabel.visible = false;
                        }
                    }
                }
                else {
                    for (var idx = 0, len = chartSeries.length; idx < len; idx++) {
                        if (isAccumulationChart) {
                            var position = value === 'DLOutsideend' ? 'Outside' : 'Inside';
                            chartSeries[idx].dataLabel.visible = true;
                            chartSeries[idx].dataLabel.position = position;
                        }
                        else {
                            var position = value === 'DLCenter' ? 'Middle' : value === 'DLInsideend' ? 'Top' : value === 'DLInsidebase' ?
                                'Bottom' : value === 'DLOutsideend' ? 'Outer' : chartSeries[0].marker.dataLabel.position;
                            chartSeries[idx].marker.dataLabel.visible = true;
                            chartSeries[idx].marker.dataLabel.position = position;
                        }
                    }
                }
                chartComp.series = chartSeries;
                if (isAccumulationChart) {
                    chartComp.refresh();
                }
                break;
            case 'GLMajorHorizontal':
                chartComp = chartComp;
                chartComp.primaryYAxis.majorGridLines.width = chartComp.primaryYAxis.majorGridLines.width === 0 ? 1 : 0;
                break;
            case 'GLMajorVertical':
                chartComp = chartComp;
                chartComp.primaryXAxis.majorGridLines.width = chartComp.primaryXAxis.majorGridLines.width === 0 ? 1 : 0;
                break;
            case 'GLMinorHorizontal':
                chartComp = chartComp;
                chartComp.primaryYAxis.minorTicksPerInterval = chartComp.primaryYAxis.minorGridLines.width === 0 ? 5 : 0;
                chartComp.primaryYAxis.minorGridLines.width = chartComp.primaryYAxis.minorGridLines.width === 0 ? 1 : 0;
                break;
            case 'GLMinorVertical':
                chartComp = chartComp;
                chartComp.primaryXAxis.minorTicksPerInterval = chartComp.primaryXAxis.minorGridLines.width === 0 ? 5 : 0;
                chartComp.primaryXAxis.minorGridLines.width = chartComp.primaryXAxis.minorGridLines.width === 0 ? 1 : 0;
                break;
            case 'LegendNone':
                chartComp.legendSettings.visible = false;
                break;
            case 'LegendsRight':
            case 'LegendsLeft':
            case 'LegendsBottom':
            case 'LegendsTop':
                chartComp.legendSettings.visible = true;
                chartComp.legendSettings.position = value === 'LegendsRight' ? 'Right' : value === 'LegendsLeft' ? 'Left' : value ===
                    'LegendsBottom' ? 'Bottom' : value === 'LegendsTop' ? 'Top' : chartComp.legendSettings.position;
                break;
        }
        this.updateChartModel(value, chartComp, currCellObj, chartCollId, isAccumulationChart);
    };
    SpreadsheetChart.prototype.chartDesignTabHandler = function (args) {
        var title = '';
        var isAccumulationChart = false;
        var sheet = this.parent.sheets[this.parent.activeSheetIndex];
        var switchRowColumn = args.switchRowColumn;
        var chartType = args.chartType;
        var chartTheme = args.chartTheme;
        var addChartEle = args.addChartEle;
        var chartComp = null;
        var chartCollId;
        var overlayElem = document.querySelector('.e-datavisualization-chart.e-ss-overlay-active');
        if (!overlayElem) {
            return;
        }
        var chartTop;
        var chartleft;
        if (sheet.frozenRows || sheet.frozenColumns) {
            var clientRect = overlayElem.getBoundingClientRect();
            chartTop = { clientY: clientRect.top };
            chartleft = { clientX: clientRect.left };
            if (clientRect.top < this.parent.getColumnHeaderContent().getBoundingClientRect().bottom) {
                chartTop.target = this.parent.getColumnHeaderContent();
            }
            if (clientRect.left < this.parent.getRowHeaderContent().getBoundingClientRect().right) {
                chartleft.target = this.parent.getRowHeaderTable();
            }
        }
        else {
            chartTop = { clientY: overlayElem.offsetTop, isImage: true };
            chartleft = { clientX: overlayElem.offsetLeft, isImage: true };
        }
        this.parent.notify(getRowIdxFromClientY, chartTop);
        this.parent.notify(getColIdxFromClientX, chartleft);
        var currCellObj = getCell(chartTop.clientY, chartleft.clientX, sheet);
        var chartObj = overlayElem.querySelector('.e-chart');
        if (isNullOrUndefined(chartObj)) {
            chartObj = overlayElem.querySelector('.e-accumulationchart');
        }
        var chartId = chartObj.getAttribute('id');
        for (var idx = 0, chartCollLen = this.parent.chartColl.length; idx < chartCollLen; idx++) {
            if (chartId === this.parent.chartColl[idx].id) {
                chartCollId = idx;
            }
        }
        if (chartObj) {
            chartComp = getComponent(chartObj, 'chart');
            if (isNullOrUndefined(chartComp)) {
                chartComp = getComponent(chartObj, 'accumulationchart');
                isAccumulationChart = true;
            }
        }
        if (switchRowColumn && !isAccumulationChart) {
            this.parent.chartColl[chartCollId].isSeriesInRows =
                isNullOrUndefined(this.parent.chartColl[chartCollId].isSeriesInRows) ?
                    true : !this.parent.chartColl[chartCollId].isSeriesInRows;
            for (var idx = 0, chartCount = currCellObj.chart.length; idx < chartCount; idx++) {
                if (currCellObj.chart[idx].id === chartId) {
                    currCellObj.chart[idx].isSeriesInRows =
                        isNullOrUndefined(currCellObj.chart[idx].isSeriesInRows) ? true : !currCellObj.chart[idx].isSeriesInRows;
                }
            }
            var chartSeries = this.initiateChartHandler({ option: this.parent.chartColl[chartCollId], isRefresh: true });
            chartComp.series = chartSeries;
        }
        if (chartType) {
            var type = this.parent.chartColl[chartCollId].type;
            this.parent.chartColl[chartCollId].type = chartType;
            for (var idx = 0, chartCount = currCellObj.chart.length; idx < chartCount; idx++) {
                if (currCellObj.chart[idx].id === chartId) {
                    currCellObj.chart[idx].type = chartType;
                }
            }
            if (chartType !== 'Pie' && chartType !== 'Doughnut') {
                if (type === 'Pie' || type === 'Doughnut') {
                    this.changeCharType(chartCollId);
                }
                else {
                    var chartSeries = chartComp.series;
                    for (var idx = 0, len = chartSeries.length; idx < len; idx++) {
                        chartSeries[idx].type = chartType;
                    }
                    chartComp.series = chartSeries;
                    chartComp.refresh();
                }
            }
            else {
                if (type === 'Pie' || type === 'Doughnut') {
                    var chartSeries = chartComp.series;
                    for (var idx = 0, len = chartSeries.length; idx < len; idx++) {
                        chartSeries[idx].innerRadius = chartType === 'Pie' ? '0%' : '40%';
                    }
                    chartComp.series = chartSeries;
                    chartComp.refresh();
                }
                else {
                    this.changeCharType(chartCollId);
                }
            }
        }
        if (chartTheme) {
            this.parent.chartColl[chartCollId].theme = chartTheme;
            for (var idx = 0, chartCount = currCellObj.chart.length; idx < chartCount; idx++) {
                if (currCellObj.chart[idx].id === chartId) {
                    currCellObj.chart[idx].theme = chartTheme;
                }
            }
            chartComp.theme = chartTheme;
            chartComp.refresh();
        }
        if (addChartEle) {
            if (addChartEle === 'ChartTitleAbove' || addChartEle === 'PHAxisTitle' || addChartEle === 'PVAxisTitle') {
                if (this.parent.element.getElementsByClassName('e-title-dlg').length > 0) {
                    return;
                }
                else {
                    this.titleDlgHandler(addChartEle, chartComp, currCellObj, chartCollId, isAccumulationChart);
                }
            }
            else {
                this.updateChartElement(addChartEle, chartComp, currCellObj, chartCollId, title, isAccumulationChart);
            }
        }
    };
    SpreadsheetChart.prototype.changeCharType = function (chartCollId) {
        var chartEle = document.getElementById(this.parent.chartColl[chartCollId].id);
        var chartParEle = closest(chartEle, '.e-datavisualization-chart');
        chartParEle.remove();
        this.parent.notify(initiateChart, {
            option: this.parent.chartColl[chartCollId], isInitCell: false, isUndoRedo: true,
            isPaste: false
        });
        chartEle = document.getElementById(this.parent.chartColl[chartCollId].id);
        chartParEle = closest(chartEle, '.e-datavisualization-chart');
        if (!chartParEle.classList.contains('e-ss-overlay-active')) {
            chartParEle.classList.add('e-ss-overlay-active');
        }
    };
    SpreadsheetChart.prototype.titleDlgHandler = function (addChartEle, chartComp, currCellObj, chartCollId, isAccumulationChart) {
        var _this = this;
        var title = '';
        if (isAccumulationChart && (addChartEle === 'PHAxisTitle' || addChartEle === 'PVAxisTitle')) {
            return;
        }
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            width: 375, showCloseIcon: true, isModal: true, cssClass: 'e-title-dlg',
            header: addChartEle === 'chart_abovechart' ? l10n.getConstant('ChartTitle') : addChartEle ===
                'PHAxisTitle' ? l10n.getConstant('HorizontalAxisTitle') : l10n.getConstant('VerticalAxisTitle'),
            target: document.querySelector('.e-control.e-spreadsheet'),
            beforeOpen: function () {
                dialogInst.dialogInstance.content = _this.titleDlgContent(addChartEle, chartComp);
                dialogInst.dialogInstance.dataBind();
                _this.parent.element.focus();
            },
            buttons: [{
                    buttonModel: {
                        content: l10n.getConstant('Ok'),
                        isPrimary: true,
                        cssClass: 'e-btn e-clearall-btn e-flat'
                    },
                    click: function () {
                        var dlgCont = _this.parent.element.querySelector('.e-title-dlg').
                            getElementsByClassName('e-title-dlg-content')[0];
                        title = dlgCont.getElementsByTagName('input')[0].value;
                        dialogInst.hide();
                        _this.updateChartElement(addChartEle, chartComp, currCellObj, chartCollId, title);
                    }
                }]
        });
        dialogInst.dialogInstance.refresh();
    };
    SpreadsheetChart.prototype.titleDlgContent = function (addChartEle, chartComp) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var dlgText = l10n.getConstant('EnterTitle');
        var dlgContent = this.parent.createElement('div', { className: 'e-title-dlg-content' });
        var value1Text = this.parent.createElement('span', { className: 'e-header e-top-header', innerHTML: dlgText });
        var value1Inp = this.parent.createElement('input', { className: 'e-input', id: 'titleInput', attrs: { type: 'text' } });
        dlgContent.appendChild(value1Text);
        dlgContent.appendChild(value1Inp);
        if (chartComp) {
            if (addChartEle === 'PHAxisTitle') {
                value1Inp.value = chartComp.primaryXAxis.title ? chartComp.primaryXAxis.title : value1Inp.value;
            }
            else if (addChartEle === 'PVAxisTitle') {
                value1Inp.value = chartComp.primaryYAxis.title ? chartComp.primaryYAxis.title : value1Inp.value;
            }
            else {
                value1Inp.value = chartComp.title ? chartComp.title : value1Inp.value;
            }
        }
        return dlgContent;
    };
    /**
     * Removing event listener for success and failure
     *
     * @returns {void} - Removing event listener for success and failure
     */
    SpreadsheetChart.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(initiateChart, this.initiateChartHandler);
            this.parent.off(refreshChartCellObj, this.refreshChartCellObj);
            this.parent.off(updateChart, this.updateChartHandler);
            this.parent.off(deleteChart, this.deleteChart);
            this.parent.off(clearChartBorder, this.clearBorder);
            this.parent.off(insertChart, this.insertChartHandler);
            this.parent.off(chartRangeSelection, this.chartRangeHandler);
            this.parent.off(chartDesignTab, this.chartDesignTabHandler);
            this.parent.off(addChartEle, this.updateChartElement);
        }
    };
    /**
     * To Remove the event listeners.
     *
     * @returns {void} - To Remove the event listeners.
     */
    SpreadsheetChart.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
        var chartEle = null;
        if (this.chart) {
            chartEle = this.chart.element;
            this.chart.destroy();
        }
        if (chartEle) {
            detach(chartEle);
        }
        this.chart = null;
    };
    /**
     * Get the sheet chart module name.
     *
     * @returns {string} - Get the module name.
     */
    SpreadsheetChart.prototype.getModuleName = function () {
        return 'spreadsheetChart';
    };
    return SpreadsheetChart;
}());

/**
 * Export Spreadsheet integration modules
 */

/**
 * Spreadsheet basic module.
 *
 * @private
 */
var BasicModule = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for Spreadsheet basic module.
     *
     * @private
     */
    function BasicModule() {
        Spreadsheet.Inject(Ribbon$$1, FormulaBar, SheetTabs, Selection, Edit, KeyboardNavigation, KeyboardShortcut, Clipboard, DataBind, Open, ContextMenu$1, Save, NumberFormat, CellFormat, Formula, Sort, CollaborativeEditing, UndoRedo, Resize, Filter, SpreadsheetHyperlink, WrapText, Insert, Delete, ProtectSheet, DataValidation, FindAndReplace, Merge, ConditionalFormatting, SpreadsheetImage, SpreadsheetChart, AutoFill);
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} - Get the module name.
     * @private
     */
    BasicModule.prototype.getModuleName = function () {
        return 'basic';
    };
    /**
     * Destroys the Spreadsheet basic module.
     *
     * @returns {void} - Destroys the Spreadsheet basic module.
     */
    BasicModule.prototype.destroy = function () {
        /* code snippet */
    };
    return BasicModule;
}());

/**
 * Spreadsheet all module.
 *
 * @private
 */
var AllModule = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for Spreadsheet all module.
     *
     * @private
     */
    function AllModule() {
        Spreadsheet.Inject(Ribbon$$1, FormulaBar, SheetTabs, Selection, Edit, KeyboardNavigation, KeyboardShortcut, Clipboard, DataBind, Open, Save, NumberFormat, CellFormat, Formula, Sort, Resize, CollaborativeEditing, UndoRedo, Filter, SpreadsheetHyperlink, WrapText, Insert, Delete, DataValidation, ProtectSheet, FindAndReplace, Merge, SpreadsheetImage, ConditionalFormatting, SpreadsheetChart, AutoFill);
    }
    /**
     * For internal use only - Get the module name.
     *
     * @private
     * @returns {string} - Get the module name.
     */
    AllModule.prototype.getModuleName = function () {
        return 'all';
    };
    /**
     * Destroys the Spreadsheet all module.
     *
     * @returns {void} - Destroys the Spreadsheet all module.
     */
    AllModule.prototype.destroy = function () {
        /* code snippet */
    };
    return AllModule;
}());

var __extends$9 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$8 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Represents the scroll settings.
 */
var ScrollSettings = /** @__PURE__ @class */ (function (_super) {
    __extends$9(ScrollSettings, _super);
    function ScrollSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$8([
        Property(false)
    ], ScrollSettings.prototype, "isFinite", void 0);
    __decorate$8([
        Property(true)
    ], ScrollSettings.prototype, "enableVirtualization", void 0);
    return ScrollSettings;
}(ChildProperty));
/**
 * Represents the selection settings.
 */
var SelectionSettings = /** @__PURE__ @class */ (function (_super) {
    __extends$9(SelectionSettings, _super);
    function SelectionSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$8([
        Property('Multiple')
    ], SelectionSettings.prototype, "mode", void 0);
    return SelectionSettings;
}(ChildProperty));

/** @hidden */
var DISABLED = 'e-disabled';
/** @hidden */
var WRAPTEXT = 'e-wraptext';
/** @hidden */
var locale = 'spreadsheetLocale';
/** @hidden */
var dialog = 'dialog';
/** @hidden */
var actionEvents = 'actionEvents';
/** @hidden */
var overlay = 'shape';
/** @hidden */
var fontColor = {
    'Custom': [
        '#ffffff', '#000000', '#e7e6e6', '#44546a', '#4472c4', '#ed7d31', '#a5a5a5', '#ffc000', '#70ad47', '#ff0000',
        '#f2f2f2', '#808080', '#cfcdcd', '#d5dce4', '#d9e2f3', '#fbe4d5', '#ededed', '#fff2cc', '#e2efd9', '#ffcccc',
        '#d9d9d9', '#595959', '#aeaaaa', '#acb9ca', '#b4c6e7', '#f7caac', '#dbdbdb', '#ffe599', '#c5e0b3', '#ff8080',
        '#bfbfbf', '#404040', '#747070', '#8496b0', '#8eaadb', '#f4b083', '#c9c9c9', '#ffd966', '#a8d08d', '#ff3333',
        '#a6a6a6', '#262626', '#3b3838', '#323e4f', '#2f5496', '#c45911', '#7b7b7b', '#bf8f00', '#538135', '#b30000',
        '#7f7f7f', '#0d0d0d', '#161616', '#212934', '#1f3763', '#823b0b', '#525252', '#7f5f00', '#375623', '#660000'
    ]
};
/** @hidden */
var fillColor = {
    'Custom': [
        '#ffffff', '#000000', '#ffff00', '#00ff00', '#00ffff', '#0000ff', '#ff0000', '#000080', '#800080', '#996633',
        '#f2f2f2', '#808080', '#ffffcc', '#b3ffb3', '#ccffff', '#ccccff', '#ffcccc', '#ccccff', '#ff80ff', '#f2e6d9',
        '#d9d9d9', '#595959', '#ffff80', '#80ff80', '#b3ffff', '#8080ff', '#ff8080', '#8080ff', '#ff00ff', '#dfbf9f',
        '#bfbfbf', '#404040', '#ffff33', '#33ff33', '#33ffff', '#3333ff', '#ff3333', '#0000b3', '#b300b3', '#c68c53',
        '#a6a6a6', '#262626', '#e6e600', '#00b300', '#009999', '#000099', '#b30000', '#000066', '#660066', '#86592d',
        '#7f7f7f', '#0d0d0d', '#999900', '#006600', '#006666', '#000066', '#660000', '#00004d', '#4d004d', '#734d26'
    ]
};
/** @hidden */
var keyCodes = {
    UP: 38,
    DOWN: 40,
    LEFT: 37,
    RIGHT: 39,
    FIRSTALPHABET: 65,
    LASTALPHABET: 90,
    SPACE: 32,
    BACKSPACE: 8,
    TAB: 9,
    DELETE: 46,
    ENTER: 13,
    ESC: 27
};
/**
 * Default locale text
 *
 * @hidden
 */
var defaultLocale = {
    FindValue: 'Find value',
    ReplaceValue: 'Replace value',
    FindReplaceTooltip: 'Find & Replace',
    InsertingEmptyValue: 'Reference value is not valid.',
    ReplaceAllEnd: ' matches replaced with ',
    ByRow: 'By Rows',
    ByColumn: 'By Columns',
    MatchCase: 'Match case   ',
    MatchExactCellElements: 'Match exact cell contents',
    Replace: 'Replace...',
    Find: 'Find and Replace...',
    Goto: 'Goto...',
    EntercellAddress: 'Enter cell address',
    GotoSpecial: 'GotoSpecial...',
    FindAndReplace: 'Find and Replace',
    FindNextBtn: 'Find Next',
    FindPreviousBtn: 'Find Previous',
    ReplaceBtn: 'Replace',
    ReplaceAllBtn: 'Replace All',
    GotoHeader: 'Go To',
    GotoSpecialHeader: 'Go To Special',
    Sheet: 'Sheet',
    Workbook: 'Workbook',
    NoElements: 'We couldn\'t find what you were looking for.',
    FindWhat: 'Find what',
    ReplaceWith: 'Replace with',
    Cut: 'Cut',
    Copy: 'Copy',
    Paste: 'Paste',
    PasteSpecial: 'Paste Special',
    Link: 'Link',
    Spreadsheet: 'Spreadsheet',
    SpreadsheetHyperlink: 'SpreadsheetHyperlink',
    Hyperlink: 'Hyperlink',
    EditHyperlink: 'Edit Hyperlink',
    OpenHyperlink: 'Open Hyperlink',
    RemoveHyperlink: 'Remove Hyperlink',
    InvalidHyperlinkAlert: 'The address of this site is not valid. Check the address and try again.',
    InsertLink: 'Insert Link',
    EditLink: 'Edit Link',
    All: 'All',
    Values: 'Values',
    Formats: 'Formats',
    Bold: 'Bold',
    Font: 'Font',
    FontSize: 'Font Size',
    Italic: 'Italic',
    Underline: 'Underline',
    Strikethrough: 'Strikethrough',
    TextColor: 'Text Color',
    FillColor: 'Fill Color',
    HorizontalAlignment: 'Horizontal Alignment',
    AlignLeft: 'Align Left',
    AlignCenter: 'Center',
    AlignRight: 'Align Right',
    VerticalAlignment: 'Vertical Alignment',
    AlignTop: 'Align Top',
    AlignMiddle: 'Align Middle',
    AlignBottom: 'Align Bottom',
    WrapText: 'Wrap Text',
    MergeCells: 'Merge Cells',
    MergeAll: 'Merge All',
    MergeHorizontally: 'Merge Horizontally',
    MergeVertically: 'Merge Vertically',
    Unmerge: 'Unmerge',
    UnmergeCells: 'Unmerge Cells',
    SelectMergeType: 'Select Merge Type',
    MergeCellsAlert: 'Merging cells will only preserve the top-leftmost(Uppermost) value. Merge anyway?',
    PasteMergeAlert: 'We can"t do that to a merge cell.',
    Borders: 'Borders',
    TopBorders: 'Top Borders',
    LeftBorders: 'Left Borders',
    RightBorders: 'Right Borders',
    BottomBorders: 'Bottom Borders',
    AllBorders: 'All Borders',
    HorizontalBorders: 'Horizontal Borders',
    VerticalBorders: 'Vertical Borders',
    OutsideBorders: 'Outside Borders',
    InsideBorders: 'Inside Borders',
    NoBorders: 'No Borders',
    BorderColor: 'Border Color',
    BorderStyle: 'Border Style',
    InsertFunction: 'Insert Function',
    Insert: 'Insert',
    Delete: 'Delete',
    DuplicateSheet: 'Duplicate',
    MoveRight: 'Move Right',
    MoveLeft: 'Move Left',
    Rename: 'Rename',
    Hide: 'Hide',
    FileName: 'File Name',
    EnterName: 'Enter Name',
    InvalidFileName: 'File name contains invalid character.',
    PROPER: 'Converts a text to proper case; first letter to uppercase and other letters to lowercase.',
    Unhide: 'Unhide',
    NameBox: 'Name Box',
    ShowHeaders: 'Show Headers',
    HideHeaders: 'Hide Headers',
    ShowGridLines: 'Show Gridlines',
    ExtendValidation: 'The selection contains some cells without data validation. Do you want to extend validation to these cells?',
    Yes: 'Yes',
    No: 'No',
    HideGridLines: 'Hide Gridlines',
    FreezePanes: 'Freeze Panes',
    FreezeRows: 'Freeze Rows',
    FreezeColumns: 'Freeze Columns',
    UnfreezePanes: 'Unfreeze Panes',
    UnfreezeRows: 'Unfreeze Rows',
    UnfreezeColumns: 'Unfreeze Columns',
    AddSheet: 'Add Sheet',
    ListAllSheets: 'List All Sheets',
    FullScreen: 'Full Screen',
    CollapseToolbar: 'Collapse Toolbar',
    ExpandToolbar: 'Expand Toolbar',
    CollapseFormulaBar: 'Collapse Formula Bar',
    ExpandFormulaBar: 'Expand Formula Bar',
    File: 'File',
    Home: 'Home',
    Formulas: 'Formulas',
    View: 'View',
    New: 'New',
    Open: 'Open',
    SaveAs: 'Save As',
    Update: 'Update',
    ExcelXlsx: 'Microsoft Excel',
    ExcelXls: 'Microsoft Excel 97-2003',
    CSV: 'Comma-separated values',
    FormulaBar: 'Formula Bar',
    Sort: 'Sort',
    SortAscending: 'Ascending',
    SortDescending: 'Descending',
    CustomSort: 'Custom Sort',
    AddColumn: 'Add Column',
    ContainsHeader: 'Data contains header',
    CaseSensitive: 'Case sensitive',
    SortBy: 'Sort by',
    ThenBy: 'Then by',
    SelectAColumn: 'Select a column',
    SortEmptyFieldError: 'Sort criteria column should not be empty.',
    SortDuplicateFieldError: ' is mentioned more than once. Duplicate columns must be removed.',
    SortOutOfRangeError: 'Select a cell or range inside the used range and try again.',
    MultiRangeSortError: "This can't be done on a multiple range selection. Select a single range and try again.",
    SortAndFilter: 'Sort & Filter',
    Filter: 'Filter',
    ClearAllFilter: 'Clear',
    ClearFilterFrom: 'Clear Filter From ',
    ReapplyFilter: 'Reapply',
    FilterCellValue: 'Filter by Value of Selected Cell',
    FilterOutOfRangeError: 'Select a cell or range inside the used range and try again.',
    HideRow: 'Hide Row',
    HideRows: 'Hide Rows',
    UnHideRows: 'UnHide Rows',
    HideColumn: 'Hide Column',
    HideColumns: 'Hide Columns',
    UnHideColumns: 'UnHide Columns',
    InsertRow: 'Insert Row',
    InsertRows: 'Insert Rows',
    Above: 'Above',
    Below: 'Below',
    InsertColumn: 'Insert Column',
    InsertColumns: 'Insert Columns',
    Before: 'Before',
    After: 'After',
    DeleteRow: 'Delete Row',
    DeleteRows: 'Delete Rows',
    DeleteColumn: 'Delete Column',
    DeleteColumns: 'Delete Columns',
    Ok: 'OK',
    Close: 'Close',
    Cancel: 'Cancel',
    Apply: 'Apply',
    MoreColors: 'More Colors',
    StandardColors: 'Standard Colors',
    General: 'General',
    Number: 'Number',
    Currency: 'Currency',
    Accounting: 'Accounting',
    ShortDate: 'Short Date',
    LongDate: 'Long Date',
    Time: 'Time',
    Percentage: 'Percentage',
    Fraction: 'Fraction',
    Scientific: 'Scientific',
    Text: 'Text',
    Custom: 'Custom',
    MobileFormulaBarPlaceHolder: 'Enter value or Formula',
    NumberFormat: 'Number Format',
    PasteAlert: 'You can\'t paste this here, because the copy area and paste area aren\'t in the same size. ' +
        'Please try pasting in a different range.',
    DestroyAlert: 'Are you sure you want to destroy the current workbook without saving and create a new workbook?',
    SheetRenameInvalidAlert: 'Sheet name contains invalid character.',
    SheetRenameEmptyAlert: 'Sheet name cannot be empty.',
    SheetRenameAlreadyExistsAlert: 'Sheet name already exists. Please enter another name.',
    DeleteSheetAlert: 'You can\'t undo deleting sheets, and you might be removing some data. If you don\'t need it, click OK to delete.',
    DeleteSingleLastSheetAlert: 'A Workbook must contain at least one visible worksheet.',
    PickACategory: 'Pick a category',
    Description: 'Description',
    UnsupportedFile: 'Unsupported File',
    InvalidUrl: 'Invalid URL',
    SUM: 'Adds a series of numbers and/or cells.',
    SUMIF: 'Adds the cells based on specified condition.',
    SUMIFS: 'Adds the cells based on specified conditions.',
    ABS: 'Returns the value of a number without its sign.',
    RAND: 'Returns a random number between 0 and 1.',
    RANDBETWEEN: 'Returns a random integer based on specified values.',
    FLOOR: 'Rounds a number down to the nearest multiple of a given factor.',
    CEILING: 'Rounds a number up to the nearest multiple of a given factor.',
    PRODUCT: 'Multiplies a series of numbers and/or cells.',
    INT: 'Returns a number to the nearest integer.',
    ROUNDUP: 'Rounds a number away from zero.',
    SUMPRODUCT: 'Returns sum of the product of given ranges of arrays.',
    SORT: 'Sorts a range of an array',
    T: 'Checks whether a value is text or not and returns the text.',
    EXACT: 'Checks whether a two text strings are exactly same and returns TRUE or FALSE.',
    LEN: 'Returns a number of characters in a given string.',
    MOD: 'Returns a remainder after a number is divided by divisor.',
    ODD: 'Rounds a positive number up and negative number down to the nearest odd integer.',
    PI: 'Returns the value of pi.',
    COUNTBLANK: 'Returns the number of empty cells in a specified range of cells.',
    EVEN: 'Rounds a positive number up and negative number down to the nearest even integer.',
    DECIMAL: 'Converts a text representation of a number in a given base into a decimal number.',
    DEGREES: 'Converts radians to degrees.',
    ADDRESS: 'Returns a cell reference as text, given specified row and column numbers.',
    TIME: 'Converts hours, minutes, seconds to the time formatted text.',
    CHAR: 'Returns the character from the specified number.',
    CODE: 'Returns the numeric code for the first character in a given string.',
    DOLLAR: 'Converts the number to currency formatted text.',
    SMALL: 'Returns the k-th smallest value in a given array.',
    LARGE: 'Returns the k-th largest value in a given array.',
    FACT: 'Returns the factorial of a number.',
    MEDIAN: 'Returns the median of the given set of numbers.',
    EDATE: 'Returns a date with given number of months before or after the specified date.',
    DATEVALUE: 'Converts a date string into date value.',
    HOUR: 'Returns the number of hours in a specified time string.',
    SECOND: 'Returns the number of seconds in a specified time string.',
    MINUTE: 'Returns the number of minutes in a specified time string.',
    NOW: 'Returns the current date and time.',
    MONTH: 'Returns the number of months in a specified date string.',
    TODAY: 'Returns the current date as date value.',
    WEEKDAY: 'Returns the day of the week corresponding to a date.',
    AVERAGE: 'Calculates average for the series of numbers and/or cells excluding text.',
    AVERAGEIF: 'Calculates average for the cells based on specified criterion.',
    AVERAGEIFS: 'Calculates average for the cells based on specified conditions.',
    AVERAGEA: 'Calculates the average for the cells evaluating TRUE as 1, text and FALSE as 0.',
    COUNT: 'Counts the cells that contain numeric values in a range.',
    COUNTIF: 'Counts the cells based on specified condition.',
    COUNTIFS: 'Counts the cells based on specified conditions.',
    COUNTA: 'Counts the cells that contains values in a range.',
    MIN: 'Returns the smallest number of the given arguments.',
    MAX: 'Returns the largest number of the given arguments.',
    DATE: 'Returns the date based on given year, month, and day.',
    DAY: 'Returns the day from the given date.',
    DAYS: 'Returns the number of days between two dates.',
    IF: 'Returns value based on the given expression.',
    IFS: 'Returns value based on the given multiple expressions.',
    CalculateAND: 'Returns TRUE if all the arguments are TRUE, otherwise returns FALSE.',
    CalculateOR: 'Returns TRUE if any of the arguments are TRUE, otherwise returns FALSE.',
    IFERROR: 'Returns value if no error found else it will return specified value.',
    CHOOSE: 'Returns a value from list of values, based on index number.',
    INDEX: 'Returns a value of the cell in a given range based on row and column number.',
    FIND: 'Returns the position of a string within another string, which is case sensitive',
    TEXT: 'Converts a value to text in specified number format.',
    CONCATENATE: 'Combines two or more strings together.',
    CONCAT: 'Concatenates a list or a range of text strings.',
    SUBTOTAL: 'Returns subtotal for a range using the given function number.',
    RADIANS: 'Converts degrees into radians.',
    MATCH: 'Returns the relative position of a specified value in given range.',
    LN: 'Returns the natural logarithm of a number.',
    INTERCEPT: 'Calculates the point of the Y-intercept line via linear regression.',
    UNIQUE: 'Returns a unique values from a range or array',
    SLOPE: 'Returns the slope of the line from linear regression of the data points.',
    DefineNameExists: 'This name already exists, try different name.',
    DefineNameInValid: 'The name that you entered is not valid.',
    CircularReference: 'When a formula refers to one or more circular references, this may result in an incorrect calculation.',
    ShowRowsWhere: 'Show rows where:',
    OR: 'OR',
    AND: 'AND',
    CustomFilterDatePlaceHolder: 'Choose a date',
    CustomFilterPlaceHolder: 'Enter the value',
    CustomFilter: 'Custom Filter',
    Between: 'Between',
    DateTimeFilter: 'DateTime Filters',
    Undo: 'Undo',
    Redo: 'Redo',
    DateFilter: 'Date Filters',
    TextFilter: 'Text Filters',
    NumberFilter: 'Number Filters',
    ClearFilter: 'Clear Filter',
    NoResult: 'No Matches Found',
    FilterFalse: 'False',
    FilterTrue: 'True',
    Blanks: 'Blanks',
    SelectAll: 'Select All',
    GreaterThanOrEqual: 'Greater Than Or Equal',
    GreaterThan: 'Greater Than',
    LessThanOrEqual: 'Less Than Or Equal',
    LessThan: 'Less Than',
    NotEqual: 'Not Equal',
    Equal: 'Equal',
    Contains: 'Contains',
    EndsWith: 'Ends With',
    StartsWith: 'Starts With',
    ClearButton: 'Clear',
    FilterButton: 'Filter',
    CancelButton: 'Cancel',
    OKButton: 'OK',
    Search: 'Search',
    ProtectSheet: 'Protect Sheet',
    UnprotectSheet: 'Unprotect Sheet',
    LockCells: 'Lock Cells',
    SelectCells: 'Select cells',
    FormatCells: 'Format cells',
    FormatRows: 'Format rows',
    FormatColumns: 'Format columns',
    InsertLinks: 'Insert links',
    ProtectContent: 'Protect the contents of locked cells',
    ProtectAllowUser: ' Allow all users of this worksheet to:',
    EditAlert: 'The cell you\'re trying to change is protected. To make change, unprotect the sheet.',
    SearchWithin: 'Search within',
    SearchBy: 'Search by',
    Reference: 'Reference',
    DataValidation: 'Data Validation',
    CLEARALL: 'Clear All',
    APPLY: 'Apply',
    CellRange: 'Cell Range',
    Allow: 'Allow',
    Data: 'Data',
    Minimum: 'Minimum',
    Maximum: 'Maximum',
    IgnoreBlank: 'Ignore blank',
    WholeNumber: 'Whole Number',
    Decimal: 'Decimal',
    Date: 'Date',
    TextLength: 'Text Length',
    List: 'List',
    NotBetween: 'Not between',
    EqualTo: 'Equal to',
    NotEqualTo: 'Not equal to',
    Greaterthan: 'Greater than',
    Lessthan: 'Less than',
    GreaterThanOrEqualTo: 'Greater than or equal to',
    LessThanOrEqualTo: 'Less than or equal to',
    InCellDropDown: 'In-cell-dropdown',
    Sources: 'Sources',
    Value: 'Value',
    Retry: 'Retry',
    EnterValue: 'Enter value',
    DialogError: 'The list source must be a reference to single row or column.',
    MinMaxError: 'The Maximum must be greater than or equal to the Minimum.',
    MoreValidation: 'This selection contains more than one validation. \n Erase current settings and continue?',
    FileNameError: 'A file name can\'t contain characters like \\ / : * ? " < > [ ] |',
    ListLengthError: 'The list values allows only upto 256 charcters',
    ValidationError: 'This value doesn' + '\'' + 't match the data validation restrictions defined for the cell.',
    EmptyError: 'You must enter a value',
    ClearHighlight: 'Clear Highlight',
    HighlightInvalidData: 'Highlight Invalid Data',
    ClearValidation: 'Clear Validation',
    HighlightCellsRules: 'Highlight Cells Rules',
    CFEqualTo: 'Equal To',
    TextThatContains: 'Text that Contains',
    Save: 'Save',
    EmptyFileName: 'File name cannot be empty.',
    LargeName: 'The name is too long.',
    ADateOccuring: 'A Date Occuring',
    DuplicateValues: 'Duplicate Values',
    TopBottomRules: 'Top/Bottom Rules',
    Top10Items: 'Top 10 Items',
    Top10: 'Top 10',
    Bottom10Items: 'Bottom 10 Items',
    Bottom10: 'Bottom 10',
    AboveAverage: 'Above Average',
    BelowAverage: 'Below Average',
    FormatCellsGreaterThan: 'Format cells that are GREATER THAN:',
    FormatCellsLessThan: 'Format cells that are LESS THAN:',
    FormatCellsBetween: 'Format cells that are BETWEEN:',
    FormatCellsEqualTo: 'Format cells that are EQUAL TO:',
    FormatCellsThatContainTheText: 'Format cells that contain the text:',
    FormatCellsThatContainADateOccurring: 'Format cells that contain a date occurring:',
    FormatCellsDuplicate: 'Format cells that contain:',
    FormatCellsTop: 'Format cells that rank in the TOP:',
    FormatCellsBottom: 'Format cells that rank in the BOTTOM:',
    FormatCellsAbove: 'Format cells that are ABOVE AVERAGE:',
    FormatCellsBelow: 'Format cells that are BELOW AVERAGE:',
    With: 'with',
    DataBars: 'Data Bars',
    ColorScales: 'Color Scales',
    IconSets: 'Icon Sets',
    ClearRules: 'Clear Rules',
    SelectedCells: 'Clear Rules from Selected Cells',
    EntireSheet: 'Clear Rules from Entire Sheet',
    ISNUMBER: 'Returns true when the value parses as a numeric value.',
    ROUND: 'Rounds a number to a specified number of digits.',
    GEOMEAN: 'Returns the geometric mean of an array or range of positive data.',
    POWER: 'Returns the result of a number raised to power',
    LOG: 'Returns the logarithm of a number to the base that you specify.',
    TRUNC: 'Returns the truncated value of a number to a specified number of decimal places.',
    EXP: 'Returns e raised to the power of the given number.',
    Clear: 'Clear',
    ClearContents: 'Clear Contents',
    ClearAll: 'Clear All',
    ClearFormats: 'Clear Formats',
    ClearHyperlinks: 'Clear Hyperlinks',
    LightRedFillWithDarkRedText: 'Light Red Fill with Dark Red Text',
    YellowFillWithDarkYellowText: 'Yellow Fill with Dark Yellow Text',
    GreenFillWithDarkGreenText: 'Green Fill with Dark Green Text',
    RedFill: 'Red Fill',
    RedText: 'Red Text',
    Duplicate: 'Duplicate',
    Unique: 'Unique',
    And: 'and',
    WebPage: 'WEB PAGE',
    ThisDocument: 'THIS DOCUMENT',
    DisplayText: 'Display Text',
    Url: 'URL',
    CellReference: 'Cell Reference',
    DefinedNames: 'Defined Names',
    EnterTheTextToDisplay: 'Enter the text to display',
    EnterTheUrl: 'Enter the URL',
    Image: 'Image',
    ConditionalFormatting: 'Conditional Formatting',
    BlueDataBar: 'Blue Data Bar',
    GreenDataBar: 'Green Data Bar',
    RedDataBar: 'Red Data Bar',
    OrangeDataBar: 'Orange Data Bar',
    LightblueDataBar: 'Light blue Data Bar',
    PurpleDataBar: 'Purple Data Bar',
    GYRColorScale: 'Green - Yellow - Red Color Scale',
    RYGColorScale: 'Red - Yellow - Green Color Scale',
    GWRColorScale: 'Green - White - Red Color Scale',
    RWGColorScale: 'Red - White - Green Color Scale',
    BWRColorScale: 'Blue - White - Red Color Scale',
    RWBColorScale: 'Red - White - Blue Color Scale',
    WRColorScale: 'White - Red Color Scale',
    RWColorScale: 'Red - White Color Scale',
    GWColorScale: 'Green - White Color Scale',
    WGColorScale: 'White - Green Color Scale',
    GYColorScale: 'Green - Yellow Color Scale',
    YGColorScale: 'Yellow - Green Color Scale',
    ThreeArrowsColor: '3 Arrows (Colored)',
    ThreeArrowsGray: '3 Arrows (Gray)',
    ThreeTriangles: '3 Triangles',
    FourArrowsColor: '4 Arrows (Gray)',
    FourArrowsGray: '4 Arrows (Colored)',
    FiveArrowsColor: '5 Arrows (Gray)',
    FiveArrowsGray: '5 Arrows (Colored)',
    ThreeTrafficLights1: '3 Traffic Lights (Unrimmed)',
    ThreeTrafficLights2: '3 Traffic Lights (Rimmed)',
    ThreeSigns: '3 Signs',
    FourTrafficLights: '4 Traffic Lights',
    RedToBlack: 'Red To Black',
    ThreeSymbols1: '3 Symbols (Circled)',
    ThreeSymbols2: '3 Symbols (Uncircled)',
    ThreeFlags: '3 Flags',
    ThreeStars: '3 Stars',
    FourRatings: '4 Ratings',
    FiveQuarters: '5 Quarters',
    FiveRatings: '5 Ratings',
    FiveBoxes: '5 Boxes',
    Chart: 'Chart',
    Column: 'Column',
    Bar: 'Bar',
    Area: 'Area',
    Pie: 'Pie',
    Doughnut: 'Doughnut',
    PieAndDoughnut: 'Pie/Doughnut',
    Line: 'Line',
    Radar: 'Radar',
    Scatter: 'Scatter',
    ChartDesign: 'Chart Design',
    ClusteredColumn: 'Clustered Column',
    StackedColumn: 'Stacked Column',
    StackedColumn100: '100% Stacked Column',
    ClusteredBar: 'Clustered Bar',
    StackedBar: 'Stacked Bar',
    StackedBar100: '100% Stacked Bar',
    StackedArea: 'Stacked Area',
    StackedArea100: '100% Stacked Area',
    StackedLine: 'Stacked Line',
    StackedLine100: '100% Stacked Line',
    AddChartElement: 'Add Chart Element',
    Axes: 'Axes',
    AxisTitle: 'Axis Title',
    ChartTitle: 'Chart Title',
    DataLabels: 'Data Labels',
    Gridlines: 'Gridlines',
    Legends: 'Legends',
    PrimaryHorizontal: 'Primary Horizontal',
    PrimaryVertical: 'Primary Vertical',
    None: 'None',
    AboveChart: 'Above Chart',
    Center: 'Center',
    InsideEnd: 'Inside End',
    InsideBase: 'Inside Base',
    OutsideEnd: 'OutSide End',
    PrimaryMajorHorizontal: 'Primary Major Horizontal',
    PrimaryMajorVertical: 'Primary Major Vertical',
    PrimaryMinorHorizontal: 'Primary Minor Horizontal',
    PrimaryMinorVertical: 'Primary Minor Vertical',
    Right: 'Right',
    Left: 'Left',
    Bottom: 'Bottom',
    Top: 'Top',
    SwitchRowColumn: 'Switch Row/Column',
    ChartTheme: 'Chart Theme',
    ChartType: 'Chart Type',
    Material: 'Material',
    Fabric: 'Fabric',
    Bootstrap: 'Bootstrap',
    HighContrastLight: 'HighContrast Light',
    MaterialDark: 'Material Dark',
    FabricDark: 'Fabric Dark',
    HighContrast: 'HighContrast',
    BootstrapDark: 'Bootstrap Dark',
    Bootstrap4: 'Bootstrap4',
    Bootstrap5Dark: 'Bootstrap5 Dark',
    Bootstrap5: 'Bootstrap5',
    Tailwind: 'Tailwind',
    TailwindDark: 'TailwindDark',
    VerticalAxisTitle: 'Vertical Axis Title',
    HorizontalAxisTitle: 'Horizontal Axis Title',
    EnterTitle: 'Enter Title',
    ProtectWorkbook: 'Protect Workbook',
    Password: 'Password (optional):',
    unProtectPassword: 'Password',
    EnterThePassword: 'Enter the password',
    ConfirmPassword: 'Confirm Password',
    EnterTheConfirmPassword: 'Re-enter your password',
    PasswordAlert: 'Confirmation password is not identical',
    UnProtectWorkbook: 'Unprotect Workbook',
    UnProtectPasswordAlert: 'The password you supplied is not correct.',
    InCorrectPassword: 'Unable to open the file or worksheet with the given password',
    PasswordAlertMsg: 'Please enter the password',
    ConfirmPasswordAlertMsg: 'Please enter the confirm password',
    IsProtected: 'is protected',
    PDF: 'PDF document',
    AutoFillMergeAlertMsg: 'To do this, all the merged cells need to be the same size',
    FillSeries: 'Fill Series',
    CopyCells: 'Copy Cells',
    FillFormattingOnly: 'Fill Formatting Only',
    FillWithoutFormatting: 'Fill Without Formatting',
    CustomFormat: 'Custom Number Formats',
    CustomFormatSample: 'Type',
    UnProtectWorksheet: 'Unprotect Sheet',
    ReEnterPassword: 'Re-enter password to proceed',
    SheetPassword: 'Password to unprotect sheet:'
};

/**
 * Export Spreadsheet viewer modules
 */

/**
 * Sheet module is used to render Sheet
 *
 * @hidden
 */
var SheetRender = /** @__PURE__ @class */ (function () {
    function SheetRender(parent) {
        this.colGroupWidth = 30; //Row header and selectall table colgroup width
        this.parent = parent;
        this.col = parent.createElement('col');
        this.rowRenderer = parent.serviceLocator.getService('row');
        this.cellRenderer = parent.serviceLocator.getService('cell');
        this.addEventListener();
    }
    SheetRender.prototype.refreshSelectALLContent = function () {
        var cell;
        var sheet = this.parent.getActiveSheet();
        if (sheet.frozenColumns || sheet.frozenRows) {
            var tHead = this.getSelectAllTable().querySelector('thead');
            var row = this.rowRenderer.render();
            tHead.appendChild(row);
            cell = this.parent.createElement('th', { className: 'e-select-all-cell' });
            row.appendChild(cell);
        }
        else {
            cell = this.headerPanel.firstElementChild;
            cell.classList.add('e-select-all-cell');
        }
        cell.appendChild(this.parent.createElement('button', { className: 'e-selectall',
            id: this.parent.element.id + "_select_all" }));
    };
    SheetRender.prototype.updateLeftColGroup = function (width, rowHdr) {
        if (width) {
            this.colGroupWidth = width;
        }
        if (!rowHdr) {
            rowHdr = this.getRowHeaderPanel();
        }
        var table = rowHdr.querySelector('table');
        var sheet = this.parent.getActiveSheet();
        var colGrp;
        if (width) {
            table.querySelector('colgroup').firstElementChild.style.width = this.colGroupWidth + "px";
        }
        else {
            colGrp = this.parent.createElement('colgroup');
            var col = this.col.cloneNode();
            col.style.width = this.colGroupWidth + "px";
            colGrp.appendChild(col);
            table.insertBefore(colGrp, table.querySelector('tbody'));
        }
        if (sheet.frozenRows || sheet.frozenColumns) {
            table = this.getSelectAllTable();
            if (width) {
                table.querySelector('colgroup').firstElementChild.style.width = this.colGroupWidth + "px";
            }
            else {
                table.insertBefore(colGrp.cloneNode(true), table.querySelector('thead'));
            }
        }
        this.setPanelWidth(sheet, rowHdr);
        this.setPanelHeight(sheet);
    };
    SheetRender.prototype.setPanelWidth = function (sheet, rowHdr) {
        var scrollSize = this.getScrollSize(true);
        var width = this.getRowHeaderWidth(sheet);
        var offset = this.parent.enableRtl ? 'right' : 'left';
        if (sheet.frozenColumns) {
            var frozenCol = document.getElementById(this.parent.element.id + '_sheet').getElementsByClassName('e-frozen-column')[0];
            frozenCol.style.height = "calc(100% - " + scrollSize + "px)";
            frozenCol.style[offset] = width - getDPRValue(1) + 'Px';
            frozenCol.style.display = '';
        }
        this.setHeaderPanelWidth(this.getSelectAllContent(), width);
        this.getColHeaderPanel().style.width = "calc(100% - " + width + "px)";
        this.getColHeaderPanel().style[offset] = width + 'px';
        this.setHeaderPanelWidth(rowHdr, width);
        this.getContentPanel().style.width = "calc(100% - " + width + "px)";
        this.getContentPanel().style[offset] = width + 'px';
        var scroll = (this.contentPanel.nextElementSibling ? this.contentPanel.nextElementSibling : null);
        if (scroll) {
            if (scrollSize) {
                scroll.style.height = scrollSize + 1 + 'px';
            }
            else {
                scroll.style.height = '1px';
                scroll.style.borderTopWidth = '0px';
            }
            scroll = scroll.firstElementChild;
            scroll.style[offset] = width + 'px';
            scroll.style.width = "calc(100% - " + width + "px)";
            if (Browser.userAgent.indexOf('Mac OS') > -1 && Browser.info.name === 'safari') {
                scroll.style.height = '7px';
                scroll.style.top = '-7px';
            }
        }
    };
    SheetRender.prototype.getScrollSize = function (addOffset) {
        var prop = this.parent.enableRtl ? 'margin-left' : 'margin-right';
        return parseInt(this.headerPanel.style[prop], 10) ? parseInt(this.headerPanel.style[prop], 10) + (addOffset ? 1 : 0) : 0;
    };
    SheetRender.prototype.setHeaderPanelWidth = function (content, width) {
        var emptyCol = [].slice.call(content.querySelectorAll('col.e-empty'));
        emptyCol.forEach(function (col) {
            width += parseInt(col.style.width, 10);
        });
        content.style.width = width + 'px';
    };
    SheetRender.prototype.setPanelHeight = function (sheet) {
        var scrollSize = this.getScrollSize(true);
        if (sheet.frozenRows) {
            var frozenHeight = this.getColHeaderHeight(sheet);
            if (!sheet.showHeaders && !sheet.frozenColumns) {
                this.headerPanel.style.height = frozenHeight + 'px';
            }
            else {
                this.headerPanel.style.height = '';
            }
            this.contentPanel.style.height = "calc(100% - " + (frozenHeight + scrollSize) + "px)";
            var frozenRow = document.getElementById(this.parent.element.id + '_sheet').getElementsByClassName('e-frozen-row')[0];
            frozenRow.style.width = Browser.isDevice ? '100%' :
                "calc(100% - " + scrollSize + "px)";
            frozenRow.style.top = frozenHeight - 1 - (sheet.showHeaders ? 1 : 0) + 'px';
            frozenRow.style.display = '';
        }
        else {
            this.contentPanel.style.height = "calc(100% - " + ((sheet.showHeaders ? getDPRValue(31) : 0) + scrollSize) + "px)";
        }
    };
    SheetRender.prototype.renderPanel = function () {
        this.contentPanel = this.parent.createElement('div', { className: 'e-main-panel' });
        var sheet = this.parent.getActiveSheet();
        var id = this.parent.element.id;
        this.contentPanel.appendChild(this.parent.createElement('div', { className: 'e-row-header', id: id + "_row_header" }));
        this.initHeaderPanel();
        if (this.parent.allowScrolling) {
            this.parent.scrollModule.setPadding();
        }
        var sheetEle = document.getElementById(this.parent.element.id + '_sheet');
        if (sheet.frozenColumns) {
            sheetEle.classList.add('e-frozen-columns');
        }
        if (sheet.frozenRows) {
            sheetEle.classList.add('e-frozen-rows');
        }
        this.updateHideHeaders(sheet, sheetEle);
        if (!sheet.showGridLines) {
            sheetEle.classList.add('e-hide-gridlines');
        }
        var content = this.contentPanel.appendChild(this.parent.createElement('div', { className: 'e-sheet-content', id: id + "_main_content" }));
        if (!this.parent.allowScrolling) {
            content.style.overflow = 'hidden';
        }
        if (sheet.frozenRows) {
            sheetEle.appendChild(this.parent.createElement('div', { className: 'e-frozen-row', styles: 'display: none' }));
        }
        if (sheet.frozenColumns) {
            sheetEle.appendChild(this.parent.createElement('div', { className: 'e-frozen-column', styles: 'display: none' }));
        }
        if (Browser.userAgent.indexOf('Mac OS') > -1 && Browser.info.name === 'safari') {
            sheetEle.classList.add('e-mac-safari');
        }
    };
    SheetRender.prototype.initHeaderPanel = function () {
        var id = this.parent.element.id;
        this.headerPanel = this.parent.createElement('div', { className: 'e-header-panel' });
        this.headerPanel.appendChild(this.parent.createElement('div', { className: 'e-selectall-container', id: id + "_selectall" }));
        this.headerPanel.appendChild(this.parent.createElement('div', { className: 'e-column-header', id: id + "_col_header" }));
    };
    SheetRender.prototype.createHeaderTable = function () {
        var rowHdrEle = this.contentPanel.querySelector('.e-row-header');
        var sheet = this.parent.getActiveSheet();
        if (sheet.frozenRows || sheet.frozenColumns) {
            this.updateTable(sheet.frozenRows ? ['thead', 'tbody'] : ['thead'], 'selectall', this.headerPanel.querySelector('.e-selectall-container'));
        }
        this.updateTable(sheet.frozenRows ? ['thead', 'tbody'] : ['thead'], 'colhdr', this.headerPanel.querySelector('.e-column-header'));
        this.updateTable(['tbody'], 'rowhdr', rowHdrEle);
        this.updateLeftColGroup(null, rowHdrEle);
    };
    SheetRender.prototype.updateTable = function (tagName, name, appendTo) {
        var _this = this;
        var table = this.parent.createElement('table', { className: 'e-table', attrs: { 'role': 'grid' } });
        table.classList.add("e-" + name + "-table");
        appendTo.appendChild(table);
        tagName.forEach(function (tag) { table.appendChild(_this.parent.createElement(tag)); });
    };
    /**
     * It is used to refresh the select all, row header, column header and content of the spreadsheet.
     *
     * @param {SheetRenderArgs} args - Specifies the cells, indexes, direction, skipUpdateOnFirst, top, left, initload properties.
     * @returns {void}
     */
    SheetRender.prototype.renderTable = function (args) {
        var _this = this;
        var indexes;
        var row;
        var hRow;
        var sheet = this.parent.getActiveSheet();
        var frag = document.createDocumentFragment();
        frag.appendChild(this.headerPanel);
        frag.appendChild(this.contentPanel);
        if (this.parent.allowScrolling) {
            var scrollPanel = this.parent.createElement('div', { className: 'e-scrollbar' });
            scrollPanel.appendChild(this.parent.createElement('div', { className: 'e-scroller' }));
            frag.appendChild(scrollPanel);
        }
        this.createHeaderTable();
        this.updateTable(['tbody'], 'content', this.contentPanel.lastElementChild);
        var colGrp = this.parent.createElement('colgroup');
        var col;
        var cTBody = this.contentPanel.querySelector('.e-sheet-content tbody');
        this.refreshSelectALLContent();
        var selectAllColGrp = this.getSelectAllContent().querySelector('colgroup');
        var rowHdrColGrp = this.getRowHeaderPanel().querySelector('colgroup');
        var selectAllHdrRow = this.getSelectAllContent().querySelector('thead .e-header-row');
        var rHdrTBody = this.contentPanel.querySelector('.e-row-header tbody');
        var selectAllTBody = this.getSelectAllContent().querySelector('tbody');
        var cHdrTHead = this.headerPanel.querySelector('.e-column-header thead');
        var cHdrTBody = this.headerPanel.querySelector('.e-column-header tbody');
        var cHdrRow = this.rowRenderer.render();
        cHdrTHead.appendChild(cHdrRow);
        this.getColHeaderTable().insertBefore(colGrp, cHdrTHead);
        var frozenRow = this.parent.frozenRowCount(sheet);
        var frozenCol = this.parent.frozenColCount(sheet);
        this.parent.notify(beforeContentLoaded, { top: args.top, left: args.left });
        var colCount = sheet.colCount.toString();
        var rowCount = sheet.colCount.toString();
        var layout = args.top && args.left ? 'RowColumn' : (args.top ? 'Row' : (args.left ? 'Column' : ''));
        this.parent.getColHeaderTable().setAttribute('aria-colcount', colCount);
        this.parent.getRowHeaderTable().setAttribute('aria-rowcount', rowCount);
        var emptyRow;
        attributes(this.parent.getContentTable(), { 'aria-rowcount': rowCount, 'aria-colcount': colCount });
        args.cells.forEach(function (value, key) {
            indexes = getRangeIndexes(key);
            if (indexes[1] === args.indexes[1] || !row) {
                hRow = _this.rowRenderer.render(indexes[0], true);
                if (frozenCol && frozenRow && indexes[1] < frozenCol && indexes[0] < frozenRow) {
                    emptyRow = selectAllTBody.querySelector('.e-empty');
                    if (emptyRow) {
                        selectAllTBody.insertBefore(hRow, emptyRow);
                    }
                    else {
                        selectAllTBody.appendChild(hRow);
                    }
                    row = hRow;
                }
                else if (frozenCol && indexes[1] < frozenCol) {
                    rHdrTBody.appendChild(hRow);
                    row = hRow;
                }
                else {
                    row = _this.rowRenderer.render(indexes[0]);
                    if (frozenRow && indexes[0] < frozenRow) {
                        emptyRow = cHdrTBody.querySelector('.e-empty');
                        if (emptyRow) {
                            cHdrTBody.insertBefore(row, emptyRow);
                        }
                        else {
                            cHdrTBody.appendChild(row);
                        }
                    }
                    else {
                        cTBody.appendChild(row);
                    }
                    if (indexes[1] === args.indexes[1]) {
                        if (frozenRow && indexes[0] < frozenRow) {
                            selectAllTBody.appendChild(hRow);
                        }
                        else {
                            rHdrTBody.appendChild(hRow);
                        }
                    }
                }
                if (indexes[1] === args.indexes[1]) {
                    hRow.appendChild(_this.cellRenderer.renderRowHeader(indexes[0]));
                }
            }
            row.appendChild(_this.cellRenderer.render({ colIdx: indexes[1], rowIdx: indexes[0], cell: value,
                address: key, lastCell: indexes[1] === args.indexes[3], isHeightCheckNeeded: true, row: row, hRow: hRow,
                pRow: row.previousSibling, pHRow: hRow.previousSibling, isRefreshing: args.isRefreshing,
                first: layout ? (layout.includes('Row') ? (indexes[0] === args.indexes[0] ? 'Row' : (layout.includes('Column') ? (indexes[1] === args.indexes[1] ? 'Column' : '') : '')) : (indexes[1] === args.indexes[1] ? 'Column' : '')) : '' }));
            if (frozenCol && indexes[1] === frozenCol - 1) {
                row = null;
            }
            if (value && value.format && (getColorCode(value.format) || value.format.indexOf('*') > -1)) {
                _this.parent.notify(getFormattedCellObject, { cell: value, value: value.value, format: value.format,
                    rowIndex: indexes[0], colIndex: indexes[1], td: _this.parent.getCell(indexes[0], indexes[1]) });
            }
            if (indexes[0] === args.indexes[0]) {
                if (frozenCol && indexes[1] < frozenCol) {
                    col = _this.updateCol(sheet, indexes[1], selectAllColGrp);
                    var empty = rowHdrColGrp.querySelector('.e-empty');
                    // eslint-disable-next-line @typescript-eslint/no-unused-expressions
                    empty ? rowHdrColGrp.insertBefore(col.cloneNode(true), empty) : rowHdrColGrp.appendChild(col.cloneNode(true));
                    selectAllHdrRow.appendChild(_this.cellRenderer.renderColHeader(indexes[1]));
                }
                else {
                    _this.updateCol(sheet, indexes[1], colGrp);
                    cHdrRow.appendChild(_this.cellRenderer.renderColHeader(indexes[1]));
                }
            }
        });
        if (this.parent[isReact]) {
            this.parent[renderReactTemplates]();
        }
        cTBody.parentElement.insertBefore(colGrp.cloneNode(true), cTBody);
        getUpdateUsingRaf(function () {
            if (!_this.parent) {
                return;
            }
            var content = _this.parent.getMainContent();
            var sheetContent = document.getElementById(_this.parent.element.id + '_sheet');
            if (sheetContent.childElementCount > 2 && sheetContent.querySelector('.e-header-panel') !== _this.headerPanel) {
                removeAllChildren(sheetContent);
            }
            sheetContent.appendChild(frag);
            sheetContent.style.backgroundColor = '';
            _this.checkRowHeightChanged(args, sheet);
            if (args.top) {
                content.parentElement.scrollTop = args.top;
            }
            if (args.left) {
                content.scrollLeft = args.left;
                _this.parent.getColumnHeaderContent().scrollLeft = args.left;
            }
            _this.parent.notify(contentLoaded, args);
            _this.checkTableWidth(sheet);
            _this.parent.notify(editOperation, { action: 'renderEditor' });
            if (!args.initLoad && !_this.parent.isOpen) {
                _this.parent.hideSpinner();
            }
            setAriaOptions(content, { busy: false });
            _this.parent.trigger(dataBound, {});
            if (_this.parent.isEdit) {
                _this.parent.notify(initiateEdit, null);
            }
            if (args.initLoad) {
                var triggerEvent = true;
                if (_this.parent.scrollSettings.enableVirtualization) {
                    for (var i = 0; i < sheet.ranges.length; i++) {
                        if (sheet.ranges[i].info.count - 1 > _this.parent.viewport.bottomIndex) {
                            triggerEvent = false;
                            break;
                        }
                    }
                }
                if (triggerEvent) {
                    /* eslint-disable */
                    if (_this.parent.isReact) {
                        setTimeout(function () {
                            if (!_this.parent) {
                                return;
                            }
                            _this.triggerCreatedEvent();
                        });
                        /* eslint-enable */
                    }
                    else {
                        _this.triggerCreatedEvent();
                    }
                }
                else if (!_this.parent.isOpen) {
                    _this.parent.hideSpinner();
                }
            }
        });
    };
    SheetRender.prototype.triggerCreatedEvent = function () {
        if (!this.parent.isOpen) {
            this.parent.hideSpinner();
        }
        if (this.parent.createdHandler) {
            if (this.parent.createdHandler.observers) {
                this.parent[created].observers = this.parent.createdHandler.observers;
            }
            else {
                this.parent.setProperties({ created: this.parent.createdHandler }, true);
            }
            this.parent.createdHandler = undefined;
            this.parent.trigger(created, null);
            this.parent.notify(clearUndoRedoCollection, null);
        }
    };
    /**
     * This method is used to check whether row height increased above the viewport after import
     */
    SheetRender.prototype.checkRowHeightChanged = function (args, sheet) {
        var eventArgs = { top: args.top, left: args.left, sheet: sheet };
        this.parent.notify(getUpdatedScrollPosition, eventArgs);
        if (args.top != eventArgs.top) {
            if (this.parent.scrollModule && this.parent.scrollModule.offset.top.idx && (eventArgs.top - args.top) < getRowHeight(sheet, this.parent.scrollModule.offset.top.idx)) {
                this.parent.scrollModule.offset.top.size = eventArgs.top;
            }
            args.top = eventArgs.top;
        }
        if (args.left != eventArgs.left) {
            if (this.parent.scrollModule && this.parent.scrollModule.offset.left.idx && (eventArgs.left - args.left) < getColumnWidth(sheet, this.parent.scrollModule.offset.left.idx)) {
                this.parent.scrollModule.offset.left.size = eventArgs.left;
            }
            args.left = eventArgs.left;
        }
    };
    SheetRender.prototype.checkTableWidth = function (sheet) {
        if (this.parent.scrollSettings.isFinite && !this.parent.scrollSettings.enableVirtualization && sheet.colCount - 1 ===
            this.parent.viewport.rightIndex) {
            var cellsWidth = getColumnsWidth(sheet, this.parent.viewport.leftIndex + this.parent.frozenColCount(sheet), this.parent.viewport.rightIndex);
            var rowHdrWidth = this.getRowHeaderWidth(sheet);
            var scrollSize = this.getScrollSize();
            if (cellsWidth < this.contentPanel.getBoundingClientRect().width - rowHdrWidth - scrollSize) {
                this.getContentPanel().style.width = cellsWidth + 'px';
                this.getColHeaderPanel().style.width = cellsWidth + 'px';
            }
            else if (!this.getContentPanel().style.width.includes('calc')) {
                this.getContentPanel().style.width = "calc(100% - " + rowHdrWidth + "px)";
                this.getColHeaderPanel().style.width = "calc(100% - " + rowHdrWidth + "px)";
            }
        }
    };
    SheetRender.prototype.refreshColumnContent = function (args) {
        var _this = this;
        var indexes;
        var row;
        var table;
        var count = 0;
        var cell;
        var col;
        var sheet = this.parent.getActiveSheet();
        var frag = document.createDocumentFragment();
        var hFrag = document.createDocumentFragment();
        var tBody = this.parent.element.querySelector('.e-sheet-content tbody');
        var hTBody = this.parent.element.querySelector('.e-column-header tbody');
        var colGrp = this.parent.element.querySelector('.e-sheet-content colgroup');
        colGrp = colGrp.cloneNode();
        frag.appendChild(colGrp);
        tBody = frag.appendChild(tBody.cloneNode(true));
        var hColGrp = colGrp.cloneNode();
        hFrag.appendChild(hColGrp);
        var tHead;
        tHead = this.parent.element.querySelector('.e-column-header thead');
        tHead = hFrag.appendChild(tHead.cloneNode(true));
        var hRow = tHead.querySelector('tr');
        hRow.innerHTML = '';
        var frozenRow = this.parent.frozenRowCount(sheet);
        var frozenCol = this.parent.frozenColCount(sheet);
        if (frozenRow) {
            hTBody = hFrag.appendChild(hTBody.cloneNode(true));
        }
        args.cells.forEach(function (value, key) {
            indexes = getRangeIndexes(key);
            if (indexes[0] === args.indexes[0]) {
                col = _this.updateCol(sheet, indexes[1], hColGrp);
                colGrp.appendChild(col.cloneNode());
                hRow.appendChild(_this.cellRenderer.renderColHeader(indexes[1]));
            }
            if (indexes[1] - frozenCol === args.indexes[1]) {
                if (indexes[0] < frozenRow) {
                    row = hTBody.children[count];
                }
                else {
                    row = tBody.children[count];
                }
                if (row) {
                    row.innerHTML = '';
                    count++;
                }
                else {
                    return;
                }
            }
            cell = row.appendChild(_this.cellRenderer.render({
                colIdx: indexes[1], rowIdx: indexes[0], cell: value, address: key, row: row, pRow: row.previousSibling,
                first: !args.skipUpdateOnFirst && indexes[1] === args.indexes[1] ? 'Column' : (_this.parent.scrollSettings.
                    enableVirtualization && indexes[0] === args.indexes[0] && _this.parent.viewport.topIndex !==
                    skipHiddenIdx(sheet, 0, true) ? 'Row' : ''), isRefreshing: true
            }));
            _this.checkColMerge(indexes, args.indexes, cell, value);
            if (frozenRow && indexes[0] === frozenRow - 1) {
                count = 0;
            }
        });
        var appendColumns = function () {
            table = _this.getColHeaderTable();
            removeAllChildren(table);
            table.appendChild(hFrag);
            table = _this.getContentTable();
            removeAllChildren(table);
            table.appendChild(frag);
            _this.parent.notify(virtualContentLoaded, { refresh: 'Column', prevRowColCnt: args.prevRowColCnt });
            if (_this.parent.isEdit) {
                _this.parent.notify(forRefSelRender, {});
            }
            if (_this.parent.allowChart) {
                _this.parent.notify(chartRangeSelection, null);
            }
            if (!_this.parent.isOpen) {
                _this.parent.hideSpinner();
            }
            setAriaOptions(_this.parent.getMainContent(), { busy: false });
        };
        if (args.insertDelete) {
            appendColumns();
        }
        else {
            getUpdateUsingRaf(function () { return appendColumns(); });
        }
    };
    SheetRender.prototype.refreshRowContent = function (args) {
        var _this = this;
        var indexes;
        var row;
        var hdrRow;
        var colGroupWidth = this.colGroupWidth;
        var sheet = this.parent.getActiveSheet();
        var cell;
        var frag = document.createDocumentFragment();
        var tBody = this.parent.createElement('tbody');
        var hFrag = document.createDocumentFragment();
        var hTBody = tBody.cloneNode();
        hFrag.appendChild(hTBody);
        frag.appendChild(tBody);
        var frozenCol = this.parent.frozenColCount(sheet);
        args.cells.forEach(function (value, key) {
            indexes = getRangeIndexes(key);
            if (indexes[1] === args.indexes[1] || !row) {
                hdrRow = _this.rowRenderer.render(indexes[0], true);
                if (frozenCol && indexes[1] < frozenCol) {
                    hTBody.appendChild(hdrRow);
                    row = hdrRow;
                }
                else {
                    if (indexes[1] === args.indexes[1]) {
                        hTBody.appendChild(hdrRow);
                    }
                    row = _this.rowRenderer.render(indexes[0]);
                    tBody.appendChild(row);
                }
                if (indexes[1] === args.indexes[1]) {
                    hdrRow.appendChild(_this.cellRenderer.renderRowHeader(indexes[0]));
                    colGroupWidth = getColGroupWidth(indexes[0] + 1);
                }
            }
            if (frozenCol) {
                hdrRow = hTBody.lastElementChild || hdrRow;
            }
            cell = row.appendChild(_this.cellRenderer.render({
                rowIdx: indexes[0], colIdx: indexes[1], cell: value, address: key, lastCell: indexes[1] === args.indexes[3], row: row, hRow: hdrRow, pRow: row.previousSibling,
                pHRow: hdrRow.previousSibling,
                isHeightCheckNeeded: true, first: !args.skipUpdateOnFirst && indexes[0] === args.indexes[0] ?
                    'Row' : (_this.parent.scrollSettings.enableVirtualization && indexes[1] === args.indexes[1] && _this.parent.viewport.leftIndex
                    !== skipHiddenIdx(sheet, 0, true, 'columns') ? 'Column' : ''), isRefreshing: true
            }));
            _this.checkRowMerge(indexes, args.indexes, cell, value);
            if (frozenCol && indexes[1] === frozenCol - 1) {
                row = null;
            }
        });
        if (this.colGroupWidth !== colGroupWidth) {
            this.updateLeftColGroup(colGroupWidth);
        }
        if (this.contentPanel.querySelector('.e-row-header tbody')) {
            detach(this.contentPanel.querySelector('.e-row-header tbody'));
            this.getRowHeaderTable().appendChild(hFrag);
        }
        if (this.contentPanel.querySelector('.e-sheet-content tbody')) {
            detach(this.contentPanel.querySelector('.e-sheet-content tbody'));
            this.getContentTable().appendChild(frag);
        }
        this.parent.notify(virtualContentLoaded, { refresh: 'Row', prevRowColCnt: args.prevRowColCnt });
        if (this.parent.allowChart) {
            this.parent.notify(chartRangeSelection, {});
        }
        if (this.parent.isEdit) {
            this.parent.notify(forRefSelRender, null);
        }
        if (!this.parent.isOpen) {
            this.parent.hideSpinner();
        }
        setAriaOptions(this.parent.getMainContent(), { busy: false });
    };
    SheetRender.prototype.updateCol = function (sheet, idx, appendTo) {
        var col = this.col.cloneNode();
        col.style.width = formatUnit(getColumnWidth(sheet, idx, null, true));
        if (appendTo) {
            var empty = appendTo.querySelector('.e-empty');
            return empty ? appendTo.insertBefore(col, empty) : appendTo.appendChild(col);
        }
        else {
            return col;
        }
    };
    SheetRender.prototype.updateColContent = function (args) {
        var _this = this;
        getUpdateUsingRaf(function () {
            var indexes;
            var row;
            var refChild;
            var cell;
            var rowCount = 0;
            var col;
            var sheet = _this.parent.getActiveSheet();
            var hRow = _this.parent.element.querySelector('.e-column-header .e-header-row');
            var hRefChild = hRow.firstElementChild;
            var colGrp = _this.parent.element.querySelector('.e-sheet-content colgroup');
            var hColGrp = _this.parent.element.querySelector('.e-column-header colgroup');
            var colRefChild = colGrp.firstElementChild;
            var skipRender;
            var hColRefChild = hColGrp.firstElementChild;
            var tBody = _this.parent.element.querySelector('.e-sheet-content tbody');
            var hTBody = _this.parent.element.querySelector('.e-column-header tbody');
            var frozenRow = _this.parent.frozenRowCount(sheet);
            var frozenCol = _this.parent.frozenColCount(sheet);
            args.cells.forEach(function (value, key) {
                if (skipRender) {
                    return;
                }
                indexes = getRangeIndexes(key);
                if (args.direction === 'first' && indexes[1] === args.indexes[1]) {
                    _this.checkColMerge([indexes[0], _this.parent.viewport.leftIndex + frozenCol], args.indexes, ((indexes[0] < frozenRow ? hTBody : tBody).rows[rowCount] ||
                        { cells: [] }).cells[(args.indexes[3] - args.indexes[1]) + 1], getCell(indexes[0], _this.parent.viewport.leftIndex + frozenCol, sheet) || {});
                }
                if (indexes[0] === args.indexes[0]) {
                    if (args.direction === 'last') {
                        col = _this.col.cloneNode();
                        col.style.width = formatUnit(getColumnWidth(sheet, indexes[1], null, true));
                        colGrp.insertBefore(col, colRefChild);
                        hColGrp.insertBefore(col.cloneNode(), hColRefChild);
                        hRow.insertBefore(_this.cellRenderer.renderColHeader(indexes[1]), hRefChild);
                    }
                    else {
                        col = _this.updateCol(sheet, indexes[1], colGrp);
                        hColGrp.appendChild(col.cloneNode());
                        hRow.appendChild(_this.cellRenderer.renderColHeader(indexes[1]));
                    }
                    if (_this.parent.scrollSettings.enableVirtualization && args.direction) {
                        /* eslint-disable */
                        detach(colGrp[args.direction + 'ElementChild']);
                        detach(hColGrp[args.direction + 'ElementChild']);
                        detach(hRow[args.direction + 'ElementChild']);
                        /* eslint-enable */
                    }
                }
                if (indexes[1] === args.indexes[1]) {
                    if (indexes[0] < frozenRow) {
                        row = hTBody.children[rowCount];
                    }
                    else {
                        row = tBody.children[rowCount];
                        if (!row) {
                            skipRender = true;
                            return;
                        }
                    }
                    rowCount++;
                    refChild = row.firstElementChild;
                }
                cell = _this.cellRenderer.render({ colIdx: indexes[1], rowIdx: indexes[0], cell: value, address: key,
                    lastCell: indexes[1] === args.indexes[3], isHeightCheckNeeded: args.direction === 'first', first: args.direction ===
                        'last' && !args.skipUpdateOnFirst && indexes[1] === args.indexes[1] ? 'Column' : '', checkNextBorder: args.direction
                        === 'last' && indexes[3] === args.indexes[3] ? 'Column' : '', isRefreshing: args.direction === 'first' });
                if (args.direction === 'last') {
                    _this.checkColMerge(indexes, args.indexes, cell, value, ((indexes[0] < frozenRow ? hTBody : tBody).rows[rowCount - 1] ||
                        { cells: [] }).cells[0]);
                    row.insertBefore(cell, refChild);
                }
                else {
                    row.appendChild(cell);
                }
                if (_this.parent.scrollSettings.enableVirtualization && args.direction) {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    detach(row[args.direction + 'ElementChild']);
                }
                if (frozenRow && indexes[0] === frozenRow - 1) {
                    rowCount = 0;
                }
            });
            _this.parent.notify(virtualContentLoaded, { refresh: 'Column', prevRowColCnt: args.prevRowColCnt });
            if (_this.parent.allowChart) {
                _this.parent.notify(chartRangeSelection, null);
            }
            if (_this.parent.isEdit) {
                _this.parent.notify(forRefSelRender, {});
            }
            if (!_this.parent.isOpen) {
                _this.parent.hideSpinner();
            }
            setAriaOptions(_this.parent.getMainContent(), { busy: false });
        });
    };
    SheetRender.prototype.updateRowContent = function (args) {
        var _this = this;
        var colGroupWidth = this.colGroupWidth;
        var row;
        var hRow;
        var cell;
        var sheet = this.parent.getActiveSheet();
        var count = 0;
        var tBody = this.parent.getMainContent().querySelector('tbody');
        var rTBody = this.parent.getRowHeaderContent().querySelector('tbody');
        var rFrag = document.createDocumentFragment();
        var indexes;
        var frag = document.createDocumentFragment();
        this.parent.showSpinner();
        var frozenCol = this.parent.frozenColCount(sheet);
        var frozenRow = this.parent.frozenRowCount(sheet);
        var firstRow;
        args.cells.forEach(function (value, cKey) {
            indexes = getRangeIndexes(cKey);
            if (args.direction === 'first' && indexes[0] === args.indexes[0]) {
                if (firstRow === undefined) {
                    firstRow = (indexes[1] < frozenCol ? rTBody : tBody).rows[(args.indexes[2] - args.indexes[0]) + 1] || null;
                }
                _this.checkRowMerge([_this.parent.viewport.topIndex + frozenRow, indexes[1]], args.indexes, (firstRow || { cells: [] }).cells[indexes[1] < frozenCol ? count + 1 : count], getCell(_this.parent.viewport.topIndex + frozenRow, indexes[1], sheet) || {});
            }
            if (indexes[1] === args.indexes[1] || !row) {
                hRow = _this.rowRenderer.render(indexes[0], true);
                if (frozenCol && indexes[1] < frozenCol) {
                    rFrag.appendChild(hRow);
                    row = hRow;
                }
                else {
                    row = _this.rowRenderer.render(indexes[0]);
                    frag.appendChild(row);
                    if (indexes[1] === args.indexes[1]) {
                        rFrag.appendChild(hRow);
                    }
                    if (_this.parent.scrollSettings.enableVirtualization && args.direction) {
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        detach(tBody[args.direction + 'ElementChild']);
                    }
                }
                if (indexes[1] === args.indexes[1]) {
                    hRow.appendChild(_this.cellRenderer.renderRowHeader(indexes[0]));
                    colGroupWidth = getColGroupWidth(indexes[0] + 1);
                    if (_this.parent.scrollSettings.enableVirtualization && args.direction) {
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        detach(rTBody[args.direction + 'ElementChild']);
                    }
                }
            }
            if (frozenCol) {
                hRow = rFrag.lastElementChild || hRow;
            }
            cell = row.appendChild(_this.cellRenderer.render({ colIdx: indexes[1], rowIdx: indexes[2], cell: value, address: cKey, lastCell: indexes[1] === args.indexes[3], row: row, pHRow: hRow.previousSibling,
                checkNextBorder: args.direction === 'last' && indexes[2] === args.indexes[2] ? 'Row' : '', pRow: row.previousSibling,
                isHeightCheckNeeded: args.direction === 'first' || args.direction === '', hRow: hRow, first: args.direction === 'last' &&
                    !args.skipUpdateOnFirst && indexes[0] === args.indexes[0] ? 'Row' : '', isRefreshing: args.direction === 'first' }));
            if (args.direction === 'last' && tBody.rows.length) {
                _this.checkRowMerge(indexes, args.indexes, cell, value, (indexes[1] < frozenCol ? rTBody : tBody).rows[0].cells[indexes[1] < frozenCol ?
                    count + 1 : count]);
            }
            count++;
            if (frozenCol && indexes[1] === frozenCol - 1) {
                row = null;
                firstRow = undefined;
                count = 0;
            }
        });
        if (this.colGroupWidth !== colGroupWidth) {
            this.updateLeftColGroup(colGroupWidth);
        }
        if (args.direction === 'last') {
            rTBody.insertBefore(rFrag, rTBody.firstElementChild);
            tBody.insertBefore(frag, tBody.firstElementChild);
        }
        else {
            rTBody.appendChild(rFrag);
            tBody.appendChild(frag);
        }
        if (this.parent.scrollSettings.enableVirtualization) {
            this.parent.notify(virtualContentLoaded, { refresh: 'Row', prevRowColCnt: args.prevRowColCnt });
        }
        if (this.parent.isEdit) {
            this.parent.notify(forRefSelRender, null);
        }
        if (this.parent.allowChart) {
            this.parent.notify(chartRangeSelection, {});
        }
        if (!this.parent.isOpen) {
            this.parent.hideSpinner();
        }
        setAriaOptions(this.parent.getMainContent(), { busy: false });
    };
    SheetRender.prototype.checkRowMerge = function (indexes, range, cell, model, firstcell) {
        if (this.parent.scrollSettings.enableVirtualization && cell &&
            (!isNullOrUndefined(model.rowSpan) || !isNullOrUndefined(model.colSpan))) {
            var frozenRow = this.parent.frozenRowCount(this.parent.getActiveSheet());
            if (indexes[0] === this.parent.viewport.topIndex + frozenRow) {
                if (model.rowSpan < 0) {
                    var args = { td: cell, rowIdx: indexes[0], colIdx: indexes[1], isRow: true,
                        isFreezePane: true };
                    this.parent.notify(checkMerge, args);
                    if (args.insideFreezePane) {
                        return;
                    }
                    if (this.parent.viewport.topIndex + frozenRow >= range[0]) {
                        this.refreshPrevMerge(range[0] + 1, indexes[1]);
                    }
                }
                if (firstcell && (firstcell.colSpan > 1 || firstcell.rowSpan > 1)) {
                    this.cellRenderer.refresh(indexes[0] + (range[2] - range[0]) + 1, indexes[1], null, firstcell);
                }
            }
            else if (model.rowSpan > 1) {
                var prevTopIdx = range[2] + 1;
                if (indexes[0] + model.rowSpan - 1 > prevTopIdx && indexes[0] < prevTopIdx) {
                    this.refreshPrevMerge(prevTopIdx, indexes[1], this.parent.viewport.topIndex + frozenRow);
                }
            }
        }
    };
    SheetRender.prototype.refreshPrevMerge = function (prevTopIdx, colIndex, currTopIdx) {
        var td = this.parent.getCell(prevTopIdx, colIndex, this.parent.getRow(currTopIdx ?
            currTopIdx : 0, null, colIndex));
        if (td && td.rowSpan > 1) {
            this.cellRenderer.refresh(prevTopIdx, colIndex, null, td);
        }
    };
    SheetRender.prototype.checkColMerge = function (indexes, range, cell, model, firstcell) {
        if (this.parent.scrollSettings.enableVirtualization && cell && indexes[1] === this.parent.viewport.leftIndex +
            this.parent.frozenColCount(this.parent.getActiveSheet()) && (!isNullOrUndefined(model.rowSpan) ||
            !isNullOrUndefined(model.colSpan))) {
            if (model.colSpan < 0) {
                var e = { td: cell, colIdx: indexes[1], rowIdx: indexes[0], isFreezePane: true };
                this.parent.notify(checkMerge, e);
                if (e.insideFreezePane) {
                    return;
                }
            }
            if (firstcell && (firstcell.colSpan > 1 || firstcell.rowSpan > 1)) {
                this.cellRenderer.refresh(indexes[0], indexes[1] + (range[3] - range[1]) + 1, null, firstcell);
            }
        }
    };
    /**
     * Used to toggle row and column headers.
     *
     * @returns {void}
     */
    SheetRender.prototype.showHideHeaders = function () {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        getUpdateUsingRaf(function () {
            if (sheet.showHeaders) {
                var content = _this.getContentPanel();
                _this.setPanelWidth(sheet, _this.getRowHeaderPanel());
                _this.setPanelHeight(sheet);
                document.getElementById(_this.parent.element.id + '_sheet').classList.remove('e-hide-headers');
                _this.getColHeaderPanel().scrollLeft = content.scrollLeft;
                _this.parent.selectRange(sheet.selectedRange);
            }
            else {
                _this.updateHideHeaders(sheet, document.getElementById(_this.parent.element.id + '_sheet'));
                _this.setPanelHeight(sheet);
                if (_this.parent.frozenColCount(sheet) || _this.parent.frozenRowCount(sheet)) {
                    _this.setPanelWidth(sheet, _this.getRowHeaderPanel());
                    _this.parent.selectRange(sheet.selectedRange);
                }
                else {
                    _this.getContentPanel().style.width = '';
                    var offset = _this.parent.enableRtl ? 'right' : 'left';
                    _this.getContentPanel().style[offset] = '';
                }
                _this.getScrollElement().style.left = _this.getRowHeaderWidth(sheet) + 'px';
            }
        });
    };
    SheetRender.prototype.updateHideHeaders = function (sheet, ele) {
        if (!sheet.showHeaders) {
            ele.classList.add('e-hide-headers');
        }
    };
    SheetRender.prototype.rowHeightChange = function (args) {
        if (args.threshold) {
            var sheet = this.parent.getActiveSheet();
            if (args.rowIdx < this.parent.frozenRowCount(sheet)) {
                this.setPanelHeight(sheet);
            }
        }
    };
    SheetRender.prototype.colWidthChange = function (args) {
        if (args.threshold) {
            var sheet = this.parent.getActiveSheet();
            if (args.colIdx < this.parent.frozenColCount(sheet)) {
                this.setPanelWidth(sheet, this.getRowHeaderPanel());
            }
            this.checkTableWidth(sheet);
        }
    };
    SheetRender.prototype.getRowHeaderWidth = function (sheet, skipFreezeCheck) {
        var width = 0;
        if (!skipFreezeCheck && sheet.frozenColumns) {
            var leftIdx = getCellIndexes(sheet.topLeftCell)[1];
            width = getColumnsWidth(sheet, leftIdx, leftIdx + sheet.frozenColumns - 1, true);
        }
        width += sheet.showHeaders ? getDPRValue(this.colGroupWidth) : 0;
        return width;
    };
    SheetRender.prototype.getColHeaderHeight = function (sheet, skipHeader) {
        var topIndex = getCellIndexes(sheet.topLeftCell)[0];
        return (sheet.showHeaders && !skipHeader ? getDPRValue(31) : 0) +
            getRowsHeight(sheet, topIndex, topIndex + sheet.frozenRows - 1, true);
    };
    /**
     * Get the select all table element of spreadsheet
     *
     * @returns {HTMLElement} - Select all content element.
     */
    SheetRender.prototype.getSelectAllContent = function () {
        return this.headerPanel.getElementsByClassName('e-selectall-container')[0];
    };
    /**
     * Get the horizontal scroll element of spreadsheet
     *
     * @returns {HTMLElement} - Select all content element.
     */
    SheetRender.prototype.getScrollElement = function () {
        var elem = (this.contentPanel.parentElement || this.contentPanel.nextElementSibling);
        return elem && elem.querySelector('.e-scroller');
    };
    /**
     * Get the select all table element of spreadsheet
     *
     * @returns {HTMLTableElement} - Select all table element.
     */
    SheetRender.prototype.getSelectAllTable = function () {
        return this.headerPanel.getElementsByClassName('e-selectall-table')[0];
    };
    /**
     * Get the column header element of spreadsheet
     *
     * @returns {HTMLTableElement} - Column header table element.
     */
    SheetRender.prototype.getColHeaderTable = function () {
        return this.headerPanel.getElementsByClassName('e-colhdr-table')[0];
    };
    /**
     * Get the row header table element of spreadsheet
     *
     * @returns {HTMLTableElement} - Row header table element.
     */
    SheetRender.prototype.getRowHeaderTable = function () {
        return this.contentPanel.getElementsByClassName('e-rowhdr-table')[0];
    };
    /**
     * Get the main content table element of spreadsheet
     *
     * @returns {Element} - Content table element.
     */
    SheetRender.prototype.getContentTable = function () {
        return this.contentPanel.getElementsByClassName('e-content-table')[0];
    };
    /**
     * Get the row header div element of spreadsheet
     *
     * @returns {HTMLElement} - Row header panel element.
     */
    SheetRender.prototype.getRowHeaderPanel = function () {
        return this.contentPanel.getElementsByClassName('e-row-header')[0];
    };
    /**
     * Get the column header div element of spreadsheet
     *
     * @returns {HTMLElement} - Column header panel element.
     */
    SheetRender.prototype.getColHeaderPanel = function () {
        return this.headerPanel.getElementsByClassName('e-column-header')[0];
    };
    /**
     * Get the main content div element of spreadsheet
     *
     * @returns {HTMLElement} - Content panel element.
     */
    SheetRender.prototype.getContentPanel = function () {
        return this.contentPanel.getElementsByClassName('e-sheet-content')[0];
    };
    SheetRender.prototype.addEventListener = function () {
        this.parent.on(created, this.triggerCreatedEvent, this);
        this.parent.on(rowHeightChanged, this.rowHeightChange, this);
        this.parent.on(colWidthChanged, this.colWidthChange, this);
        this.parent.on(spreadsheetDestroyed, this.destroy, this);
    };
    SheetRender.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    SheetRender.prototype.removeEventListener = function () {
        this.parent.off(created, this.triggerCreatedEvent);
        this.parent.off(rowHeightChanged, this.rowHeightChange);
        this.parent.off(colWidthChanged, this.colWidthChange);
        this.parent.off(spreadsheetDestroyed, this.destroy);
    };
    return SheetRender;
}());

/**
 * Sheet module is used for creating row element
 *
 * @hidden
 */
var RowRenderer = /** @__PURE__ @class */ (function () {
    function RowRenderer(parent) {
        this.parent = parent;
        this.element = this.parent.createElement('tr', { attrs: { 'role': 'row' } });
        this.cellRenderer = parent.serviceLocator.getService('cell');
    }
    RowRenderer.prototype.render = function (index, isRowHeader, skipHidden) {
        var row = this.element.cloneNode();
        if (index === undefined) {
            row.classList.add('e-header-row');
            return row;
        }
        row.classList.add('e-row');
        var sheet = this.parent.getActiveSheet();
        attributes(row, { 'aria-rowindex': (index + 1).toString() });
        var rowHeight = getRowHeight(sheet, index, true);
        row.style.height = rowHeight + "px";
        if (rowHeight < 20) {
            row.style.lineHeight = rowHeight > 0 ? (rowHeight - 1) + 'px' : '0px';
        }
        if (isRowHeader && !skipHidden) {
            if (rowHeight < 20) {
                row.style.lineHeight = rowHeight >= 4 ? (rowHeight - 4) + 'px' :
                    rowHeight > 0 ? (rowHeight - 1) + 'px' : '0px';
                if (!row.classList.contains('e-reach-fntsize')) {
                    row.classList.add('e-reach-fntsize');
                }
            }
            if (isHiddenRow(sheet, index + 1) && !isHiddenRow(sheet, index - 1)) {
                row.classList.add('e-hide-start');
            }
            if (index !== 0 && isHiddenRow(sheet, index - 1) && !isHiddenRow(sheet, index + 1)) {
                row.classList.add('e-hide-end');
            }
        }
        return row;
    };
    RowRenderer.prototype.refresh = function (index, pRow, hRow, header) {
        var row;
        var sheet = this.parent.getActiveSheet();
        if (header) {
            row = this.render(index, true, true);
            row.appendChild(this.cellRenderer.renderRowHeader(index));
        }
        else {
            row = this.render(index);
            var len = this.parent.viewport.rightIndex;
            for (var i = this.parent.viewport.leftIndex; i <= len; i++) {
                if (isHiddenCol(sheet, i)) {
                    continue;
                }
                row.appendChild(this.cellRenderer.render({ colIdx: i, rowIdx: index, cell: getCell(index, i, sheet),
                    address: getCellAddress(index, i), lastCell: i === len, row: row, hRow: hRow, isHeightCheckNeeded: true, pRow: pRow,
                    first: index === this.parent.viewport.topIndex && skipHiddenIdx(sheet, index, true) !== skipHiddenIdx(sheet, 0, true) ?
                        'Row' : '' }));
            }
        }
        return row;
    };
    return RowRenderer;
}());

/**
 * CellRenderer class which responsible for building cell content.
 *
 * @hidden
 */
var CellRenderer = /** @__PURE__ @class */ (function () {
    function CellRenderer(parent) {
        this.parent = parent;
        this.element = this.parent.createElement('td');
        this.th = this.parent.createElement('th', { className: 'e-header-cell' });
        this.tableRow = parent.createElement('tr', { className: 'e-row' });
        this.parent.on(updateView, this.updateView, this);
        this.parent.on('calculateFormula', this.calculateFormula, this);
    }
    CellRenderer.prototype.renderColHeader = function (index) {
        var headerCell = this.th.cloneNode();
        attributes(headerCell, { 'role': 'columnheader', 'aria-colindex': (index + 1).toString(), 'tabindex': '-1' });
        headerCell.innerHTML = getColumnHeaderText(index + 1);
        var sheet = this.parent.getActiveSheet();
        if (isHiddenCol(sheet, index + 1)) {
            headerCell.classList.add('e-hide-start');
        }
        if (index !== 0 && isHiddenCol(sheet, index - 1)) {
            headerCell.classList.add('e-hide-end');
        }
        return headerCell;
    };
    CellRenderer.prototype.renderRowHeader = function (index) {
        var headerCell = this.element.cloneNode();
        addClass([headerCell], 'e-header-cell');
        attributes(headerCell, { 'role': 'rowheader', 'tabindex': '-1' });
        headerCell.innerHTML = (index + 1).toString();
        return headerCell;
    };
    CellRenderer.prototype.render = function (args) {
        var sheet = this.parent.getActiveSheet();
        args.td = this.element.cloneNode();
        args.td.className = 'e-cell';
        attributes(args.td, { 'role': 'gridcell', 'aria-colindex': (args.colIdx + 1).toString(), 'tabindex': '-1' });
        if (this.checkMerged(args)) {
            return args.td;
        }
        args.isRefresh = false;
        this.update(args);
        if (args.cell && args.td) {
            if (sheet.conditionalFormats && sheet.conditionalFormats.length) {
                this.parent.notify(cFRender, { rowIdx: args.rowIdx, colIdx: args.colIdx, cell: args.cell, td: args.td, isChecked: false });
            }
            if (args.td.childElementCount && args.td.children[0].className === 'e-cf-databar') {
                if (args.cell.style && args.cell.style.fontSize) {
                    args.td.children[0].querySelector('.e-databar-value').style.fontSize = args.cell.style.fontSize;
                }
                args.td.children[0].style.height = '100%';
                args.td.children[0].firstElementChild.nextElementSibling.style.height = '100%';
            }
        }
        if (!args.td.classList.contains('e-cell-template')) {
            this.parent.notify(renderFilterCell, { td: args.td, rowIndex: args.rowIdx, colIndex: args.colIdx });
        }
        var evtArgs = { cell: args.cell, element: args.td, address: args.address, rowIndex: args.rowIdx, colIndex: args.colIdx, needHeightCheck: false };
        this.parent.trigger('beforeCellRender', evtArgs);
        if (!sheet.rows[args.rowIdx] || !sheet.rows[args.rowIdx].customHeight) {
            if ((evtArgs.element && evtArgs.element.children.length) || evtArgs.needHeightCheck) {
                var clonedCell = evtArgs.element.cloneNode(true);
                clonedCell.style.width = getColumnWidth(sheet, args.colIdx, true) + 'px';
                this.tableRow.appendChild(clonedCell);
            }
            if ((args.lastCell && this.tableRow.childElementCount) || evtArgs.needHeightCheck) {
                var tableRow = args.row || this.parent.getRow(args.rowIdx);
                var previouseHeight = getRowHeight(sheet, args.rowIdx);
                var rowHeight = this.getRowHeightOnInit();
                if (rowHeight > previouseHeight) {
                    var dprHgt = getDPRValue(rowHeight);
                    tableRow.style.height = dprHgt + "px";
                    (args.hRow || this.parent.getRow(args.rowIdx, this.parent.getRowHeaderTable())).style.height = dprHgt + "px";
                    setRowHeight(sheet, args.rowIdx, rowHeight);
                }
                this.tableRow.innerHTML = '';
            }
        }
        this.setWrapByValue(sheet, args);
        return evtArgs.element;
    };
    CellRenderer.prototype.setWrapByValue = function (sheet, args) {
        if (args.cell && !args.cell.wrap && args.cell.value && args.cell.value.toString().includes('\n')) {
            setCell(args.rowIdx, args.colIdx, sheet, { wrap: true }, true);
            this.parent.notify(wrapEvent, { range: [args.rowIdx, args.colIdx, args.rowIdx, args.colIdx], wrap: true, initial: true, sheet: sheet,
                td: args.td, row: args.row, hRow: args.hRow });
        }
    };
    CellRenderer.prototype.update = function (args) {
        var sheet = this.parent.getActiveSheet();
        var compiledTemplate = this.processTemplates(args.cell, args.rowIdx, args.colIdx);
        if (compiledTemplate) {
            if (typeof compiledTemplate === 'string') {
                args.td.innerHTML = compiledTemplate;
            }
            else {
                removeAllChildren(args.td);
                args.td.appendChild(compiledTemplate);
            }
            args.td.classList.add('e-cell-template');
        }
        if (args.isRefresh) {
            if (args.td.rowSpan) {
                this.mergeFreezeRow(sheet, args.rowIdx, args.colIdx, args.td.rowSpan, args.row, true);
                args.td.removeAttribute('rowSpan');
            }
            if (args.td.colSpan) {
                this.mergeFreezeCol(sheet, args.rowIdx, args.colIdx, args.td.colSpan, true);
                args.td.removeAttribute('colSpan');
            }
            if (this.checkMerged(args)) {
                return;
            }
            if (args.cell && !args.cell.hyperlink && args.td.querySelector('.e-hyperlink')) {
                args.td.removeChild(args.td.querySelector('.e-hyperlink'));
            }
        }
        if (args.cell && args.cell.formula) {
            this.calculateFormula(args);
        }
        var formatArgs = {
            type: args.cell && getTypeFromFormat(args.cell.format),
            value: args.cell && args.cell.value, format: args.cell && args.cell.format ? args.cell.format : 'General',
            formattedText: args.cell && args.cell.value, onLoad: true, isRightAlign: false, cell: args.cell,
            rowIndex: args.rowIdx, colIndex: args.colIdx, isRowFill: false
        };
        if (args.cell) {
            this.parent.notify(getFormattedCellObject, formatArgs);
        }
        this.parent.refreshNode(args.td, { type: formatArgs.type, result: formatArgs.formattedText, curSymbol: getNumberDependable(this.parent.locale, 'USD'), isRightAlign: formatArgs.isRightAlign,
            value: formatArgs.value || '', isRowFill: formatArgs.isRowFill });
        var style = {};
        if (args.cell) {
            if (args.cell.style) {
                if (args.cell.style.properties) {
                    style = skipDefaultValue(args.cell.style, true);
                }
                else {
                    style = args.cell.style;
                }
            }
            if (args.cell.chart && args.cell.chart.length > 0) {
                this.parent.notify(setChart, { chart: args.cell.chart, isInitCell: true, range: getCellAddress(args.rowIdx, args.colIdx) });
            }
            if (args.cell.hyperlink) {
                this.parent.notify(createHyperlinkElement, { cell: args.cell, td: args.td, rowIdx: args.rowIdx, colIdx: args.colIdx });
            }
            if (args.cell.rowSpan > 1) {
                var rowSpan = args.cell.rowSpan - this.parent.hiddenCount(args.rowIdx, args.rowIdx + (args.cell.rowSpan - 1));
                if (rowSpan > 1) {
                    args.td.rowSpan = rowSpan;
                    this.mergeFreezeRow(sheet, args.rowIdx, args.colIdx, rowSpan, args.row);
                }
            }
            if (args.cell.colSpan > 1) {
                var colSpan = args.cell.colSpan -
                    this.parent.hiddenCount(args.colIdx, args.colIdx + (args.cell.colSpan - 1), 'columns');
                if (colSpan > 1) {
                    args.td.colSpan = colSpan;
                    this.mergeFreezeCol(sheet, args.rowIdx, args.colIdx, colSpan);
                }
            }
            if (args.cell.image) {
                for (var i = 0; i < args.cell.image.length; i++) {
                    if (args.cell.image[i]) {
                        this.parent.notify(createImageElement, {
                            options: {
                                src: args.cell.image[i].src, imageId: args.cell.image[i].id,
                                height: args.cell.image[i].height, width: args.cell.image[i].width,
                                top: args.cell.image[i].top, left: args.cell.image[i].left
                            },
                            range: getRangeAddress([args.rowIdx, args.colIdx, args.rowIdx, args.colIdx]), isPublic: false
                        });
                    }
                }
            }
        }
        if (args.isRefresh) {
            this.removeStyle(args.td, args.rowIdx, args.colIdx);
        }
        if (args.lastCell && this.parent.chartColl && this.parent.chartColl.length) {
            this.parent.notify(refreshChart, {
                cell: args.cell, rIdx: args.rowIdx, cIdx: args.colIdx, sheetIdx: this.parent.activeSheetIndex
            });
        }
        this.applyStyle(args, style);
        if (args.checkCf || (args.lastCell && sheet.conditionalFormats && sheet.conditionalFormats.length)) {
            this.parent.notify(checkConditionalFormat, { rowIdx: args.rowIdx, colIdx: args.colIdx, cell: args.cell, td: args.td });
        }
        if (args.checkNextBorder === 'Row') {
            var borderTop = this.parent.getCellStyleValue(['borderTop'], [Number(this.parent.getContentTable().rows[0].getAttribute('aria-rowindex')) - 1, args.colIdx]).borderTop;
            if (borderTop !== '' && (!args.cell || !args.cell.style || !args.cell.style.bottomPriority)) {
                this.parent.notify(applyCellFormat, { style: { borderBottom: borderTop }, rowIdx: args.rowIdx,
                    colIdx: args.colIdx, cell: args.td });
            }
        }
        if (args.checkNextBorder === 'Column') {
            var borderLeft = this.parent.getCellStyleValue(['borderLeft'], [args.rowIdx, args.colIdx + 1]).borderLeft;
            if (borderLeft !== '' && (!args.cell || !args.cell.style || (!args.cell.style.borderRight && !args.cell.style.border))) {
                this.parent.notify(applyCellFormat, { style: { borderRight: borderLeft }, rowIdx: args.rowIdx, colIdx: args.colIdx,
                    cell: args.td });
            }
        }
        if (args.cell) {
            if (args.cell.hyperlink && !args.td.classList.contains('e-cell-template')) {
                var address = void 0;
                if (typeof (args.cell.hyperlink) === 'string') {
                    address = args.cell.hyperlink;
                    if (address.indexOf('http://') !== 0 && address.indexOf('https://') !== 0 && address.indexOf('ftp://') !== 0) {
                        args.cell.hyperlink = address.toLowerCase().indexOf('www.') === 0 ? 'http://' + address : address;
                    }
                }
                else {
                    address = args.cell.hyperlink.address;
                    if (address.indexOf('http://') !== 0 && address.indexOf('https://') !== 0 && address.indexOf('ftp://') !== 0) {
                        args.cell.hyperlink.address = address.toLowerCase().indexOf('www.') === 0 ? 'http://' + address : address;
                    }
                }
                this.parent.notify(createHyperlinkElement, { cell: args.cell, td: args.td, rowIdx: args.rowIdx, colIdx: args.colIdx });
            }
            if (args.cell.wrap) {
                this.parent.notify(wrapEvent, {
                    range: [args.rowIdx, args.colIdx, args.rowIdx, args.colIdx], wrap: true, sheet: sheet, initial: true, td: args.td, row: args.row, hRow: args.hRow, isCustomHgt: !args.isRefresh &&
                        getRowHeight(sheet, args.rowIdx) > 20
                });
            }
        }
        var validation = (args.cell && args.cell.validation) || (sheet.columns && sheet.columns[args.colIdx] &&
            sheet.columns[args.colIdx].validation);
        if (validation && validation.isHighlighted) {
            this.parent.notify(addHighlight, { range: getRangeAddress([args.rowIdx, args.colIdx]), td: args.td });
        }
        if (args.cell && args.cell.validation && args.cell.validation.isHighlighted) {
            this.parent.notify(addHighlight, { range: getRangeAddress([args.rowIdx, args.colIdx]), td: args.td });
        }
    };
    CellRenderer.prototype.applyStyle = function (args, style) {
        if (Object.keys(style).length || Object.keys(this.parent.commonCellStyle).length || args.lastCell) {
            this.parent.notify(applyCellFormat, {
                style: extend({}, this.parent.commonCellStyle, style), rowIdx: args.rowIdx, colIdx: args.colIdx, cell: args.td,
                first: args.first, row: args.row, lastCell: args.lastCell, hRow: args.hRow, pRow: args.pRow, isHeightCheckNeeded: args.isHeightCheckNeeded, manualUpdate: args.manualUpdate, onActionUpdate: args.onActionUpdate
            });
        }
    };
    CellRenderer.prototype.calculateFormula = function (args) {
        if (args.cell.value !== undefined && args.cell.value !== null) {
            var eventArgs_1 = { action: 'checkFormulaAdded', added: true, address: args.address, sheetId: (args.sheetIndex === undefined ? this.parent.getActiveSheet() : getSheet(this.parent, args.sheetIndex)).id.toString() };
            this.parent.notify(workbookFormulaOperation, eventArgs_1);
            if (eventArgs_1.added) {
                return;
            }
        }
        var isFormula = checkIsFormula(args.cell.formula);
        var skip = args.cell.formula.indexOf('UNIQUE') > -1;
        if (skip) {
            var formulaArgs = { toSkip: false,
                cellRef: getRangeAddress([args.rowIdx, args.colIdx]) };
            this.parent.notify(getFormulaInfoTable, formulaArgs);
            skip = formulaArgs.toSkip;
        }
        var eventArgs = { action: 'refreshCalculate', value: args.cell.formula, rowIndex: args.rowIdx, colIndex: args.colIdx, isFormula: isFormula, sheetIndex: args.sheetIndex,
            isRefreshing: args.isRefreshing, skip: skip };
        this.parent.notify(workbookFormulaOperation, eventArgs);
        args.cell.value = getCell(args.rowIdx, args.colIdx, isNullOrUndefined(args.sheetIndex) ? this.parent.getActiveSheet() :
            getSheet(this.parent, args.sheetIndex)).value;
    };
    CellRenderer.prototype.checkMerged = function (args) {
        if (args.cell && (args.cell.colSpan < 0 || args.cell.rowSpan < 0)) {
            var sheet = this.parent.getActiveSheet();
            if (sheet.frozenRows || sheet.frozenColumns) {
                var mergeArgs = { range: [args.rowIdx, args.colIdx, args.rowIdx, args.colIdx] };
                this.parent.notify(activeCellMergedRange, mergeArgs);
                var frozenRow = this.parent.frozenRowCount(sheet);
                var frozenCol = this.parent.frozenColCount(sheet);
                var setDisplay = void 0;
                if (sheet.frozenRows && sheet.frozenColumns) {
                    if (mergeArgs.range[0] < frozenRow && mergeArgs.range[1] < frozenCol) {
                        setDisplay = args.rowIdx < frozenRow && args.colIdx < frozenCol;
                    }
                    else if (mergeArgs.range[0] < frozenRow) {
                        setDisplay = args.rowIdx < frozenRow;
                    }
                    else if (mergeArgs.range[1] < frozenCol) {
                        setDisplay = args.colIdx < frozenCol;
                    }
                    else {
                        setDisplay = true;
                    }
                }
                else {
                    setDisplay = frozenRow ? (mergeArgs.range[0] >= frozenRow || args.rowIdx < frozenRow) : (mergeArgs.range[1] >= frozenCol
                        || args.colIdx < frozenCol);
                }
                if (setDisplay) {
                    args.td.style.display = 'none';
                }
            }
            else {
                args.td.style.display = 'none';
            }
            if (args.cell.colSpan < 0) {
                this.parent.notify(checkPrevMerge, args);
                if (args.cell.style && args.cell.style.borderTop) {
                    this.applyStyle(args, { borderTop: args.cell.style.borderTop });
                }
            }
            if (args.cell.rowSpan < 0) {
                args.isRow = true;
                this.parent.notify(checkPrevMerge, args);
                if (args.cell.style && args.cell.style.borderLeft) {
                    this.applyStyle(args, { borderLeft: args.cell.style.borderLeft });
                }
            }
            return true;
        }
        return false;
    };
    CellRenderer.prototype.mergeFreezeRow = function (sheet, rowIdx, colIdx, rowSpan, tr, unMerge) {
        var frozenRow = this.parent.frozenRowCount(sheet);
        if (frozenRow && rowIdx < frozenRow && rowIdx + (rowSpan - 1) >= frozenRow) {
            var rowEle = void 0;
            var spanRowTop = 0;
            var height = void 0;
            var frozenCol = this.parent.frozenColCount(sheet);
            var row = tr || this.parent.getRow(rowIdx, null, colIdx);
            var emptyRows = [].slice.call(row.parentElement.querySelectorAll('.e-empty'));
            if (unMerge) {
                var curEmptyLength = rowIdx + rowSpan - frozenRow;
                if (curEmptyLength < emptyRows.length) {
                    return;
                }
                else {
                    var curSpan = 0;
                    if (curEmptyLength === emptyRows.length) {
                        var curCell = void 0;
                        var i = void 0;
                        var len = void 0;
                        if (frozenCol && colIdx < frozenCol) {
                            i = getCellIndexes(sheet.topLeftCell)[1];
                            len = frozenCol;
                        }
                        else {
                            i = this.parent.viewport.leftIndex + frozenCol;
                            len = this.parent.viewport.rightIndex;
                        }
                        for (i; i < len; i++) {
                            if (i === colIdx) {
                                continue;
                            }
                            curCell = getCell(rowIdx, i, sheet, false, true);
                            if (curCell.rowSpan && rowIdx + curCell.rowSpan - frozenRow > curSpan) {
                                curSpan = rowIdx + curCell.rowSpan - frozenRow;
                            }
                        }
                        if (curSpan === curEmptyLength) {
                            return;
                        }
                    }
                    else {
                        curSpan = curEmptyLength;
                    }
                    var lastRowIdx = rowIdx + (rowSpan - 1);
                    for (var i = curSpan, len = emptyRows.length; i < len; i++) {
                        spanRowTop += getRowHeight(sheet, lastRowIdx);
                        lastRowIdx--;
                        detach(emptyRows.pop());
                    }
                    this.updateSpanTop(colIdx, frozenCol, spanRowTop, true);
                    if (!emptyRows.length) {
                        this.updateColZIndex(colIdx, frozenCol, true);
                    }
                    return;
                }
            }
            this.updateColZIndex(colIdx, frozenCol);
            for (var i = frozenRow, len = rowIdx + (rowSpan - 1); i <= len; i++) {
                height = getRowHeight(sheet, i);
                spanRowTop += -height;
                if (frozenRow + emptyRows.length > i) {
                    continue;
                }
                rowEle = row.cloneNode();
                rowEle.classList.add('e-empty');
                rowEle.style.visibility = 'hidden';
                rowEle.style.height = height + 'px';
                row.parentElement.appendChild(rowEle);
            }
            this.updateSpanTop(colIdx, frozenCol, spanRowTop);
        }
    };
    CellRenderer.prototype.updateSpanTop = function (colIdx, frozenCol, top, update) {
        var mainPanel = this.parent.serviceLocator.getService('sheet').contentPanel;
        if (update) {
            if (!parseInt(mainPanel.style.top, 10)) {
                return;
            }
            top = parseInt(mainPanel.style.top, 10) + top;
        }
        if (frozenCol && colIdx < frozenCol && (update || !parseInt(mainPanel.style.top, 10) || top <
            parseInt(mainPanel.style.top, 10))) {
            mainPanel.style.top = top + 'px';
            var scroll_1 = mainPanel.nextElementSibling;
            if (scroll_1) {
                scroll_1.style.top = top + 'px';
            }
        }
    };
    CellRenderer.prototype.mergeFreezeCol = function (sheet, rowIdx, colIdx, colSpan, unMerge) {
        var frozenCol = this.parent.frozenColCount(sheet);
        if (frozenCol && colIdx < frozenCol && colIdx + (colSpan - 1) >= frozenCol) {
            var col = void 0;
            var width = void 0;
            var frozenRow = this.parent.frozenRowCount(sheet);
            var colGrp = (rowIdx < frozenRow ? this.parent.getSelectAllContent() : this.parent.getRowHeaderContent()).querySelector('colgroup');
            var emptyCols = [].slice.call(colGrp.querySelectorAll('.e-empty'));
            if (unMerge) {
                var curEmptyLength = colIdx + colSpan - frozenCol;
                if (curEmptyLength < emptyCols.length) {
                    return;
                }
                else {
                    var curSpan = 0;
                    if (curEmptyLength === emptyCols.length) {
                        var curCell = void 0;
                        var len = void 0;
                        var i = void 0;
                        if (frozenRow && rowIdx < frozenCol) {
                            len = frozenRow;
                            i = getCellIndexes(sheet.topLeftCell)[0];
                        }
                        else {
                            len = this.parent.viewport.bottomIndex;
                            i = this.parent.viewport.topIndex + frozenRow;
                        }
                        for (i; i < len; i++) {
                            if (i === rowIdx) {
                                continue;
                            }
                            curCell = getCell(i, colIdx, sheet, false, true);
                            if (curCell.colSpan && colIdx + curCell.colSpan - frozenCol > curSpan) {
                                curSpan = colIdx + curCell.colSpan - frozenCol;
                            }
                        }
                        if (curSpan === curEmptyLength) {
                            return;
                        }
                    }
                    else {
                        curSpan = curEmptyLength;
                    }
                    for (var i = curSpan, len = emptyCols.length; i < len; i++) {
                        detach(emptyCols.pop());
                    }
                    this.parent.serviceLocator.getService('sheet').setPanelWidth(sheet, this.parent.getRowHeaderContent());
                    if (!emptyCols.length) {
                        this.updateRowZIndex(rowIdx, frozenRow, true);
                    }
                    return;
                }
            }
            this.updateRowZIndex(rowIdx, frozenRow);
            for (var i = frozenCol, len = colIdx + (colSpan - 1); i <= len; i++) {
                if (frozenCol + emptyCols.length > i) {
                    continue;
                }
                col = colGrp.childNodes[0].cloneNode();
                col.classList.add('e-empty');
                col.style.visibility = 'hidden';
                width = getColumnWidth(sheet, i, null, true);
                col.style.width = width + 'px';
                colGrp.appendChild(col);
                if (i === len) {
                    this.parent.serviceLocator.getService('sheet').setPanelWidth(sheet, this.parent.getRowHeaderContent());
                }
            }
        }
    };
    CellRenderer.prototype.updateColZIndex = function (colIdx, frozenCol, remove$$1) {
        if (colIdx < frozenCol) {
            this.updateSelectAllZIndex(remove$$1);
        }
        else {
            this.parent.getColumnHeaderContent().style.zIndex = remove$$1 ? '' : '2';
            this.updatedHeaderZIndex(remove$$1);
        }
    };
    CellRenderer.prototype.updateSelectAllZIndex = function (remove$$1) {
        var frozenRowEle = this.parent.element.querySelector('.e-frozen-row');
        var frozenColEle = this.parent.element.querySelector('.e-frozen-column');
        if (remove$$1) {
            this.parent.getSelectAllContent().style.zIndex = '';
            if (frozenRowEle) {
                frozenRowEle.style.zIndex = '';
            }
            if (frozenColEle) {
                frozenColEle.style.zIndex = '';
            }
        }
        else {
            if (this.parent.getRowHeaderContent().style.zIndex || this.parent.getColumnHeaderContent().style.zIndex) {
                this.parent.getSelectAllContent().style.zIndex = '3';
                if (frozenRowEle) {
                    frozenRowEle.style.zIndex = '4';
                }
                if (frozenColEle) {
                    frozenColEle.style.zIndex = '4';
                }
            }
            else {
                this.parent.getSelectAllContent().style.zIndex = '2';
            }
        }
    };
    CellRenderer.prototype.updatedHeaderZIndex = function (remove$$1) {
        if (!remove$$1 && this.parent.getSelectAllContent().style.zIndex === '2') {
            this.parent.getSelectAllContent().style.zIndex = '3';
            var frozenRowEle = this.parent.element.querySelector('.e-frozen-row');
            var frozenColEle = this.parent.element.querySelector('.e-frozen-column');
            if (frozenColEle) {
                frozenColEle.style.zIndex = '4';
            }
            if (frozenRowEle) {
                frozenRowEle.style.zIndex = '4';
            }
        }
    };
    CellRenderer.prototype.updateRowZIndex = function (rowIdx, frozenRow, remove$$1) {
        if (rowIdx < frozenRow) {
            this.updateSelectAllZIndex(remove$$1);
        }
        else {
            this.parent.getRowHeaderContent().style.zIndex = remove$$1 ? '' : '2';
            this.updatedHeaderZIndex(remove$$1);
        }
    };
    CellRenderer.prototype.processTemplates = function (cell, rowIdx, colIdx) {
        var sheet = this.parent.getActiveSheet();
        var ranges = sheet.ranges;
        var range;
        for (var j = 0, len = ranges.length; j < len; j++) {
            if (ranges[j].template) {
                range = getRangeIndexes(ranges[j].address.length ? ranges[j].address : ranges[j].startCell);
                if (range[0] <= rowIdx && range[1] <= colIdx && range[2] >= rowIdx && range[3] >= colIdx) {
                    if (cell) {
                        return this.compileCellTemplate(ranges[j].template, cell);
                    }
                    else {
                        if (!getCell(rowIdx, colIdx, sheet, true)) {
                            return this.compileCellTemplate(ranges[j].template, getCell(rowIdx, colIdx, sheet, null, true));
                        }
                    }
                }
            }
        }
        return '';
    };
    CellRenderer.prototype.compileCellTemplate = function (template, cell) {
        var compiledStr;
        if (typeof template === 'string') {
            var templateString = void 0;
            if (template.trim().indexOf('#') === 0) {
                templateString = document.querySelector(template).innerHTML.trim();
            }
            else {
                templateString = template;
            }
            compiledStr = compile(templateString);
            return compiledStr(cell, null, null, '', true)[0].outerHTML;
        }
        else {
            compiledStr = compile(template);
            return compiledStr(cell, this.parent, 'ranges', '')[0];
        }
    };
    CellRenderer.prototype.getRowHeightOnInit = function () {
        var tTable = this.parent.createElement('table', { className: 'e-table e-test-table' });
        var tBody = tTable.appendChild(this.parent.createElement('tbody'));
        tBody.appendChild(this.tableRow);
        this.parent.element.appendChild(tTable);
        var height = Math.round(this.tableRow.getBoundingClientRect().height);
        this.parent.element.removeChild(tTable);
        return height < 20 ? 20 : height;
    };
    CellRenderer.prototype.removeStyle = function (element, rowIdx, colIdx) {
        var cellStyle;
        if (element.style.length) {
            cellStyle = this.parent.getCellStyleValue(['borderLeft', 'border'], [rowIdx, colIdx + 1]);
            var rightBorder_1 = cellStyle.borderLeft || cellStyle.border;
            cellStyle = this.parent.getCellStyleValue(['borderTop', 'border'], [rowIdx + 1, colIdx]);
            var bottomBorder_1 = cellStyle.borderTop || cellStyle.border;
            if (rightBorder_1 || bottomBorder_1) {
                [].slice.call(element.style).forEach(function (style) {
                    if (rightBorder_1 && bottomBorder_1) {
                        if (!style.includes('border-right') && !style.includes('border-bottom')) {
                            element.style.removeProperty(style);
                        }
                    }
                    else if ((rightBorder_1 && !(style.indexOf('border-right') > -1) && (!bottomBorder_1 || bottomBorder_1 === 'none')) ||
                        (bottomBorder_1 && !(style.indexOf('border-bottom') > -1) && (!rightBorder_1 || rightBorder_1 === 'none'))) {
                        element.style.removeProperty(style);
                    }
                });
            }
            else {
                element.removeAttribute('style');
            }
        }
        var prevRowCell = this.parent.getCell(rowIdx - 1, colIdx);
        if (prevRowCell && prevRowCell.style.borderBottom) {
            var prevRowIdx = Number(prevRowCell.parentElement.getAttribute('aria-rowindex')) - 1;
            cellStyle = this.parent.getCellStyleValue(['borderBottom', 'border'], [prevRowIdx, colIdx]);
            if (!(cellStyle.borderBottom || cellStyle.border)) {
                prevRowCell.style.borderBottom = '';
            }
        }
        var prevColCell = element.previousElementSibling;
        if (prevColCell && prevColCell.style.borderRight) {
            colIdx = Number(prevColCell.getAttribute('aria-colindex')) - 1;
            cellStyle = this.parent.getCellStyleValue(['borderRight', 'border'], [rowIdx, colIdx]);
            if (!(cellStyle.borderRight || cellStyle.border)) {
                prevColCell.style.borderRight = '';
            }
        }
    };
    /**
     * @hidden
     * @param {number[]} range - Specifies the range.
     * @param {boolean} refreshing - Specifies the refresh.
     * @param {boolean} checkWrap - Specifies the range.
     * @param {boolean} checkHeight - Specifies the checkHeight.
     * @returns {void}
     */
    CellRenderer.prototype.refreshRange = function (range, refreshing, checkWrap, checkHeight) {
        var sheet = this.parent.getActiveSheet();
        var cRange = range.slice();
        var args;
        var cell;
        if (inView(this.parent, cRange, true)) {
            for (var i = cRange[0]; i <= cRange[2]; i++) {
                if (isHiddenRow(sheet, i)) {
                    continue;
                }
                for (var j = cRange[1]; j <= cRange[3]; j++) {
                    if (isHiddenCol(sheet, j)) {
                        continue;
                    }
                    cell = this.parent.getCell(i, j);
                    if (cell) {
                        args = { rowIdx: i, colIdx: j, td: cell, cell: getCell(i, j, sheet), isRefreshing: refreshing, lastCell: j ===
                                cRange[3], isRefresh: true, isHeightCheckNeeded: true, manualUpdate: true, first: '', onActionUpdate: checkHeight };
                        this.update(args);
                        this.parent.notify(renderFilterCell, { td: cell, rowIndex: i, colIndex: j });
                        if (checkWrap) {
                            this.setWrapByValue(sheet, args);
                        }
                    }
                }
            }
        }
    };
    CellRenderer.prototype.refresh = function (rowIdx, colIdx, lastCell, element, checkCf, checkWrap) {
        var sheet = this.parent.getActiveSheet();
        if (!element && (isHiddenRow(sheet, rowIdx) || isHiddenCol(sheet, colIdx))) {
            return;
        }
        if (element || !this.parent.scrollSettings.enableVirtualization || this.parent.insideViewport(rowIdx, colIdx)) {
            var cell = (element || this.parent.getCell(rowIdx, colIdx));
            if (!cell) {
                return;
            }
            var args = { rowIdx: rowIdx, colIdx: colIdx, td: cell, cell: getCell(rowIdx, colIdx, sheet), isRefresh: true,
                lastCell: lastCell, isHeightCheckNeeded: true, manualUpdate: true, first: '', checkCf: checkCf };
            this.update(args);
            this.parent.notify(renderFilterCell, { td: cell, rowIndex: rowIdx, colIndex: colIdx });
            if (checkWrap) {
                this.setWrapByValue(sheet, args);
            }
        }
    };
    CellRenderer.prototype.updateView = function (args) {
        if (isNullOrUndefined(args.sheetIndex) || (args.sheetIndex === this.parent.activeSheetIndex)) {
            this.refreshRange(args.indexes, args.refreshing, args.checkWrap);
        }
        else if (args.refreshing) {
            this.calculateFormula({ cell: getCell(args.indexes[0], args.indexes[1], getSheet(this.parent, args.sheetIndex), true), rowIdx: args.indexes[0],
                colIdx: args.indexes[1], sheetIndex: args.sheetIndex });
        }
    };
    return CellRenderer;
}());

/**
 * Export the Spreadsheet viewer
 */

/**
 * Render module is used to render the spreadsheet
 *
 * @hidden
 */
var Render = /** @__PURE__ @class */ (function () {
    function Render(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    Render.prototype.render = function () {
        this.parent.setProperties({ activeSheetIndex: this.parent.skipHiddenSheets(this.parent.activeSheetIndex) }, true);
        if (!this.parent.isMobileView()) {
            this.parent.notify(ribbon, null);
            this.parent.notify(formulaBar, null);
        }
        var sheetPanel = this.parent.createElement('div', {
            id: this.parent.element.id + '_sheet_panel', className: 'e-sheet-panel'
        });
        if (this.parent.enableRtl) {
            sheetPanel.classList.add('e-rtl');
        }
        this.parent.element.appendChild(sheetPanel);
        if (this.parent.showSheetTabs) {
            this.parent.notify(sheetTabs, null);
        }
        else { // for formula calculation
            this.parent.notify(workbookFormulaOperation, { action: 'initSheetInfo' });
            this.parent.notify(workbookFormulaOperation, { action: 'initiateDefinedNames' });
        }
        if (this.parent.isMobileView()) {
            this.parent.notify(formulaBar, null);
            this.parent.notify(ribbon, null);
        }
        if (this.parent.password.length > 0 || this.parent.isProtected) {
            this.parent.isProtected = true;
            if (this.parent.showSheetTabs) {
                this.parent.element.querySelector('.e-add-sheet-tab').setAttribute('disabled', 'true');
                this.parent.element.querySelector('.e-add-sheet-tab').classList.add('e-disabled');
            }
        }
        this.setSheetPanelSize();
        this.renderSheet(sheetPanel);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.checkTopLeftCell(!this.parent.refreshing);
    };
    Render.prototype.checkTopLeftCell = function (initLoad, isRefreshing, scrollTop, scrollLeft) {
        var sheet = this.parent.getActiveSheet();
        this.parent.showSpinner();
        var isTopLeftCell = sheet.topLeftCell === 'A1';
        var indexes = getCellIndexes(sheet.topLeftCell);
        var isFreezeScrolled;
        if (sheet.topLeftCell !== sheet.paneTopLeftCell && (sheet.frozenRows || sheet.frozenColumns)) {
            var paneIndexes = getCellIndexes(sheet.paneTopLeftCell);
            isFreezeScrolled = this.parent.scrollSettings.enableVirtualization;
            isTopLeftCell = sheet.frozenRows && sheet.frozenColumns ? indexes[0] + sheet.frozenRows === paneIndexes[0] &&
                indexes[1] + sheet.frozenColumns === paneIndexes[1] : (sheet.frozenRows ? indexes[0] + sheet.frozenRows === paneIndexes[0]
                && indexes[1] === 0 : indexes[1] + sheet.frozenColumns === paneIndexes[1] && indexes[0] === 0);
            if (indexes[0] && paneIndexes[0] > indexes[0]) {
                this.parent.viewport.beforeFreezeHeight = getRowsHeight(sheet, 0, indexes[0] - 1, true);
            }
            else {
                this.parent.viewport.beforeFreezeHeight = 0;
            }
            if (indexes[1] && paneIndexes[1] > indexes[1]) {
                this.parent.viewport.beforeFreezeWidth = getColumnsWidth(sheet, 0, indexes[1] - 1, true);
            }
            else {
                this.parent.viewport.beforeFreezeWidth = 0;
            }
        }
        else {
            this.parent.viewport.beforeFreezeHeight = this.parent.viewport.beforeFreezeWidth = 0;
        }
        if (!this.parent.scrollSettings.enableVirtualization || isTopLeftCell) {
            this.refreshUI({ rowIndex: indexes[0], colIndex: indexes[1], refresh: 'All' }, null, initLoad, isRefreshing);
            if (isFreezeScrolled) {
                this.parent.viewport.topIndex = skipHiddenIdx(sheet, 0, true);
                this.parent.viewport.leftIndex = skipHiddenIdx(sheet, 0, true, 'columns');
            }
        }
        else {
            var pIndexes = sheet.paneTopLeftCell === sheet.topLeftCell ? indexes : getCellIndexes(sheet.paneTopLeftCell);
            var frozenRow = this.parent.frozenRowCount(sheet);
            var frozenCol = this.parent.frozenColCount(sheet);
            var eventArgs = { preventScroll: true };
            eventArgs.scrollTop = scrollTop || (pIndexes[0] > frozenRow ?
                getRowsHeight(sheet, frozenRow ? frozenRow : 0, pIndexes[0] - 1, true) : 0);
            eventArgs.scrollLeft = scrollLeft || (pIndexes[1] > frozenCol ?
                getColumnsWidth(sheet, frozenCol ? frozenCol : 0, pIndexes[1] - 1, true) : 0);
            this.parent.notify(onContentScroll, eventArgs);
            var threshold = this.parent.getThreshold('row');
            var rowIndex = sheet.frozenRows ? indexes[0] : (indexes[0] > threshold ?
                skipHiddenIdx(sheet, indexes[0] - threshold, true) : 0);
            var frozenIndexes = [];
            if (sheet.frozenRows) {
                frozenIndexes.push(pIndexes[0] - threshold > frozenRow ? (pIndexes[0] - threshold) : frozenRow);
            }
            threshold = this.parent.getThreshold('col');
            var colIndex = sheet.frozenColumns ? indexes[1] :
                (indexes[1] > threshold ? skipHiddenIdx(sheet, indexes[1] - threshold, true, 'columns') : 0);
            if (sheet.frozenColumns) {
                if (!frozenIndexes.length) {
                    frozenIndexes.push(frozenRow);
                }
                frozenIndexes.push(pIndexes[1] - threshold > frozenCol ? pIndexes[1] - threshold : frozenCol);
            }
            else if (frozenIndexes.length) {
                frozenIndexes.push(frozenCol);
            }
            this.refreshUI({ rowIndex: rowIndex, colIndex: colIndex, refresh: 'All', top: eventArgs.scrollTop, left: eventArgs.scrollLeft,
                frozenIndexes: frozenIndexes }, null, initLoad, isRefreshing);
            if (isFreezeScrolled) {
                if (frozenIndexes[0] >= frozenRow) {
                    this.parent.viewport.topIndex = skipHiddenIdx(sheet, frozenIndexes[0] - frozenRow, true);
                }
                if (frozenIndexes[1] >= frozenCol) {
                    this.parent.viewport.leftIndex = skipHiddenIdx(sheet, frozenIndexes[1] - frozenCol, true, 'columns');
                }
            }
        }
    };
    Render.prototype.renderSheet = function (panel) {
        if (panel === void 0) { panel = document.getElementById(this.parent.element.id + '_sheet_panel'); }
        panel.appendChild(this.parent.createElement('div', { className: 'e-sheet', id: this.parent.element.id + '_sheet', styles: 'background-color: #fff' }));
        this.parent.serviceLocator.getService('sheet').renderPanel();
    };
    /**
     * @hidden
     * @param {RefreshArgs} args - Specifies the RefreshArgs.
     * @param {string} address - Specifies the address.
     * @param {boolean} initLoad - Specifies the initLoad.
     * @param {boolean} isRefreshing - Specifies the isRefreshing.
     * @returns {void}
     */
    // tslint:disable-next-line:max-func-body-length
    Render.prototype.refreshUI = function (args, address, initLoad, isRefreshing) {
        var _this = this;
        if (args.refresh !== 'All') {
            this.parent.showSpinner();
        }
        var sheetModule = this.parent.serviceLocator.getService('sheet');
        var sheet = this.parent.getActiveSheet();
        var sheetName = getSheetName(this.parent);
        var prevRowColCnt = { rowCount: sheet.rowCount, colCount: sheet.colCount };
        args.frozenIndexes = args.frozenIndexes ? args.frozenIndexes : [];
        if (!address) {
            if (this.parent.scrollSettings.enableVirtualization) {
                var lastRow = args.rowIndex + this.parent.viewport.rowCount + (this.parent.getThreshold('row') * 2);
                var lastCol = args.colIndex + this.parent.viewport.colCount + (this.parent.getThreshold('col') * 2);
                var frozenRow = this.parent.frozenRowCount(sheet);
                var frozenCol = this.parent.frozenColCount(sheet);
                if (args.frozenIndexes.length) {
                    lastRow += (args.frozenIndexes[0] - frozenRow);
                    lastCol += (args.frozenIndexes[1] - frozenCol);
                }
                lastRow += sheet.frozenRows;
                lastCol += sheet.frozenColumns;
                var count = sheet.rowCount - 1;
                var diff = 0;
                var indexes = this.parent.skipHidden(args.rowIndex, lastRow, 'rows', false);
                lastRow = indexes[1];
                if (args.rowIndex !== indexes[0]) {
                    var topLeftCell = getCellIndexes(sheet.topLeftCell);
                    if (topLeftCell[0] === args.rowIndex) {
                        this.parent.updateTopLeftCell(indexes[0], topLeftCell[1], 'row');
                    }
                }
                if (this.parent.scrollSettings.isFinite && lastRow > count) {
                    diff = lastRow - count;
                    lastRow = skipHiddenIdx(sheet, count, false);
                    if (indexes[0] > skipHiddenIdx(sheet, 0, true)) {
                        diff = args.rowIndex - diff;
                        diff = diff > -1 ? diff : 0;
                        diff = this.decreaseHidden(diff, args.rowIndex - 1);
                        if (args.top && diff < args.rowIndex) {
                            this.parent.notify(updateTranslate, { height: getRowsHeight(sheet, diff, args.rowIndex - 1, true), isRender: true });
                        }
                        this.parent.viewport.topIndex = indexes[0] = diff;
                    }
                }
                var startRow = args.rowIndex = indexes[0];
                count = sheet.colCount - 1;
                diff = 0;
                indexes = this.parent.skipHidden(args.colIndex, lastCol, 'columns', false);
                lastCol = indexes[1];
                if (args.colIndex !== indexes[0]) {
                    var topLeftCell = getCellIndexes(sheet.topLeftCell);
                    if (topLeftCell[1] === args.colIndex) {
                        this.parent.updateTopLeftCell(topLeftCell[0], indexes[0], 'col');
                    }
                }
                if (this.parent.scrollSettings.isFinite && lastCol > count) {
                    diff = lastCol - count;
                    lastCol = skipHiddenIdx(sheet, count, false);
                    if (indexes[1] > skipHiddenIdx(sheet, 0, true, 'columns')) {
                        diff = args.colIndex - diff;
                        diff = diff > -1 ? diff : 0;
                        diff = this.decreaseHidden(diff, args.colIndex - 1, 'columns');
                        if (args.left && diff < args.colIndex) {
                            this.parent.notify(updateTranslate, { width: getColumnsWidth(sheet, diff, args.colIndex - 1, true), isRender: true });
                        }
                        this.parent.viewport.leftIndex = indexes[0] = diff;
                    }
                }
                var startCol = args.colIndex = indexes[0];
                if (args.refresh === 'Row') {
                    startRow += frozenRow;
                    if (frozenRow) {
                        lastRow += getCellIndexes(sheet.topLeftCell)[0];
                    }
                }
                if (args.refresh === 'Column') {
                    startCol += frozenCol;
                    if (frozenCol) {
                        lastCol += getCellIndexes(sheet.topLeftCell)[1];
                    }
                }
                this.parent.viewport.topIndex = args.rowIndex;
                this.parent.viewport.bottomIndex = lastRow;
                this.parent.viewport.leftIndex = args.colIndex;
                this.parent.viewport.rightIndex = lastCol;
                address = getCellAddress(startRow, startCol) + ":" + getCellAddress(lastRow, lastCol);
            }
            else {
                if (args.refresh === 'All') {
                    this.updateTopLeftScrollPosition(extend(args, { sheet: sheet }));
                }
                this.parent.viewport.bottomIndex = sheet.rowCount - 1;
                this.parent.viewport.rightIndex = sheet.colCount - 1;
                address = getCellAddress(args.rowIndex, args.colIndex) + ":" + getCellAddress(this.parent.viewport.bottomIndex, this.parent.viewport.rightIndex);
            }
        }
        if (args.refresh === 'All') {
            this.parent.trigger(beforeDataBound, {});
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var isOpen = this.parent.isOpen || this.parent.refreshing;
        setAriaOptions(this.parent.getMainContent(), { busy: true });
        var sheetsLen = this.parent.sheets.length;
        getData(this.parent, sheetName + "!" + address, null, null, args.frozenIndexes).then(function (values) {
            if (!_this.parent || sheetsLen < _this.parent.sheets.length) {
                return;
            }
            var sheetIdx = _this.parent.sheets.indexOf(sheet);
            if (sheetIdx === -1 || sheetIdx !== _this.parent.activeSheetIndex) {
                if (sheetIdx > -1) {
                    _this.checkTopLeftCell();
                }
                return;
            }
            var indexes = [args.rowIndex, args.colIndex].concat(getCellIndexes(address.split(':')[1]));
            var isEdit;
            var arg;
            switch (args.refresh) {
                case 'All':
                    sheetModule.renderTable({ cells: values, indexes: indexes, top: args.top, left: args.left, initLoad: initLoad, isRefreshing: isRefreshing, isOpen: isOpen });
                    break;
                case 'Row':
                    sheetModule.refreshRowContent({ cells: values, indexes: indexes, skipUpdateOnFirst: args.skipUpdateOnFirst, prevRowColCnt: prevRowColCnt });
                    isEdit = false;
                    arg = { isEdit: isEdit };
                    _this.parent.notify(isFormulaBarEdit, arg);
                    if (arg.isEdit) {
                        _this.parent.notify(editOperation, { action: 'startEdit', refreshCurPos: false });
                    }
                    break;
                case 'Column':
                    sheetModule.refreshColumnContent({
                        cells: values, indexes: indexes, skipUpdateOnFirst: args.skipUpdateOnFirst,
                        prevRowColCnt: prevRowColCnt, insertDelete: args.insertDelete
                    });
                    break;
                case 'RowPart':
                    sheetModule.updateRowContent({
                        cells: values, indexes: indexes, direction: args.direction, skipUpdateOnFirst: args.skipUpdateOnFirst,
                        prevRowColCnt: prevRowColCnt
                    });
                    break;
                case 'ColumnPart':
                    sheetModule.updateColContent({
                        cells: values, indexes: indexes, direction: args.direction, skipUpdateOnFirst: args.skipUpdateOnFirst,
                        prevRowColCnt: prevRowColCnt
                    });
                    break;
            }
            if (_this.parent && _this.parent[isReact]) {
                _this.parent[renderReactTemplates]();
            }
        });
        this.parent.notify(beforeVirtualContentLoaded, { refresh: args.refresh, skipTranslate: args.skipTranslate });
    };
    Render.prototype.updateTopLeftScrollPosition = function (args) {
        var topLeftCell = getCellIndexes(args.sheet.topLeftCell);
        var paneTopLeftCell = getCellIndexes(args.sheet.paneTopLeftCell);
        if (args.sheet.frozenRows) {
            var frozenRow = this.parent.frozenRowCount(args.sheet);
            if (paneTopLeftCell[0] > frozenRow) {
                args.top = getRowsHeight(args.sheet, frozenRow, paneTopLeftCell[0] - 1, true);
            }
        }
        else {
            args.rowIndex && (args.rowIndex = 0);
            if (topLeftCell[0] !== 0) {
                args.top = getRowsHeight(args.sheet, 0, topLeftCell[0] - 1, true);
            }
        }
        if (args.sheet.frozenColumns) {
            var frozenCol = this.parent.frozenRowCount(args.sheet);
            if (paneTopLeftCell[1] > frozenCol) {
                args.left = getColumnsWidth(args.sheet, frozenCol, paneTopLeftCell[1] - 1, true);
            }
        }
        else {
            args.colIndex && (args.colIndex = 0);
            if (topLeftCell[1] !== 0) {
                args.left = getColumnsWidth(args.sheet, 0, topLeftCell[1] - 1, true);
            }
        }
    };
    Render.prototype.removeSheet = function () {
        remove(document.getElementById(this.parent.element.id + '_sheet'));
    };
    /**
     * Refresh the active sheet.
     *
     * @param {boolean} isOpen - Specifies the isOpen.
     * @param {boolean} resize - Set `true` to refresh the sheet with exiting scroll top and left.
     * @param {boolean} focusEle - Specify the focusEle.
     * @returns {void}
     */
    Render.prototype.refreshSheet = function (isOpen, resize, focusEle) {
        var scrollTop = 0;
        var scrollLeft = 0;
        if (resize) {
            var mainPanel = this.parent.element.getElementsByClassName('e-main-panel')[0];
            if (mainPanel) {
                scrollTop = mainPanel.scrollTop;
            }
            var sheetContent = this.parent.getMainContent();
            if (sheetContent) {
                scrollLeft = sheetContent.scrollLeft;
            }
        }
        this.removeSheet();
        this.renderSheet();
        this.parent.notify(deInitProperties, {});
        this.checkTopLeftCell(false, isOpen, scrollTop, scrollLeft);
        if (focusEle) {
            focus(this.parent.element);
        }
    };
    /**
     * Used to set sheet panel size.
     *
     * @returns {void}
     */
    Render.prototype.setSheetPanelSize = function () {
        var panel = document.getElementById(this.parent.element.id + '_sheet_panel');
        var offset = this.parent.element.getBoundingClientRect();
        var height;
        if (this.parent.height === 'auto') {
            panel.style.height = '260px';
            height = 230;
        }
        else {
            height = offset.height - getSiblingsHeight(panel);
            panel.style.height = height + "px";
            height -= 32;
        }
        this.parent.viewport.height = height;
        this.parent.viewport.width = offset.width - 32;
        this.parent.viewport.rowCount = this.roundValue(height, 20);
        this.parent.viewport.colCount = this.roundValue(offset.width, 64);
    };
    Render.prototype.roundValue = function (size, threshold) {
        var value = size / threshold;
        var roundedValue = Math.round(value);
        return Math.abs(value - roundedValue) < 0.5 ? roundedValue : roundedValue - 1;
    };
    Render.prototype.moveOrDuplicateSheetHandler = function (args) {
        this.parent.notify(refreshSheetTabs, null);
        if (args.refresh) {
            this.refreshSheet(args.isDuplicate);
        }
    };
    Render.prototype.decreaseHidden = function (startIdx, endIdx, layout) {
        if (layout === void 0) { layout = 'rows'; }
        var sheet = this.parent.getActiveSheet();
        for (var i = endIdx; i >= startIdx; i--) {
            if ((sheet[layout])[i] && (sheet[layout])[i].hidden) {
                if (sheet.frozenColumns || sheet.frozenRows) {
                    if (layout === 'rows') {
                        setRow(sheet, i, { hidden: false });
                    }
                    else {
                        setColumn(sheet, i, { hidden: false });
                    }
                    continue;
                }
                startIdx--;
                if (startIdx < 0) {
                    startIdx = skipHiddenIdx(sheet, 0, true, layout);
                    break;
                }
            }
        }
        return startIdx;
    };
    /**
     * Registing the renderer related services.
     *
     * @returns {void}
     */
    Render.prototype.instantiateRenderer = function () {
        this.parent.serviceLocator.register('cell', new CellRenderer(this.parent));
        this.parent.serviceLocator.register('row', new RowRenderer(this.parent));
        this.parent.serviceLocator.register('sheet', new SheetRender(this.parent));
    };
    /**
     * Destroy the Render module.
     *
     * @returns {void}
     */
    Render.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    Render.prototype.addEventListener = function () {
        this.parent.on(initialLoad, this.instantiateRenderer, this);
        this.parent.on(dataRefresh, this.refreshSheet, this);
        this.parent.on(spreadsheetDestroyed, this.destroy, this);
        this.parent.on(moveOrDuplicateSheet, this.moveOrDuplicateSheetHandler, this);
        this.parent.on(getUpdatedScrollPosition, this.updateTopLeftScrollPosition, this);
    };
    Render.prototype.removeEventListener = function () {
        this.parent.off(initialLoad, this.instantiateRenderer);
        this.parent.off(dataRefresh, this.refreshSheet);
        this.parent.off(spreadsheetDestroyed, this.destroy);
        this.parent.off(moveOrDuplicateSheet, this.moveOrDuplicateSheetHandler);
        this.parent.off(getUpdatedScrollPosition, this.updateTopLeftScrollPosition);
    };
    return Render;
}());

/**
 * Dialog Service.
 *
 * @hidden
 */
var Dialog$1 = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for initializing dialog service.
     *
     * @param {Spreadsheet} parent - Specifies the Spreadsheet instance.
     */
    function Dialog$$1(parent) {
        this.parent = parent;
    }
    /**
     * To show dialog.
     *
     * @param {DialogModel} dialogModel - Specifies the Dialog model.
     * @param {boolean} cancelBtn - Specifies the cancel button.
     * @returns {void}
     */
    Dialog$$1.prototype.show = function (dialogModel, cancelBtn) {
        var _this = this;
        var btnContent;
        cancelBtn = isNullOrUndefined(cancelBtn) ? true : false;
        var closeHandler = dialogModel.close || null;
        var model = {
            header: 'Spreadsheet',
            cssClass: this.parent.cssClass,
            target: this.parent.element,
            buttons: []
        };
        dialogModel.close = function () {
            _this.destroyDialog();
            if (closeHandler) {
                closeHandler();
            }
        };
        extend(model, dialogModel);
        if (cancelBtn) {
            btnContent = this.parent.serviceLocator.getService(locale).getConstant(model.buttons.length ? 'Cancel' : 'Ok');
            model.buttons.push({
                buttonModel: { content: btnContent, isPrimary: model.buttons.length === 0 },
                click: this.hide.bind(this)
            });
        }
        var div = this.parent.createElement('div');
        document.body.appendChild(div);
        this.dialogInstance = new Dialog(model);
        this.dialogInstance.createElement = this.parent.createElement;
        this.dialogInstance.appendTo(div);
        this.dialogInstance.refreshPosition();
    };
    /**
     * To destroy the dialog if it open is prevented by user.
     *
     * @returns {void}
     */
    Dialog$$1.prototype.destroyDialog = function () {
        this.dialogInstance.destroy();
        remove(this.dialogInstance.element);
        this.dialogInstance = null;
    };
    /**
     * To hide dialog.
     *
     * @returns {void}
     */
    Dialog$$1.prototype.hide = function () {
        if (this.dialogInstance) {
            this.dialogInstance.hide();
        }
    };
    /**
     * To clear private variables.
     *
     * @returns {void}
     */
    Dialog$$1.prototype.destroy = function () {
        this.parent = null;
    };
    return Dialog$$1;
}());

/**
 *  Begin and complete events.
 *
 * @hidden
 */
var ActionEvents = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for initializing action begin and action complete services.
     *
     * @param {Spreadsheet} parent - Specifies the spreadsheet element.
     */
    function ActionEvents(parent) {
        this.parent = parent;
        this.addEventListener();
        //this.initializeActionBegin();
        //this.initializeActionComplete();
    }
    ActionEvents.prototype.initializeActionBegin = function () {
        var _this = this;
        var cellFormat = this.parent.beforeCellFormat;
        this.parent.beforeCellFormat = function (args) {
            _this.actionEventHandler({ evtArgs: args, evtFunc: cellFormat, actionType: 'begin', eventType: 'format' });
        };
        var beforeOpen = this.parent.beforeOpen;
        this.parent.beforeOpen = function (args) {
            _this.actionEventHandler({ evtArgs: args, evtFunc: beforeOpen, actionType: 'begin', eventType: 'beforeOpen' });
        };
        var beforeSave = this.parent.beforeSave;
        this.parent.beforeSave = function (args) {
            _this.actionEventHandler({ evtArgs: args, evtFunc: beforeSave, actionType: 'begin', eventType: 'beforeSave' });
        };
        var beforeSort = this.parent.beforeSort;
        this.parent.beforeSort = function (args) {
            _this.actionEventHandler({ evtArgs: args, evtFunc: beforeSort, actionType: 'begin', eventType: 'beforeSort' });
        };
    };
    ActionEvents.prototype.initializeActionComplete = function () {
        var _this = this;
        var sortComplete = this.parent.sortComplete;
        this.parent.sortComplete = function (args) {
            _this.actionEventHandler({ evtArgs: args, evtFunc: sortComplete, actionType: 'complete', eventType: 'sorting' });
        };
        var cellSave = this.parent.cellSave;
        this.parent.cellSave = function (args) {
            _this.actionEventHandler({ evtArgs: args, evtFunc: cellSave, actionType: 'complete', eventType: 'cellSave' });
        };
    };
    ActionEvents.prototype.actionEventHandler = function (args) {
        if (args.evtFunc) {
            args.evtFunc.apply(this, [args]);
        }
        if (args.actionType === 'begin') {
            this.actionBeginHandler({ eventArgs: args.evtArgs, action: args.eventType });
        }
        else {
            this.actionCompleteHandler({ eventArgs: args.evtArgs, action: args.eventType });
        }
    };
    ActionEvents.prototype.actionBeginHandler = function (args) {
        var preventAction = args.preventAction;
        delete args.preventAction;
        this.parent.trigger('actionBegin', { action: args.action, args: args });
        if (!preventAction && (args.action === 'clipboard' || args.action === 'beforeSort' || args.action === 'format' ||
            args.action === 'cellSave' || args.action === 'beforeWrap' || args.action === 'beforeReplace' || args.action === 'filter'
            || args.action === 'beforeClear' || args.action === 'beforeInsertImage' || args.action === 'beforeInsertChart'
            || args.action === 'cellDelete' || args.action === 'autofill' || args.action === 'removeValidation')) {
            this.parent.notify(setActionData, { args: args });
        }
        if (preventAction) {
            args.preventAction = true;
        }
    };
    ActionEvents.prototype.actionCompleteHandler = function (args) {
        var preventAction = args.preventAction;
        delete args.preventAction;
        this.parent.notify(triggerDataChange, args);
        this.parent.trigger('actionComplete', args);
        if (!preventAction && args.action !== 'undoRedo' && args.action !== 'gotoSheet') {
            this.parent.notify(updateUndoRedoCollection, { args: args });
        }
        this.parent.notify(positionAutoFillElement, null);
    };
    ActionEvents.prototype.addEventListener = function () {
        this.parent.on(completeAction, this.actionCompleteHandler, this);
        this.parent.on(beginAction, this.actionBeginHandler, this);
        this.parent.on(spreadsheetDestroyed, this.removeEventListener, this);
    };
    ActionEvents.prototype.removeEventListener = function () {
        this.parent.off(completeAction, this.actionCompleteHandler);
        this.parent.off(beginAction, this.actionBeginHandler);
        this.parent.off(spreadsheetDestroyed, this.removeEventListener);
    };
    return ActionEvents;
}());

/**
 * Specifes to create or modify overlay.
 *
 * @hidden
 */
var Overlay = /** @__PURE__ @class */ (function () {
    /**
     * Constructor for initializing Overlay service.
     *
     *  @param {Spreadsheet} parent - Specifies the Spreadsheet instance.
     */
    function Overlay(parent) {
        this.minHeight = '300px';
        this.minWidth = '400px';
        this.isOverlayClicked = false;
        this.isResizerClicked = false;
        this.currentWidth = 400;
        this.currenHeight = 300;
        this.parent = parent;
    }
    /**
     * To insert a shape.
     *
     * @param {string} id - Specifies the id.
     * @param {string} range - Specifies the range.
     * @param {number} sheetIndex - Specifies the sheet index.
     * @returns {HTMLElement} - Returns div element
     * @hidden
     */
    Overlay.prototype.insertOverlayElement = function (id, range, sheetIndex) {
        var div = this.parent.createElement('div', {
            id: id,
            attrs: { 'class': 'e-ss-overlay' },
            styles: 'width: ' + this.minWidth + ';  height: ' + this.minHeight
        });
        var indexes = getRangeIndexes(range);
        var sheet = this.parent.sheets[sheetIndex];
        var frozenRow = this.parent.frozenRowCount(sheet);
        var frozenCol = this.parent.frozenColCount(sheet);
        var pos = getCellPosition(sheet, indexes, frozenRow, frozenCol, this.parent.viewport.beforeFreezeHeight, this.parent.viewport.beforeFreezeWidth, this.parent.sheetModule.colGroupWidth);
        if (indexes[0] >= frozenRow && indexes[1] < frozenCol) {
            var mainPanel = this.parent.sheetModule.contentPanel;
            if (mainPanel.scrollTop) {
                pos.top -= mainPanel.scrollTop;
                pos.top +=
                    this.parent.getColumnHeaderContent().parentElement.getBoundingClientRect().height;
            }
        }
        if (indexes[1] >= frozenCol && indexes[0] < frozenRow) {
            var scrollPanel = this.parent.getScrollElement();
            if (scrollPanel.scrollLeft) {
                pos.left -= scrollPanel.scrollLeft;
                pos.left += this.parent.sheetModule.getRowHeaderWidth(sheet);
            }
        }
        var parent;
        if (indexes[0] < frozenRow || indexes[1] < frozenCol) {
            parent = document.getElementById(this.parent.element.id + '_sheet');
            if (frozenRow) {
                if (indexes[0] >= frozenRow) {
                    pos.top += (sheet.showHeaders ? 31 : 0) + getRowsHeight(sheet, getCellIndexes(sheet.topLeftCell)[0], frozenRow - 1);
                }
                else if (!frozenCol) {
                    pos.left += this.parent.sheetModule.getRowHeaderWidth(sheet, true);
                }
            }
            if (frozenCol) {
                if (indexes[1] >= frozenCol) {
                    pos.left += this.parent.sheetModule.getRowHeaderWidth(sheet);
                }
                else if (!frozenRow) {
                    pos.left += (sheet.showHeaders ? 31 : 0);
                }
            }
        }
        else {
            parent = this.parent.getMainContent();
        }
        div.style.top = pos.top + 'px';
        div.style.left = pos.left + 'px';
        parent.appendChild(div);
        this.renderResizeHandles(div);
        this.addEventListener(div);
        this.originalWidth = parseFloat(getComputedStyle(div, null).getPropertyValue('width').replace('px', ''));
        this.originalHeight = parseFloat(getComputedStyle(div, null).getPropertyValue('height').replace('px', ''));
        return div;
    };
    /**
     * To adjust the layout inside freeze pane.
     *
     * @hidden
     * @param {ChartModel} model - Specifies the id.
     * @param {HTMLElement} element - Specifies the range.
     * @param {string} range - Specifies the sheet index.
     * @returns {void}
     */
    Overlay.prototype.adjustFreezePaneSize = function (model, element, range) {
        var indexes = getRangeIndexes(range);
        var sheet = this.parent.getActiveSheet();
        var frozenRow = this.parent.frozenRowCount(sheet);
        var frozenCol = this.parent.frozenColCount(sheet);
        if (indexes[0] < frozenRow || indexes[1] < frozenCol) {
            if (!isNullOrUndefined(model.top)) {
                element.style.top = model.top + (sheet.showHeaders ? 31 : 0) - this.parent.viewport.beforeFreezeHeight + 'px';
            }
            if (!isNullOrUndefined(model.left)) {
                element.style.left = model.left + this.parent.sheetModule.getRowHeaderWidth(sheet, true) -
                    this.parent.viewport.beforeFreezeWidth + 'px';
            }
        }
        else {
            if (!isNullOrUndefined(model.top)) {
                element.style.top = model.top - this.parent.viewport.beforeFreezeHeight - (frozenRow ? getRowsHeight(sheet, getCellIndexes(sheet.topLeftCell)[0], frozenRow - 1) : 0) + 'px';
            }
            if (!isNullOrUndefined(model.left)) {
                element.style.left = model.left - this.parent.viewport.beforeFreezeWidth - (frozenCol ? getColumnsWidth(sheet, getCellIndexes(sheet.topLeftCell)[1], frozenCol - 1) : 0) + 'px';
            }
        }
        if (isNullOrUndefined(model.top)) {
            var startTop = getCellIndexes(sheet.topLeftCell)[0];
            model.top = this.parent.viewport.beforeFreezeHeight + (frozenRow && startTop === indexes[0] ? 0 : getRowsHeight(sheet, frozenRow ? startTop : 0, indexes[0] - 1));
        }
        if (isNullOrUndefined(model.left)) {
            var startLeft = getCellIndexes(sheet.topLeftCell)[1];
            model.left = this.parent.viewport.beforeFreezeWidth + (frozenCol && startLeft === indexes[1] ? 0 : getColumnsWidth(sheet, frozenCol ? startLeft : 0, indexes[1] - 1));
        }
    };
    Overlay.prototype.addEventListener = function (div) {
        var overlayElem = div;
        EventHandler.add(overlayElem, 'mousedown', this.overlayClickHandler, this);
        EventHandler.add(overlayElem, 'mousemove', this.overlayMouseMoveHandler, this);
        EventHandler.add(document.getElementById(this.parent.element.id + '_sheet'), 'mousemove', this.overlayMouseMoveHandler, this);
        EventHandler.add(document, 'mouseup', this.overlayMouseUpHandler, this);
        this.parent.on(overlayEleSize, this.setOriginalSize, this);
    };
    Overlay.prototype.setOriginalSize = function (args) {
        this.originalHeight = args.height;
        this.originalWidth = args.width;
    };
    Overlay.prototype.overlayMouseMoveHandler = function (e) {
        var target = e.target;
        var overlayElem = document.getElementsByClassName('e-ss-overlay-active')[0];
        var sheet = this.parent.getActiveSheet();
        var checkOffset = sheet.frozenRows || sheet.frozenColumns ? [29, this.parent.sheetModule.getRowHeaderWidth(sheet, true)] : [-1, -1];
        var height1;
        var top;
        var width1;
        var height2;
        var width2;
        var left;
        if (this.isOverlayClicked && this.isResizerClicked) {
            switch (this.resizer) {
                case 'e-ss-overlay-t':
                    height1 = Math.max(this.originalMouseY - e.clientY + this.originalHeight, 20);
                    top = e.clientY - (this.originalMouseY - this.originalResizeTop);
                    if (height1 > 20 && top > checkOffset[0]) {
                        overlayElem.style.height = height1 + 'px';
                        overlayElem.style.top = top + 'px';
                        this.resizedReorderTop = top; // resized divTop
                        this.currenHeight = height1;
                        this.parent.notify(refreshChartSize, {
                            height: overlayElem.style.height, width: overlayElem.style.width, overlayEle: overlayElem
                        });
                    }
                    break;
                case 'e-ss-overlay-r':
                    width1 = this.originalWidth + (e.pageX - this.originalMouseX);
                    if (width1 > 20) {
                        overlayElem.style.width = width1 + 'px';
                        this.currentWidth = width1;
                        this.parent.notify(refreshChartSize, {
                            height: overlayElem.style.height, width: overlayElem.style.width, overlayEle: overlayElem
                        });
                    }
                    break;
                case 'e-ss-overlay-b':
                    height2 = this.originalHeight + (e.pageY - this.originalMouseY);
                    if (height2 > 20) {
                        overlayElem.style.height = height2 + 'px';
                        this.currenHeight = height2;
                        this.parent.notify(refreshChartSize, {
                            height: overlayElem.style.height, width: overlayElem.style.width, overlayEle: overlayElem
                        });
                    }
                    break;
                case 'e-ss-overlay-l':
                    width2 = Math.max(this.originalMouseX - e.clientX + this.originalWidth, 20);
                    left = e.clientX - (this.originalMouseX - this.originalResizeLeft);
                    if (width2 > 20 && left > checkOffset[1]) {
                        overlayElem.style.width = width2 + 'px';
                        overlayElem.style.left = left + 'px';
                        this.resizedReorderLeft = left; //resized divLeft
                        this.currentWidth = width2;
                        this.parent.notify(refreshChartSize, {
                            height: overlayElem.style.height, width: overlayElem.style.width, overlayEle: overlayElem
                        });
                    }
                    break;
            }
        }
        else if (this.isOverlayClicked) {
            if ((closest(target, '.e-sheet') && !target.classList.contains('e-sheet-content')) ||
                target.classList.contains('e-cell')) {
                if (!overlayElem) {
                    return;
                }
                var aX = e.clientX - this.diffX;
                var aY = e.clientY - this.diffY;
                if (aX > checkOffset[1]) {
                    overlayElem.style.left = aX + 'px';
                }
                if (aY > checkOffset[0]) {
                    overlayElem.style.top = aY + 'px';
                }
                this.resizedReorderLeft = aX < 0 ? 0 : aX; //resized divLeft
                this.resizedReorderTop = aY < 0 ? 0 : aY; // resized divTop
            }
            else {
                this.overlayMouseUpHandler(e, true);
            }
        }
    };
    Overlay.prototype.overlayMouseUpHandler = function (e, isMouseUp) {
        if (this.parent.getActiveSheet().isProtected) {
            return;
        }
        this.isResizerClicked = false;
        var elem = e.target;
        var overlayElems = document.getElementsByClassName('e-datavisualization-chart e-ss-overlay-active');
        if (!elem.classList.contains('e-ss-overlay')) {
            elem = closest(e.target, '.e-datavisualization-chart') ?
                closest(e.target, '.e-datavisualization-chart') : elem;
        }
        var sheet = this.parent.getActiveSheet();
        var eventArgs = {
            prevTop: sheet.frozenRows || sheet.frozenColumns ? this.prevY : this.originalReorderTop,
            prevLeft: sheet.frozenRows || sheet.frozenColumns ? this.prevX : this.originalReorderLeft,
            currentTop: this.resizedReorderTop >= 0 ? this.resizedReorderTop : this.originalReorderTop,
            currentLeft: this.resizedReorderLeft >= 0 ? this.resizedReorderLeft : this.originalReorderLeft,
            id: elem.id, currentHeight: this.currenHeight, currentWidth: this.currentWidth,
            requestType: 'imageRefresh', prevHeight: this.originalHeight, prevWidth: this.originalWidth
        };
        if (this.isOverlayClicked || isMouseUp) {
            var currRowIdx = void 0;
            var currColIdx = void 0;
            var prevRowIdx = { clientY: eventArgs.prevTop, isImage: true };
            var prevColIdx = { clientX: eventArgs.prevLeft, isImage: true };
            var overlayEle = this.parent.element.getElementsByClassName('e-ss-overlay-active')[0];
            if (sheet.frozenRows || sheet.frozenColumns) {
                if (!overlayEle) {
                    return;
                }
                prevRowIdx.isImage = false;
                prevColIdx.isImage = false;
                prevRowIdx.target = overlayEle;
                prevColIdx.target = overlayEle;
                if (eventArgs.prevTop < this.parent.getColumnHeaderContent().getBoundingClientRect().bottom) {
                    prevRowIdx.target = this.parent.getColumnHeaderContent();
                }
                if (eventArgs.prevLeft < this.parent.getRowHeaderContent().getBoundingClientRect().right) {
                    prevColIdx.target = this.parent.getRowHeaderTable();
                }
                var clientRect = overlayEle.getBoundingClientRect();
                currRowIdx = { clientY: clientRect.top };
                currColIdx = { clientX: clientRect.left };
                if (clientRect.top < this.parent.getColumnHeaderContent().getBoundingClientRect().bottom) {
                    currRowIdx.target = this.parent.getColumnHeaderContent();
                }
                if (clientRect.left < this.parent.getRowHeaderContent().getBoundingClientRect().right) {
                    currColIdx.target = this.parent.getRowHeaderTable();
                }
            }
            else {
                currRowIdx = { clientY: eventArgs.currentTop, isImage: true };
                currColIdx = { clientX: eventArgs.currentLeft, isImage: true };
            }
            this.parent.notify(getRowIdxFromClientY, prevRowIdx);
            this.parent.notify(getRowIdxFromClientY, currRowIdx);
            this.parent.notify(getColIdxFromClientX, prevColIdx);
            this.parent.notify(getColIdxFromClientX, currColIdx);
            if (currRowIdx.size) {
                eventArgs.currentTop = currRowIdx.size;
            }
            if (currColIdx.size) {
                eventArgs.currentLeft = currColIdx.size;
            }
            eventArgs.prevRowIdx = prevRowIdx.clientY;
            eventArgs.prevColIdx = prevColIdx.clientX;
            eventArgs.currentRowIdx = currRowIdx.clientY;
            eventArgs.currentColIdx = currColIdx.clientX;
            if ((sheet.frozenColumns || sheet.frozenRows) && !closest(overlayEle, '.e-sheet-content')) {
                var frozenCol = this.parent.frozenColCount(sheet);
                var frozenRow = this.parent.frozenRowCount(sheet);
                if (eventArgs.currentRowIdx >= frozenRow && eventArgs.currentColIdx >= frozenCol) {
                    var top_1 = parseInt(overlayEle.style.top, 10);
                    var left = parseInt(overlayEle.style.left, 10);
                    var mainPanel = this.parent.sheetModule.contentPanel;
                    top_1 += mainPanel.scrollTop;
                    top_1 -= this.parent.getColumnHeaderContent().parentElement.getBoundingClientRect().height;
                    var scrollPanel = this.parent.getScrollElement();
                    left += scrollPanel.scrollLeft;
                    left -= this.parent.sheetModule.getRowHeaderWidth(sheet);
                    overlayEle.style.top = top_1 + 'px';
                    overlayEle.style.left = left + 'px';
                    this.parent.getMainContent().appendChild(overlayEle);
                }
            }
            if (overlayElems && overlayElems[0]) {
                if (overlayElems[0].querySelector('.e-control')) {
                    eventArgs.id = overlayElems[0].id;
                }
            }
            if (this.originalReorderTop !== this.resizedReorderTop || this.originalReorderLeft !== this.resizedReorderLeft) {
                eventArgs.id = overlayEle.id;
                if (overlayElems && overlayElems[0]) {
                    eventArgs.requestType = 'chartRefresh';
                    this.parent.notify(refreshChartCellObj, eventArgs);
                }
                else {
                    this.parent.notify(refreshImgCellObj, eventArgs);
                }
                this.resizedReorderTop = this.originalReorderTop;
                this.resizedReorderLeft = this.originalReorderLeft;
            }
            else if (this.currenHeight !== this.originalHeight || this.originalWidth !== this.currentWidth) {
                eventArgs.id = elem.id.indexOf('overlay') > 0 ? elem.id : elem.parentElement ? elem.parentElement.id : '';
                if (overlayElems && overlayElems[0]) {
                    eventArgs.requestType = 'chartRefresh';
                    this.parent.notify(refreshChartCellObj, eventArgs);
                }
                else {
                    this.parent.notify(refreshImgCellObj, eventArgs);
                }
                this.originalHeight = this.currenHeight;
                this.originalWidth = this.currentWidth;
            }
        }
        this.isOverlayClicked = false;
    };
    Overlay.prototype.overlayClickHandler = function (e) {
        if (this.parent.getActiveSheet().isProtected) {
            return;
        }
        this.isOverlayClicked = true;
        var target = e.target;
        var overlayElem = e.target;
        if (!target.classList.contains('e-ss-overlay')) {
            overlayElem = target.parentElement;
            if (closest(e.target, '.e-datavisualization-chart')) {
                overlayElem = closest(e.target, '.e-datavisualization-chart');
                this.currentWidth = parseFloat(getComputedStyle(overlayElem, null).getPropertyValue('width').replace('px', ''));
                this.currenHeight = parseFloat(getComputedStyle(overlayElem, null).getPropertyValue('height').replace('px', ''));
            }
        }
        var sheet = this.parent.getActiveSheet();
        if ((sheet.frozenColumns || sheet.frozenRows) && closest(overlayElem, '.e-sheet-content')) {
            var top_2 = parseInt(overlayElem.style.top, 10);
            var left = parseInt(overlayElem.style.left, 10);
            var mainPanel = this.parent.sheetModule.contentPanel;
            top_2 -= mainPanel.scrollTop;
            top_2 += this.parent.getColumnHeaderContent().parentElement.getBoundingClientRect().height;
            var scrollPanel = this.parent.getScrollElement();
            left -= scrollPanel.scrollLeft;
            left += this.parent.sheetModule.getRowHeaderWidth(sheet);
            overlayElem.style.top = top_2 + 'px';
            overlayElem.style.left = left + 'px';
            document.getElementById(this.parent.element.id + '_sheet').appendChild(overlayElem);
        }
        this.originalReorderLeft = parseInt(overlayElem.style.left, 10); //divLeft
        this.originalReorderTop = parseInt(overlayElem.style.top, 10); // divTop
        this.resizedReorderLeft = parseInt(overlayElem.style.left, 10); //resized divLeft
        this.resizedReorderTop = parseInt(overlayElem.style.top, 10); // resized divTop
        this.originalResizeTop = this.originalReorderTop;
        this.originalResizeLeft = this.originalReorderLeft;
        this.originalMouseX = e.clientX; // posX
        this.originalMouseY = e.clientY; // posY
        this.diffX = this.originalMouseX - this.originalReorderLeft;
        this.diffY = this.originalMouseY - this.originalReorderTop;
        var actOverlayElem = document.getElementsByClassName('e-ss-overlay-active')[0];
        if (actOverlayElem) {
            removeClass([actOverlayElem], 'e-ss-overlay-active');
        }
        document.getElementById(overlayElem.id).classList.add('e-ss-overlay-active');
        if (target.classList.contains('e-ss-resizer')) {
            this.resizer = target.classList[0];
            this.originalWidth = parseFloat(getComputedStyle(overlayElem, null).getPropertyValue('width').replace('px', ''));
            this.originalHeight = parseFloat(getComputedStyle(overlayElem, null).getPropertyValue('height').replace('px', ''));
            this.isResizerClicked = true;
        }
        if (overlayElem.classList.contains('e-datavisualization-chart')) {
            this.parent.notify(focusChartBorder, { id: overlayElem.id });
            if (!actOverlayElem) {
                this.parent.notify(insertDesignChart, { id: overlayElem.id });
            }
        }
        var clientRect = overlayElem.getBoundingClientRect();
        this.prevX = clientRect.left;
        this.prevY = clientRect.top;
    };
    Overlay.prototype.renderResizeHandles = function (div) {
        var handles = ['e-ss-overlay-t', 'e-ss-overlay-r', 'e-ss-overlay-b', 'e-ss-overlay-l'];
        var i = 0;
        var handleElem;
        var overlay = div;
        while (handles.length > i) {
            handleElem = this.parent.createElement('div', {
                attrs: { 'class': handles[i] + ' ' + 'e-ss-resizer' },
                styles: 'width: 8px; height: 8px; border-radius: 4px;'
            });
            overlay.appendChild(handleElem);
            i++;
        }
    };
    Overlay.prototype.removeEventListener = function () {
        var overlayElem = document.getElementById(this.parent.element.id + '_overlay');
        if (overlayElem) { // Added this condition temporarly to handle chart destroy from spec file.
            EventHandler.remove(overlayElem, 'mousedown', this.overlayClickHandler);
            EventHandler.remove(overlayElem, 'mousemove', this.overlayMouseMoveHandler);
        }
        EventHandler.remove(document.getElementById(this.parent.element.id + '_sheet'), 'mousemove', this.overlayMouseMoveHandler);
        EventHandler.remove(document, 'mouseup', this.overlayMouseUpHandler);
        this.parent.off(overlayEleSize, this.setOriginalSize);
    };
    /**
     * To clear private variables.
     *
     * @returns {void}
     */
    Overlay.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    return Overlay;
}());

/**
 * Export Spreadsheet Services
 */

var __extends$10 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$9 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// eslint-disable-next-line @typescript-eslint/triple-slash-reference
/// <reference path='../../workbook/base/workbook-model.d.ts'/>
/**
 * Represents the Spreadsheet component.
 *
 * ```html
 * <div id='spreadsheet'></div>
 * <script>
 *  var spreadsheetObj = new Spreadsheet();
 *  spreadsheetObj.appendTo('#spreadsheet');
 * </script>
 * ```
 */
var Spreadsheet = /** @__PURE__ @class */ (function (_super) {
    __extends$10(Spreadsheet, _super);
    /**
     * Constructor for creating the widget.
     *
     * @param  {SpreadsheetModel} options - Configures Spreadsheet options.
     * @param  {string|HTMLElement} element - Element to render Spreadsheet.
     */
    function Spreadsheet(options, element) {
        var _this = _super.call(this, options) || this;
        /** @hidden */
        _this.dataValidationRange = '';
        /** @hidden */
        _this.isValidationHighlighted = false;
        /** @hidden */
        _this.viewport = {
            rowCount: 0, colCount: 0, height: 0, topIndex: 0, leftIndex: 0, width: 0,
            bottomIndex: 0, rightIndex: 0, beforeFreezeHeight: 0, beforeFreezeWidth: 0
        };
        _this.needsID = true;
        Spreadsheet_1.Inject(Ribbon$$1, FormulaBar, SheetTabs, Selection, Edit, KeyboardNavigation, KeyboardShortcut, Clipboard, DataBind, Open, ContextMenu$1, Save, NumberFormat, CellFormat, Formula, WrapText, WorkbookEdit, WorkbookOpen, WorkbookSave, WorkbookCellFormat, WorkbookNumberFormat, WorkbookFormula, Sort, WorkbookSort, Resize, UndoRedo, WorkbookFilter, Filter, SpreadsheetHyperlink, WorkbookHyperlink, Insert, Delete, WorkbookInsert, WorkbookDelete, DataValidation, WorkbookDataValidation, ProtectSheet, WorkbookProtectSheet, FindAndReplace, WorkbookFindAndReplace, Merge, WorkbookMerge, SpreadsheetImage, ConditionalFormatting, WorkbookImage, WorkbookConditionalFormat, SpreadsheetChart, WorkbookChart, AutoFill, WorkbookAutoFill);
        if (element) {
            _this.appendTo(element);
        }
        return _this;
    }
    Spreadsheet_1 = Spreadsheet;
    /**
     * To get cell element.
     *
     * @param {number} rowIndex - specify the rowIndex.
     * @param {number} colIndex - specify the colIndex.
     * @param {HTMLTableElement} row - specify the row.
     * @returns {HTMLElement} - Get cell element
     * @hidden
     */
    Spreadsheet.prototype.getCell = function (rowIndex, colIndex, row) {
        var td;
        if (this.insideViewport(rowIndex, colIndex)) {
            if (!row) {
                row = this.getRow(rowIndex, null, colIndex);
            }
            colIndex = this.getViewportIndex(colIndex, true);
            td = row ? row.cells[colIndex] : row;
        }
        return td;
    };
    /**
     * Get cell element.
     *
     * @param {number} index - specify the index.
     * @param {HTMLTableElement} table - specify the table.
     * @param {number} colIdx - specify the column index.
     * @returns {HTMLTableRowElement} - Get cell element
     * @hidden
     */
    Spreadsheet.prototype.getRow = function (index, table, colIdx) {
        if (!table) {
            var sheet = this.getActiveSheet();
            var frozenRow = this.frozenRowCount(sheet);
            var frozenCol = this.frozenColCount(sheet);
            if (isNullOrUndefined(colIdx) || index > frozenRow - 1 && colIdx > frozenCol - 1) {
                table = this.getContentTable();
            }
            else {
                table = index < frozenRow && colIdx < frozenCol ? this.sheetModule.getSelectAllTable() : (index < frozenRow ?
                    this.getColHeaderTable() : this.getRowHeaderTable());
            }
        }
        index = this.getViewportIndex(index);
        return table ? table.rows[index] : null;
    };
    /**
     * To get hidden row/column count between two specified index.
     *
     * Set `layout` as `columns` if you want to get column hidden count.
     *
     * @param {number} startIndex - specify the startIndex.
     * @param {number} endIndex - specify the endIndex.
     * @param {string} layout - specify the layout.
     * @param {SheetModel} sheet - specify the sheet.
     * @returns {number} - To get hidden row/column count between two specified index.
     * @hidden
     */
    Spreadsheet.prototype.hiddenCount = function (startIndex, endIndex, layout, sheet) {
        if (layout === void 0) { layout = 'rows'; }
        if (sheet === void 0) { sheet = this.getActiveSheet(); }
        var count = 0;
        for (var i = startIndex; i <= endIndex; i++) {
            if ((sheet[layout])[i] && (sheet[layout])[i].hidden) {
                count++;
            }
        }
        return count;
    };
    /**
     * To get row/column viewport index.
     *
     * @param {number} index - specify the index.
     * @param {boolean} isCol - specify the bool value.
     * @returns {number} - To get row/column viewport index.
     * @hidden
     */
    Spreadsheet.prototype.getViewportIndex = function (index, isCol) {
        var sheet = this.getActiveSheet();
        if (isCol) {
            var frozenCol = this.frozenColCount(sheet);
            if (frozenCol) {
                var leftIndex = getCellIndexes(sheet.topLeftCell)[1];
                if (index < frozenCol) {
                    index -= leftIndex;
                    return index + 1;
                }
                else {
                    index -= frozenCol;
                }
            }
        }
        else {
            var frozenRow = this.frozenRowCount(sheet);
            if (frozenRow) {
                var topIndex = getCellIndexes(sheet.topLeftCell)[0];
                if (index < frozenRow) {
                    index -= topIndex;
                    return index + 1;
                }
                else {
                    index -= frozenRow;
                }
            }
        }
        if (this.scrollSettings.enableVirtualization) {
            if (isCol) {
                index -= this.hiddenCount(this.viewport.leftIndex, index, 'columns');
                index -= this.viewport.leftIndex;
            }
            else {
                index -= this.hiddenCount(this.viewport.topIndex, index);
                index -= this.viewport.topIndex;
            }
        }
        return index;
    };
    /**
     * To initialize the services;
     *
     * @returns {void} - To initialize the services.
     * @hidden
     */
    Spreadsheet.prototype.preRender = function () {
        _super.prototype.preRender.call(this);
        this.serviceLocator = new ServiceLocator;
        this.initServices();
    };
    Spreadsheet.prototype.initServices = function () {
        this.serviceLocator.register(locale, new L10n(this.getModuleName(), defaultLocale, this.locale));
        this.serviceLocator.register(dialog, new Dialog$1(this));
        this.serviceLocator.register(actionEvents, new ActionEvents(this));
        this.serviceLocator.register(overlay, new Overlay(this));
    };
    /**
     * To Initialize the component rendering.
     *
     * @returns {void} - To Initialize the component rendering.
     * @hidden
     */
    Spreadsheet.prototype.render = function () {
        _super.prototype.render.call(this);
        this.element.setAttribute('tabindex', '0');
        setAriaOptions(this.element, { role: 'grid' });
        this.renderModule = new Render(this);
        this.notify(initialLoad, null);
        this.renderSpreadsheet();
        this.wireEvents();
        if (this.created) {
            if (this[created].observers) {
                if (this[created].observers.length > 0) {
                    this.createdHandler = { observers: this[created].observers };
                    this[created].observers = [];
                }
            }
            else {
                this.createdHandler = this.created;
                this.setProperties({ created: undefined }, true);
            }
        }
    };
    Spreadsheet.prototype.renderSpreadsheet = function () {
        if (this.cssClass) {
            addClass([this.element], this.cssClass.split(' '));
        }
        this.setHeight();
        this.setWidth();
        createSpinner({ target: this.element }, this.createElement);
        if (this.isMobileView() && this.cssClass.indexOf('e-mobile-view') === -1) {
            this.element.classList.add('e-mobile-view');
        }
        this.sheetModule = this.serviceLocator.getService('sheet');
        if (this.allowScrolling) {
            this.scrollModule = new Scroll(this);
        }
        if (this.scrollSettings.enableVirtualization) {
            new VirtualScroll(this);
        }
        this.renderModule.render();
        new ShowHide(this);
    };
    /**
     * By default, Spreadsheet shows the spinner for all its actions. To manually show spinner you this method at your needed time.
     *
     * {% codeBlock src='spreadsheet/showSpinner/index.md' %}{% endcodeBlock %}
     *
     * @returns {void} - shows spinner
     */
    Spreadsheet.prototype.showSpinner = function () {
        showSpinner(this.element);
    };
    /**
     * To hide showed spinner manually.
     *
     * {% codeBlock src='spreadsheet/hideSpinner/index.md' %}{% endcodeBlock %}
     *
     * @returns {void} - To hide showed spinner manually.
     */
    Spreadsheet.prototype.hideSpinner = function () {
        hideSpinner(this.element);
    };
    /**
     * To protect the particular sheet.
     *
     * {% codeBlock src='spreadsheet/protectSheet/index.md' %}{% endcodeBlock %}
     *
     * @param {number | string} sheet - Specifies the sheet to protect.
     * @param {ProtectSettingsModel} protectSettings - Specifies the protect sheet options.
     * @default { selectCells: 'false', formatCells: 'false', formatRows: 'false', formatColumns:'false', insertLink:'false' }
     * @param {string} password - Specifies the password to protect.
     * @returns {void} - To protect the particular sheet.
     */
    Spreadsheet.prototype.protectSheet = function (sheet, protectSettings, password) {
        if (typeof (sheet) === 'string') {
            sheet = getSheetIndex(this, sheet);
        }
        if (sheet) {
            this.setSheetPropertyOnMute(this.sheets[sheet], 'isProtected', true);
            this.setSheetPropertyOnMute(this.sheets[sheet], 'password', password ? password : '');
            this.setSheetPropertyOnMute(this.sheets[sheet], 'protectSettings', protectSettings);
        }
        sheet = this.getActiveSheet().index;
        this.setSheetPropertyOnMute(this.getActiveSheet(), 'isProtected', true);
        this.setSheetPropertyOnMute(this.getActiveSheet(), 'password', password ? password : '');
        _super.prototype.protectSheet.call(this, sheet, protectSettings, password);
    };
    /**
     * To unprotect the particular sheet.
     *
     * {% codeBlock src='spreadsheet/unprotectSheet/index.md' %}{% endcodeBlock %}
     *
     * @param {number | string} sheet - Specifies the sheet name or index to Unprotect.
     * @returns {void} - To unprotect the particular sheet.
     */
    Spreadsheet.prototype.unprotectSheet = function (sheet) {
        if (typeof (sheet) === 'string') {
            sheet = getSheetIndex(this, sheet);
        }
        if (sheet) {
            this.sheets[sheet].isProtected = false;
        }
        else {
            this.getActiveSheet().isProtected = false;
        }
        _super.prototype.unprotectSheet.call(this, sheet);
    };
    /**
     * To find the specified cell value.
     *
     * {% codeBlock src='spreadsheet/find/index.md' %}{% endcodeBlock %}
     *
     * @param {FindOptions} args - Specifies the replace value with find args to replace specified cell value.
     * @param {string} args.value - Specifies the value to be find.
     * @param {string} args.mode - Specifies the value to be find within sheet or workbook.
     * @param {string} args.searchBy - Specifies the value to be find by row or column.
     * @param {boolean} args.isCSen - Specifies the find match with case sensitive or not.
     * @param {boolean} args.isEMatch - Specifies the find match with entire match or not.
     * @param {string} args.findOpt - Specifies the next or previous find match.
     * @param {number} args.sheetIndex - Specifies the current sheet to find.
     * @default { mode: 'Sheet', searchBy: 'By Row', isCSen: 'false', isEMatch:'false' }
     * @returns {void} - To find the specified cell value.
     */
    Spreadsheet.prototype.find = function (args) {
        var activeCell = this.getActiveSheet().activeCell;
        _super.prototype.findHandler.call(this, args);
        if (!args.isAction) {
            if (activeCell !== this.getActiveSheet().activeCell) {
                return this.getActiveSheet().name + '!' + this.getActiveSheet().activeCell;
            }
            else {
                return null;
            }
        }
    };
    /**
     * To replace the specified cell value.
     *
     * {% codeBlock src='spreadsheet/replace/index.md' %}{% endcodeBlock %}
     *
     * @param {FindOptions} args - Specifies the replace value with find args to replace specified cell value.
     * @param {string} args.replaceValue - Specifies the replacing value.
     * @param {string} args.replaceBy - Specifies the value to be replaced for one or all.
     * @param {string} args.value - Specifies the value to be replaced
     * @returns {void} - To replace the specified cell value.
     */
    Spreadsheet.prototype.replace = function (args) {
        args = {
            value: args.value, mode: args.mode ? args.mode : 'Sheet', isCSen: args.isCSen ? args.isCSen : false,
            isEMatch: args.isEMatch ? args.isEMatch : false, searchBy: args.searchBy ? args.searchBy : 'By Row',
            replaceValue: args.replaceValue, replaceBy: args.replaceBy,
            sheetIndex: args.sheetIndex ? args.sheetIndex : this.activeSheetIndex, findOpt: args.findOpt ? args.findOpt : ''
        };
        _super.prototype.replaceHandler.call(this, args);
    };
    /**
     * To Find All the Match values Address within Sheet or Workbook.
     *
     * {% codeBlock src='spreadsheet/findAll/index.md' %}{% endcodeBlock %}
     *
     * @param {string} value - Specifies the value to find.
     * @param {string} mode - Specifies the value to be find within Sheet/Workbook.
     * @param {boolean} isCSen - Specifies the find match with case sensitive or not.
     * @param {boolean} isEMatch - Specifies the find match with entire match or not.
     * @param {number} sheetIndex - Specifies the sheetIndex. If not specified, it will consider the active sheet.
     * @returns {string[]} - To Find All the Match values Address within Sheet or Workbook.
     */
    Spreadsheet.prototype.findAll = function (value, mode, isCSen, isEMatch, sheetIndex) {
        mode = mode ? mode : 'Sheet';
        sheetIndex = sheetIndex ? sheetIndex : this.activeSheetIndex;
        isCSen = isCSen ? isCSen : false;
        isEMatch = isEMatch ? isEMatch : false;
        var findCollection = [];
        var findAllArguments = {
            value: value, mode: mode, sheetIndex: sheetIndex, isCSen: isCSen,
            isEMatch: isEMatch, findCollection: findCollection
        };
        this.notify(findAllValues, findAllArguments);
        return findCollection;
    };
    /**
     * Used to navigate to cell address within workbook.
     *
     * {% codeBlock src='spreadsheet/goTo/index.md' %}{% endcodeBlock %}
     *
     * @param {string} address - Specifies the cell address you need to navigate.
     * You can specify the address in two formats,
     * `{sheet name}!{cell address}` - Switch to specified sheet and navigate to specified cell address.
     * `{cell address}` - Navigate to specified cell address with in the active sheet.
     * @returns {void} - Used to navigate to cell address within workbook.
     */
    Spreadsheet.prototype.goTo = function (address) {
        if (address.includes('!')) {
            var addrArr = address.split('!');
            var idx = getSheetIndex(this, addrArr[0]);
            if (idx === undefined) {
                return;
            }
            if (idx !== this.activeSheetIndex) {
                var activeCell = addrArr[1].split(':')[0];
                var sheet_1 = this.sheets[idx];
                this.setSheetPropertyOnMute(sheet_1, 'activeCell', activeCell);
                this.setSheetPropertyOnMute(sheet_1, 'selectedRange', addrArr[1]);
                var cellIndex = getCellIndexes(activeCell);
                if (sheet_1.frozenColumns || sheet_1.frozenRows) {
                    var topLeftCell = getCellIndexes(sheet_1.topLeftCell);
                    if (!((sheet_1.frozenRows && cellIndex[0] < topLeftCell[0]) || (sheet_1.frozenColumns && cellIndex[1] < topLeftCell[1]))) {
                        var frozenRow_1 = this.frozenRowCount(sheet_1);
                        var frozenCol_1 = this.frozenColCount(sheet_1);
                        var curCell = [];
                        var paneCell = [];
                        var paneTopLeftCell = getCellIndexes(sheet_1.paneTopLeftCell);
                        if (frozenRow_1) {
                            curCell.push(topLeftCell[0]);
                            if (cellIndex[0] >= frozenRow_1) {
                                paneCell.push(cellIndex[0]);
                            }
                            else {
                                paneCell.push(paneTopLeftCell[0]);
                            }
                        }
                        else {
                            curCell.push(cellIndex[0]);
                            paneCell.push(cellIndex[0]);
                        }
                        if (frozenCol_1) {
                            curCell.push(topLeftCell[1]);
                            if (cellIndex[1] >= frozenCol_1) {
                                paneCell.push(cellIndex[1]);
                            }
                            else {
                                paneCell.push(paneTopLeftCell[1]);
                            }
                        }
                        else {
                            curCell.push(cellIndex[1]);
                            paneCell.push(cellIndex[1]);
                        }
                        this.setSheetPropertyOnMute(sheet_1, 'topLeftCell', getCellAddress(curCell[0], curCell[1]));
                        this.setSheetPropertyOnMute(sheet_1, 'paneTopLeftCell', getCellAddress(paneCell[0], paneCell[1]));
                    }
                }
                else {
                    if (cellIndex[0] < this.viewport.rowCount) {
                        cellIndex[0] = 0;
                    }
                    if (cellIndex[1] < this.viewport.colCount) {
                        cellIndex[1] = 0;
                    }
                    this.updateTopLeftCell(cellIndex[0], cellIndex[1], null, sheet_1);
                }
                this.activeSheetIndex = idx;
                this.dataBind();
                return;
            }
        }
        var indexes = getRangeIndexes(address);
        var sheet = this.getActiveSheet();
        var frozenRow = this.frozenRowCount(sheet);
        var frozenCol = this.frozenColCount(sheet);
        var insideDomCount = this.insideViewport(indexes[0], indexes[1]);
        if (insideDomCount) {
            this.selectRange(address);
            var viewportIndexes = getCellIndexes(sheet.paneTopLeftCell);
            var viewportSize = this.viewport.height - this.getScrollElement().parentElement.getBoundingClientRect().height;
            var threshold = 0;
            var lastRowIdx = 0;
            if (frozenRow) {
                var topLeftIndexes = getCellIndexes(sheet.topLeftCell);
                for (var i = topLeftIndexes[0]; i < frozenRow; i++) {
                    threshold += getRowHeight(sheet, i);
                    if (threshold > viewportSize) {
                        lastRowIdx = i;
                        break;
                    }
                }
            }
            if (lastRowIdx === 0) {
                for (var i = viewportIndexes[0]; i < this.viewport.bottomIndex; i++) {
                    threshold += getRowHeight(sheet, i);
                    if (threshold > viewportSize) {
                        lastRowIdx = i;
                        break;
                    }
                }
            }
            viewportIndexes[2] = lastRowIdx;
            var lastColIdx = 0;
            threshold = 0;
            viewportSize = this.viewport.width - this.sheetModule.getScrollSize();
            if (frozenCol) {
                var topLeftIndexes = getCellIndexes(sheet.topLeftCell);
                for (var i = topLeftIndexes[1]; i < frozenCol; i++) {
                    threshold += getColumnWidth(sheet, i);
                    if (threshold > viewportSize) {
                        lastColIdx = i;
                        break;
                    }
                }
            }
            if (lastColIdx === 0) {
                for (var i = viewportIndexes[1]; i < this.viewport.rightIndex; i++) {
                    threshold += getColumnWidth(sheet, i);
                    if (threshold > viewportSize) {
                        lastColIdx = i;
                        break;
                    }
                }
            }
            viewportIndexes[3] = lastColIdx;
            if (indexes[0] >= viewportIndexes[0] && indexes[0] < viewportIndexes[2] && indexes[1] >= viewportIndexes[1] &&
                indexes[1] < viewportIndexes[3]) {
                return;
            }
            if (frozenRow || frozenCol) {
                viewportIndexes = [].concat(getCellIndexes(sheet.topLeftCell), [frozenRow, viewportIndexes[3]]);
                if (indexes[0] >= viewportIndexes[0] && indexes[0] < viewportIndexes[2] && indexes[1] >= viewportIndexes[1] &&
                    indexes[1] < viewportIndexes[3]) {
                    return;
                }
                viewportIndexes[2] = lastRowIdx;
                viewportIndexes[3] = frozenCol;
                if (indexes[0] >= viewportIndexes[0] && indexes[0] < viewportIndexes[2] && indexes[1] >= viewportIndexes[1] &&
                    indexes[1] < viewportIndexes[3]) {
                    return;
                }
            }
        }
        var content = this.getMainContent().parentElement;
        var vTrack;
        var cVTrack;
        var offset;
        var vWidth;
        var vHeight;
        var scrollableSize;
        if (indexes[0] === frozenRow) {
            offset = 0;
        }
        else {
            offset = getRowsHeight(sheet, frozenRow, indexes[0] - 1, true);
            if (this.scrollSettings.enableVirtualization) {
                scrollableSize = offset + this.getContentTable().getBoundingClientRect().height;
                vHeight = parseFloat(content.querySelector('.e-virtualtrack').style.height);
                if (scrollableSize > vHeight) {
                    scrollableSize += 10;
                    vTrack = content.querySelector('.e-virtualtrack');
                    vTrack.style.height = scrollableSize + "px";
                    getUpdateUsingRaf(function () { vTrack.style.height = vHeight + "px"; });
                }
            }
        }
        content.scrollTop = offset;
        content = this.element.getElementsByClassName('e-scroller')[0];
        if (indexes[1] === frozenCol) {
            offset = 0;
        }
        else {
            offset = getColumnsWidth(sheet, frozenCol, indexes[1] - 1, true);
            if (this.scrollSettings.enableVirtualization) {
                scrollableSize = offset + this.getContentTable().getBoundingClientRect().width;
                vWidth = parseFloat(content.querySelector('.e-virtualtrack').style.width);
                if (scrollableSize > vWidth) {
                    scrollableSize += 10;
                    vTrack = content.querySelector('.e-virtualtrack');
                    vTrack.style.width = scrollableSize + "px";
                    cVTrack = this.getColumnHeaderContent().querySelector('.e-virtualtrack');
                    cVTrack.style.width = scrollableSize + "px";
                    vTrack = this.getMainContent().querySelector('.e-virtualtrack');
                    vTrack.style.width = scrollableSize + "px";
                    getUpdateUsingRaf(function () {
                        vTrack.style.width = vWidth + "px";
                        cVTrack.style.width = vWidth + "px";
                    });
                }
            }
        }
        content.scrollLeft = offset;
        if (!insideDomCount) {
            this.selectRange(address);
        }
    };
    /**
     * @hidden
     * @param {number} rowIndex - Specifies the row index.
     * @param {number} colIndex - Specifies the column index.
     * @returns {boolean} - Specifies the boolean value.
     */
    Spreadsheet.prototype.insideViewport = function (rowIndex, colIndex) {
        var sheet = this.getActiveSheet();
        if (sheet.frozenRows || sheet.frozenColumns) {
            var frozenRow = this.frozenRowCount(sheet);
            var frozenCol = this.frozenColCount(sheet);
            var indexes = getCellIndexes(sheet.topLeftCell);
            return ((rowIndex >= indexes[0] && rowIndex < frozenRow) || (rowIndex >= this.viewport.topIndex + frozenRow && rowIndex <=
                this.viewport.bottomIndex)) && ((colIndex >= indexes[1] && colIndex < frozenCol) || (colIndex >= this.viewport.leftIndex +
                frozenCol && colIndex <= this.viewport.rightIndex));
        }
        else {
            return rowIndex >= this.viewport.topIndex && rowIndex <= this.viewport.bottomIndex && colIndex >= this.viewport.leftIndex &&
                colIndex <= this.viewport.rightIndex;
        }
    };
    /**
     * Used to resize the Spreadsheet.
     *
     * {% codeBlock src='spreadsheet/resize/index.md' %}{% endcodeBlock %}
     *
     * @returns {void} - Used to resize the Spreadsheet.
     */
    Spreadsheet.prototype.resize = function () {
        this.renderModule.setSheetPanelSize();
        if (this.scrollSettings.enableVirtualization) {
            this.renderModule.refreshSheet(false, true);
        }
    };
    /**
     * To cut the specified cell or cells properties such as value, format, style etc...
     *
     * {% codeBlock src='spreadsheet/cut/index.md' %}{% endcodeBlock %}
     *
     * @param {string} address - Specifies the range address to cut.
     * @returns {Promise<Object>} - To cut the specified cell or cells properties such as value, format, style etc...
     */
    Spreadsheet.prototype.cut = function (address) {
        var promise = 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        new Promise(function (resolve, reject) { resolve((function () { })()); });
        this.notify(cut, address ? {
            range: getIndexesFromAddress(address),
            sId: this.sheets[getSheetIndex(this, getSheetNameFromAddress(address))] ?
                this.sheets[getSheetIndex(this, getSheetNameFromAddress(address))].id : this.getActiveSheet().id,
            promise: promise, invokeCopy: true, isPublic: true
        } : { promise: promise, invokeCopy: true, isPublic: true });
        return promise;
    };
    /**
     * To copy the specified cell or cells properties such as value, format, style etc...
     *
     * {% codeBlock src='spreadsheet/copy/index.md' %}{% endcodeBlock %}
     *
     * @param {string} address - Specifies the range address.
     * @returns {Promise<Object>} - To copy the specified cell or cells properties such as value, format, style etc...
     */
    Spreadsheet.prototype.copy = function (address) {
        var promise = 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        new Promise(function (resolve, reject) { resolve((function () { })()); });
        this.notify(copy, address ? {
            range: getIndexesFromAddress(address),
            sId: this.sheets[getSheetIndex(this, getSheetNameFromAddress(address))] ?
                this.sheets[getSheetIndex(this, getSheetNameFromAddress(address))].id : this.getActiveSheet().id,
            promise: promise, invokeCopy: true, isPublic: true
        } : { promise: promise, invokeCopy: true, isPublic: true });
        return promise;
    };
    /**
     * This method is used to paste the cut or copied cells in to specified address.
     *
     * {% codeBlock src='spreadsheet/paste/index.md' %}{% endcodeBlock %}
     *
     * @param {string} address - Specifies the cell or range address.
     * @param {PasteSpecialType} type - Specifies the type of paste.
     * @returns {void} - used to paste the cut or copied cells in to specified address.
     */
    Spreadsheet.prototype.paste = function (address, type) {
        this.notify(paste, {
            range: address ? getIndexesFromAddress(address) : address,
            sIdx: address ? getSheetIndex(this, getSheetNameFromAddress(address)) : address,
            type: type, isAction: true, isInternal: true
        });
    };
    /**
     * To update the action which need to perform.
     *
     * {% codeBlock src='spreadsheet/updateAction/index.md' %}{% endcodeBlock %}
     *
     * @param {string} options - It describes an action and event args to perform.
     * @param {string} options.action - specifies an action.
     * @param {string} options.eventArgs - specifies an args to perform an action.
     * @returns {void} - To update the action which need to perform.
     */
    Spreadsheet.prototype.updateAction = function (options) {
        updateAction(options, this);
    };
    Spreadsheet.prototype.setHeight = function () {
        if (this.height.toString().indexOf('%') > -1) {
            this.element.style.minHeight = '400px';
        }
        this.element.style.height = formatUnit(this.height);
    };
    Spreadsheet.prototype.setWidth = function () {
        if (this.width.toString().indexOf('%') > -1 || this.width === 'auto') {
            this.element.style.minWidth = '300px';
        }
        this.element.style.width = formatUnit(this.width);
    };
    /**
     * Set the width of column.
     *
     * {% codeBlock src='spreadsheet/setColWidth/index.md' %}{% endcodeBlock %}
     *
     * @param {number} width - To specify the width
     * @param {number} colIndex - To specify the colIndex
     * @param {number} sheetIndex - To specify the sheetIndex
     * @returns {void} - Set the width of column.
     */
    Spreadsheet.prototype.setColWidth = function (width, colIndex, sheetIndex) {
        if (width === void 0) { width = 64; }
        if (colIndex === void 0) { colIndex = 0; }
        // const colThreshold: number = this.getThreshold('col');
        var sheet = isNullOrUndefined(sheetIndex) ? this.getActiveSheet() : this.sheets[sheetIndex];
        if (sheet) {
            var mIndex = colIndex;
            var colWidth = (typeof width === 'number') ? width + 'px' : width;
            colIndex = isNullOrUndefined(colIndex) ? getCellIndexes(sheet.activeCell)[1] : colIndex;
            var frozenCol = this.frozenColCount(sheet);
            var viewportRightIndex = frozenCol ? this.viewport.rightIndex - frozenCol : this.viewport.rightIndex;
            if (sheet === this.getActiveSheet()) {
                if (colIndex >= this.viewport.leftIndex && colIndex <= viewportRightIndex) {
                    if (this.scrollSettings.enableVirtualization) {
                        colIndex = colIndex - this.viewport.leftIndex;
                    }
                    var trgt = void 0;
                    if (sheet.showHeaders) {
                        trgt = this.getColumnHeaderContent().getElementsByClassName('e-header-cell')[colIndex];
                    }
                    else {
                        trgt = this.getContentTable().getElementsByClassName('e-row')[0]
                            .getElementsByClassName('e-cell')[colIndex];
                    }
                    var eleWidth = getColumnWidth(sheet, colIndex, null, true);
                    var threshold = getDPRValue(parseInt(colWidth, 10)) - eleWidth;
                    if (threshold < 0 && eleWidth < -(threshold)) {
                        getCellIndexes(sheet.activeCell);
                        threshold = -eleWidth;
                    }
                    var oldIdx = parseInt(trgt.getAttribute('aria-colindex'), 10) - 1;
                    if (this.getActiveSheet() === sheet) {
                        this.notify(colWidthChanged, { threshold: threshold, colIdx: oldIdx, checkWrapCell: true });
                        setResize(colIndex, colIndex, colWidth, true, this);
                    }
                }
                else {
                    var oldWidth = getColumnWidth(sheet, colIndex);
                    var threshold = void 0;
                    if (parseInt(colWidth, 10) > 0) {
                        threshold = -(oldWidth - parseInt(colWidth, 10));
                    }
                    else {
                        threshold = -oldWidth;
                    }
                    this.notify(colWidthChanged, { threshold: threshold, colIdx: colIndex });
                }
            }
            getColumn(sheet, mIndex).width = parseInt(colWidth, 10) > 0 ? parseInt(colWidth, 10) : 0;
            sheet.columns[mIndex].customWidth = true;
            this.notify(positionAutoFillElement, null);
        }
    };
    /**
     * Set the height of row.
     *
     * {% codeBlock src='spreadsheet/setRowHeight/index.md' %}{% endcodeBlock %}
     *
     * @param {number} height - Specifies height needs to be updated. If not specified, it will set the default height 20.
     * @param {number} rowIndex - Specifies the row index. If not specified, it will consider the first row.
     * @param {number} sheetIndex - Specifies the sheetIndex. If not specified, it will consider the active sheet.
     * @param {boolean} edited - Specifies the boolean value.
     * @returns {void} - Set the height of row.
     */
    Spreadsheet.prototype.setRowHeight = function (height, rowIndex, sheetIndex, edited) {
        if (height === void 0) { height = 20; }
        if (rowIndex === void 0) { rowIndex = 0; }
        var sheet = isNullOrUndefined(sheetIndex) ? this.getActiveSheet() : this.sheets[sheetIndex - 1];
        if (sheet) {
            var mIndex = rowIndex;
            var rowHeight = (typeof height === 'number') ? height + 'px' : height;
            rowIndex = isNullOrUndefined(rowIndex) ? getCellIndexes(sheet.activeCell)[0] : rowIndex;
            var frozenRow = this.frozenRowCount(sheet);
            var viewportBottomIndex = frozenRow ? this.viewport.bottomIndex - frozenRow : this.viewport.bottomIndex;
            if (sheet === this.getActiveSheet()) {
                if (rowIndex <= viewportBottomIndex && rowIndex >= this.viewport.topIndex) {
                    if (this.scrollSettings.enableVirtualization) {
                        rowIndex = rowIndex - this.viewport.topIndex;
                    }
                    var eleHeight = getRowHeight(sheet, rowIndex, true);
                    var threshold = getDPRValue(parseInt(rowHeight, 10)) - eleHeight;
                    if (threshold < 0 && eleHeight < -(threshold)) {
                        threshold = -eleHeight;
                    }
                    if (this.getActiveSheet() === sheet) {
                        this.notify(rowHeightChanged, { threshold: threshold, rowIdx: rowIndex, isCustomHgt: true });
                        if (isNullOrUndefined(edited)) {
                            edited = false;
                        }
                        if (!edited) {
                            setResize(rowIndex, rowIndex, rowHeight, false, this);
                            edited = false;
                        }
                    }
                }
                else {
                    var oldHeight = getRowHeight(sheet, rowIndex);
                    var threshold = void 0;
                    if (parseInt(rowHeight, 10) > 0) {
                        threshold = -(oldHeight - parseInt(rowHeight, 10));
                    }
                    else {
                        threshold = -oldHeight;
                    }
                    this.notify(rowHeightChanged, { threshold: threshold, rowIdx: rowIndex });
                }
            }
            setRowHeight(sheet, mIndex, parseInt(rowHeight, 10) > 0 ? parseInt(rowHeight, 10) : 0);
            sheet.rows[mIndex].customHeight = true;
            this.notify(positionAutoFillElement, null);
        }
    };
    /**
     * This method is used to autofit the range of rows or columns
     *
     * {% codeBlock src='spreadsheet/autoFit/index.md' %}{% endcodeBlock %}
     *
     * @param {string} range - range of rows or columns that needs to be autofit.
     *
     * @returns {void} - used to autofit the range of rows or columns
     * ```html
     * <div id='Spreadsheet'></div>
     * ```
     * ```typescript
     * let spreadsheet = new Spreadsheet({
     *      allowResizing: true
     * ...
     * }, '#Spreadsheet');
     * spreadsheet.autoFit('A:D'); // Auto fit from A to D columns
     * Spreadsheet.autoFit('1:4'); // Auto fit from 1 to 4 rows
     *
     * ```
     */
    Spreadsheet.prototype.autoFit = function (range) {
        var values = this.getIndexes(range);
        var startIdx = values.startIdx;
        var endIdx = values.endIdx;
        var isCol = values.isCol;
        var maximumColInx = isCol ? getColIndex('XFD') : 1048576;
        if (startIdx <= maximumColInx) {
            if (endIdx > maximumColInx) {
                endIdx = maximumColInx;
            }
        }
        else {
            return;
        }
        for (startIdx; startIdx <= endIdx; startIdx++) {
            this.notify(setAutoFit, { idx: startIdx, isCol: isCol });
        }
    };
    /**
     * @hidden
     * @param {string} range - specify the range.
     * @returns {number | boolean} - to get the index.
     *
     */
    Spreadsheet.prototype.getIndexes = function (range) {
        var startIsCol;
        var endIsCol;
        var start;
        var end;
        if (range.indexOf(':') !== -1) {
            var starttoend = range.split(':');
            start = starttoend[0];
            end = starttoend[1];
        }
        else {
            start = range;
            end = range;
        }
        if (!isNullOrUndefined(start)) {
            var startValues = this.getAddress(start);
            start = startValues.address;
            startIsCol = startValues.isCol;
        }
        if (!isNullOrUndefined(end)) {
            var endValues = this.getAddress(end);
            end = endValues.address;
            endIsCol = endValues.isCol;
        }
        var isCol = startIsCol === true && endIsCol === true ? true : false;
        var startIdx = isCol ? getColIndex(start.toUpperCase()) : parseInt(start, 10);
        var endIdx = isCol ? getColIndex(end.toUpperCase()) : parseInt(end, 10);
        return { startIdx: startIdx, endIdx: endIdx, isCol: isCol };
    };
    Spreadsheet.prototype.getAddress = function (address) {
        var isCol;
        if (address.substring(0, 1).match(/\D/g)) {
            isCol = true;
            address = address.replace(/[0-9]/g, '');
            return { address: address, isCol: isCol };
        }
        else if (address.substring(0, 1).match(/[0-9]/g) && address.match(/\D/g)) {
            return { address: '', isCol: false };
        }
        else {
            address = (parseInt(address, 10) - 1).toString();
            return { address: address, isCol: isCol };
        }
    };
    /**
     * To add the hyperlink in the cell
     *
     * {% codeBlock src='spreadsheet/addHyperlink/index.md' %}{% endcodeBlock %}
     *
     * @param {string | HyperlinkModel} hyperlink - to specify the hyperlink
     * @param {string} address - to specify the address
     * @returns {void} - To add the hyperlink in the cell
     */
    Spreadsheet.prototype.addHyperlink = function (hyperlink, address) {
        this.insertHyperlink(hyperlink, address, '', true);
    };
    /**
     * To remove the hyperlink in the cell
     *
     * {% codeBlock src='spreadsheet/removeHyperlink/index.md' %}{% endcodeBlock %}
     *
     * @param {string} range - To specify the range
     * @returns {void} - To remove the hyperlink in the cell
     */
    Spreadsheet.prototype.removeHyperlink = function (range) {
        var rangeArr;
        var sheet = this.getActiveSheet();
        var sheetIdx;
        if (range && range.indexOf('!') !== -1) {
            rangeArr = range.split('!');
            var sheets = this.sheets;
            for (var idx = 0; idx < sheets.length; idx++) {
                if (sheets[idx].name === rangeArr[0]) {
                    sheetIdx = idx;
                }
            }
            sheet = this.sheets[sheetIdx];
            range = rangeArr[1];
        }
        var rangeIndexes = range ? getRangeIndexes(range) : getRangeIndexes(this.getActiveSheet().activeCell);
        for (var rowIdx = rangeIndexes[0]; rowIdx <= rangeIndexes[2]; rowIdx++) {
            for (var colIdx = rangeIndexes[1]; colIdx <= rangeIndexes[3]; colIdx++) {
                if (sheet && sheet.rows[rowIdx] && sheet.rows[rowIdx].cells[colIdx]) {
                    var prevELem = this.getCell(rowIdx, colIdx);
                    var classList = [];
                    for (var i = 0; i < prevELem.classList.length; i++) {
                        classList.push(prevELem.classList[i]);
                    }
                    this.notify(deleteHyperlink, { sheet: sheet, rowIdx: rowIdx, colIdx: colIdx });
                    for (var i = 0; i < classList.length; i++) {
                        if (!this.getCell(rowIdx, colIdx).classList.contains(classList[i])) {
                            this.getCell(rowIdx, colIdx).classList.add(classList[i]);
                        }
                    }
                }
            }
        }
    };
    /**
     * @hidden
     * @param {string | HyperlinkModel} hyperlink - specify the hyperlink
     * @param {string} address - To specify the address
     * @param {string} displayText - To specify the displayText
     * @param {boolean} isMethod - To specify the bool value
     * @returns {void} - to insert the hyperlink
     */
    Spreadsheet.prototype.insertHyperlink = function (hyperlink, address, displayText, isMethod) {
        if (this.allowHyperlink) {
            //let value: string;
            var addrRange = void 0;
            var sheetIdx = void 0;
            var cellIdx = void 0;
            var sheet = this.getActiveSheet();
            // let isEmpty: boolean;
            address = address ? address : this.getActiveSheet().activeCell;
            cellIdx = getRangeIndexes(address);
            var prevELem = this.getCell(cellIdx[0], cellIdx[1]);
            var classList = [];
            for (var i = cellIdx[0]; i <= cellIdx[2]; i++) {
                for (var j = cellIdx[1]; j <= cellIdx[3]; j++) {
                    if (sheet.rows[i].cells[j] && sheet.rows[i].cells[j].validation) {
                        if (sheet.rows[i].cells[j].validation.isHighlighted) {
                            if (prevELem && prevELem.style.backgroundColor === 'rgb(255, 255, 0)') {
                                sheet.rows[i].cells[j].style = { backgroundColor: '#ffff00' };
                            }
                        }
                    }
                }
            }
            for (var i = 0; prevELem && i < prevELem.classList.length; i++) {
                classList.push(prevELem.classList[i]);
            }
            var befArgs = { hyperlink: hyperlink, cell: address, cancel: false };
            var aftArgs = { hyperlink: hyperlink, cell: address };
            if (!isMethod) {
                this.trigger(beforeHyperlinkCreate, befArgs);
            }
            if (!befArgs.cancel) {
                hyperlink = befArgs.hyperlink;
                address = befArgs.cell;
                var args = { hyperlink: hyperlink, cell: address, triggerEvt: !isMethod };
                this.notify(setLinkModel, args);
                _super.prototype.addHyperlink.call(this, hyperlink, address);
                if (address && address.indexOf('!') !== -1) {
                    addrRange = address.split('!');
                    var sheets = this.sheets;
                    for (var idx = 0; idx < sheets.length; idx++) {
                        if (sheets[idx].name === addrRange[0]) {
                            sheetIdx = idx;
                        }
                    }
                    sheet = this.sheets[sheetIdx];
                    address = addrRange[1];
                }
                if (!sheet) {
                    return;
                }
                address = address ? address : this.getActiveSheet().activeCell;
                cellIdx = getRangeIndexes(address);
                // if (typeof (hyperlink) === 'string') {
                //     value = hyperlink;
                // } else {
                //     value = hyperlink.address;
                // }
                var mCell = sheet.rows[cellIdx[0]].cells[cellIdx[1]];
                if (isNullOrUndefined(mCell.value) || mCell.value === '') {
                    // isEmpty = true;
                    if (!isNullOrUndefined(displayText) && displayText !== '') {
                        mCell.value = displayText;
                    }
                }
                else {
                    if (mCell.value !== displayText) {
                        mCell.value = displayText;
                    }
                }
                if (!isMethod) {
                    this.trigger(afterHyperlinkCreate, aftArgs);
                }
                if (sheet === this.getActiveSheet()) {
                    this.serviceLocator.getService('cell').refreshRange(cellIdx);
                    for (var i = 0; i < classList.length; i++) {
                        if (!this.getCell(cellIdx[0], cellIdx[1]).classList.contains(classList[i])) {
                            this.getCell(cellIdx[0], cellIdx[1]).classList.add(classList[i]);
                        }
                    }
                    this.notify(refreshRibbonIcons, null);
                }
            }
        }
    };
    /**
     * This method is used to add data validation.
     *
     * {% codeBlock src='spreadsheet/addDataValidation/index.md' %}{% endcodeBlock %}
     *
     * @param {ValidationModel} rules - specifies the validation rules like type, operator, value1, value2, ignoreBlank, inCellDropDown, isHighlighted arguments.
     * @param {string} range - range that needs to be add validation.
     * @returns {void} - used to add data validation.
     */
    Spreadsheet.prototype.addDataValidation = function (rules, range) {
        _super.prototype.addDataValidation.call(this, rules, range);
    };
    /**
     * This method is used for remove validation.
     *
     * {% codeBlock src='spreadsheet/removeDataValidation/index.md' %}{% endcodeBlock %}
     *
     * @param {string} range - range that needs to be remove validation.
     * @returns {void} - This method is used for remove validation.
     */
    Spreadsheet.prototype.removeDataValidation = function (range) {
        _super.prototype.removeDataValidation.call(this, range);
    };
    /**
     * This method is used to highlight the invalid data.
     *
     * {% codeBlock src='spreadsheet/addInvalidHighlight/index.md' %}{% endcodeBlock %}
     *
     * @param {string} range - range that needs to be highlight the invalid data.
     * @returns {void} - This method is used to highlight the invalid data.
     */
    Spreadsheet.prototype.addInvalidHighlight = function (range) {
        var ranges = range ? range : this.dataValidationRange;
        this.isValidationHighlighted = true;
        if (ranges.indexOf(',') > -1) {
            var splitRange = ranges.split(',');
            for (var i = 0; i < splitRange.length - 1; i++) {
                _super.prototype.addInvalidHighlight.call(this, splitRange[i]);
            }
        }
        else {
            _super.prototype.addInvalidHighlight.call(this, ranges);
        }
    };
    /**
     * This method is used for remove highlight from invalid data.
     *
     * {% codeBlock src='spreadsheet/removeInvalidHighlight/index.md' %}{% endcodeBlock %}
     *
     * @param {string} range - range that needs to be remove invalid highlight.
     * @returns {void} - This method is used for remove highlight from invalid data.
     */
    Spreadsheet.prototype.removeInvalidHighlight = function (range) {
        var address = range ? range : this.dataValidationRange;
        this.isValidationHighlighted = false;
        if (address.indexOf(',') > -1) {
            var splitRange = address.split(',');
            for (var i = 0; i < splitRange.length - 1; i++) {
                _super.prototype.removeInvalidHighlight.call(this, splitRange[i]);
            }
        }
        else {
            _super.prototype.removeInvalidHighlight.call(this, address);
        }
    };
    /**
     * This method is used to add conditional formatting.
     *
     * {% codeBlock src='spreadsheet/conditionalFormat/index.md' %}{% endcodeBlock %}
     *
     * @param {ConditionalFormatModel} conditionalFormat - Specify the conditionalFormat.
     * @returns {void} - used to add conditional formatting.
     */
    Spreadsheet.prototype.conditionalFormat = function (conditionalFormat) {
        _super.prototype.conditionalFormat.call(this, conditionalFormat);
    };
    /**
     * This method is used for remove conditional formatting.
     *
     * {% codeBlock src='spreadsheet/clearConditionalFormat/index.md' %}{% endcodeBlock %}
     *
     * @param {string} range - range that needs to be remove conditional formatting.
     * @returns {void} - used for remove conditional formatting.
     */
    Spreadsheet.prototype.clearConditionalFormat = function (range) {
        range = range || this.getActiveSheet().selectedRange;
        _super.prototype.clearConditionalFormat.call(this, range);
    };
    /**
     * @hidden
     * @returns {void} - set Panel Size.
     */
    Spreadsheet.prototype.setPanelSize = function () {
        if (this.height !== 'auto') {
            var panel = document.getElementById(this.element.id + '_sheet_panel');
            panel.style.height = this.element.getBoundingClientRect().height - getSiblingsHeight(panel) + "px";
        }
    };
    /**
     * Opens the Excel file.
     *
     * {% codeBlock src='spreadsheet/open/index.md' %}{% endcodeBlock %}
     *
     * @param {OpenOptions} options - Options for opening the excel file.
     * @returns {void} - Open the Excel file.
     */
    Spreadsheet.prototype.open = function (options) {
        this.isOpen = true;
        _super.prototype.open.call(this, options);
        if (this.isOpen) {
            this.showSpinner();
        }
    };
    /**
     * Used to hide/show the rows in spreadsheet.
     *
     * @param {number} startIndex - Specifies the start row index.
     * @param {number} endIndex - Specifies the end row index.
     * @param {boolean} hide - To hide/show the rows in specified range.
     * @returns {void} - To hide/show the rows in spreadsheet.
     */
    Spreadsheet.prototype.hideRow = function (startIndex, endIndex, hide) {
        if (endIndex === void 0) { endIndex = startIndex; }
        if (hide === void 0) { hide = true; }
        var sheet = this.getActiveSheet();
        if (this.renderModule && !sheet.frozenRows && !sheet.frozenColumns) {
            this.notify(hideShow, { startIndex: startIndex, endIndex: endIndex, hide: hide });
        }
        else {
            _super.prototype.hideRow.call(this, startIndex, endIndex, hide);
        }
    };
    /**
     * Used to hide/show the columns in spreadsheet.
     *
     * @param {number} startIndex - Specifies the start column index.
     * @param {number} endIndex - Specifies the end column index.
     * @param {boolean} hide - Set `true` / `false` to hide / show the columns.
     * @returns {void} - To hide/show the columns in spreadsheet.
     */
    Spreadsheet.prototype.hideColumn = function (startIndex, endIndex, hide) {
        if (endIndex === void 0) { endIndex = startIndex; }
        if (hide === void 0) { hide = true; }
        var sheet = this.getActiveSheet();
        if (this.renderModule && !sheet.frozenRows && !sheet.frozenColumns) {
            this.notify(hideShow, { startIndex: startIndex, endIndex: endIndex, hide: hide, isCol: true });
        }
        else {
            _super.prototype.hideColumn.call(this, startIndex, endIndex, hide);
        }
    };
    /**
     * This method is used to Clear contents, formats and hyperlinks in spreadsheet.
     *
     * {% codeBlock src='spreadsheet/clear/index.md' %}{% endcodeBlock %}
     *
     * @param {ClearOptions} options - Options for clearing the content, formats and hyperlinks in spreadsheet.
     * @returns {void} -  Used to Clear contents, formats and hyperlinks in spreadsheet
     */
    Spreadsheet.prototype.clear = function (options) {
        this.notify(clearViewer, { options: options, isPublic: true });
    };
    /**
     * Used to refresh the spreadsheet in UI level.
     *
     * {% codeBlock src='spreadsheet/refresh/index.md' %}{% endcodeBlock %}
     *
     * @param {boolean} isNew - Specifies `true` / `false` to create new workbook in spreadsheet.
     * @returns {void} -  Used to refresh the spreadsheet.
     */
    Spreadsheet.prototype.refresh = function (isNew) {
        if (this[isReact]) {
            this[clearTemplate]();
        }
        if (isNew) {
            this.notify(blankWorkbook, {});
        }
        else {
            _super.prototype.refresh.call(this);
        }
    };
    /**
     * Used to set the image in spreadsheet.
     *
     * {% codeBlock src='spreadsheet/insertImage/index.md' %}{% endcodeBlock %}
     *
     * @param {ImageModel} images - Specifies the options to insert image in spreadsheet.
     * @param {string} range - Specifies the range in spreadsheet.
     * @returns {void} -  Used to set the image in spreadsheet.
     */
    Spreadsheet.prototype.insertImage = function (images, range) {
        var i;
        for (i = 0; i < images.length; i++) {
            this.notify(createImageElement, {
                options: images[i],
                range: range ? range : this.getActiveSheet().selectedRange, isPublic: true
            });
        }
    };
    /**
     * Used to delete the image in spreadsheet.
     *
     * {% codeBlock src='spreadsheet/deleteImage/index.md' %}{% endcodeBlock %}
     *
     * @param {string} id - Specifies the id of the image element to be deleted.
     * @param {string} range - Specifies the range in spreadsheet.
     * @returns {void} - Used to delete the image in spreadsheet.
     */
    Spreadsheet.prototype.deleteImage = function (id, range) {
        this.notify(deleteImage, { id: id, range: range ? range : this.getActiveSheet().selectedRange });
    };
    /**
     * Gets the row header div of the Spreadsheet.
     *
     * @returns {Element} - Gets the row header div of the Spreadsheet.
     * @hidden
     */
    Spreadsheet.prototype.getRowHeaderContent = function () {
        return this.sheetModule.getRowHeaderPanel();
    };
    /**
     * Gets the column header div of the Spreadsheet.
     *
     * @returns {HTMLElement} - Gets the column header div of the Spreadsheet.
     * @hidden
     */
    Spreadsheet.prototype.getColumnHeaderContent = function () {
        return this.sheetModule.getColHeaderPanel();
    };
    /**
     * Gets the main content div of the Spreadsheet.
     *
     * @returns {HTMLElement} - Gets the main content div of the Spreadsheet.
     * @hidden
     */
    Spreadsheet.prototype.getMainContent = function () {
        return this.sheetModule.getContentPanel();
    };
    /**
     * Get the select all div of spreadsheet
     *
     * @returns {HTMLElement} - Get the select all div of spreadsheet
     */
    Spreadsheet.prototype.getSelectAllContent = function () {
        return this.sheetModule.getSelectAllContent();
    };
    /**
     * Gets the horizontal scroll element of the Spreadsheet.
     *
     * @returns {HTMLElement} - Gets the column header div of the Spreadsheet.
     * @hidden
     */
    Spreadsheet.prototype.getScrollElement = function () {
        return this.sheetModule.getScrollElement();
    };
    /**
     * Get the main content table element of spreadsheet.
     *
     * @returns {HTMLTableElement} -Get the main content table element of spreadsheet.
     * @hidden
     */
    Spreadsheet.prototype.getContentTable = function () {
        return this.sheetModule.getContentTable();
    };
    /**
     * Get the row header table element of spreadsheet.
     *
     * @returns {HTMLTableElement} - Get the row header table element of spreadsheet.
     * @hidden
     */
    Spreadsheet.prototype.getRowHeaderTable = function () {
        return this.sheetModule.getRowHeaderTable();
    };
    /**
     * Get the column header table element of spreadsheet.
     *
     * @returns {HTMLTableElement} - Get the column header table element of spreadsheet.
     * @hidden
     */
    Spreadsheet.prototype.getColHeaderTable = function () {
        return this.sheetModule.getColHeaderTable();
    };
    /**
     * To get the backup element count for row and column virtualization.
     *
     * @param {'row' | 'col'} layout -  specify the layout.
     * @returns {number} - To get the backup element count for row and column virtualization.
     * @hidden
     */
    Spreadsheet.prototype.getThreshold = function (layout) {
        var threshold = Math.round((this.viewport[layout + 'Count'] + 1) / 2);
        return threshold < 15 ? 15 : threshold;
    };
    /**
     * @hidden
     * @returns {boolean} - Returns the bool value.
     */
    Spreadsheet.prototype.isMobileView = function () {
        return ((this.cssClass.indexOf('e-mobile-view') > -1 || Browser.isDevice) && this.cssClass.indexOf('e-desktop-view') === -1)
            && false;
    };
    /**
     * @hidden
     * @param {number} sheetId - Specifies the sheet id.
     * @param {number} rowIndex - specify the row index.
     * @param {number} colIndex - specify the col index.
     * @param {string} formulaCellReference - specify the col index.
     * @param {boolean} refresh - specify the col index.
     * @returns {string | number} - to get Value Row Col.
     */
    Spreadsheet.prototype.getValueRowCol = function (sheetId, rowIndex, colIndex, formulaCellReference, refresh) {
        return _super.prototype.getValueRowCol.call(this, sheetId, rowIndex, colIndex, formulaCellReference, refresh);
    };
    /**
     * To update a cell properties.
     *
     * {% codeBlock src='spreadsheet/updateCell/index.md' %}{% endcodeBlock %}
     *
     * @param {CellModel} cell - Cell properties.
     * @param {string} address - Address to update.
     * @returns {void} - To update a cell properties.
     */
    Spreadsheet.prototype.updateCell = function (cell, address) {
        address = address || this.getActiveSheet().activeCell;
        _super.prototype.updateCell.call(this, cell, address);
    };
    /**
     * Used to get a row data from the data source with updated cell value.
     *
     * {% codeBlock src='spreadsheet/getRowData/index.md' %}{% endcodeBlock %}
     *
     * @param {number} index - Specifies the row index.
     * @param {number} sheetIndex - Specifies the sheet index. By default, it consider the active sheet index.
     * @returns {Object[]} - Return row data.
     */
    Spreadsheet.prototype.getRowData = function (index, sheetIndex) {
        return _super.prototype.getRowData.call(this, index, sheetIndex);
    };
    /**
     * Sorts the range of cells in the active sheet.
     *
     * {% codeBlock src='spreadsheet/sort/index.md' %}{% endcodeBlock %}
     *
     * @param {SortOptions} sortOptions - options for sorting.
     * @param {string} range - address of the data range.
     * @returns {Promise<SortEventArgs>} - Sorts the range of cells in the active sheet.
     */
    Spreadsheet.prototype.sort = function (sortOptions, range) {
        var _this = this;
        if (!this.allowSorting) {
            return Promise.reject();
        }
        return _super.prototype.sort.call(this, sortOptions, range).then(function (args) {
            _this.notify(sortComplete, args);
            return Promise.resolve(args);
        });
    };
    /**
     * @hidden
     * @param {number} sheetId - specify the sheet id.
     * @param {string | number} value - Specify the value.
     * @param {number} rowIndex - Specify the row index.
     * @param {number} colIndex - Specify the col index.
     * @param {string} formula - Specify the col index.
     * @returns {void} - To set value for row and col.
     */
    Spreadsheet.prototype.setValueRowCol = function (sheetId, value, rowIndex, colIndex, formula) {
        if (value === 'circular reference: ') {
            var circularArgs = {
                action: 'isCircularReference', argValue: value
            };
            this.notify(formulaOperation, circularArgs);
            value = circularArgs.argValue;
        }
        _super.prototype.setValueRowCol.call(this, sheetId, value, rowIndex, colIndex, formula);
        this.notify(editOperation, {
            action: 'refreshDependentCellValue', rowIdx: rowIndex, colIdx: colIndex,
            sheetIdx: getSheetIndexFromId(this, sheetId)
        });
    };
    /**
     * Get component name.
     *
     * @returns {string} - Get component name.
     * @hidden
     */
    Spreadsheet.prototype.getModuleName = function () {
        return 'spreadsheet';
    };
    /**
     * @hidden
     * @param {Element} td - Specify the element.
     * @param {RefreshValueArgs} args - specify the args.
     * @returns {void} - to refresh the node.
     */
    Spreadsheet.prototype.refreshNode = function (td, args) {
        var value;
        if (td) {
            if (args) {
                args.result = isNullOrUndefined(args.result) ? '' : args.result.toString();
                if (!args.isRowFill) {
                    var spanFillElem = select('.' + 'e-fill', td);
                    if (spanFillElem) {
                        detach(spanFillElem);
                        td.style.display = 'table-cell';
                    }
                    var spanFillSecElem = select('.' + 'e-fill-sec', td);
                    if (spanFillSecElem) {
                        detach(spanFillSecElem);
                    }
                }
                var spanElem = select('#' + this.element.id + '_currency', td);
                if (spanElem) {
                    detach(spanElem);
                }
                if (args.type === 'Accounting' && isNumber(args.value)) {
                    if (td.querySelector('a')) {
                        td.querySelector('a').textContent = args.result.split(args.curSymbol).join('');
                    }
                    else {
                        td.innerHTML = '';
                    }
                    td.appendChild(this.createElement('span', {
                        id: this.element.id + '_currency',
                        innerHTML: "" + args.curSymbol,
                        styles: 'float: left'
                    }));
                    if (!td.querySelector('a')) {
                        td.innerHTML += args.result.split(args.curSymbol).join('');
                    }
                    td.classList.add('e-right-align');
                    return;
                }
                else {
                    var alignClass = void 0;
                    if (args.result && (args.result.toLowerCase() === 'true' || args.result.toLowerCase() === 'false')) {
                        args.result = args.result.toUpperCase();
                        alignClass = 'e-center-align';
                        args.isRightAlign = true; // Re-use this to center align the cell.
                    }
                    else {
                        alignClass = 'e-right-align';
                    }
                    value = args.result;
                    if (args.isRightAlign) {
                        td.classList.add(alignClass);
                    }
                    else {
                        td.classList.remove(alignClass);
                    }
                }
            }
            value = !isNullOrUndefined(value) ? value : '';
            var node = td.lastChild;
            if (td.querySelector('.e-databar-value')) {
                node = td.querySelector('.e-databar-value').lastChild;
            }
            if (td.querySelector('.e-hyperlink')) {
                node = td.querySelector('.e-hyperlink').lastChild;
            }
            var wrapContent = td.querySelector('.e-wrap-content');
            if (wrapContent) {
                if (!wrapContent.lastChild) {
                    wrapContent.appendChild(document.createTextNode(''));
                }
                node = wrapContent.lastChild;
            }
            if (node && (node.nodeType === 3 || node.nodeType === 1)) {
                if (!args.isRowFill) {
                    node.nodeValue = value;
                }
            }
            else {
                td.appendChild(document.createTextNode(value));
            }
        }
    };
    /**
     * @hidden
     * @param {CellStyleModel} style - specify the style.
     * @param {number} lines - Specify the lines.
     * @param {number} borderWidth - Specify the borderWidth.
     * @returns {number} - To calculate Height
     */
    Spreadsheet.prototype.calculateHeight = function (style, lines, borderWidth) {
        if (lines === void 0) { lines = 1; }
        if (borderWidth === void 0) { borderWidth = 1; }
        var fontSize = (style && style.fontSize) || this.cellStyle.fontSize;
        var threshold = style.fontFamily === 'Arial Black' ? 1.44 : 1.24;
        return ((fontSize.indexOf('pt') > -1 ? parseInt(fontSize, 10) * 1.33 : parseInt(fontSize, 10)) * threshold * lines) +
            (borderWidth * threshold);
    };
    /**
     * @hidden
     * @param {number} startIdx - specify the start index.
     * @param {number} endIdx - Specify the end index.
     * @param {string} layout - Specify the rows.
     * @param {boolean} finite - Specifies the scroll mode.
     * @returns {number[]} - To skip the hidden rows.
     */
    Spreadsheet.prototype.skipHidden = function (startIdx, endIdx, layout, finite) {
        if (layout === void 0) { layout = 'rows'; }
        if (finite === void 0) { finite = this.scrollSettings.isFinite; }
        var sheet = this.getActiveSheet();
        var totalCount;
        if (finite) {
            totalCount = (layout === 'rows' ? sheet.rowCount : sheet.colCount) - 1;
        }
        for (var i = startIdx; i <= endIdx; i++) {
            if ((sheet[layout])[i] && (sheet[layout])[i].hidden) {
                if (sheet.frozenColumns || sheet.frozenRows) {
                    if (layout === 'rows') {
                        setRow(sheet, i, { hidden: false });
                    }
                    else {
                        setColumn(sheet, i, { hidden: false });
                    }
                    continue;
                }
                if (startIdx === i) {
                    startIdx++;
                }
                endIdx++;
                if (totalCount && endIdx > totalCount) {
                    endIdx = totalCount;
                    break;
                }
            }
        }
        return [startIdx, endIdx];
    };
    /**
     * @hidden
     * @param {HTMLElement} nextTab - Specify the element.
     * @param {string} selector - Specify the selector
     * @returns {void} - To update the active border.
     */
    Spreadsheet.prototype.updateActiveBorder = function (nextTab, selector) {
        if (selector === void 0) { selector = '.e-ribbon'; }
        var indicator = select(selector + " .e-tab-header .e-indicator", this.element);
        indicator.style.display = 'none';
        setStyleAttribute(indicator, { 'left': '', 'right': '' });
        setStyleAttribute(indicator, {
            'left': nextTab.offsetLeft + 'px', 'right': nextTab.parentElement.offsetWidth - (nextTab.offsetLeft + nextTab.offsetWidth) + 'px'
        });
        indicator.style.display = '';
    };
    /**
     * To perform the undo operation in spreadsheet.
     *
     * {% codeBlock src='spreadsheet/undo/index.md' %}{% endcodeBlock %}
     *
     * @returns {void} - To perform the undo operation in spreadsheet.
     */
    Spreadsheet.prototype.undo = function () {
        this.notify(performUndoRedo, { isUndo: true, isPublic: true });
    };
    /**
     * To perform the redo operation in spreadsheet.
     *
     * {% codeBlock src='spreadsheet/redo/index.md' %}{% endcodeBlock %}
     *
     * @returns {void} - To perform the redo operation in spreadsheet.
     */
    Spreadsheet.prototype.redo = function () {
        this.notify(performUndoRedo, { isUndo: false, isPublic: true });
    };
    /**
     * To update the undo redo collection in spreadsheet.
     *
     * {% codeBlock src='spreadsheet/updateUndoRedoCollection/index.md' %}{% endcodeBlock %}
     *
     * @param {object} args - options for undo redo.
     * @returns {void} - To update the undo redo collection in spreadsheet.
     */
    Spreadsheet.prototype.updateUndoRedoCollection = function (args) {
        this.notify(updateUndoRedoCollection, { args: args, isPublic: true });
    };
    /**
     * Adds the defined name to the Spreadsheet.
     *
     * {% codeBlock src='spreadsheet/addDefinedName/index.md' %}{% endcodeBlock %}
     *
     * @param {DefineNameModel} definedName - Specifies the name, scope, comment, refersTo.
     * @returns {boolean} - Return the added status of the defined name.
     */
    Spreadsheet.prototype.addDefinedName = function (definedName) {
        var eventArgs = {
            action: 'addDefinedName',
            isAdded: false,
            definedName: definedName
        };
        this.notify(formulaOperation, eventArgs);
        return eventArgs.isAdded;
    };
    /**
     * Removes the defined name from the Spreadsheet.
     *
     * {% codeBlock src='spreadsheet/removeDefinedName/index.md' %}{% endcodeBlock %}
     *
     * @param {string} definedName - Specifies the name.
     * @param {string} scope - Specifies the scope of the defined name.
     * @returns {boolean} - Return the removed status of the defined name.
     */
    Spreadsheet.prototype.removeDefinedName = function (definedName, scope) {
        return _super.prototype.removeDefinedName.call(this, definedName, scope);
    };
    Spreadsheet.prototype.mouseClickHandler = function (e) {
        this.notify(click, e);
    };
    Spreadsheet.prototype.mouseDownHandler = function (e) {
        this.notify(mouseDown, e);
    };
    Spreadsheet.prototype.keyUpHandler = function (e) {
        if (closest(e.target, '.e-find-dlg')) {
            this.notify(findKeyUp, e);
        }
        else {
            this.notify(keyUp, e);
        }
    };
    Spreadsheet.prototype.keyDownHandler = function (e) {
        if (!closest(e.target, '.e-findtool-dlg')) {
            this.notify(keyDown, e);
        }
    };
    Spreadsheet.prototype.freeze = function (e) {
        var args = { row: e.row, column: e.column,
            cancel: false, sheetIndex: this.activeSheetIndex };
        this.notify(beginAction, { eventArgs: args, action: 'freezePanes' });
        if (args.cancel) {
            return;
        }
        this.on(contentLoaded, this.freezePaneUpdated, this);
        // const indexes: number[] = getCellIndexes(this.getActiveSheet().topLeftCell);
        if (e.row || e.column) {
            var hasFilter = false;
            this.notify(getFilteredCollection, null);
            if (this.filterCollection) {
                for (var i = 0, len = this.filterCollection.length; i < len; i++) {
                    if (this.filterCollection[i].sheetIndex === this.activeSheetIndex) {
                        hasFilter = true;
                        break;
                    }
                }
            }
            if (hasFilter) {
                this.clearFilter();
            }
        }
        this.freezePanes(e.row, e.column);
        this.notify(refreshRibbonIcons, null);
    };
    Spreadsheet.prototype.freezePaneUpdated = function () {
        this.off(contentLoaded, this.freezePaneUpdated);
        var sheet = this.getActiveSheet();
        this.notify(completeAction, { eventArgs: { row: sheet.frozenRows, column: sheet.frozenColumns,
                sheetIndex: this.activeSheetIndex }, action: 'freezePanes' });
    };
    /**
     * Binding events to the element while component creation.
     *
     * @returns {void} - Binding events to the element while component creation.
     */
    Spreadsheet.prototype.wireEvents = function () {
        EventHandler.add(this.element, 'click', this.mouseClickHandler, this);
        EventHandler.add(this.element, getStartEvent(), this.mouseDownHandler, this);
        EventHandler.add(this.element, 'keyup', this.keyUpHandler, this);
        EventHandler.add(this.element, 'keydown', this.keyDownHandler, this);
        EventHandler.add(this.element, 'noderefresh', this.refreshNode, this);
        this.on(freeze, this.freeze, this);
        this.on(refreshInsertDelete, this.refreshInsertDelete, this);
    };
    /**
     * Destroys the component (detaches/removes all event handlers, attributes, classes, and empties the component element).
     *
     * @returns {void} - Destroys the component
     */
    Spreadsheet.prototype.destroy = function () {
        if (this[isReact]) {
            this[clearTemplate]();
        }
        this.unwireEvents();
        this.notify(spreadsheetDestroyed, null);
        _super.prototype.destroy.call(this);
        this.element.innerHTML = '';
        this.element.removeAttribute('tabindex');
        this.element.removeAttribute('role');
        this.element.style.removeProperty('height');
        this.element.style.removeProperty('width');
        this.element.style.removeProperty('min-height');
        this.element.style.removeProperty('min-width');
    };
    /**
     * Unbinding events from the element while component destroy.
     *
     * @returns {void} - Unbinding events from the element while component destroy.
     */
    Spreadsheet.prototype.unwireEvents = function () {
        EventHandler.remove(this.element, 'click', this.mouseClickHandler);
        EventHandler.remove(this.element, getStartEvent(), this.mouseDownHandler);
        EventHandler.remove(this.element, 'keyup', this.keyUpHandler);
        EventHandler.remove(this.element, 'keydown', this.keyDownHandler);
        EventHandler.remove(this.element, 'noderefresh', this.refreshNode);
        this.off(freeze, this.freeze);
        this.off(refreshInsertDelete, this.refreshInsertDelete);
    };
    Spreadsheet.prototype.refreshInsertDelete = function (args) {
        var _this = this;
        var updated;
        var indexes;
        args.sheet.ranges.forEach(function (range) {
            if (range.template && range.address) {
                indexes = getRangeIndexes(range.address);
                updated = _this.updateRangeOnInsertDelete(args, indexes);
                if (updated) {
                    range.address = getRangeAddress(indexes);
                }
            }
        });
        this.setSheetPropertyOnMute(args.sheet, 'ranges', args.sheet.ranges);
    };
    /**
     * To add context menu items.
     *
     * {% codeBlock src='spreadsheet/addContextMenu/index.md' %}{% endcodeBlock %}
     *
     * @param {MenuItemModel[]} items - Items that needs to be added.
     * @param {string} text - Item before / after that the element to be inserted.
     * @param {boolean} insertAfter - Set `false` if the `items` need to be inserted before the `text`.
     * By default, `items` are added after the `text`.
     * @param {boolean} isUniqueId - Set `true` if the given `text` is a unique id.
     * @returns {void} - To add context menu items.
     */
    Spreadsheet.prototype.addContextMenuItems = function (items, text, insertAfter, isUniqueId) {
        if (insertAfter === void 0) { insertAfter = true; }
        this.notify(addContextMenuItems, { items: items, text: text, insertAfter: insertAfter, isUniqueId: isUniqueId });
    };
    /**
     * To remove existing context menu items.
     *
     * {% codeBlock src='spreadsheet/removeContextMenuItems/index.md' %}{% endcodeBlock %}
     *
     * @param {string[]} items - Items that needs to be removed.
     * @param {boolean} isUniqueId - Set `true` if the given `text` is a unique id.
     * @returns {void} - To remove existing context menu items.
     */
    Spreadsheet.prototype.removeContextMenuItems = function (items, isUniqueId) {
        this.notify(removeContextMenuItems, { items: items, isUniqueId: isUniqueId });
    };
    /**
     * To enable / disable context menu items.
     *
     * {% codeBlock src='spreadsheet/enableContextMenuItems/index.md' %}{% endcodeBlock %}
     *
     * @param {string[]} items - Items that needs to be enabled / disabled.
     * @param {boolean} enable - Set `true` / `false` to enable / disable the menu items.
     * @param {boolean} isUniqueId - Set `true` if the given `text` is a unique id.
     * @returns {void} - To enable / disable context menu items.
     */
    Spreadsheet.prototype.enableContextMenuItems = function (items, enable, isUniqueId) {
        if (enable === void 0) { enable = true; }
        this.notify(enableContextMenuItems, { items: items, enable: enable, isUniqueId: isUniqueId });
    };
    /**
     * To enable / disable file menu items.
     *
     * {% codeBlock src='spreadsheet/enableFileMenuItems/index.md' %}{% endcodeBlock %}
     *
     * @param {string[]} items - Items that needs to be enabled / disabled.
     * @param {boolean} enable - Set `true` / `false` to enable / disable the menu items.
     * @param {boolean} isUniqueId - Set `true` if the given file menu items `text` is a unique id.
     * @returns {void} - To enable / disable file menu items.
     */
    Spreadsheet.prototype.enableFileMenuItems = function (items, enable, isUniqueId) {
        if (enable === void 0) { enable = true; }
        this.notify(enableFileMenuItems, { items: items, enable: enable, isUniqueId: isUniqueId });
    };
    /**
     * To show/hide the file menu items in Spreadsheet ribbon.
     *
     * {% codeBlock src='spreadsheet/hideFileMenuItems/index.md' %}{% endcodeBlock %}
     *
     * @param {string[]} items - Specifies the file menu items text which is to be show/hide.
     * @param {boolean} hide - Set `true` / `false` to hide / show the file menu items.
     * @param {boolean} isUniqueId - Set `true` if the given file menu items `text` is a unique id.
     * @returns {void} - To show/hide the file menu items in Spreadsheet ribbon.
     */
    Spreadsheet.prototype.hideFileMenuItems = function (items, hide, isUniqueId) {
        if (hide === void 0) { hide = true; }
        this.notify(hideFileMenuItems, { items: items, hide: hide, isUniqueId: isUniqueId });
    };
    /**
     * To add custom file menu items.
     *
     * {% codeBlock src='spreadsheet/addFileMenuItems/index.md' %}{% endcodeBlock %}
     *
     * @param {MenuItemModel[]} items - Specifies the ribbon file menu items to be inserted.
     * @param {string} text - Specifies the existing file menu item text before / after which the new file menu items to be inserted.
     * @param {boolean} insertAfter - Set `false` if the `items` need to be inserted before the `text`.
     * By default, `items` are added after the `text`.
     * @param {boolean} isUniqueId - Set `true` if the given file menu items `text` is a unique id.
     * @returns {void} - To add custom file menu items.
     */
    Spreadsheet.prototype.addFileMenuItems = function (items, text, insertAfter, isUniqueId) {
        if (insertAfter === void 0) { insertAfter = true; }
        this.notify(addFileMenuItems, { items: items, text: text, insertAfter: insertAfter, isUniqueId: isUniqueId });
    };
    /**
     * To show/hide the existing ribbon tabs.
     *
     * {% codeBlock src='spreadsheet/hideRibbonTabs/index.md' %}{% endcodeBlock %}
     *
     * @param {string[]} tabs - Specifies the tab header text which needs to be shown/hidden.
     * @param {boolean} hide - Set `true` / `false` to hide / show the ribbon tabs.
     * @returns {void} - To show/hide the existing ribbon tabs.
     */
    Spreadsheet.prototype.hideRibbonTabs = function (tabs, hide) {
        if (hide === void 0) { hide = true; }
        this.notify(hideRibbonTabs, { tabs: tabs, hide: hide });
    };
    /**
     * To enable / disable the existing ribbon tabs.
     *
     * {% codeBlock src='spreadsheet/enableRibbonTabs/index.md' %}{% endcodeBlock %}
     *
     * @param {string[]} tabs - Specifies the tab header text which needs to be enabled / disabled.
     * @param {boolean} enable - Set `true` / `false` to enable / disable the ribbon tabs.
     * @returns {void} - To enable / disable the existing ribbon tabs.
     */
    Spreadsheet.prototype.enableRibbonTabs = function (tabs, enable) {
        if (enable === void 0) { enable = true; }
        this.notify(enableRibbonTabs, { tabs: tabs, enable: enable });
    };
    /**
     * To add custom ribbon tabs.
     *
     * {% codeBlock src='spreadsheet/addRibbonTabs/index.md' %}{% endcodeBlock %}
     *
     * @param {RibbonItemModel[]} items - Specifies the ribbon tab items to be inserted.
     * @param {string} insertBefore - Specifies the existing ribbon header text before which the new tabs will be inserted.
     * If not specified, the new tabs will be inserted at the end.
     * @returns {void} - To add custom ribbon tabs.
     */
    Spreadsheet.prototype.addRibbonTabs = function (items, insertBefore) {
        this.notify(addRibbonTabs, { items: items, insertBefore: insertBefore });
    };
    /**
     * Enables or disables the specified ribbon toolbar items or all ribbon items.
     *
     * {% codeBlock src='spreadsheet/enableToolbarItems/index.md' %}{% endcodeBlock %}
     *
     * @param {string} tab - Specifies the ribbon tab header text under which the toolbar items need to be enabled / disabled.
     * @param {number[]} items - Specifies the toolbar item indexes / unique id's which needs to be enabled / disabled.
     * If it is not specified the entire toolbar items will be enabled / disabled.
     * @param  {boolean} enable - Boolean value that determines whether the toolbar items should be enabled or disabled.
     * @returns {void} - Enables or disables the specified ribbon toolbar items or all ribbon items.
     */
    Spreadsheet.prototype.enableToolbarItems = function (tab, items, enable) {
        this.notify(enableToolbarItems, [{ tab: tab, items: items, enable: enable === undefined ? true : enable }]);
    };
    /**
     * To show/hide the existing Spreadsheet ribbon toolbar items.
     *
     * {% codeBlock src='spreadsheet/hideToolbarItems/index.md' %}{% endcodeBlock %}
     *
     * @param {string} tab - Specifies the ribbon tab header text under which the specified items needs to be hidden / shown.
     * @param {number[]} indexes - Specifies the toolbar indexes which needs to be shown/hidden from UI.
     * @param {boolean} hide - Set `true` / `false` to hide / show the toolbar items.
     * @returns {void} - To show/hide the existing Spreadsheet ribbon toolbar items.
     */
    Spreadsheet.prototype.hideToolbarItems = function (tab, indexes, hide) {
        if (hide === void 0) { hide = true; }
        this.notify(hideToolbarItems, { tab: tab, indexes: indexes, hide: hide });
    };
    /**
     * To add the custom items in Spreadsheet ribbon toolbar.
     *
     * {% codeBlock src='spreadsheet/addToolbarItems/index.md' %}{% endcodeBlock %}
     *
     * @param {string} tab - Specifies the ribbon tab header text under which the specified items will be inserted.
     * @param {ItemModel[]} items - Specifies the ribbon toolbar items that needs to be inserted.
     * @param {number} index - Specifies the index text before which the new items will be inserted.
     * If not specified, the new items will be inserted at the end of the toolbar.
     * @returns {void} - To add the custom items in Spreadsheet ribbon toolbar.
     */
    Spreadsheet.prototype.addToolbarItems = function (tab, items, index) {
        this.notify(addToolbarItems, { tab: tab, items: items, index: index });
    };
    /**
     * Selects the cell / range of cells with specified address.
     *
     * {% codeBlock src='spreadsheet/selectRange/index.md' %}{% endcodeBlock %}
     *
     * @param {string} address - Specifies the range address.
     * @returns {void} - To select the range.
     */
    Spreadsheet.prototype.selectRange = function (address) {
        this.notify(selectRange, { address: address });
    };
    /**
     * Start edit the active cell.
     *
     * {% codeBlock src='spreadsheet/startEdit/index.md' %}{% endcodeBlock %}
     *
     * @returns {void} - Start edit the active cell.
     */
    Spreadsheet.prototype.startEdit = function () {
        this.notify(editOperation, { action: 'startEdit', isNewValueEdit: false });
    };
    /**
     * Cancels the edited state, this will not update any value in the cell.
     *
     * {% codeBlock src='spreadsheet/closeEdit/index.md' %}{% endcodeBlock %}
     *
     * @returns {void} - Cancels the edited state, this will not update any value in the cell.
     */
    Spreadsheet.prototype.closeEdit = function () {
        this.notify(editOperation, { action: 'cancelEdit' });
    };
    /**
     * If Spreadsheet is in editable state, you can save the cell by invoking endEdit.
     *
     * {% codeBlock src='spreadsheet/endEdit/index.md' %}{% endcodeBlock %}
     *
     * @returns {void} - If Spreadsheet is in editable state, you can save the cell by invoking endEdit.
     */
    Spreadsheet.prototype.endEdit = function () {
        this.notify(editOperation, { action: 'endEdit' });
    };
    /**
     * Called internally if any of the property value changed.
     *
     * @param  {SpreadsheetModel} newProp - Specify the new properties
     * @param  {SpreadsheetModel} oldProp - Specify the old properties
     * @returns {void} - Called internally if any of the property value changed.
     * @hidden
     */
    Spreadsheet.prototype.onPropertyChanged = function (newProp, oldProp) {
        var _this = this;
        _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
            var prop = _a[_i];
            var header = void 0;
            var addBtn = void 0;
            switch (prop) {
                case 'enableRtl':
                    header = this.getColumnHeaderContent();
                    if (header) {
                        header = header.parentElement;
                    }
                    if (!header) {
                        break;
                    }
                    if (newProp.enableRtl) {
                        header.style.marginLeft = getScrollBarWidth() + 'px';
                        header.style.marginRight = '';
                        document.getElementById(this.element.id + '_sheet_panel').classList.add('e-rtl');
                    }
                    else {
                        header.style.marginRight = getScrollBarWidth() + 'px';
                        header.style.marginLeft = '';
                        document.getElementById(this.element.id + '_sheet_panel').classList.remove('e-rtl');
                    }
                    if (Object.keys(newProp).indexOf('locale') === -1) {
                        this.renderModule.refreshSheet();
                    }
                    break;
                case 'cssClass':
                    if (oldProp.cssClass) {
                        removeClass([this.element], oldProp.cssClass.split(' '));
                    }
                    if (newProp.cssClass) {
                        addClass([this.element], newProp.cssClass.split(' '));
                    }
                    break;
                case 'activeSheetIndex':
                    this.renderModule.refreshSheet();
                    this.notify(activeSheetChanged, { idx: newProp.activeSheetIndex });
                    break;
                case 'width':
                    this.setWidth();
                    this.resize();
                    break;
                case 'height':
                    this.setHeight();
                    this.resize();
                    break;
                case 'showRibbon':
                    this.notify(ribbon, { uiUpdate: true });
                    break;
                case 'showFormulaBar':
                    this.notify(formulaBar, { uiUpdate: true });
                    break;
                case 'showSheetTabs':
                    this.notify(sheetTabs, null);
                    break;
                case 'cellStyle':
                    this.renderModule.refreshSheet();
                    break;
                case 'allowEditing':
                    if (this.allowEditing) {
                        this.notify(editOperation, { action: 'renderEditor' });
                        if (this.enableKeyboardNavigation) {
                            // Remove and reassign the `keyDown` and `mouseDown` event in `KeyboardNavigation` and `Selection` module.
                            // To execute the respective event after editing operation.
                            this.enableKeyboardNavigation = false;
                            this.dataBind();
                            this.enableKeyboardNavigation = true;
                            this.dataBind();
                            var mode = this.selectionSettings.mode;
                            if (mode !== 'None') {
                                this.selectionSettings.mode = 'None';
                                this.dataBind();
                                this.selectionSettings.mode = mode;
                                this.dataBind();
                            }
                        }
                    }
                    break;
                case 'allowInsert':
                    addBtn = this.element.getElementsByClassName('e-add-sheet-tab')[0];
                    if (addBtn) {
                        addBtn.disabled = !this.allowInsert;
                        if (this.allowInsert) {
                            if (addBtn.classList.contains('e-disabled')) {
                                addBtn.classList.remove('e-disabled');
                            }
                        }
                        else {
                            if (!addBtn.classList.contains('e-disabled')) {
                                addBtn.classList.add('e-disabled');
                            }
                        }
                    }
                    break;
                case 'sheets':
                    if (newProp.sheets === this.sheets) {
                        this.renderModule.refreshSheet();
                        this.notify(refreshSheetTabs, null);
                        break;
                    }
                    Object.keys(newProp.sheets).forEach(function (sheetIdx, index) {
                        var sheet = newProp.sheets[sheetIdx];
                        if (sheet.ranges && Object.keys(sheet.ranges).length) {
                            var ranges_1 = Object.keys(sheet.ranges);
                            var newRangeIdx_1;
                            ranges_1.forEach(function (rangeIdx, idx) {
                                if (!sheet.ranges[rangeIdx].info) {
                                    newRangeIdx_1 = idx;
                                }
                            });
                            ranges_1.forEach(function (rangeIdx, idx) {
                                if (sheet.ranges[rangeIdx].dataSource && (isUndefined(newRangeIdx_1)
                                    || (!isUndefined(newRangeIdx_1) && newRangeIdx_1 === idx))) {
                                    _this.notify(dataSourceChanged, {
                                        sheetIdx: sheetIdx, rangeIdx: rangeIdx,
                                        isLastRange: ranges_1.length - 1 === idx, changedData: sheet.ranges[rangeIdx].dataSource
                                    });
                                }
                            });
                        }
                        else if (sheet.paneTopLeftCell && oldProp.sheets && oldProp.sheets[sheetIdx] &&
                            oldProp.sheets[sheetIdx].paneTopLeftCell) {
                            if (_this.activeSheetIndex !== Number(sheetIdx)) {
                                return;
                            }
                            var cIdx = getCellIndexes(sheet.paneTopLeftCell);
                            var pIdx = getCellIndexes(oldProp.sheets[sheetIdx].paneTopLeftCell);
                            if (cIdx[0] !== pIdx[0]) {
                                var frozenRow = _this.frozenRowCount(_this.getActiveSheet());
                                var top_1 = cIdx[0] > frozenRow ? getRowsHeight(_this.getActiveSheet(), frozenRow, cIdx[0] - 1) : 0;
                                _this.notify(updateScroll, { top: top_1 });
                            }
                            if (cIdx[1] !== pIdx[1]) {
                                var frozenCol = _this.frozenColCount(_this.getActiveSheet());
                                var left = cIdx[1] > frozenCol ? getColumnsWidth(_this.getActiveSheet(), frozenCol, cIdx[1] - 1) : 0;
                                _this.notify(updateScroll, { left: left });
                            }
                        }
                        else {
                            if (index === 0) {
                                _this.renderModule.refreshSheet();
                            }
                            if (_this.showSheetTabs && sheet.name) {
                                _this.notify(sheetNameUpdate, {
                                    items: _this.element.querySelector('.e-sheet-tabs-items').children[sheetIdx],
                                    value: sheet.name,
                                    idx: sheetIdx
                                });
                            }
                        }
                    });
                    break;
                case 'locale':
                    this.refresh();
                    break;
                case 'password':
                    if (this.password.length > 0) {
                        if (this.showSheetTabs) {
                            this.element.querySelector('.e-add-sheet-tab').setAttribute('disabled', 'true');
                            this.element.querySelector('.e-add-sheet-tab').classList.add('e-disabled');
                        }
                    }
                    break;
                case 'isProtected':
                    if (this.isProtected) {
                        var addBtn_1 = this.element.getElementsByClassName('e-add-sheet-tab')[0];
                        if (addBtn_1) {
                            addBtn_1.disabled = this.isProtected;
                            if (this.isProtected) {
                                if (addBtn_1.classList.contains('e-disabled')) {
                                    addBtn_1.classList.add('e-disabled');
                                }
                            }
                            else {
                                if (!addBtn_1.classList.contains('e-disabled')) {
                                    addBtn_1.classList.remove('e-disabled');
                                }
                            }
                        }
                    }
                    break;
            }
        }
    };
    /**
     * To provide the array of modules needed for component rendering.
     *
     * @returns {ModuleDeclaration[]} - To provide the array of modules needed for component rendering.
     * @hidden
     */
    Spreadsheet.prototype.requiredModules = function () {
        return getRequiredModules(this);
    };
    /**
     * Appends the control within the given HTML Div element.
     *
     * {% codeBlock src='spreadsheet/appendTo/index.md' %}{% endcodeBlock %}
     *
     * @param {string | HTMLElement} selector - Target element where control needs to be appended.
     * @returns {void} - Appends the control within the given HTML Div element.
     */
    Spreadsheet.prototype.appendTo = function (selector) {
        _super.prototype.appendTo.call(this, selector);
    };
    /**
     * Filters the range of cells in the sheet.
     *
     * @hidden
     * @param {FilterOptions} filterOptions - specifiy the FilterOptions.
     * @param {string} range - Specify the range
     * @returns {Promise<FilterEventArgs>} - Filters the range of cells in the sheet.
     */
    Spreadsheet.prototype.filter = function (filterOptions, range) {
        if (!this.allowFiltering) {
            return Promise.reject();
        }
        range = range || this.getActiveSheet().selectedRange;
        return _super.prototype.filter.call(this, filterOptions, range);
    };
    /**
     * Clears the filter changes of the sheet.
     *
     * {% codeBlock src='spreadsheet/clearFilter/index.md' %}{% endcodeBlock %}
     *
     * @param {string} field - Specify the field.
     * @returns {void} - To clear the filter.
     */
    Spreadsheet.prototype.clearFilter = function (field) {
        this.notify(clearFilter, { field: field });
    };
    /**
     * Applies the filter UI in the range of cells in the sheet.
     *
     * {% codeBlock src='spreadsheet/applyFilter/index.md' %}{% endcodeBlock %}
     *
     * @param {PredicateModel[]} predicates - Specifies the predicates.
     * @param {string} range - Specify the range.
     * @returns {Promise<void>} - to apply the filter.
     */
    Spreadsheet.prototype.applyFilter = function (predicates, range) {
        if (!this.allowFiltering) {
            return Promise.reject();
        }
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var promise = new Promise(function (resolve, reject) { resolve((function () { })()); });
        var filterArgs = { predicates: predicates, range: range, isInternal: true, promise: promise };
        this.notify(initiateFilterUI, filterArgs);
        return filterArgs.promise;
    };
    /**
     * To add custom library function.
     *
     *  {% codeBlock src='spreadsheet/addCustomFunction/index.md' %}{% endcodeBlock %}
     *
     * @param {string} functionHandler - Custom function handler name
     * @param {string} functionName - Custom function name
     * @returns {void} - To add custom function.
     */
    Spreadsheet.prototype.addCustomFunction = function (functionHandler, functionName) {
        _super.prototype.addCustomFunction.call(this, functionHandler, functionName);
        this.notify(refreshFormulaDatasource, null);
    };
    var Spreadsheet_1;
    __decorate$9([
        Property('')
    ], Spreadsheet.prototype, "cssClass", void 0);
    __decorate$9([
        Property(true)
    ], Spreadsheet.prototype, "allowScrolling", void 0);
    __decorate$9([
        Property(true)
    ], Spreadsheet.prototype, "allowResizing", void 0);
    __decorate$9([
        Property(true)
    ], Spreadsheet.prototype, "showAggregate", void 0);
    __decorate$9([
        Property(true)
    ], Spreadsheet.prototype, "enableClipboard", void 0);
    __decorate$9([
        Property(true)
    ], Spreadsheet.prototype, "enableContextMenu", void 0);
    __decorate$9([
        Property(true)
    ], Spreadsheet.prototype, "enableKeyboardNavigation", void 0);
    __decorate$9([
        Property(true)
    ], Spreadsheet.prototype, "enableKeyboardShortcut", void 0);
    __decorate$9([
        Property(true)
    ], Spreadsheet.prototype, "allowUndoRedo", void 0);
    __decorate$9([
        Property(true)
    ], Spreadsheet.prototype, "allowWrap", void 0);
    __decorate$9([
        Complex({}, SelectionSettings)
    ], Spreadsheet.prototype, "selectionSettings", void 0);
    __decorate$9([
        Complex({}, ScrollSettings)
    ], Spreadsheet.prototype, "scrollSettings", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "beforeCellRender", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "beforeSelect", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "select", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "contextMenuBeforeOpen", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "fileMenuBeforeOpen", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "contextMenuBeforeClose", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "dialogBeforeOpen", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "fileMenuBeforeClose", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "contextMenuItemSelect", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "fileMenuItemSelect", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "beforeDataBound", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "dataBound", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "dataSourceChanged", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "cellEdit", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "cellEditing", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "cellSave", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "beforeCellSave", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "created", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "beforeSort", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "beforeHyperlinkCreate", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "afterHyperlinkCreate", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "beforeHyperlinkClick", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "afterHyperlinkClick", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "beforeConditionalFormat", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "actionBegin", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "actionComplete", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "openComplete", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "sortComplete", void 0);
    Spreadsheet = Spreadsheet_1 = __decorate$9([
        NotifyPropertyChanges
    ], Spreadsheet);
    return Spreadsheet;
}(Workbook));

/**
 * Export Spreadsheet viewer
 */

/**
 * Export Spreadsheet viewer modules
 */

/**
 * Export Spreadsheet modules
 */

export { Workbook, Range, UsedRange, Sheet, getSheetIndex, getSheetIndexFromId, getSheetNameFromAddress, getSheetIndexByName, updateSelectedRange, getSelectedRange, getSingleSelectedRange, getSheet, getSheetNameCount, getMaxSheetId, initSheet, getSheetName, moveSheet, duplicateSheet, Row, getRow, setRow, isHiddenRow, getRowHeight, setRowHeight, getRowsHeight, Column, getColumn, setColumn, getColumnWidth, getColumnsWidth, isHiddenCol, Cell, getCell, setCell, skipDefaultValue, wrap, getColorCode, getCustomColors, getData, getModel, processIdx, getRangeIndexes, getCellIndexes, getColIndex, getCellAddress, getRangeAddress, getColumnHeaderText, getIndexesFromAddress, getRangeFromAddress, getAddressFromSelectedRange, getAddressInfo, getSwapRange, isSingleCell, executeTaskAsync, WorkbookBasicModule, WorkbookAllModule, getWorkbookRequiredModules, CellStyle, FilterCollection, SortCollection, DefineName, ProtectSettings, Hyperlink, Validation, Format, ConditionalFormat, LegendSettings, DataLabelSettings, MajorGridLines, MinorGridLines, Axis, Chart$1 as Chart, Image, AutoFillSettings, workbookDestroyed, updateSheetFromDataSource, dataSourceChanged, dataChanged, triggerDataChange, workbookOpen, beginSave, sortImport, ribbonFind, exportDialog, getFilteredCollection, saveCompleted, applyNumberFormatting, getFormattedCellObject, refreshCellElement, setCellFormat, findAllValues, textDecorationUpdate, applyCellFormat, updateUsedRange, updateRowColCount, workbookFormulaOperation, workbookEditOperation, checkDateFormat, getFormattedBarText, activeCellChanged, openSuccess, openFailure, sheetCreated, sheetsDestroyed, aggregateComputation, getUniqueRange, removeUniquecol, checkUniqueRange, reApplyFormula, clearFormulaDependentCells, getFormulaInfoTable, formulaInValidation, beforeSort, initiateSort, sortComplete, sortRangeAlert, initiatelink, beforeHyperlinkCreate, afterHyperlinkCreate, beforeHyperlinkClick, afterHyperlinkClick, addHyperlink, setLinkModel, beforeFilter, initiateFilter, filterComplete, filterRangeAlert, clearAllFilter, wrapEvent, onSave, insert, deleteAction, insertModel, deleteModel, isValidation, cellValidation, addHighlight, dataValidate, findNext, findPrevious, goto, findWorkbookHandler, replaceHandler, replaceAllHandler, showDialog, findKeyUp, removeHighlight, queryCellInfo, count, findCount, protectSheetWorkBook, updateToggle, protectsheetHandler, replaceAllDialog, unprotectsheetHandler, workBookeditAlert, setLockCells, applyLockCells, setMerge, applyMerge, mergedRange, activeCellMergedRange, insertMerge, pasteMerge, hideShow, setCFRule, cFInitialCheck, clearCFRule, initiateClearCFRule, cFRender, clear, clearCF, clearCells, setImage, setChart, initiateChart, refreshRibbonIcons, refreshChart, refreshChartSize, updateChart, deleteChartColl, initiateChartModel, focusChartBorder, saveError, validationHighlight, dataRefresh, updateFilter, beforeInsert, beforeDelete, deleteHyperlink, moveOrDuplicateSheet, setAutoFill, refreshCell, getFillInfo, getautofillDDB, rowFillHandler, getTextSpace, updateCustomFormatsFromImport, cFUndo, refreshClipboard, updateView, selectionComplete, refreshInsertDelete, checkConditionalFormat, beforeCellUpdate, checkIsFormula, isCellReference, isChar, isRowSelected, isColumnSelected, inRange, isInRange, isLocked, isValidCellReference, getUpdatedFormula, updateCell, getDataRange, toFraction, getGcd, intToDate, dateToInt, isDateTime, isNumber, toDate, parseIntValue, workbookLocale, localeData, DataBind, WorkbookOpen, WorkbookSave, WorkbookFormula, WorkbookNumberFormat, getFormatFromType, getTypeFromFormat, WorkbookSort, WorkbookFilter, WorkbookImage, WorkbookChart, WorkbookCellFormat, WorkbookEdit, WorkbookHyperlink, WorkbookInsert, WorkbookDelete, WorkbookDataValidation, WorkbookFindAndReplace, WorkbookProtectSheet, WorkbookMerge, WorkbookConditionalFormat, WorkbookAutoFill, getRequiredModules, ribbon, formulaBar, sheetTabs, refreshSheetTabs, isFormulaBarEdit, initialLoad, contentLoaded, mouseDown, spreadsheetDestroyed, editOperation, formulaOperation, formulaBarOperation, click, keyUp, keyDown, formulaKeyUp, formulaBarUpdate, onVerticalScroll, onHorizontalScroll, beforeContentLoaded, beforeVirtualContentLoaded, virtualContentLoaded, contextMenuOpen, cellNavigate, mouseUpAfterSelection, cMenuBeforeOpen, insertSheetTab, removeSheetTab, renameSheetTab, ribbonClick, refreshRibbon, enableToolbarItems, tabSwitch, selectRange, cut, copy, paste, clearCopy, dataBound, beforeDataBound, addContextMenuItems, removeContextMenuItems, enableContextMenuItems, enableFileMenuItems, hideFileMenuItems, addFileMenuItems, hideRibbonTabs, enableRibbonTabs, addRibbonTabs, addToolbarItems, hideToolbarItems, beforeRibbonCreate, rowHeightChanged, colWidthChanged, onContentScroll, deInitProperties, activeSheetChanged, renameSheet, initiateCustomSort, applySort, collaborativeUpdate, autoFit, updateToggleItem, initiateHyperlink, editHyperlink, openHyperlink, removeHyperlink, createHyperlinkElement, sheetNameUpdate, hideSheet, performUndoRedo, updateUndoRedoCollection, setActionData, getBeforeActionData, clearUndoRedoCollection, initiateFilterUI, renderFilterCell, reapplyFilter, filterByCellValue, clearFilter, getFilteredColumn, completeAction, beginAction, filterCellKeyDown, getFilterRange, setAutoFit, refreshFormulaDatasource, setScrollEvent, initiateDataValidation, validationError, startEdit, invalidData, clearInvalid, protectSheet, applyProtect, unprotectSheet, protectCellFormat, gotoDlg, findDlg, findHandler, replace, created, editAlert, setUndoRedo, enableFormulaInput, protectSelection, hiddenMerge, checkPrevMerge, checkMerge, removeDataValidation, showAggregate, initiateConditionalFormat, setCF, clearViewer, initiateFormulaReference, initiateCur, clearCellRef, editValue, addressHandle, initiateEdit, forRefSelRender, blankWorkbook, insertImage, refreshImgElem, refreshImgCellObj, getRowIdxFromClientY, getColIdxFromClientX, createImageElement, deleteImage, deleteChart, refreshChartCellObj, refreshImagePosition, updateTableWidth, focusBorder, clearChartBorder, insertChart, chartRangeSelection, insertDesignChart, removeDesignChart, chartDesignTab, addChartEle, isReact, renderReactTemplates, clearTemplate, protectWorkbook, unProtectWorkbook, getPassWord, importProtectWorkbook, selectionStatus, freeze, overlayEleSize, updateScroll, positionAutoFillElement, hideAutoFillOptions, performAutoFill, selectAutoFillRange, autoFill, fillRange, UnProtectWorksheet, hideAutoFillElement, unProtectSheetPassword, updateTranslate, getUpdatedScrollPosition, updateScrollValue, getUpdateUsingRaf, removeAllChildren, getColGroupWidth, getScrollBarWidth, getSiblingsHeight, inView, getCellPosition, setPosition, removeRangeEle, locateElem, setStyleAttribute$1 as setStyleAttribute, getStartEvent, getMoveEvent, getEndEvent, isTouchStart, isTouchMove, isTouchEnd, isMouseDown, isMouseMove, isMouseUp, getClientX, getClientY, getDPRValue, setAriaOptions, destroyComponent, setResize, setWidthAndHeight, setTextLineHeight, findMaxValue, updateAction, hasTemplate, setRowEleHeight, getTextHeight, getLineHeight, getTextWidth, getLines, getBorderHeight, getExcludedColumnWidth, getTextHeightWithBorder, setMaxHgt, getMaxHgt, skipHiddenIdx, focus, isLockedCells, isDiscontinuousRange, clearRange, BasicModule, AllModule, ScrollSettings, SelectionSettings, DISABLED, WRAPTEXT, locale, dialog, actionEvents, overlay, fontColor, fillColor, keyCodes, defaultLocale, Spreadsheet, Clipboard, Edit, Selection, Scroll, VirtualScroll, KeyboardNavigation, KeyboardShortcut, CellFormat, Resize, CollaborativeEditing, ShowHide, SpreadsheetHyperlink, UndoRedo, WrapText, Insert, Delete, DataValidation, ProtectSheet, FindAndReplace, Merge, ConditionalFormatting, AutoFill, Ribbon$$1 as Ribbon, FormulaBar, Formula, SheetTabs, Open, Save, ContextMenu$1 as ContextMenu, NumberFormat, Sort, Filter, SpreadsheetImage, SpreadsheetChart, Render, SheetRender, RowRenderer, CellRenderer, Calculate, FormulaError, FormulaInfo, CalcSheetFamilyItem, getAlphalabel, ValueChangedArgs, Parser, CalculateCommon, isUndefined$1 as isUndefined, getSkeletonVal, getModules, getValue$1 as getValue, setValue, ModuleLoader, CommonErrors, FormulasErrorsStrings, BasicFormulas };
//# sourceMappingURL=ej2-spreadsheet.es5.js.map
