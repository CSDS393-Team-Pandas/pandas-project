import { contains } from '@syncfusion/ej2-drawings';
import { Rect } from '@syncfusion/ej2-drawings';
import { Point, identityMatrix, rotateMatrix } from '@syncfusion/ej2-drawings';
import { Container, transformPointByMatrix } from '@syncfusion/ej2-drawings';
import { isPointOverConnector } from './connector-util';
import { LineTool, NodeDrawingTool, StampTool } from './tools';
import { isNullOrUndefined } from '@syncfusion/ej2-base';
/**
 * @private
 * @param {MouseEvent | TouchEvent} event - Specified the annotaion event.
 * @param {PdfViewerBase} pdfBase - Specified the pdfviewer base element.
 * @param {PdfViewer} pdfViewer - Specified the pdfviewer element.
 * @param {boolean} isOverlapped - Specified the overlapped element or not.
 * @returns {any} - Returns the active element.
 */
// eslint-disable-next-line
export function findActiveElement(event, pdfBase, pdfViewer, isOverlapped) {
    if (pdfViewer && pdfBase.activeElements.activePageID > -1) {
        var objects = findObjectsUnderMouse(pdfBase, pdfViewer, event);
        var object = findObjectUnderMouse(objects, event, pdfBase, pdfViewer);
        if (isOverlapped) {
            return objects;
        }
        return object;
    }
    return undefined;
}
/**
 * @private
 * @param {PdfViewerBase} pdfBase - Specified the pdfviewer base element.
 * @param {PdfViewer} pdfViewer - Specified the pdfviewer element.
 * @param {MouseEvent} event - Specified the annotaion event.
 * @returns {IElement[]} - Returns the annotaion elements.
 */
export function findObjectsUnderMouse(pdfBase, pdfViewer, event) {
    var pt = pdfBase.currentPosition || { x: event.offsetX, y: event.offsetY };
    pt = { x: pt.x / pdfBase.getZoomFactor(), y: pt.y / pdfBase.getZoomFactor() };
    var pageTable = pdfViewer.getPageTable(pdfBase.activeElements.activePageID);
    var objArray = findObjects(pt, pageTable.objects);
    return objArray;
}
/**
 * @private
 * @param {PdfAnnotationBaseModel[]} objects - Specified the annotaion object model.
 * @param {any} event - Specified the annotaion event.
 * @param {PdfViewerBase} pdfBase - Specified the pdfviewer base element.
 * @param {PdfViewer} pdfViewer - Specified the pdfviewer element.
 * @returns {IElement} - Returns the annotaion element.
 */
export function findObjectUnderMouse(
// eslint-disable-next-line
objects, event, pdfBase, pdfViewer) {
    var actualTarget = null;
    var touchArg;
    var offsetX;
    var offsetY;
    if (event && event.type && event.type.indexOf('touch') !== -1) {
        touchArg = event;
        if (pdfViewer.annotation) {
            var pageDiv = pdfBase.getElement('_pageDiv_' + pdfViewer.annotation.getEventPageNumber(event));
            if (pageDiv) {
                var pageCurrentRect = pageDiv.getBoundingClientRect();
                offsetX = touchArg.changedTouches[0].clientX - pageCurrentRect.left;
                offsetY = touchArg.changedTouches[0].clientY - pageCurrentRect.top;
            }
        }
        // eslint-disable-next-line
    }
    else if (event && event.target && event.path && event.target.parentElement && event.target.parentElement.classList.contains('foreign-object')) {
        // eslint-disable-next-line
        var targetParentRect = event.path[4].getBoundingClientRect();
        offsetX = event.clientX - targetParentRect.left;
        offsetY = event.clientY - targetParentRect.top;
    }
    else if (event.target && event.target.parentElement && event.target.parentElement.classList.contains('foreign-object')) {
        // eslint-disable-next-line
        var targetParentRect = event.target.offsetParent.offsetParent.offsetParent.getBoundingClientRect();
        offsetX = event.clientX - targetParentRect.left;
        offsetY = event.clientY - targetParentRect.top;
        // eslint-disable-next-line
    }
    else {
        offsetX = !isNaN(event.offsetX) ? event.offsetX : (event.position ? event.position.x : 0);
        offsetY = !isNaN(event.offsetY) ? event.offsetY : (event.position ? event.position.y : 0);
    }
    var offsetForSelector = 5;
    var boundsDiff = 0;
    for (var i = 0; i < objects.length; i++) {
        if (!(objects[i].shapeAnnotationType === 'Distance' || objects[i].shapeAnnotationType === 'Line' || objects[i].shapeAnnotationType === 'LineWidthArrowHead' || pdfBase.tool instanceof LineTool)) {
            var bounds = objects[i].wrapper.bounds;
            var rotationValue = 0;
            if (objects[i].shapeAnnotationType === 'Stamp' || objects[i].shapeAnnotationType === 'Image') {
                rotationValue = 25;
            }
            // eslint-disable-next-line max-len
            if ((((bounds.x - offsetForSelector) * pdfBase.getZoomFactor()) < offsetX) && (((bounds.x + bounds.width + offsetForSelector) * pdfBase.getZoomFactor()) > offsetX) &&
                // eslint-disable-next-line max-len
                (((bounds.y - offsetForSelector - rotationValue) * pdfBase.getZoomFactor()) < offsetY) && (((bounds.y + bounds.height + offsetForSelector) * pdfBase.getZoomFactor()) > offsetY)) {
                if (pdfBase.tool instanceof NodeDrawingTool || pdfBase.tool instanceof StampTool) {
                    actualTarget = objects[i];
                }
                else {
                    if (!boundsDiff) {
                        actualTarget = objects[i];
                        // eslint-disable-next-line max-len
                        boundsDiff = (offsetX - ((bounds.x - offsetForSelector) * pdfBase.getZoomFactor())) + (((bounds.x + bounds.width + offsetForSelector) * pdfBase.getZoomFactor()) - offsetX) +
                            // eslint-disable-next-line max-len
                            (offsetY - ((bounds.y - offsetForSelector - rotationValue) * pdfBase.getZoomFactor())) + (((bounds.y + bounds.height + offsetForSelector) * pdfBase.getZoomFactor()) - offsetY);
                    }
                    else {
                        // eslint-disable-next-line max-len
                        var objectBounds = (offsetX - ((bounds.x - offsetForSelector) * pdfBase.getZoomFactor())) + (((bounds.x + bounds.width + offsetForSelector) * pdfBase.getZoomFactor()) - offsetX) +
                            // eslint-disable-next-line max-len
                            (offsetY - ((bounds.y - offsetForSelector - rotationValue) * pdfBase.getZoomFactor())) + (((bounds.y + bounds.height + offsetForSelector) * pdfBase.getZoomFactor()) - offsetY);
                        if (boundsDiff > objectBounds) {
                            actualTarget = objects[i];
                            boundsDiff = objectBounds;
                        }
                        else if (boundsDiff === objectBounds) {
                            actualTarget = objects[i];
                            boundsDiff = objectBounds;
                        }
                    }
                }
            }
        }
        else {
            var pt = { x: offsetX / pdfBase.getZoomFactor(), y: offsetY / pdfBase.getZoomFactor() };
            var obj = findElementUnderMouse(objects[i], pt, offsetForSelector);
            var isOver = isPointOverConnector(objects[i], pt);
            if (obj && !isOver) {
                var newpoint = CalculateLeaderPoints(objects[i], obj);
                if (newpoint) {
                    var rect = Rect.toBounds([newpoint, newpoint]);
                    rect.Inflate(10);
                    if (rect.containsPoint(pt)) {
                        isOver = true;
                    }
                }
            }
            if (obj && isOver) {
                actualTarget = objects[i];
            }
        }
    }
    return actualTarget;
}
/**
 * @private
 * @param {any} selector - Specified the annotaion selctor.
 * @param {any} currentobject - Specified the current annotaion object.
 * @returns {any} - Returns the leader points.
 */
// eslint-disable-next-line
export function CalculateLeaderPoints(selector, currentobject) {
    var leaderCount = 0;
    var sourcePoint = selector.sourcePoint;
    var targetPoint = selector.targetPoint;
    if (selector.shapeAnnotationType === 'Distance') {
        var segment = currentobject;
        var newPoint1 = void 0;
        var angle = Point.findAngle(selector.sourcePoint, selector.targetPoint);
        if (segment.id.indexOf('leader') > -1) {
            var center = selector.wrapper.children[0].bounds.center;
            if (leaderCount === 0 && segment.id.indexOf('leader1') > -1) {
                newPoint1 = { x: selector.sourcePoint.x, y: selector.sourcePoint.y - selector.leaderHeight };
                center = sourcePoint;
            }
            else {
                newPoint1 = { x: selector.targetPoint.x, y: selector.targetPoint.y - selector.leaderHeight };
                center = targetPoint;
            }
            var matrix = identityMatrix();
            rotateMatrix(matrix, angle, center.x, center.y);
            var rotatedPoint = transformPointByMatrix(matrix, { x: newPoint1.x, y: newPoint1.y });
            return rotatedPoint;
        }
    }
}
/**
 * @private
 * @param {IElement} obj - Specified the annotation element.
 * @param {PointModel} position - Specified the annotation position value.
 * @param {number} padding - Specified the annotation padding.
 * @returns {DrawingElement} - Returns the annotation drawing element.
 */
export function findElementUnderMouse(obj, position, padding) {
    return findTargetShapeElement(obj.wrapper, position, padding);
}
/**
 * @private
 * @param {PdfAnnotationBaseModel} obj - Specified the annotation object model.
 * @param {string} key - Specified the annotation key value.
 * @param {Object[]} collection - Specified the annotation collection.
 * @returns {void}
 */
export function insertObject(obj, key, collection) {
    if (collection.length === 0) {
        collection.push(obj);
    }
    else if (collection.length === 1) {
        // eslint-disable-next-line
        if (collection[0][key] > obj[key]) {
            collection.splice(0, 0, obj);
        }
        else {
            collection.push(obj);
        }
    }
    else if (collection.length > 1) {
        var low = 0;
        var high = collection.length - 1;
        var mid = Math.floor((low + high) / 2);
        while (mid !== low) {
            // eslint-disable-next-line
            if (collection[mid][key] < obj[key]) {
                low = mid;
                mid = Math.floor((low + high) / 2);
                // eslint-disable-next-line
            }
            else if (collection[mid][key] > obj[key]) {
                high = mid;
                mid = Math.floor((low + high) / 2);
            }
        }
        // eslint-disable-next-line
        if (collection[high][key] < obj[key]) {
            collection.push(obj);
            // eslint-disable-next-line
        }
        else if (collection[low][key] > obj[key]) {
            collection.splice(low, 0, obj);
            // eslint-disable-next-line
        }
        else if ((collection[low][key] < obj[key]) && collection[high][key] > obj[key]) {
            collection.splice(high, 0, obj);
        }
    }
}
/**
 * @private
 * @param {Container} container - Specified the annotaion container.
 * @param {PointModel} position - Specified the annotation position.
 * @param {number} padding - Specified the annotaion padding value.
 * @returns {DrawingElement} - Returns the annotation drawing element.
 */
export function findTargetShapeElement(container, position, padding) {
    if (container && container.children) {
        for (var i = container.children.length - 1; i >= 0; i--) {
            var shapeElement = container.children[i];
            // eslint-disable-next-line
            if (!isNullOrUndefined(shapeElement.children) && shapeElement.children.length > 0) {
                // eslint-disable-next-line
                for (var j = shapeElement.children.length - 1; j >= 0; j--) {
                    // eslint-disable-next-line
                    var currentTarget = shapeElement.children[j];
                    if (currentTarget && currentTarget.bounds.containsPoint(position, 10)) {
                        if (currentTarget instanceof Container) {
                            var targetElement = this.findTargetElement(currentTarget, position);
                            if (targetElement) {
                                return targetElement;
                            }
                        }
                        if (currentTarget.bounds.containsPoint(position, 10)) {
                            return currentTarget;
                        }
                    }
                }
            }
            else {
                if (shapeElement && shapeElement.bounds.containsPoint(position, 10)) {
                    if (shapeElement instanceof Container) {
                        var targetElement = this.findTargetElement(shapeElement, position);
                        if (targetElement) {
                            return targetElement;
                        }
                    }
                    if (shapeElement.bounds.containsPoint(position, 10)) {
                        return shapeElement;
                    }
                }
            }
        }
    }
    if (container && container.bounds.containsPoint(position, padding) && container.style.fill !== 'none') {
        var element = container;
        var paddingValue = 10;
        var rotateThumbDistance = 30;
        var matrix = identityMatrix();
        rotateMatrix(matrix, element.parentTransform, element.offsetX, element.offsetY);
        var x = element.offsetX - element.pivot.x * element.actualSize.width;
        var y = element.offsetY - element.pivot.y * element.actualSize.height;
        var rotateThumb = {
            x: x + ((element.pivot.x === 0.5 ? element.pivot.x * 2 : element.pivot.x) * element.actualSize.width / 2),
            y: y - rotateThumbDistance
        };
        rotateThumb = transformPointByMatrix(matrix, rotateThumb);
        if (contains(position, rotateThumb, paddingValue)) {
            return container;
        }
    }
    return null;
}
/**
 * @private
 * @param {PointModel} region - Specified the annotation region point model.
 * @param {PdfAnnotationBaseModel[]} objCollection - Specified the annotation object collections.
 * @returns {PdfAnnotationBaseModel[]} - Returns the annotation object collections.
 */
export function findObjects(region, objCollection) {
    var objects = [];
    for (var _i = 0, objCollection_1 = objCollection; _i < objCollection_1.length; _i++) {
        var obj = objCollection_1[_i];
        if (findElementUnderMouse(obj, region, 10) || ((obj.shapeAnnotationType === 'Stamp' || obj.shapeAnnotationType === 'Image') && findElementUnderMouse(obj, region, 40))) {
            insertObject(obj, 'zIndex', objects);
        }
    }
    return objects;
}
/**
 * @private
 * @param {MouseEvent} event - Specified the annotaion mouse event.
 * @param {PdfViewerBase} pdfBase - Specified the pdfBase element.
 * @returns {number} - Returns the active page Id.
 */
export function findActivePage(event, pdfBase) {
    var activePageID = undefined;
    if (event.target && event.target.wrapper) {
        return event.target.pageIndex;
    }
    if (event.target) {
        var elementIdColl = event.target.id.split('_');
        if (elementIdColl.length > 0) {
            // eslint-disable-next-line radix
            activePageID = parseInt(elementIdColl[elementIdColl.length - 1]);
        }
    }
    return activePageID;
}
/**
 * @hidden
 */
var ActiveElements = /** @class */ (function () {
    function ActiveElements() {
        this.activePage = undefined;
        this.activePageID = undefined;
    }
    Object.defineProperty(ActiveElements.prototype, "activePageID", {
        /**
         * @private
         * @returns {number} - Returns the active page Id.
         */
        get: function () {
            return this.activePage;
        },
        /**
         * @private
         * @param {number} offset - The page offset value.
         */
        set: function (offset) {
            this.activePage = offset;
            // eslint-disable-next-line
            if (offset !== this.activePage) { }
        },
        enumerable: true,
        configurable: true
    });
    return ActiveElements;
}());
export { ActiveElements };
