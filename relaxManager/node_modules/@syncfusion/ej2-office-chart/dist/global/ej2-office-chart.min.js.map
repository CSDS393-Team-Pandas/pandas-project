{"version":3,"file":"ej2-office-chart.min.js","sources":["../../src/office-chart/chart.js"],"sourcesContent":["/* tslint:disable:no-any */\nimport { Chart, AccumulationChart, AccumulationLegend, PieSeries, AccumulationTooltip, AccumulationDataLabel, DateTime, BarSeries, StackingBarSeries, LineSeries, StackingLineSeries, ColumnSeries, StackingColumnSeries, AreaSeries, StackingAreaSeries, Trendlines, ScatterSeries, BubbleSeries, RadarSeries, PolarSeries, ErrorBar, SplineSeries, DataLabel, Category, Legend, Tooltip, Export } from '@syncfusion/ej2-charts';\nChart.Inject(AreaSeries, StackingAreaSeries, BarSeries, PieSeries, StackingBarSeries, PolarSeries, ScatterSeries, BubbleSeries, RadarSeries, DateTime, ColumnSeries, StackingColumnSeries, LineSeries, StackingLineSeries, ErrorBar, Trendlines, SplineSeries, DataLabel, Category, Legend, Tooltip, Export);\nAccumulationChart.Inject(AccumulationLegend, PieSeries, AccumulationTooltip, AccumulationDataLabel);\nimport { SvgRenderer } from '@syncfusion/ej2-svg-base';\nimport { createElement } from '@syncfusion/ej2-base';\n/**\n * Chart component is used to convert office charts to ej2-charts.\n */\nvar ChartComponent = /** @class */ (function () {\n    function ChartComponent() {\n    }\n    /**\n     * @private\n     */\n    ChartComponent.prototype.chartRender = function (chart) {\n        this.chartType = chart.chartType;\n        this.isPieType = (this.chartType === 'Pie' || this.chartType === 'Doughnut');\n        var chartData = this.chartData(chart, this.chartType);\n        var chartModel = {\n            enableAnimation: false,\n            width: chart.width * (96 / 72) + 'px',\n            height: chart.height * (96 / 72) + 'px'\n        };\n        if (this.isPieType) {\n            this.chart = new AccumulationChart(chartModel);\n        }\n        else {\n            this.chart = new Chart(chartModel);\n            this.chart.primaryXAxis = this.chartPrimaryXAxis(chart.chartPrimaryCategoryAxis, this.chartType);\n            this.chart.primaryYAxis = this.chartPrimaryYAxis(chart.chartPrimaryValueAxis);\n        }\n        this.chart.series = this.chartSeries(chart.chartSeries, chartData, this.chartType);\n        for (var i = 0; i < this.chart.series.length; i++) {\n            this.chart.series[i].animation.enable = false;\n        }\n        this.chart.title = chart.chartTitle;\n        this.chart.legendSettings = this.parseChartLegend(chart.chartLegend);\n    };\n    /**\n     * @private\n     */\n    ChartComponent.prototype.convertChartToImage = function (chart, elementWidth, elementHeight) {\n        var _this = this;\n        var promise;\n        return promise = new Promise(function (resolve, reject) {\n            var width = 0;\n            var height = 0;\n            var dataInfo = _this.getControlsValue([chart], elementWidth, elementHeight);\n            width = width ? width : dataInfo.width;\n            height = height ? height : dataInfo.height;\n            var element = createElement('canvas');\n            var displayPixelRatio = Math.max(1, window.devicePixelRatio || 1);\n            element.width = width * (displayPixelRatio);\n            element.height = height * (displayPixelRatio);\n            element.style.width = width + 'px';\n            element.style.height = height + 'px';\n            // tslint:disable-next-line:max-line-length\n            var url = window.URL.createObjectURL(new Blob([(new XMLSerializer()).serializeToString(dataInfo.svg)], { type: 'image/svg+xml' }));\n            var image = new Image();\n            var canvasContext = element.getContext('2d');\n            canvasContext.scale(displayPixelRatio, displayPixelRatio);\n            image.onload = (function () {\n                canvasContext.drawImage(image, 0, 0);\n                window.URL.revokeObjectURL(url);\n                var dataURL = element.toDataURL('image/png');\n                resolve(dataURL);\n            });\n            image.onerror = (function () {\n                reject('Invalid data');\n            });\n            image.src = url;\n        });\n    };\n    ChartComponent.prototype.getControlsValue = function (controls, elementWidth, elementHeight) {\n        var width = 0;\n        var height = 0;\n        var content = '';\n        var svgRenderer = new SvgRenderer('').createSvg({\n            id: 'Image_Export',\n            width: 200, height: 200\n        });\n        controls.map(function (control) {\n            if (control) {\n                var svgElement = control.svgObject.cloneNode(true);\n                var groupElement = control.renderer.createGroup({\n                    style: 'transform: translateY(' + height + 'px)'\n                });\n                groupElement.appendChild(svgElement);\n                width = Math.max(control.availableSize.width, elementWidth);\n                height += control.availableSize.height;\n                content += control.svgObject.outerHTML;\n                svgRenderer.appendChild(groupElement);\n            }\n        });\n        svgRenderer.setAttribute('width', width + '');\n        svgRenderer.setAttribute('height', height + '');\n        return {\n            'width': width,\n            'height': height,\n            'svg': svgRenderer\n        };\n    };\n    ChartComponent.prototype.officeChartType = function (type) {\n        var chartType = '';\n        switch (type) {\n            case 'Area_Stacked':\n                chartType = 'StackingArea';\n                break;\n            case 'Area':\n                chartType = 'Area';\n                break;\n            case 'Area_Stacked_100':\n                chartType = 'StackingArea100';\n                break;\n            case 'Bar_Clustered':\n                chartType = 'Bar';\n                break;\n            case 'Bar_Stacked':\n                chartType = 'StackingBar';\n                break;\n            case 'Bar_Stacked_100':\n                chartType = 'StackingBar100';\n                break;\n            case 'Column_Clustered':\n                chartType = 'Column';\n                break;\n            case 'Column_Stacked':\n                chartType = 'StackingColumn';\n                break;\n            case 'Column_Stacked_100':\n                chartType = 'StackingColumn100';\n                break;\n            case 'Scatter_Markers':\n                chartType = 'Scatter';\n                break;\n            case 'Bubble':\n                chartType = 'Bubble';\n                break;\n            case 'Doughnut':\n            case 'Pie':\n                chartType = 'Pie';\n                break;\n            case 'Line_Stacked_100':\n            case 'Line_Markers_Stacked_100':\n                chartType = 'StackingLine100';\n                break;\n            case 'Line':\n            case 'Line_Markers':\n                chartType = 'Line';\n                break;\n            case 'Line_Stacked':\n            case 'Line_Markers_Stacked':\n                chartType = 'StackingLine';\n                break;\n        }\n        return chartType;\n    };\n    ChartComponent.prototype.chartSeries = function (series, data, type) {\n        // json data\n        var chartSeries = [];\n        for (var i = 0; i < series.length; i++) {\n            var seriesData = series[i];\n            var seriesValue = this.writeChartSeries(seriesData, data, type, i);\n            chartSeries.push(seriesValue);\n        }\n        return chartSeries;\n    };\n    ChartComponent.prototype.writeChartSeries = function (seriesData, data, type, count) {\n        var chartType = this.officeChartType(type);\n        // let isAreaType: boolean = (type === 'Area_Stacked_100' || type === 'Area' || type === 'Area_Stacked');\n        var series = {};\n        var fill;\n        series.type = chartType;\n        series.dataSource = data;\n        series.name = seriesData.seriesName;\n        series.xName = 'x';\n        series.yName = 'y' + count;\n        if (type === 'Bubble') {\n            series.size = 'size' + count;\n        }\n        var seriesFormat = seriesData.dataPoints[0];\n        if (this.isPieType) {\n            series.pointColorMapping = 'color';\n            if (type === 'Doughnut') {\n                series.innerRadius = '75%';\n                series.radius = '70%';\n            }\n        }\n        else {\n            fill = this.chartFormat(seriesFormat, chartType);\n            series.fill = fill;\n        }\n        if (type === 'Line_Markers' || type === 'Line_Markers_Stacked' || type === 'Line_Markers_Stacked_100') {\n            series.marker = { visible: true };\n        }\n        if (seriesData.hasOwnProperty('dataLabel')) {\n            if (this.isPieType) {\n                series.dataLabel = this.parseDataLabels(seriesData.dataLabel);\n            }\n            else {\n                var data_1 = {};\n                data_1.dataLabel = this.parseDataLabels(seriesData.dataLabel);\n                series.marker = data_1;\n            }\n        }\n        if (seriesData.hasOwnProperty('errorBar')) {\n            var errorBarData = seriesData.errorBar;\n            series.errorBar = this.parseErrorBars(errorBarData);\n        }\n        if (seriesData.hasOwnProperty('trendLines')) {\n            var trendLines = seriesData.trendLines;\n            var trendLinesData = [];\n            for (var count_1 = 0; count_1 < trendLines.length; count_1++) {\n                var trendLine = trendLines[count_1];\n                var data_2 = {};\n                data_2 = this.parseTrendLines(trendLine, fill);\n                trendLinesData.push(data_2);\n                series.trendlines = trendLinesData;\n            }\n        }\n        return series;\n    };\n    ChartComponent.prototype.parseDataLabels = function (label) {\n        var dataLabel = {};\n        dataLabel.visible = true;\n        if (this.isPieType) {\n            if (label.position === 'BestFit' || label.position === 'Inside') {\n                dataLabel.position = 'Inside';\n            }\n            else {\n                dataLabel.position = 'Outside';\n            }\n        }\n        else {\n            dataLabel.position = this.dataLabelPosition(label.position);\n        }\n        return dataLabel;\n    };\n    ChartComponent.prototype.parseErrorBars = function (errorBarData) {\n        var errorBar = {};\n        errorBar.visible = true;\n        errorBar.type = errorBarData.type;\n        errorBar.direction = errorBarData.direction;\n        if (errorBarData.endStyle === 'Cap') {\n            errorBar.errorBarCap = { width: 1 };\n        }\n        else {\n            errorBar.errorBarCap = { width: 0 };\n        }\n        return errorBar;\n    };\n    ChartComponent.prototype.parseTrendLines = function (trendLines, fill) {\n        var trendLine = {};\n        trendLine.type = trendLines.type;\n        trendLine.name = trendLines.name;\n        trendLine.forwardForecast = trendLines.forward;\n        trendLine.backwardForecast = trendLines.backward;\n        if (trendLines.intercept === 'NaN') {\n            trendLine.intercept = 0;\n        }\n        else {\n            trendLine.intercept = trendLines.intercept;\n        }\n        trendLine.fill = fill;\n        return trendLine;\n    };\n    ChartComponent.prototype.dataLabelPosition = function (position) {\n        var labelPosition = 'Auto';\n        switch (position) {\n            case 'Outside':\n                labelPosition = 'Outer';\n                break;\n            case 'Center':\n                labelPosition = 'Middle';\n                break;\n            case 'Inside':\n                labelPosition = 'Top';\n                break;\n            case 'OutsideBase':\n                labelPosition = 'Bottom';\n                break;\n        }\n        return labelPosition;\n    };\n    ChartComponent.prototype.chartFormat = function (dataPoints, type) {\n        var format = dataPoints;\n        if (type === 'Line' || type === 'StackingLine' || type === 'StackingLine100') {\n            return format.line.rgb;\n        }\n        else {\n            return format.fill.rgb;\n        }\n    };\n    ChartComponent.prototype.chartPrimaryXAxis = function (data, type) {\n        // json data\n        var primaryXAxis = {};\n        if (data.chartTitle) {\n            primaryXAxis.title = data.chartTitle;\n        }\n        var categoryType = this.chartCategoryType(data.categoryType);\n        primaryXAxis.valueType = categoryType;\n        if (categoryType === 'DateTime') {\n            primaryXAxis.intervalType = 'Days';\n            primaryXAxis.labelFormat = 'M/d/yyyy';\n            primaryXAxis.edgeLabelPlacement = 'Shift';\n        }\n        if (type === 'Scatter_Markers' || type === 'Bubble') {\n            this.checkAndSetAxisValue(primaryXAxis, data);\n        }\n        if (data.hasMajorGridLines) {\n            primaryXAxis.majorGridLines = { width: 1 };\n        }\n        if (data.hasMinorGridLines) {\n            primaryXAxis.minorTicksPerInterval = 4;\n        }\n        return primaryXAxis;\n    };\n    ChartComponent.prototype.chartCategoryType = function (categoryType) {\n        var type = '';\n        switch (categoryType) {\n            case 'Time':\n                type = 'DateTime';\n                break;\n            case 'Automatic':\n                type = 'Category';\n                break;\n        }\n        return type;\n    };\n    ChartComponent.prototype.chartPrimaryYAxis = function (data) {\n        // json data\n        var primaryYAxis = {};\n        if (data.chartTitle) {\n            primaryYAxis.title = data.chartTitle;\n        }\n        this.checkAndSetAxisValue(primaryYAxis, data);\n        if (data.hasMajorGridLines) {\n            primaryYAxis.majorGridLines = { width: 1 };\n        }\n        if (data.hasMinorGridLines) {\n            primaryYAxis.minorTicksPerInterval = 4;\n        }\n        return primaryYAxis;\n    };\n    ChartComponent.prototype.checkAndSetAxisValue = function (primaryYAxis, data) {\n        if (data.minimumValue !== 0) {\n            primaryYAxis.minimum = data.minimumValue;\n        }\n        if (data.maximumValue !== 0) {\n            primaryYAxis.maximum = data.maximumValue;\n        }\n        if (data.majorUnit !== 0) {\n            primaryYAxis.interval = data.majorUnit;\n        }\n    };\n    ChartComponent.prototype.chartData = function (chart, type) {\n        // json data\n        var data = chart.chartCategory;\n        var chartData = [];\n        for (var i = 0; i < data.length; i++) {\n            var xData = data[i];\n            var plotValue = this.chartPlotData(xData, chart, type, i);\n            chartData.push(plotValue);\n        }\n        return chartData;\n    };\n    ChartComponent.prototype.chartPlotData = function (data, chart, type, count) {\n        var plotValue = {};\n        var series = chart.chartSeries;\n        if (chart.chartPrimaryCategoryAxis.numberFormat === 'm/d/yyyy') {\n            var date = data.categoryXName;\n            var array = date.split('/');\n            var month = Number(array[0]);\n            var day = Number(array[1]);\n            var year = Number(array[2]);\n            plotValue.x = new Date(year, month - 1, day);\n        }\n        else {\n            plotValue.x = data.categoryXName;\n        }\n        for (var j = 0; j < series.length; j++) {\n            var yData = data.chartData[j];\n            plotValue['y' + j] = yData.yValue;\n            if (type === 'Bubble') {\n                plotValue['size' + j] = yData.size;\n            }\n            if (chart.chartType === 'Pie' || chart.chartType === 'Doughnut') {\n                var seriesData = series[j];\n                var seriesDataPoints = seriesData.dataPoints[count];\n                plotValue.color = this.chartFormat(seriesDataPoints, type);\n            }\n        }\n        return plotValue;\n    };\n    ChartComponent.prototype.parseChartLegend = function (data) {\n        var legendSettings = {};\n        var position = data.position;\n        if (position === 'Corner') {\n            position = 'right';\n        }\n        if (position) {\n            legendSettings.visible = true;\n            legendSettings.position = position.charAt(0).toUpperCase() + position.slice(1);\n        }\n        else {\n            legendSettings.visible = false;\n        }\n        return legendSettings;\n    };\n    /**\n     * Destroys the internal objects which is maintained.\n     */\n    ChartComponent.prototype.destroy = function () {\n        if (this.chart) {\n            this.chart.destroy();\n        }\n        this.chart = undefined;\n    };\n    return ChartComponent;\n}());\nexport { ChartComponent };\n"],"names":["ej2Charts","Inject","AreaSeries","StackingAreaSeries","BarSeries","PieSeries","StackingBarSeries","PolarSeries","ScatterSeries","BubbleSeries","RadarSeries","DateTime","ColumnSeries","StackingColumnSeries","LineSeries","StackingLineSeries","ErrorBar","Trendlines","SplineSeries","DataLabel","Category","Legend","Tooltip","Export","AccumulationChart","AccumulationLegend","AccumulationTooltip","AccumulationDataLabel","ChartComponent","prototype","chartRender","chart","this","chartType","isPieType","chartData","chartModel","enableAnimation","width","height","Chart","primaryXAxis","chartPrimaryXAxis","chartPrimaryCategoryAxis","primaryYAxis","chartPrimaryYAxis","chartPrimaryValueAxis","series","chartSeries","i","length","animation","enable","title","chartTitle","legendSettings","parseChartLegend","chartLegend","convertChartToImage","elementWidth","elementHeight","_this","Promise","resolve","reject","dataInfo","getControlsValue","element","createElement","displayPixelRatio","Math","max","window","devicePixelRatio","style","url","URL","createObjectURL","Blob","XMLSerializer","serializeToString","svg","type","image","Image","canvasContext","getContext","scale","onload","drawImage","revokeObjectURL","dataURL","toDataURL","onerror","src","controls","content","svgRenderer","SvgRenderer","createSvg","id","map","control","svgElement","svgObject","cloneNode","groupElement","renderer","createGroup","appendChild","availableSize","outerHTML","setAttribute","officeChartType","data","seriesData","seriesValue","writeChartSeries","push","count","fill","dataSource","name","seriesName","xName","yName","size","seriesFormat","dataPoints","pointColorMapping","innerRadius","radius","chartFormat","marker","visible","hasOwnProperty","dataLabel","parseDataLabels","data_1","errorBarData","errorBar","parseErrorBars","trendLines","trendLinesData","count_1","trendLine","data_2","parseTrendLines","trendlines","label","position","dataLabelPosition","direction","endStyle","errorBarCap","forwardForecast","forward","backwardForecast","backward","intercept","labelPosition","format","line","rgb","categoryType","chartCategoryType","valueType","intervalType","labelFormat","edgeLabelPlacement","checkAndSetAxisValue","hasMajorGridLines","majorGridLines","hasMinorGridLines","minorTicksPerInterval","minimumValue","minimum","maximumValue","maximum","majorUnit","interval","chartCategory","xData","plotValue","chartPlotData","numberFormat","array","categoryXName","split","month","Number","day","year","x","Date","j","yData","yValue","seriesDataPoints","color","charAt","toUpperCase","slice","destroy","undefined"],"mappings":"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"}